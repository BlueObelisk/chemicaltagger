// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-01-05 01:05:57

    package uk.ac.cam.ch.wwmm.chemicaltagger;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-GRAM'", "'NN-MOL'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-AMOUNT'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RBT'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__159=159;
    public static final int T__27=27;
    public static final int T__158=158;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=9;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__19=19;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__16=16;
    public static final int T__147=147;
    public static final int T__15=15;
    public static final int T__90=90;
    public static final int T__18=18;
    public static final int T__149=149;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int T__10=10;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int NODE=4;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__59=59;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__30=30;
    public static final int T__173=173;
    public static final int T__31=31;
    public static final int T__172=172;
    public static final int T__32=32;
    public static final int T__179=179;
    public static final int T__33=33;
    public static final int ACHAR=7;
    public static final int T__178=178;
    public static final int T__34=34;
    public static final int NEWLINE=6;
    public static final int T__177=177;
    public static final int T__35=35;
    public static final int T__176=176;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "synpred184_ChemicalChunker", "jjt", "synpred71_ChemicalChunker", 
        "synpred8_ChemicalChunker", "md", "prepphraseTime", "ap", "synpred147_ChemicalChunker", 
        "synpred10_ChemicalChunker", "synpred187_ChemicalChunker", "synpred11_ChemicalChunker", 
        "synpred48_ChemicalChunker", "wpo", "synpred81_ChemicalChunker", 
        "synpred88_ChemicalChunker", "doz", "sentence1", "unnamedmolecule", 
        "nnchromatography", "nnstate", "synpred51_ChemicalChunker", "mixture", 
        "dts", "ininto", "synpred108_ChemicalChunker", "synpred122_ChemicalChunker", 
        "synpred99_ChemicalChunker", "synpred39_ChemicalChunker", "synpred145_ChemicalChunker", 
        "inafter", "cd", "oscarcd", "cc", "nn", "prepphraseTemp", "vbpartition", 
        "synpred53_ChemicalChunker", "synpred45_ChemicalChunker", "rbt", 
        "adj", "ql", "synpred129_ChemicalChunker", "synpred40_ChemicalChunker", 
        "uh", "vbfilter", "synpred94_ChemicalChunker", "synpred31_ChemicalChunker", 
        "synpred3_ChemicalChunker", "synpred85_ChemicalChunker", "wps", 
        "abn", "nntimes", "vbcharge", "ppls", "vbdrop", "synpred56_ChemicalChunker", 
        "oscarCompound1", "vbd", "nnapparatus", "synpred109_ChemicalChunker", 
        "synpred126_ChemicalChunker", "synpred32_ChemicalChunker", "synpred105_ChemicalChunker", 
        "vbpurify", "oscarCompound3", "nnvacuum", "np_poss", "synpred58_ChemicalChunker", 
        "synpred177_ChemicalChunker", "synpred2_ChemicalChunker", "synpred146_ChemicalChunker", 
        "adv", "percent", "nc", "synpred5_ChemicalChunker", "hvn", "synpred112_ChemicalChunker", 
        "synpred64_ChemicalChunker", "synpred181_ChemicalChunker", "synpred140_ChemicalChunker", 
        "synpred68_ChemicalChunker", "synpred33_ChemicalChunker", "to", 
        "synpred42_ChemicalChunker", "hv", "synpred90_ChemicalChunker", 
        "lsqb", "gram", "synpred120_ChemicalChunker", "vbn", "synpred65_ChemicalChunker", 
        "synpred101_ChemicalChunker", "synpred180_ChemicalChunker", "colon", 
        "number", "vbsynthesize", "vbcool", "invia", "synpred113_ChemicalChunker", 
        "np", "synpred18_ChemicalChunker", "vbg", "synpred100_ChemicalChunker", 
        "synpred144_ChemicalChunker", "synpred78_ChemicalChunker", "vbstir", 
        "nnsynthesize", "mmol", "inby", "synpred75_ChemicalChunker", "vbwait", 
        "synpred28_ChemicalChunker", "od", "synpred134_ChemicalChunker", 
        "synpred61_ChemicalChunker", "abx", "synpred139_ChemicalChunker", 
        "nnamount", "nnremove", "synpred80_ChemicalChunker", "vbchange", 
        "nngeneral", "synpred138_ChemicalChunker", "synpred156_ChemicalChunker", 
        "synpred131_ChemicalChunker", "synpred22_ChemicalChunker", "fw", 
        "synpred111_ChemicalChunker", "synpred188_ChemicalChunker", "synpred178_ChemicalChunker", 
        "ppss", "jjs", "synpred73_ChemicalChunker", "nnp", "nntime", "synpred171_ChemicalChunker", 
        "synpred143_ChemicalChunker", "synpred153_ChemicalChunker", "jj", 
        "noun", "rb", "synpred9_ChemicalChunker", "synpred170_ChemicalChunker", 
        "vbfill", "synpred41_ChemicalChunker", "dotok", "synpred12_ChemicalChunker", 
        "synpred7_ChemicalChunker", "synpred30_ChemicalChunker", "moleculeamount1", 
        "synpred102_ChemicalChunker", "synpred76_ChemicalChunker", "inAll", 
        "synpred160_ChemicalChunker", "synpred179_ChemicalChunker", "synpred47_ChemicalChunker", 
        "in", "synpred158_ChemicalChunker", "dti", "synpred87_ChemicalChunker", 
        "synpred95_ChemicalChunker", "apparatus", "nnpressure", "nngram", 
        "inas", "measurements", "synpred86_ChemicalChunker", "synpred173_ChemicalChunker", 
        "synpred186_ChemicalChunker", "inwith", "synpred83_ChemicalChunker", 
        "nps", "pps", "nounphrase", "synpred106_ChemicalChunker", "prepphraseOf", 
        "pp_poss_poss", "synpred141_ChemicalChunker", "vbdegass", "nns", 
        "synpred13_ChemicalChunker", "synpred19_ChemicalChunker", "synpred172_ChemicalChunker", 
        "synpred21_ChemicalChunker", "synpred165_ChemicalChunker", "nr", 
        "synpred29_ChemicalChunker", "synpred67_ChemicalChunker", "inon", 
        "cs", "vbextract", "synpred114_ChemicalChunker", "synpred82_ChemicalChunker", 
        "synpred154_ChemicalChunker", "wrb", "synpred128_ChemicalChunker", 
        "synpred135_ChemicalChunker", "synpred24_ChemicalChunker", "prepphraseIN", 
        "ppl", "vbz", "synpred119_ChemicalChunker", "sym", "synpred59_ChemicalChunker", 
        "synpred127_ChemicalChunker", "tmunicode", "synpred118_ChemicalChunker", 
        "hvg", "wql", "nn_poss", "dash", "amount", "moleculeamount", "qlp", 
        "synpred79_ChemicalChunker", "vbuse", "rn", "synpred93_ChemicalChunker", 
        "synpred121_ChemicalChunker", "pn", "vbtreat", "synpred130_ChemicalChunker", 
        "synpred17_ChemicalChunker", "synpred155_ChemicalChunker", "synpred26_ChemicalChunker", 
        "synpred189_ChemicalChunker", "synpred161_ChemicalChunker", "vbyield", 
        "wp_poss", "synpred150_ChemicalChunker", "synpred63_ChemicalChunker", 
        "synpred164_ChemicalChunker", "dtx", "nnprecipitate", "unnamedmoleculeamount", 
        "inin", "synpred49_ChemicalChunker", "nnconcentrate", "synpred175_ChemicalChunker", 
        "synpred124_ChemicalChunker", "oscarcm", "synpred115_ChemicalChunker", 
        "nnflash", "prepphraseOther", "synpred159_ChemicalChunker", "vbdissolve", 
        "hvd", "oscarrn", "cdunicode", "prepphrase", "inbefore", "jjr", 
        "synpred195_ChemicalChunker", "synpred110_ChemicalChunker", "synpred92_ChemicalChunker", 
        "nneq", "synpred132_ChemicalChunker", "synpred168_ChemicalChunker", 
        "synpred6_ChemicalChunker", "nntemp", "sentence", "synpred162_ChemicalChunker", 
        "synpred16_ChemicalChunker", "sentence2", "synpred72_ChemicalChunker", 
        "vb", "synpred149_ChemicalChunker", "synpred60_ChemicalChunker", 
        "be", "abl", "method", "bez", "synpred137_ChemicalChunker", "synpred183_ChemicalChunker", 
        "synpred74_ChemicalChunker", "synpred91_ChemicalChunker", "inover", 
        "oscarCompound2", "rbr", "verbphrase", "synpred151_ChemicalChunker", 
        "synpred176_ChemicalChunker", "synpred62_ChemicalChunker", "nndry", 
        "synpred77_ChemicalChunker", "vbdry", "oscarcj", "pp_poss", "apost", 
        "nnfilter", "nps_poss", "dod", "synpred43_ChemicalChunker", "infrom", 
        "synpred182_ChemicalChunker", "nncolumn", "vbsuspend", "infor", 
        "synpred89_ChemicalChunker", "rsqb", "synpred125_ChemicalChunker", 
        "synpred38_ChemicalChunker", "inof", "synpred193_ChemicalChunker", 
        "nnpurify", "bed", "synpred36_ChemicalChunker", "synpred192_ChemicalChunker", 
        "pn_poss", "ber", "synpred20_ChemicalChunker", "synpred96_ChemicalChunker", 
        "nnmol", "synpred148_ChemicalChunker", "unnamedmoleculeamount3", 
        "vbapparatus", "synpred196_ChemicalChunker", "synpred142_ChemicalChunker", 
        "unnamedmoleculeamount2", "synpred84_ChemicalChunker", "vbremove", 
        "synpred15_ChemicalChunker", "synpred191_ChemicalChunker", "nnextract", 
        "vbsubmerge", "vbadd", "synpred123_ChemicalChunker", "synpred152_ChemicalChunker", 
        "bem", "nnatmosphere", "vbsubject", "synpred157_ChemicalChunker", 
        "volume", "synpred37_ChemicalChunker", "synpred166_ChemicalChunker", 
        "synpred190_ChemicalChunker", "vbrecover", "document", "rp", "rrb", 
        "synpred117_ChemicalChunker", "nnadd", "vbquench", "synpred55_ChemicalChunker", 
        "synpred66_ChemicalChunker", "at", "synpred98_ChemicalChunker", 
        "nnvol", "wdt", "synpred103_ChemicalChunker", "ppo", "ben", "vbincrease", 
        "sentence3", "synpred27_ChemicalChunker", "nns_poss", "oscarCompound", 
        "nnmixture", "synpred163_ChemicalChunker", "synpred97_ChemicalChunker", 
        "synpred34_ChemicalChunker", "synpred23_ChemicalChunker", "synpred185_ChemicalChunker", 
        "oscaront", "comma", "nncycle", "inoff", "synpred167_ChemicalChunker", 
        "vbheat", "synpred174_ChemicalChunker", "synpred35_ChemicalChunker", 
        "synpred136_ChemicalChunker", "lrb", "vbwash", "synpred70_ChemicalChunker", 
        "synpred1_ChemicalChunker", "synpred54_ChemicalChunker", "synpred52_ChemicalChunker", 
        "nnchementity", "synpred14_ChemicalChunker", "moleculeamount2", 
        "synpred50_ChemicalChunker", "synpred107_ChemicalChunker", "inunder", 
        "synpred46_ChemicalChunker", "synpred4_ChemicalChunker", "dt", "nnmethod", 
        "synpred133_ChemicalChunker", "vbprecipitate", "synpred69_ChemicalChunker", 
        "synpred116_ChemicalChunker", "stop", "synpred194_ChemicalChunker", 
        "synpred169_ChemicalChunker", "synpred25_ChemicalChunker", "vbcontain", 
        "synpred104_ChemicalChunker", "vbconcentrate", "ex", "bedz", "verb", 
        "beg", "neg", "unnamedmoleculeamount1", "synpred44_ChemicalChunker", 
        "synpred57_ChemicalChunker", "nnpercent", "molecule", "inwithout"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public ChemicalChunkerParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public ChemicalChunkerParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:1: document : ( sentence )+ -> ( ^( NODE[\"Sentence\"] sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try { dbg.enterRule(getGrammarFileName(), "document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(30, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:9: ( ( sentence )+ -> ( ^( NODE[\"Sentence\"] sentence ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:11: ( sentence )+
            {
            dbg.location(30,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:11: ( sentence )+
            int cnt1=0;
            try { dbg.enterSubRule(1);

            loop1:
            do {
                int alt1=2;
                try { dbg.enterDecision(1);

                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=10 && LA1_0<=13)||(LA1_0>=16 && LA1_0<=33)||(LA1_0>=36 && LA1_0<=37)||(LA1_0>=39 && LA1_0<=72)||LA1_0==74||LA1_0==76||(LA1_0>=78 && LA1_0<=81)||LA1_0==83||(LA1_0>=85 && LA1_0<=87)||(LA1_0>=89 && LA1_0<=94)||LA1_0==104||LA1_0==120||LA1_0==125||(LA1_0>=135 && LA1_0<=140)||LA1_0==142||LA1_0==144||LA1_0==147||(LA1_0>=164 && LA1_0<=166)||LA1_0==170||LA1_0==173||(LA1_0>=175 && LA1_0<=180)) ) {
                    alt1=1;
                }


                } finally {dbg.exitDecision(1);}

                switch (alt1) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentence
            	    {
            	    dbg.location(30,11);
            	    pushFollow(FOLLOW_sentence_in_document169);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt1++;
            } while (true);
            } finally {dbg.exitSubRule(1);}



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 30:21: -> ( ^( NODE[\"Sentence\"] sentence ) )+
            {
                dbg.location(30,24);
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    dbg.location(30,24);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:24: ^( NODE[\"Sentence\"] sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(30,26);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    dbg.location(30,44);
                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(30, 56);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:1: sentence : ( sentence1 | sentence2 | sentence3 )+ ( comma | cc | stop | adv )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence1_return sentence12 = null;

        ChemicalChunkerParser.sentence2_return sentence23 = null;

        ChemicalChunkerParser.sentence3_return sentence34 = null;

        ChemicalChunkerParser.comma_return comma5 = null;

        ChemicalChunkerParser.cc_return cc6 = null;

        ChemicalChunkerParser.stop_return stop7 = null;

        ChemicalChunkerParser.adv_return adv8 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(32, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:9: ( ( sentence1 | sentence2 | sentence3 )+ ( comma | cc | stop | adv )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:12: ( sentence1 | sentence2 | sentence3 )+ ( comma | cc | stop | adv )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(32,12);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:12: ( sentence1 | sentence2 | sentence3 )+
            int cnt2=0;
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=4;
                try { dbg.enterDecision(2);

                try {
                    isCyclicDecision = true;
                    alt2 = dfa2.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: sentence1
            	    {
            	    dbg.location(32,13);
            	    pushFollow(FOLLOW_sentence1_in_sentence192);
            	    sentence12=sentence1();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence12.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: sentence2
            	    {
            	    dbg.location(32,23);
            	    pushFollow(FOLLOW_sentence2_in_sentence194);
            	    sentence23=sentence2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence23.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: sentence3
            	    {
            	    dbg.location(32,33);
            	    pushFollow(FOLLOW_sentence3_in_sentence196);
            	    sentence34=sentence3();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence34.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt2++;
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(32,47);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:47: ( comma | cc | stop | adv )*
            try { dbg.enterSubRule(3);

            loop3:
            do {
                int alt3=5;
                try { dbg.enterDecision(3);

                try {
                    isCyclicDecision = true;
                    alt3 = dfa3.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(3);}

                switch (alt3) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:48: comma
            	    {
            	    dbg.location(32,48);
            	    pushFollow(FOLLOW_comma_in_sentence203);
            	    comma5=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma5.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:54: cc
            	    {
            	    dbg.location(32,54);
            	    pushFollow(FOLLOW_cc_in_sentence205);
            	    cc6=cc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc6.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:57: stop
            	    {
            	    dbg.location(32,57);
            	    pushFollow(FOLLOW_stop_in_sentence207);
            	    stop7=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop7.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:62: adv
            	    {
            	    dbg.location(32,62);
            	    pushFollow(FOLLOW_adv_in_sentence209);
            	    adv8=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv8.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);
            } finally {dbg.exitSubRule(3);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(32, 68);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentence1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:1: sentence1 : ( nounphrase )+ ( verbphrase )* ( prepphrase )* -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )* ;
    public final ChemicalChunkerParser.sentence1_return sentence1() throws RecognitionException {
        ChemicalChunkerParser.sentence1_return retval = new ChemicalChunkerParser.sentence1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase9 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase10 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase11 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(33, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:2: ( ( nounphrase )+ ( verbphrase )* ( prepphrase )* -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )+ ( verbphrase )* ( prepphrase )*
            {
            dbg.location(34,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )+
            int cnt4=0;
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=2;
                try { dbg.enterDecision(4);

                try {
                    isCyclicDecision = true;
                    alt4 = dfa4.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(34,4);
            	    pushFollow(FOLLOW_nounphrase_in_sentence1220);
            	    nounphrase9=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt4++;
            } while (true);
            } finally {dbg.exitSubRule(4);}

            dbg.location(34,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: ( verbphrase )*
            try { dbg.enterSubRule(5);

            loop5:
            do {
                int alt5=2;
                try { dbg.enterDecision(5);

                try {
                    isCyclicDecision = true;
                    alt5 = dfa5.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(5);}

                switch (alt5) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(34,16);
            	    pushFollow(FOLLOW_verbphrase_in_sentence1223);
            	    verbphrase10=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);
            } finally {dbg.exitSubRule(5);}

            dbg.location(34,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: ( prepphrase )*
            try { dbg.enterSubRule(6);

            loop6:
            do {
                int alt6=2;
                try { dbg.enterDecision(6);

                try {
                    isCyclicDecision = true;
                    alt6 = dfa6.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(6);}

                switch (alt6) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(34,28);
            	    pushFollow(FOLLOW_prepphrase_in_sentence1226);
            	    prepphrase11=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);
            } finally {dbg.exitSubRule(6);}



            // AST REWRITE
            // elements: nounphrase, verbphrase, prepphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:39: -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )*
            {
                dbg.location(34,42);
                if ( !(stream_nounphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(34,42);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:42: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(34,44);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(34,64);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(34,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:78: ( ^( NODE[\"VerbPhrase\"] verbphrase ) )*
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(34,78);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:78: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(34,80);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(34,100);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();
                dbg.location(34,114);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:114: ( prepphrase )*
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(34,114);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(34, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence1"

    public static class sentence2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:1: sentence2 : ( verbphrase )+ ( nounphrase )* ( prepphrase )* -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )* ;
    public final ChemicalChunkerParser.sentence2_return sentence2() throws RecognitionException {
        ChemicalChunkerParser.sentence2_return retval = new ChemicalChunkerParser.sentence2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase12 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase13 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase14 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(35, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:2: ( ( verbphrase )+ ( nounphrase )* ( prepphrase )* -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )+ ( nounphrase )* ( prepphrase )*
            {
            dbg.location(36,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )+
            int cnt7=0;
            try { dbg.enterSubRule(7);

            loop7:
            do {
                int alt7=2;
                try { dbg.enterDecision(7);

                try {
                    isCyclicDecision = true;
                    alt7 = dfa7.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(7);}

                switch (alt7) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(36,4);
            	    pushFollow(FOLLOW_verbphrase_in_sentence2260);
            	    verbphrase12=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase12.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt7++;
            } while (true);
            } finally {dbg.exitSubRule(7);}

            dbg.location(36,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: ( nounphrase )*
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(36,16);
            	    pushFollow(FOLLOW_nounphrase_in_sentence2263);
            	    nounphrase13=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase13.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);
            } finally {dbg.exitSubRule(8);}

            dbg.location(36,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: ( prepphrase )*
            try { dbg.enterSubRule(9);

            loop9:
            do {
                int alt9=2;
                try { dbg.enterDecision(9);

                try {
                    isCyclicDecision = true;
                    alt9 = dfa9.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(9);}

                switch (alt9) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(36,28);
            	    pushFollow(FOLLOW_prepphrase_in_sentence2266);
            	    prepphrase14=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase14.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);
            } finally {dbg.exitSubRule(9);}



            // AST REWRITE
            // elements: verbphrase, prepphrase, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 36:39: -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )*
            {
                dbg.location(36,42);
                if ( !(stream_verbphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(36,42);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:42: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(36,44);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(36,64);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();
                dbg.location(36,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:78: ( ^( NODE[\"NounPhrase\"] nounphrase ) )*
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(36,78);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:78: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(36,80);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(36,100);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(36,114);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:114: ( prepphrase )*
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(36,114);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(36, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence2"

    public static class sentence3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:1: sentence3 : ( prepphrase )+ ( nounphrase | verbphrase )+ -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ;
    public final ChemicalChunkerParser.sentence3_return sentence3() throws RecognitionException {
        ChemicalChunkerParser.sentence3_return retval = new ChemicalChunkerParser.sentence3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase15 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase16 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase17 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(37, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:2: ( ( prepphrase )+ ( nounphrase | verbphrase )+ -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )+ ( nounphrase | verbphrase )+
            {
            dbg.location(38,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )+
            int cnt10=0;
            try { dbg.enterSubRule(10);

            loop10:
            do {
                int alt10=2;
                try { dbg.enterDecision(10);

                try {
                    isCyclicDecision = true;
                    alt10 = dfa10.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(10);}

                switch (alt10) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(38,4);
            	    pushFollow(FOLLOW_prepphrase_in_sentence3300);
            	    prepphrase15=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase15.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt10++;
            } while (true);
            } finally {dbg.exitSubRule(10);}

            dbg.location(38,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:16: ( nounphrase | verbphrase )+
            int cnt11=0;
            try { dbg.enterSubRule(11);

            loop11:
            do {
                int alt11=3;
                try { dbg.enterDecision(11);

                try {
                    isCyclicDecision = true;
                    alt11 = dfa11.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(11);}

                switch (alt11) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:17: nounphrase
            	    {
            	    dbg.location(38,17);
            	    pushFollow(FOLLOW_nounphrase_in_sentence3304);
            	    nounphrase16=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase16.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: verbphrase
            	    {
            	    dbg.location(38,28);
            	    pushFollow(FOLLOW_verbphrase_in_sentence3306);
            	    verbphrase17=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase17.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt11 >= 1 ) break loop11;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(11, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt11++;
            } while (true);
            } finally {dbg.exitSubRule(11);}



            // AST REWRITE
            // elements: prepphrase, verbphrase, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 38:41: -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+
            {
                dbg.location(38,45);
                if ( !(stream_prepphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(38,45);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();
                dbg.location(38,58);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:58: ( ^( NODE[\"NounPhrase\"] nounphrase ) )*
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(38,58);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:58: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(38,60);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(38,80);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(38,93);
                if ( !(stream_verbphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(38,93);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:93: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(38,95);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(38,115);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(38, 127);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence3"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:1: nounphrase : ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt18 = null;

        ChemicalChunkerParser.adj_return adj19 = null;

        ChemicalChunkerParser.adv_return adv20 = null;

        ChemicalChunkerParser.noun_return noun21 = null;

        ChemicalChunkerParser.cc_return cc22 = null;

        ChemicalChunkerParser.comma_return comma23 = null;

        ChemicalChunkerParser.cc_return cc24 = null;

        ChemicalChunkerParser.adj_return adj25 = null;

        ChemicalChunkerParser.noun_return noun26 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf27 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN28 = null;



        try { dbg.enterRule(getGrammarFileName(), "nounphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(40, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:12: ( ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:14: ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(40,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:14: ( dt )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12);

            int LA12_0 = input.LA(1);

            if ( (LA12_0==125) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(40,14);
                    pushFollow(FOLLOW_dt_in_nounphrase342);
                    dt18=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt18.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(40,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:18: ( adj | adv )*
            try { dbg.enterSubRule(13);

            loop13:
            do {
                int alt13=3;
                try { dbg.enterDecision(13);

                try {
                    isCyclicDecision = true;
                    alt13 = dfa13.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(13);}

                switch (alt13) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:19: adj
            	    {
            	    dbg.location(40,19);
            	    pushFollow(FOLLOW_adj_in_nounphrase346);
            	    adj19=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj19.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:23: adv
            	    {
            	    dbg.location(40,23);
            	    pushFollow(FOLLOW_adv_in_nounphrase348);
            	    adv20=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv20.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);
            } finally {dbg.exitSubRule(13);}

            dbg.location(40,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:30: ( noun )+
            int cnt14=0;
            try { dbg.enterSubRule(14);

            loop14:
            do {
                int alt14=2;
                try { dbg.enterDecision(14);

                try {
                    isCyclicDecision = true;
                    alt14 = dfa14.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(14);}

                switch (alt14) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: noun
            	    {
            	    dbg.location(40,30);
            	    pushFollow(FOLLOW_noun_in_nounphrase353);
            	    noun21=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt14 >= 1 ) break loop14;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(14, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt14++;
            } while (true);
            } finally {dbg.exitSubRule(14);}

            dbg.location(40,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:36: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*
            try { dbg.enterSubRule(19);

            loop19:
            do {
                int alt19=2;
                try { dbg.enterDecision(19);

                try {
                    isCyclicDecision = true;
                    alt19 = dfa19.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(19);}

                switch (alt19) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( cc )? ( comma )? ( cc )? ( adj )+ noun
            	    {
            	    dbg.location(40,37);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( cc )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15);

            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==119) ) {
            	        int LA15_1 = input.LA(2);

            	        if ( (LA15_1==TOKEN) ) {
            	            int LA15_3 = input.LA(3);

            	            if ( (synpred22_ChemicalChunker()) ) {
            	                alt15=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(40,37);
            	            pushFollow(FOLLOW_cc_in_nounphrase357);
            	            cc22=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc22.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(40,41);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:41: ( comma )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16);

            	    int LA16_0 = input.LA(1);

            	    if ( (LA16_0==96) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(40,41);
            	            pushFollow(FOLLOW_comma_in_nounphrase360);
            	            comma23=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma23.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}

            	    dbg.location(40,48);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:48: ( cc )?
            	    int alt17=2;
            	    try { dbg.enterSubRule(17);
            	    try { dbg.enterDecision(17);

            	    int LA17_0 = input.LA(1);

            	    if ( (LA17_0==119) ) {
            	        alt17=1;
            	    }
            	    } finally {dbg.exitDecision(17);}

            	    switch (alt17) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(40,48);
            	            pushFollow(FOLLOW_cc_in_nounphrase363);
            	            cc24=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc24.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(17);}

            	    dbg.location(40,53);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:53: ( adj )+
            	    int cnt18=0;
            	    try { dbg.enterSubRule(18);

            	    loop18:
            	    do {
            	        int alt18=2;
            	        try { dbg.enterDecision(18);

            	        try {
            	            isCyclicDecision = true;
            	            alt18 = dfa18.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(18);}

            	        switch (alt18) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    dbg.location(40,53);
            	    	    pushFollow(FOLLOW_adj_in_nounphrase367);
            	    	    adj25=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj25.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt18 >= 1 ) break loop18;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(18, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt18++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(18);}

            	    dbg.location(40,58);
            	    pushFollow(FOLLOW_noun_in_nounphrase370);
            	    noun26=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun26.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);
            } finally {dbg.exitSubRule(19);}

            dbg.location(40,68);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:68: ( prepphraseOf | prepphraseIN )*
            try { dbg.enterSubRule(20);

            loop20:
            do {
                int alt20=3;
                try { dbg.enterDecision(20);

                int LA20_0 = input.LA(1);

                if ( (LA20_0==19) ) {
                    int LA20_2 = input.LA(2);

                    if ( (synpred28_ChemicalChunker()) ) {
                        alt20=2;
                    }


                }
                else if ( (LA20_0==25) ) {
                    int LA20_3 = input.LA(2);

                    if ( (synpred27_ChemicalChunker()) ) {
                        alt20=1;
                    }


                }


                } finally {dbg.exitDecision(20);}

                switch (alt20) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:69: prepphraseOf
            	    {
            	    dbg.location(40,69);
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphrase378);
            	    prepphraseOf27=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf27.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:83: prepphraseIN
            	    {
            	    dbg.location(40,83);
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphrase381);
            	    prepphraseIN28=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN28.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);
            } finally {dbg.exitSubRule(20);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(40, 99);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:1: verbphrase : ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to29 = null;

        ChemicalChunkerParser.inAll_return inAll30 = null;

        ChemicalChunkerParser.inafter_return inafter31 = null;

        ChemicalChunkerParser.adv_return adv32 = null;

        ChemicalChunkerParser.adj_return adj33 = null;

        ChemicalChunkerParser.verb_return verb34 = null;

        ChemicalChunkerParser.adv_return adv35 = null;

        ChemicalChunkerParser.adj_return adj36 = null;

        ChemicalChunkerParser.cc_return cc37 = null;

        ChemicalChunkerParser.comma_return comma38 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase39 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(43, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:12: ( ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:15: ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(43,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:15: ( to )?
            int alt21=2;
            try { dbg.enterSubRule(21);
            try { dbg.enterDecision(21);

            int LA21_0 = input.LA(1);

            if ( (LA21_0==170) ) {
                int LA21_1 = input.LA(2);

                if ( (LA21_1==TOKEN) ) {
                    int LA21_3 = input.LA(3);

                    if ( (synpred29_ChemicalChunker()) ) {
                        alt21=1;
                    }
                }
            }
            } finally {dbg.exitDecision(21);}

            switch (alt21) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    dbg.location(43,15);
                    pushFollow(FOLLOW_to_in_verbphrase395);
                    to29=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to29.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(21);}

            dbg.location(43,19);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: ( inAll )?
            int alt22=2;
            try { dbg.enterSubRule(22);
            try { dbg.enterDecision(22);

            int LA22_0 = input.LA(1);

            if ( ((LA22_0>=16 && LA22_0<=17)||(LA22_0>=19 && LA22_0<=31)||LA22_0==135||LA22_0==170) ) {
                alt22=1;
            }
            else if ( (LA22_0==18) ) {
                int LA22_2 = input.LA(2);

                if ( (LA22_2==TOKEN) ) {
                    int LA22_4 = input.LA(3);

                    if ( (synpred30_ChemicalChunker()) ) {
                        alt22=1;
                    }
                }
            }
            } finally {dbg.exitDecision(22);}

            switch (alt22) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(43,19);
                    pushFollow(FOLLOW_inAll_in_verbphrase398);
                    inAll30=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll30.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(22);}

            dbg.location(43,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:26: ( inafter )?
            int alt23=2;
            try { dbg.enterSubRule(23);
            try { dbg.enterDecision(23);

            int LA23_0 = input.LA(1);

            if ( (LA23_0==18) ) {
                alt23=1;
            }
            } finally {dbg.exitDecision(23);}

            switch (alt23) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    dbg.location(43,26);
                    pushFollow(FOLLOW_inafter_in_verbphrase401);
                    inafter31=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter31.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(23);}

            dbg.location(43,35);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:35: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+
            int cnt29=0;
            try { dbg.enterSubRule(29);

            loop29:
            do {
                int alt29=2;
                try { dbg.enterDecision(29);

                try {
                    isCyclicDecision = true;
                    alt29 = dfa29.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(29);}

                switch (alt29) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
            	    {
            	    dbg.location(43,36);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( adv )*
            	    try { dbg.enterSubRule(24);

            	    loop24:
            	    do {
            	        int alt24=2;
            	        try { dbg.enterDecision(24);

            	        int LA24_0 = input.LA(1);

            	        if ( ((LA24_0>=164 && LA24_0<=166)) ) {
            	            alt24=1;
            	        }


            	        } finally {dbg.exitDecision(24);}

            	        switch (alt24) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(43,36);
            	    	    pushFollow(FOLLOW_adv_in_verbphrase405);
            	    	    adv32=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv32.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop24;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(24);}

            	    dbg.location(43,41);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:41: ( adj )?
            	    int alt25=2;
            	    try { dbg.enterSubRule(25);
            	    try { dbg.enterDecision(25);

            	    int LA25_0 = input.LA(1);

            	    if ( ((LA25_0>=11 && LA25_0<=12)||(LA25_0>=136 && LA25_0<=139)) ) {
            	        alt25=1;
            	    }
            	    } finally {dbg.exitDecision(25);}

            	    switch (alt25) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(43,41);
            	            pushFollow(FOLLOW_adj_in_verbphrase408);
            	            adj33=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj33.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(25);}

            	    dbg.location(43,46);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:46: ( verb )+
            	    int cnt26=0;
            	    try { dbg.enterSubRule(26);

            	    loop26:
            	    do {
            	        int alt26=2;
            	        try { dbg.enterDecision(26);

            	        try {
            	            isCyclicDecision = true;
            	            alt26 = dfa26.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(26);}

            	        switch (alt26) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    dbg.location(43,46);
            	    	    pushFollow(FOLLOW_verb_in_verbphrase411);
            	    	    verb34=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb34.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt26 >= 1 ) break loop26;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(26, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt26++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(26);}

            	    dbg.location(43,52);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:52: ( adv )*
            	    try { dbg.enterSubRule(27);

            	    loop27:
            	    do {
            	        int alt27=2;
            	        try { dbg.enterDecision(27);

            	        switch ( input.LA(1) ) {
            	        case 164:
            	            {
            	            int LA27_2 = input.LA(2);

            	            if ( (LA27_2==TOKEN) ) {
            	                int LA27_5 = input.LA(3);

            	                if ( (synpred35_ChemicalChunker()) ) {
            	                    alt27=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 165:
            	            {
            	            int LA27_3 = input.LA(2);

            	            if ( (LA27_3==TOKEN) ) {
            	                int LA27_6 = input.LA(3);

            	                if ( (synpred35_ChemicalChunker()) ) {
            	                    alt27=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 166:
            	            {
            	            int LA27_4 = input.LA(2);

            	            if ( (LA27_4==TOKEN) ) {
            	                int LA27_7 = input.LA(3);

            	                if ( (synpred35_ChemicalChunker()) ) {
            	                    alt27=1;
            	                }


            	            }


            	            }
            	            break;

            	        }

            	        } finally {dbg.exitDecision(27);}

            	        switch (alt27) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(43,52);
            	    	    pushFollow(FOLLOW_adv_in_verbphrase414);
            	    	    adv35=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv35.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop27;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(27);}

            	    dbg.location(43,57);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:57: ( adj )?
            	    int alt28=2;
            	    try { dbg.enterSubRule(28);
            	    try { dbg.enterDecision(28);

            	    try {
            	        isCyclicDecision = true;
            	        alt28 = dfa28.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(28);}

            	    switch (alt28) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(43,57);
            	            pushFollow(FOLLOW_adj_in_verbphrase417);
            	            adj36=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj36.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(28);}


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt29++;
            } while (true);
            } finally {dbg.exitSubRule(29);}

            dbg.location(43,64);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:64: ( ( cc )? ( comma )? prepphrase )*
            try { dbg.enterSubRule(32);

            loop32:
            do {
                int alt32=2;
                try { dbg.enterDecision(32);

                try {
                    isCyclicDecision = true;
                    alt32 = dfa32.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(32);}

                switch (alt32) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:65: ( cc )? ( comma )? prepphrase
            	    {
            	    dbg.location(43,65);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:65: ( cc )?
            	    int alt30=2;
            	    try { dbg.enterSubRule(30);
            	    try { dbg.enterDecision(30);

            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==119) ) {
            	        alt30=1;
            	    }
            	    } finally {dbg.exitDecision(30);}

            	    switch (alt30) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(43,65);
            	            pushFollow(FOLLOW_cc_in_verbphrase423);
            	            cc37=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc37.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(30);}

            	    dbg.location(43,69);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:69: ( comma )?
            	    int alt31=2;
            	    try { dbg.enterSubRule(31);
            	    try { dbg.enterDecision(31);

            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0==96) ) {
            	        alt31=1;
            	    }
            	    } finally {dbg.exitDecision(31);}

            	    switch (alt31) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(43,69);
            	            pushFollow(FOLLOW_comma_in_verbphrase426);
            	            comma38=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma38.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(31);}

            	    dbg.location(43,76);
            	    pushFollow(FOLLOW_prepphrase_in_verbphrase429);
            	    prepphrase39=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase39.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);
            } finally {dbg.exitSubRule(32);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(43, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: verb : ( vbd | vbz | vbn | vbuse | vbchange | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbd_return vbd40 = null;

        ChemicalChunkerParser.vbz_return vbz41 = null;

        ChemicalChunkerParser.vbn_return vbn42 = null;

        ChemicalChunkerParser.vbuse_return vbuse43 = null;

        ChemicalChunkerParser.vbchange_return vbchange44 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge45 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject46 = null;

        ChemicalChunkerParser.vbadd_return vbadd47 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge48 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain49 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop50 = null;

        ChemicalChunkerParser.vbfill_return vbfill51 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend52 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat53 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus54 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate55 = null;

        ChemicalChunkerParser.vbcool_return vbcool56 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass57 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve58 = null;

        ChemicalChunkerParser.vbdry_return vbdry59 = null;

        ChemicalChunkerParser.vbextract_return vbextract60 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter61 = null;

        ChemicalChunkerParser.vbheat_return vbheat62 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease63 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition64 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate65 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify66 = null;

        ChemicalChunkerParser.vbquench_return vbquench67 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover68 = null;

        ChemicalChunkerParser.vbremove_return vbremove69 = null;

        ChemicalChunkerParser.vbstir_return vbstir70 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize71 = null;

        ChemicalChunkerParser.vbwait_return vbwait72 = null;

        ChemicalChunkerParser.vbwash_return vbwash73 = null;

        ChemicalChunkerParser.vbyield_return vbyield74 = null;



        try { dbg.enterRule(getGrammarFileName(), "verb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(44, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:6: ( vbd | vbz | vbn | vbuse | vbchange | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield )
            int alt33=35;
            try { dbg.enterDecision(33);

            switch ( input.LA(1) ) {
            case 173:
                {
                alt33=1;
                }
                break;
            case 176:
                {
                alt33=2;
                }
                break;
            case 175:
                {
                alt33=3;
                }
                break;
            case 52:
                {
                alt33=4;
                }
                break;
            case 53:
                {
                alt33=5;
                }
                break;
            case 54:
                {
                alt33=6;
                }
                break;
            case 55:
                {
                alt33=7;
                }
                break;
            case 58:
                {
                alt33=8;
                }
                break;
            case 59:
                {
                alt33=9;
                }
                break;
            case 60:
                {
                alt33=10;
                }
                break;
            case 61:
                {
                alt33=11;
                }
                break;
            case 62:
                {
                alt33=12;
                }
                break;
            case 63:
                {
                alt33=13;
                }
                break;
            case 64:
                {
                alt33=14;
                }
                break;
            case 65:
                {
                alt33=15;
                }
                break;
            case 67:
                {
                alt33=16;
                }
                break;
            case 69:
                {
                alt33=17;
                }
                break;
            case 70:
                {
                alt33=18;
                }
                break;
            case 71:
                {
                alt33=19;
                }
                break;
            case 72:
                {
                alt33=20;
                }
                break;
            case 74:
                {
                alt33=21;
                }
                break;
            case 76:
                {
                alt33=22;
                }
                break;
            case 78:
                {
                alt33=23;
                }
                break;
            case 79:
                {
                alt33=24;
                }
                break;
            case 80:
                {
                alt33=25;
                }
                break;
            case 81:
                {
                alt33=26;
                }
                break;
            case 83:
                {
                alt33=27;
                }
                break;
            case 85:
                {
                alt33=28;
                }
                break;
            case 86:
                {
                alt33=29;
                }
                break;
            case 87:
                {
                alt33=30;
                }
                break;
            case 89:
                {
                alt33=31;
                }
                break;
            case 90:
                {
                alt33=32;
                }
                break;
            case 92:
                {
                alt33=33;
                }
                break;
            case 93:
                {
                alt33=34;
                }
                break;
            case 94:
                {
                alt33=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:8: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,8);
                    pushFollow(FOLLOW_vbd_in_verb439);
                    vbd40=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd40.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:12: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,12);
                    pushFollow(FOLLOW_vbz_in_verb441);
                    vbz41=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz41.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:16: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,16);
                    pushFollow(FOLLOW_vbn_in_verb443);
                    vbn42=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn42.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:20: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,20);
                    pushFollow(FOLLOW_vbuse_in_verb445);
                    vbuse43=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse43.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:26: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,26);
                    pushFollow(FOLLOW_vbchange_in_verb447);
                    vbchange44=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange44.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:35: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,35);
                    pushFollow(FOLLOW_vbsubmerge_in_verb449);
                    vbsubmerge45=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge45.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:46: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,46);
                    pushFollow(FOLLOW_vbsubject_in_verb451);
                    vbsubject46=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject46.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,56);
                    pushFollow(FOLLOW_vbadd_in_verb453);
                    vbadd47=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd47.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:62: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,62);
                    pushFollow(FOLLOW_vbcharge_in_verb455);
                    vbcharge48=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge48.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:71: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,71);
                    pushFollow(FOLLOW_vbcontain_in_verb457);
                    vbcontain49=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain49.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:81: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,81);
                    pushFollow(FOLLOW_vbdrop_in_verb459);
                    vbdrop50=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop50.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:88: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,88);
                    pushFollow(FOLLOW_vbfill_in_verb461);
                    vbfill51=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill51.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:95: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,95);
                    pushFollow(FOLLOW_vbsuspend_in_verb463);
                    vbsuspend52=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend52.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:105: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,105);
                    pushFollow(FOLLOW_vbtreat_in_verb465);
                    vbtreat53=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat53.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:113: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,113);
                    pushFollow(FOLLOW_vbapparatus_in_verb467);
                    vbapparatus54=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus54.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:125: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,125);
                    pushFollow(FOLLOW_vbconcentrate_in_verb469);
                    vbconcentrate55=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate55.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:139: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,139);
                    pushFollow(FOLLOW_vbcool_in_verb471);
                    vbcool56=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool56.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:146: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,146);
                    pushFollow(FOLLOW_vbdegass_in_verb473);
                    vbdegass57=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass57.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:155: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,155);
                    pushFollow(FOLLOW_vbdissolve_in_verb475);
                    vbdissolve58=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve58.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:166: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,166);
                    pushFollow(FOLLOW_vbdry_in_verb477);
                    vbdry59=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry59.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:172: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,172);
                    pushFollow(FOLLOW_vbextract_in_verb479);
                    vbextract60=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract60.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:182: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(44,182);
                    pushFollow(FOLLOW_vbfilter_in_verb481);
                    vbfilter61=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter61.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:3: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,3);
                    pushFollow(FOLLOW_vbheat_in_verb485);
                    vbheat62=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat62.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:10: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,10);
                    pushFollow(FOLLOW_vbincrease_in_verb487);
                    vbincrease63=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease63.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:21: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,21);
                    pushFollow(FOLLOW_vbpartition_in_verb489);
                    vbpartition64=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition64.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,33);
                    pushFollow(FOLLOW_vbprecipitate_in_verb491);
                    vbprecipitate65=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate65.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:47: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,47);
                    pushFollow(FOLLOW_vbpurify_in_verb493);
                    vbpurify66=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify66.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:56: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,56);
                    pushFollow(FOLLOW_vbquench_in_verb495);
                    vbquench67=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench67.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:65: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,65);
                    pushFollow(FOLLOW_vbrecover_in_verb497);
                    vbrecover68=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover68.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,75);
                    pushFollow(FOLLOW_vbremove_in_verb499);
                    vbremove69=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove69.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:84: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,84);
                    pushFollow(FOLLOW_vbstir_in_verb501);
                    vbstir70=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir70.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:91: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,91);
                    pushFollow(FOLLOW_vbsynthesize_in_verb503);
                    vbsynthesize71=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize71.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:104: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,104);
                    pushFollow(FOLLOW_vbwait_in_verb505);
                    vbwait72=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait72.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:111: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,111);
                    pushFollow(FOLLOW_vbwash_in_verb507);
                    vbwash73=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash73.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:118: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(45,118);
                    pushFollow(FOLLOW_vbyield_in_verb509);
                    vbyield74=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield74.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(45, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd75 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd76 = null;



        try { dbg.enterRule(getGrammarFileName(), "number");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(46, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:8: ( cd | oscarcd )
            int alt34=2;
            try { dbg.enterDecision(34);

            int LA34_0 = input.LA(1);

            if ( (LA34_0==120) ) {
                alt34=1;
            }
            else if ( (LA34_0==10) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(46,10);
                    pushFollow(FOLLOW_cd_in_number516);
                    cd75=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd75.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(46,13);
                    pushFollow(FOLLOW_oscarcd_in_number518);
                    oscarcd76=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd76.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(46, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "number");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "number"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:1: noun : ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.md_return md77 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule78 = null;

        ChemicalChunkerParser.molecule_return molecule79 = null;

        ChemicalChunkerParser.nnstate_return nnstate80 = null;

        ChemicalChunkerParser.nn_return nn81 = null;

        ChemicalChunkerParser.nns_return nns82 = null;

        ChemicalChunkerParser.nntime_return nntime83 = null;

        ChemicalChunkerParser.apparatus_return apparatus84 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere85 = null;

        ChemicalChunkerParser.nneq_return nneq86 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity87 = null;

        ChemicalChunkerParser.measurements_return measurements88 = null;

        ChemicalChunkerParser.nntemp_return nntemp89 = null;

        ChemicalChunkerParser.nnflash_return nnflash90 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral91 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod92 = null;

        ChemicalChunkerParser.nnamount_return nnamount93 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure94 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn95 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography96 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum97 = null;

        ChemicalChunkerParser.nncycle_return nncycle98 = null;

        ChemicalChunkerParser.nntimes_return nntimes99 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus100 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate101 = null;

        ChemicalChunkerParser.wdt_return wdt102 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss103 = null;

        ChemicalChunkerParser.wpo_return wpo104 = null;

        ChemicalChunkerParser.wps_return wps105 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize106 = null;

        ChemicalChunkerParser.oscaront_return oscaront107 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture108 = null;

        ChemicalChunkerParser.amount_return amount109 = null;

        ChemicalChunkerParser.cd_return cd110 = null;

        ChemicalChunkerParser.nnp_return nnp111 = null;

        ChemicalChunkerParser.nnadd_return nnadd112 = null;

        ChemicalChunkerParser.mixture_return mixture113 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound114 = null;



        try { dbg.enterRule(getGrammarFileName(), "noun");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(47, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:6: ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound )
            int alt35=38;
            try { dbg.enterDecision(35);

            try {
                isCyclicDecision = true;
                alt35 = dfa35.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(35);}

            switch (alt35) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:9: md
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,9);
                    pushFollow(FOLLOW_md_in_noun527);
                    md77=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md77.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:12: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,12);
                    pushFollow(FOLLOW_unnamedmolecule_in_noun529);
                    unnamedmolecule78=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule78.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:28: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,28);
                    pushFollow(FOLLOW_molecule_in_noun531);
                    molecule79=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule79.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:37: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,37);
                    pushFollow(FOLLOW_nnstate_in_noun533);
                    nnstate80=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate80.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:45: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,45);
                    pushFollow(FOLLOW_nn_in_noun535);
                    nn81=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn81.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:48: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,48);
                    pushFollow(FOLLOW_nns_in_noun537);
                    nns82=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns82.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:52: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,52);
                    pushFollow(FOLLOW_nntime_in_noun539);
                    nntime83=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime83.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:59: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,59);
                    pushFollow(FOLLOW_apparatus_in_noun541);
                    apparatus84=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus84.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:69: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,69);
                    pushFollow(FOLLOW_nnatmosphere_in_noun543);
                    nnatmosphere85=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere85.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:82: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,82);
                    pushFollow(FOLLOW_nneq_in_noun545);
                    nneq86=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq86.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:87: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,87);
                    pushFollow(FOLLOW_nnchementity_in_noun547);
                    nnchementity87=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity87.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:100: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,100);
                    pushFollow(FOLLOW_measurements_in_noun549);
                    measurements88=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements88.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:113: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,113);
                    pushFollow(FOLLOW_nntemp_in_noun551);
                    nntemp89=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp89.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:120: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,120);
                    pushFollow(FOLLOW_nnflash_in_noun553);
                    nnflash90=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash90.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:128: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,128);
                    pushFollow(FOLLOW_nngeneral_in_noun555);
                    nngeneral91=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral91.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:138: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,138);
                    pushFollow(FOLLOW_nnmethod_in_noun557);
                    nnmethod92=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod92.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:147: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,147);
                    pushFollow(FOLLOW_nnamount_in_noun559);
                    nnamount93=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount93.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:156: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,156);
                    pushFollow(FOLLOW_nnpressure_in_noun561);
                    nnpressure94=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure94.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:167: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,167);
                    pushFollow(FOLLOW_nncolumn_in_noun563);
                    nncolumn95=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn95.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:176: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,176);
                    pushFollow(FOLLOW_nnchromatography_in_noun565);
                    nnchromatography96=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography96.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:193: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,193);
                    pushFollow(FOLLOW_nnvacuum_in_noun567);
                    nnvacuum97=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum97.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:202: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,202);
                    pushFollow(FOLLOW_nncycle_in_noun569);
                    nncycle98=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle98.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:210: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,210);
                    pushFollow(FOLLOW_nntimes_in_noun571);
                    nntimes99=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes99.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:218: nnapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,218);
                    pushFollow(FOLLOW_nnapparatus_in_noun573);
                    nnapparatus100=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus100.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,1);
                    pushFollow(FOLLOW_nnconcentrate_in_noun576);
                    nnconcentrate101=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate101.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:15: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,15);
                    pushFollow(FOLLOW_wdt_in_noun578);
                    wdt102=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt102.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:19: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,19);
                    pushFollow(FOLLOW_wp_poss_in_noun580);
                    wp_poss103=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss103.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:27: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,27);
                    pushFollow(FOLLOW_wpo_in_noun582);
                    wpo104=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo104.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:31: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,31);
                    pushFollow(FOLLOW_wps_in_noun584);
                    wps105=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps105.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:35: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,35);
                    pushFollow(FOLLOW_nnsynthesize_in_noun586);
                    nnsynthesize106=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize106.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:48: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,48);
                    pushFollow(FOLLOW_oscaront_in_noun588);
                    oscaront107=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront107.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:57: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,57);
                    pushFollow(FOLLOW_nnmixture_in_noun590);
                    nnmixture108=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture108.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:67: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,67);
                    pushFollow(FOLLOW_amount_in_noun592);
                    amount109=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount109.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:74: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,74);
                    pushFollow(FOLLOW_cd_in_noun594);
                    cd110=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd110.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:77: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,77);
                    pushFollow(FOLLOW_nnp_in_noun596);
                    nnp111=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp111.getTree());

                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:81: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,81);
                    pushFollow(FOLLOW_nnadd_in_noun598);
                    nnadd112=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd112.getTree());

                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:87: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,87);
                    pushFollow(FOLLOW_mixture_in_noun600);
                    mixture113=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture113.getTree());

                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:95: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,95);
                    pushFollow(FOLLOW_oscarCompound_in_noun602);
                    oscarCompound114=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound114.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(48, 108);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "noun");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "noun"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: mixture : lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb115 = null;

        ChemicalChunkerParser.measurements_return measurements116 = null;

        ChemicalChunkerParser.md_return md117 = null;

        ChemicalChunkerParser.stop_return stop118 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound119 = null;

        ChemicalChunkerParser.molecule_return molecule120 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule121 = null;

        ChemicalChunkerParser.dash_return dash122 = null;

        ChemicalChunkerParser.sym_return sym123 = null;

        ChemicalChunkerParser.cd_return cd124 = null;

        ChemicalChunkerParser.noun_return noun125 = null;

        ChemicalChunkerParser.inof_return inof126 = null;

        ChemicalChunkerParser.cd_return cd127 = null;

        ChemicalChunkerParser.comma_return comma128 = null;

        ChemicalChunkerParser.adj_return adj129 = null;

        ChemicalChunkerParser.rrb_return rrb130 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(50, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:8: ( lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:11: lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(50,11);
            pushFollow(FOLLOW_lrb_in_mixture610);
            lrb115=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb115.getTree());
            dbg.location(50,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+
            int cnt36=0;
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=15;
                try { dbg.enterDecision(36);

                try {
                    isCyclicDecision = true;
                    alt36 = dfa36.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:16: measurements
            	    {
            	    dbg.location(50,16);
            	    pushFollow(FOLLOW_measurements_in_mixture613);
            	    measurements116=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements116.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:29: md
            	    {
            	    dbg.location(50,29);
            	    pushFollow(FOLLOW_md_in_mixture615);
            	    md117=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md117.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:32: stop
            	    {
            	    dbg.location(50,32);
            	    pushFollow(FOLLOW_stop_in_mixture617);
            	    stop118=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop118.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: oscarCompound
            	    {
            	    dbg.location(50,37);
            	    pushFollow(FOLLOW_oscarCompound_in_mixture619);
            	    oscarCompound119=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound119.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:51: molecule
            	    {
            	    dbg.location(50,51);
            	    pushFollow(FOLLOW_molecule_in_mixture621);
            	    molecule120=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule120.getTree());

            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: unnamedmolecule
            	    {
            	    dbg.location(50,60);
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixture623);
            	    unnamedmolecule121=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule121.getTree());

            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: dash
            	    {
            	    dbg.location(50,76);
            	    pushFollow(FOLLOW_dash_in_mixture625);
            	    dash122=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash122.getTree());

            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:81: sym
            	    {
            	    dbg.location(50,81);
            	    pushFollow(FOLLOW_sym_in_mixture627);
            	    sym123=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym123.getTree());

            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:85: cd
            	    {
            	    dbg.location(50,85);
            	    pushFollow(FOLLOW_cd_in_mixture629);
            	    cd124=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd124.getTree());

            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: noun
            	    {
            	    dbg.location(50,88);
            	    pushFollow(FOLLOW_noun_in_mixture631);
            	    noun125=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun125.getTree());

            	    }
            	    break;
            	case 11 :
            	    dbg.enterAlt(11);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:93: inof
            	    {
            	    dbg.location(50,93);
            	    pushFollow(FOLLOW_inof_in_mixture633);
            	    inof126=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof126.getTree());

            	    }
            	    break;
            	case 12 :
            	    dbg.enterAlt(12);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:98: cd
            	    {
            	    dbg.location(50,98);
            	    pushFollow(FOLLOW_cd_in_mixture635);
            	    cd127=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd127.getTree());

            	    }
            	    break;
            	case 13 :
            	    dbg.enterAlt(13);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:101: comma
            	    {
            	    dbg.location(50,101);
            	    pushFollow(FOLLOW_comma_in_mixture637);
            	    comma128=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma128.getTree());

            	    }
            	    break;
            	case 14 :
            	    dbg.enterAlt(14);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:107: adj
            	    {
            	    dbg.location(50,107);
            	    pushFollow(FOLLOW_adj_in_mixture639);
            	    adj129=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj129.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt36++;
            } while (true);
            } finally {dbg.exitSubRule(36);}

            dbg.location(50,113);
            pushFollow(FOLLOW_rrb_in_mixture643);
            rrb130=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb130.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(50, 116);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixture"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj131 = null;

        ChemicalChunkerParser.jjr_return jjr132 = null;

        ChemicalChunkerParser.jjs_return jjs133 = null;

        ChemicalChunkerParser.jjt_return jjt134 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj135 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn136 = null;



        try { dbg.enterRule(getGrammarFileName(), "adj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(52, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt37=6;
            try { dbg.enterDecision(37);

            switch ( input.LA(1) ) {
            case 136:
                {
                alt37=1;
                }
                break;
            case 137:
                {
                alt37=2;
                }
                break;
            case 138:
                {
                alt37=3;
                }
                break;
            case 139:
                {
                alt37=4;
                }
                break;
            case 11:
                {
                alt37=5;
                }
                break;
            case 12:
                {
                alt37=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,7);
                    pushFollow(FOLLOW_jj_in_adj651);
                    jj131=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj131.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,10);
                    pushFollow(FOLLOW_jjr_in_adj653);
                    jjr132=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr132.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,14);
                    pushFollow(FOLLOW_jjs_in_adj655);
                    jjs133=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs133.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,18);
                    pushFollow(FOLLOW_jjt_in_adj657);
                    jjt134=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt134.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,22);
                    pushFollow(FOLLOW_oscarcj_in_adj659);
                    oscarcj135=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj135.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(52,30);
                    pushFollow(FOLLOW_oscarrn_in_adj661);
                    oscarrn136=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn136.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(52, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: adv : ( rb | rbr | rbt );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb137 = null;

        ChemicalChunkerParser.rbr_return rbr138 = null;

        ChemicalChunkerParser.rbt_return rbt139 = null;



        try { dbg.enterRule(getGrammarFileName(), "adv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(54, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:5: ( rb | rbr | rbt )
            int alt38=3;
            try { dbg.enterDecision(38);

            switch ( input.LA(1) ) {
            case 164:
                {
                alt38=1;
                }
                break;
            case 165:
                {
                alt38=2;
                }
                break;
            case 166:
                {
                alt38=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,7);
                    pushFollow(FOLLOW_rb_in_adv669);
                    rb137=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb137.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,10);
                    pushFollow(FOLLOW_rbr_in_adv671);
                    rbr138=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr138.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,14);
                    pushFollow(FOLLOW_rbt_in_adv673);
                    rbt139=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(54, 17);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther140 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp141 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime142 = null;



        try { dbg.enterRule(getGrammarFileName(), "prepphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(56, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:2: ( prepphraseOther | prepphraseTemp | prepphraseTime )
            int alt39=3;
            try { dbg.enterDecision(39);

            try {
                isCyclicDecision = true;
                alt39 = dfa39.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(39);}

            switch (alt39) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:5: prepphraseOther
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,5);
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase684);
                    prepphraseOther140=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther140.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:21: prepphraseTemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,21);
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase686);
                    prepphraseTemp141=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp141.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:36: prepphraseTime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,36);
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase688);
                    prepphraseTime142=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime142.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(57, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:1: prepphraseOther : ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv143 = null;

        ChemicalChunkerParser.adj_return adj144 = null;

        ChemicalChunkerParser.inAll_return inAll145 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase146 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOther");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(59, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:2: ( ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:4: ( adv | adj )? ( inAll )+ nounphrase
            {
            dbg.location(60,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:4: ( adv | adj )?
            int alt40=3;
            try { dbg.enterSubRule(40);
            try { dbg.enterDecision(40);

            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=164 && LA40_0<=166)) ) {
                alt40=1;
            }
            else if ( ((LA40_0>=11 && LA40_0<=12)||(LA40_0>=136 && LA40_0<=139)) ) {
                alt40=2;
            }
            } finally {dbg.exitDecision(40);}

            switch (alt40) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:5: adv
                    {
                    dbg.location(60,5);
                    pushFollow(FOLLOW_adv_in_prepphraseOther700);
                    adv143=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv143.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:9: adj
                    {
                    dbg.location(60,9);
                    pushFollow(FOLLOW_adj_in_prepphraseOther702);
                    adj144=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj144.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(40);}

            dbg.location(60,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:15: ( inAll )+
            int cnt41=0;
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=2;
                try { dbg.enterDecision(41);

                int LA41_0 = input.LA(1);

                if ( ((LA41_0>=16 && LA41_0<=31)||LA41_0==135||LA41_0==170) ) {
                    alt41=1;
                }


                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    dbg.location(60,15);
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther706);
            	    inAll145=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll145.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt41++;
            } while (true);
            } finally {dbg.exitSubRule(41);}

            dbg.location(60,23);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOther710);
            nounphrase146=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase146.getTree());


            // AST REWRITE
            // elements: nounphrase, inAll, adj, adv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 60:34: -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
            {
                dbg.location(60,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:38: ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(60,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(60,60);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:60: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(60,60);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(60,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:65: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(60,65);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(60,70);
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    dbg.location(60,70);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(60,78);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(60, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOther");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof147 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase148 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOf");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(61, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:4: inof nounphrase
            {
            dbg.location(62,4);
            pushFollow(FOLLOW_inof_in_prepphraseOf740);
            inof147=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof147.getTree());
            dbg.location(62,10);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf743);
            nounphrase148=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase148.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 62:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                dbg.location(62,24);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(62,26);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(62,46);
                adaptor.addChild(root_1, stream_inof.nextTree());
                dbg.location(62,52);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(62, 63);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOf");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:1: prepphraseTime : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv149 = null;

        ChemicalChunkerParser.adj_return adj150 = null;

        ChemicalChunkerParser.inAll_return inAll151 = null;

        ChemicalChunkerParser.dt_return dt152 = null;

        ChemicalChunkerParser.adv_return adv153 = null;

        ChemicalChunkerParser.adj_return adj154 = null;

        ChemicalChunkerParser.cd_return cd155 = null;

        ChemicalChunkerParser.nntime_return nntime156 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(64, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:2: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:3: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime
            {
            dbg.location(65,3);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:3: ( adv | adj )?
            int alt42=3;
            try { dbg.enterSubRule(42);
            try { dbg.enterDecision(42);

            try {
                isCyclicDecision = true;
                alt42 = dfa42.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:4: adv
                    {
                    dbg.location(65,4);
                    pushFollow(FOLLOW_adv_in_prepphraseTime766);
                    adv149=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv149.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:8: adj
                    {
                    dbg.location(65,8);
                    pushFollow(FOLLOW_adj_in_prepphraseTime768);
                    adj150=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj150.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(42);}

            dbg.location(65,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:14: ( inAll )?
            int alt43=2;
            try { dbg.enterSubRule(43);
            try { dbg.enterDecision(43);

            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=16 && LA43_0<=31)||LA43_0==135||LA43_0==170) ) {
                alt43=1;
            }
            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(65,14);
                    pushFollow(FOLLOW_inAll_in_prepphraseTime772);
                    inAll151=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll151.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(43);}

            dbg.location(65,22);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:22: ( dt )?
            int alt44=2;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            int LA44_0 = input.LA(1);

            if ( (LA44_0==125) ) {
                alt44=1;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(65,22);
                    pushFollow(FOLLOW_dt_in_prepphraseTime776);
                    dt152=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt152.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}

            dbg.location(65,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:26: ( adv | adj )?
            int alt45=3;
            try { dbg.enterSubRule(45);
            try { dbg.enterDecision(45);

            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=164 && LA45_0<=166)) ) {
                alt45=1;
            }
            else if ( ((LA45_0>=11 && LA45_0<=12)||(LA45_0>=136 && LA45_0<=139)) ) {
                alt45=2;
            }
            } finally {dbg.exitDecision(45);}

            switch (alt45) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:27: adv
                    {
                    dbg.location(65,27);
                    pushFollow(FOLLOW_adv_in_prepphraseTime780);
                    adv153=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv153.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:31: adj
                    {
                    dbg.location(65,31);
                    pushFollow(FOLLOW_adj_in_prepphraseTime782);
                    adj154=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj154.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(45);}

            dbg.location(65,37);
            pushFollow(FOLLOW_cd_in_prepphraseTime786);
            cd155=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd155.getTree());
            dbg.location(65,40);
            pushFollow(FOLLOW_nntime_in_prepphraseTime788);
            nntime156=nntime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntime.add(nntime156.getTree());


            // AST REWRITE
            // elements: adv, adv, inAll, cd, dt, nntime, adj, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 65:47: -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
            {
                dbg.location(65,51);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:51: ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(65,53);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                dbg.location(65,73);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:73: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(65,73);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(65,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:78: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(65,78);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(65,83);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:83: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(65,83);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(65,90);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:90: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(65,90);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(65,94);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:94: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(65,94);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(65,99);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:99: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(65,99);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(65,104);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(65,107);
                adaptor.addChild(root_1, stream_nntime.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(65, 114);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: prepphraseIN : inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin157 = null;

        ChemicalChunkerParser.molecule_return molecule158 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseIN");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(66, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:2: ( inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:3: inin molecule
            {
            dbg.location(67,3);
            pushFollow(FOLLOW_inin_in_prepphraseIN827);
            inin157=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin157.getTree());
            dbg.location(67,8);
            pushFollow(FOLLOW_molecule_in_prepphraseIN829);
            molecule158=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule158.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 67:17: -> ^( NODE[\"INMolecule\"] inin molecule )
            {
                dbg.location(67,21);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:21: ^( NODE[\"INMolecule\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(67,23);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "INMolecule"), root_1);

                dbg.location(67,43);
                adaptor.addChild(root_1, stream_inin.nextTree());
                dbg.location(67,49);
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(67, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseIN");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in159 = null;

        ChemicalChunkerParser.inafter_return inafter160 = null;

        ChemicalChunkerParser.inas_return inas161 = null;

        ChemicalChunkerParser.inbefore_return inbefore162 = null;

        ChemicalChunkerParser.inby_return inby163 = null;

        ChemicalChunkerParser.infor_return infor164 = null;

        ChemicalChunkerParser.infrom_return infrom165 = null;

        ChemicalChunkerParser.inin_return inin166 = null;

        ChemicalChunkerParser.ininto_return ininto167 = null;

        ChemicalChunkerParser.inof_return inof168 = null;

        ChemicalChunkerParser.inoff_return inoff169 = null;

        ChemicalChunkerParser.inon_return inon170 = null;

        ChemicalChunkerParser.inover_return inover171 = null;

        ChemicalChunkerParser.inunder_return inunder172 = null;

        ChemicalChunkerParser.invia_return invia173 = null;

        ChemicalChunkerParser.inwith_return inwith174 = null;

        ChemicalChunkerParser.inwithout_return inwithout175 = null;

        ChemicalChunkerParser.to_return to176 = null;



        try { dbg.enterRule(getGrammarFileName(), "inAll");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(70, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt46=18;
            try { dbg.enterDecision(46);

            switch ( input.LA(1) ) {
            case 135:
                {
                alt46=1;
                }
                break;
            case 18:
                {
                alt46=2;
                }
                break;
            case 16:
                {
                alt46=3;
                }
                break;
            case 17:
                {
                alt46=4;
                }
                break;
            case 23:
                {
                alt46=5;
                }
                break;
            case 27:
                {
                alt46=6;
                }
                break;
            case 28:
                {
                alt46=7;
                }
                break;
            case 19:
                {
                alt46=8;
                }
                break;
            case 20:
                {
                alt46=9;
                }
                break;
            case 25:
                {
                alt46=10;
                }
                break;
            case 31:
                {
                alt46=11;
                }
                break;
            case 26:
                {
                alt46=12;
                }
                break;
            case 30:
                {
                alt46=13;
                }
                break;
            case 29:
                {
                alt46=14;
                }
                break;
            case 24:
                {
                alt46=15;
                }
                break;
            case 21:
                {
                alt46=16;
                }
                break;
            case 22:
                {
                alt46=17;
                }
                break;
            case 170:
                {
                alt46=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,9);
                    pushFollow(FOLLOW_in_in_inAll852);
                    in159=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in159.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,12);
                    pushFollow(FOLLOW_inafter_in_inAll854);
                    inafter160=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter160.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,20);
                    pushFollow(FOLLOW_inas_in_inAll856);
                    inas161=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas161.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,25);
                    pushFollow(FOLLOW_inbefore_in_inAll858);
                    inbefore162=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore162.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,34);
                    pushFollow(FOLLOW_inby_in_inAll860);
                    inby163=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby163.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,39);
                    pushFollow(FOLLOW_infor_in_inAll862);
                    infor164=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor164.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,45);
                    pushFollow(FOLLOW_infrom_in_inAll864);
                    infrom165=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom165.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,52);
                    pushFollow(FOLLOW_inin_in_inAll866);
                    inin166=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin166.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,57);
                    pushFollow(FOLLOW_ininto_in_inAll868);
                    ininto167=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto167.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,64);
                    pushFollow(FOLLOW_inof_in_inAll870);
                    inof168=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof168.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,69);
                    pushFollow(FOLLOW_inoff_in_inAll872);
                    inoff169=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff169.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,75);
                    pushFollow(FOLLOW_inon_in_inAll874);
                    inon170=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon170.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,80);
                    pushFollow(FOLLOW_inover_in_inAll876);
                    inover171=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover171.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,87);
                    pushFollow(FOLLOW_inunder_in_inAll878);
                    inunder172=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder172.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,95);
                    pushFollow(FOLLOW_invia_in_inAll880);
                    invia173=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia173.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,101);
                    pushFollow(FOLLOW_inwith_in_inAll882);
                    inwith174=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith174.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,108);
                    pushFollow(FOLLOW_inwithout_in_inAll884);
                    inwithout175=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout175.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,118);
                    pushFollow(FOLLOW_to_in_inAll886);
                    to176=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to176.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(70, 120);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inAll");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv177 = null;

        ChemicalChunkerParser.adj_return adj178 = null;

        ChemicalChunkerParser.inAll_return inAll179 = null;

        ChemicalChunkerParser.dt_return dt180 = null;

        ChemicalChunkerParser.adv_return adv181 = null;

        ChemicalChunkerParser.adj_return adj182 = null;

        ChemicalChunkerParser.cd_return cd183 = null;

        ChemicalChunkerParser.nntemp_return nntemp184 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(71, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp
            {
            dbg.location(71,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:18: ( adv | adj )?
            int alt47=3;
            try { dbg.enterSubRule(47);
            try { dbg.enterDecision(47);

            try {
                isCyclicDecision = true;
                alt47 = dfa47.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:19: adv
                    {
                    dbg.location(71,19);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp894);
                    adv177=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv177.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: adj
                    {
                    dbg.location(71,23);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp896);
                    adj178=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj178.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(47);}

            dbg.location(71,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:29: ( inAll )?
            int alt48=2;
            try { dbg.enterSubRule(48);
            try { dbg.enterDecision(48);

            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=16 && LA48_0<=31)||LA48_0==135||LA48_0==170) ) {
                alt48=1;
            }
            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(71,29);
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp900);
                    inAll179=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll179.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(48);}

            dbg.location(71,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:36: ( dt )?
            int alt49=2;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==125) ) {
                alt49=1;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(71,36);
                    pushFollow(FOLLOW_dt_in_prepphraseTemp903);
                    dt180=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt180.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}

            dbg.location(71,40);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:40: ( adv | adj )?
            int alt50=3;
            try { dbg.enterSubRule(50);
            try { dbg.enterDecision(50);

            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=164 && LA50_0<=166)) ) {
                alt50=1;
            }
            else if ( ((LA50_0>=11 && LA50_0<=12)||(LA50_0>=136 && LA50_0<=139)) ) {
                alt50=2;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: adv
                    {
                    dbg.location(71,41);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp907);
                    adv181=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv181.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:45: adj
                    {
                    dbg.location(71,45);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp909);
                    adj182=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj182.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(50);}

            dbg.location(71,51);
            pushFollow(FOLLOW_cd_in_prepphraseTemp913);
            cd183=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd183.getTree());
            dbg.location(71,54);
            pushFollow(FOLLOW_nntemp_in_prepphraseTemp915);
            nntemp184=nntemp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntemp.add(nntemp184.getTree());


            // AST REWRITE
            // elements: nntemp, adj, inAll, adj, adv, dt, adv, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 71:61: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
            {
                dbg.location(71,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(71,67);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                dbg.location(71,87);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:87: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(71,87);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(71,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(71,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(71,98);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:98: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(71,98);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(71,106);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:106: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(71,106);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(71,110);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(71,110);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(71,115);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:115: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(71,115);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(71,120);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(71,123);
                adaptor.addChild(root_1, stream_nntemp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(71, 130);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class mmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:1: mmol : cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) ;
    public final ChemicalChunkerParser.mmol_return mmol() throws RecognitionException {
        ChemicalChunkerParser.mmol_return retval = new ChemicalChunkerParser.mmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd185 = null;

        ChemicalChunkerParser.nnmol_return nnmol186 = null;


        RewriteRuleSubtreeStream stream_nnmol=new RewriteRuleSubtreeStream(adaptor,"rule nnmol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "mmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(74, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:6: ( cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:8: cd nnmol
            {
            dbg.location(74,8);
            pushFollow(FOLLOW_cd_in_mmol960);
            cd185=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd185.getTree());
            dbg.location(74,11);
            pushFollow(FOLLOW_nnmol_in_mmol962);
            nnmol186=nnmol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmol.add(nnmol186.getTree());


            // AST REWRITE
            // elements: nnmol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:17: -> ^( NODE[\"MMOL\"] cd nnmol )
            {
                dbg.location(74,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:20: ^( NODE[\"MMOL\"] cd nnmol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(74,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MMOL"), root_1);

                dbg.location(74,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(74,40);
                adaptor.addChild(root_1, stream_nnmol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(74, 47);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mmol"

    public static class gram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: gram : cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) ;
    public final ChemicalChunkerParser.gram_return gram() throws RecognitionException {
        ChemicalChunkerParser.gram_return retval = new ChemicalChunkerParser.gram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd187 = null;

        ChemicalChunkerParser.nngram_return nngram188 = null;


        RewriteRuleSubtreeStream stream_nngram=new RewriteRuleSubtreeStream(adaptor,"rule nngram");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "gram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(75, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:6: ( cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:8: cd nngram
            {
            dbg.location(75,8);
            pushFollow(FOLLOW_cd_in_gram983);
            cd187=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd187.getTree());
            dbg.location(75,11);
            pushFollow(FOLLOW_nngram_in_gram985);
            nngram188=nngram();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nngram.add(nngram188.getTree());


            // AST REWRITE
            // elements: nngram, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 75:17: -> ^( NODE[\"GRAM\"] cd nngram )
            {
                dbg.location(75,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: ^( NODE[\"GRAM\"] cd nngram )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(75,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "GRAM"), root_1);

                dbg.location(75,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(75,40);
                adaptor.addChild(root_1, stream_nngram.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(75, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "gram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "gram"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: percent : cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd189 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent190 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "percent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(76, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:9: ( cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:11: cd nnpercent
            {
            dbg.location(76,11);
            pushFollow(FOLLOW_cd_in_percent1006);
            cd189=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd189.getTree());
            dbg.location(76,14);
            pushFollow(FOLLOW_nnpercent_in_percent1008);
            nnpercent190=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent190.getTree());


            // AST REWRITE
            // elements: nnpercent, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 76:24: -> ^( NODE[\"PERCENT\"] cd nnpercent )
            {
                dbg.location(76,27);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:27: ^( NODE[\"PERCENT\"] cd nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(76,29);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                dbg.location(76,47);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(76,50);
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(76, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "percent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd191 = null;

        ChemicalChunkerParser.nnvol_return nnvol192 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "volume");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(77, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:10: cd nnvol
            {
            dbg.location(77,10);
            pushFollow(FOLLOW_cd_in_volume1029);
            cd191=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd191.getTree());
            dbg.location(77,13);
            pushFollow(FOLLOW_nnvol_in_volume1031);
            nnvol192=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol192.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 77:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                dbg.location(77,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(77,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                dbg.location(77,41);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(77,44);
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(77, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "volume");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "volume"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:1: apparatus : ( measurements | adj | jj | nn )+ ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements193 = null;

        ChemicalChunkerParser.adj_return adj194 = null;

        ChemicalChunkerParser.jj_return jj195 = null;

        ChemicalChunkerParser.nn_return nn196 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus197 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try { dbg.enterRule(getGrammarFileName(), "apparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(79, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:2: ( ( measurements | adj | jj | nn )+ ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:4: ( measurements | adj | jj | nn )+ ( nnapparatus )+
            {
            dbg.location(80,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:4: ( measurements | adj | jj | nn )+
            int cnt51=0;
            try { dbg.enterSubRule(51);

            loop51:
            do {
                int alt51=5;
                try { dbg.enterDecision(51);

                switch ( input.LA(1) ) {
                case 120:
                    {
                    alt51=1;
                    }
                    break;
                case 136:
                    {
                    int LA51_3 = input.LA(2);

                    if ( (LA51_3==TOKEN) ) {
                        int LA51_6 = input.LA(3);

                        if ( (synpred169_ChemicalChunker()) ) {
                            alt51=2;
                        }
                        else if ( (synpred170_ChemicalChunker()) ) {
                            alt51=3;
                        }


                    }


                    }
                    break;
                case 11:
                case 12:
                case 137:
                case 138:
                case 139:
                    {
                    alt51=2;
                    }
                    break;
                case 142:
                    {
                    alt51=4;
                    }
                    break;

                }

                } finally {dbg.exitDecision(51);}

                switch (alt51) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:5: measurements
            	    {
            	    dbg.location(80,5);
            	    pushFollow(FOLLOW_measurements_in_apparatus1055);
            	    measurements193=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements193.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:18: adj
            	    {
            	    dbg.location(80,18);
            	    pushFollow(FOLLOW_adj_in_apparatus1057);
            	    adj194=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_adj.add(adj194.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:22: jj
            	    {
            	    dbg.location(80,22);
            	    pushFollow(FOLLOW_jj_in_apparatus1059);
            	    jj195=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_jj.add(jj195.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:25: nn
            	    {
            	    dbg.location(80,25);
            	    pushFollow(FOLLOW_nn_in_apparatus1061);
            	    nn196=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nn.add(nn196.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt51++;
            } while (true);
            } finally {dbg.exitSubRule(51);}

            dbg.location(80,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:30: ( nnapparatus )+
            int cnt52=0;
            try { dbg.enterSubRule(52);

            loop52:
            do {
                int alt52=2;
                try { dbg.enterDecision(52);

                int LA52_0 = input.LA(1);

                if ( (LA52_0==66) ) {
                    int LA52_2 = input.LA(2);

                    if ( (LA52_2==TOKEN) ) {
                        int LA52_3 = input.LA(3);

                        if ( (synpred172_ChemicalChunker()) ) {
                            alt52=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(52);}

                switch (alt52) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    dbg.location(80,30);
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1065);
            	    nnapparatus197=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus197.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt52++;
            } while (true);
            } finally {dbg.exitSubRule(52);}



            // AST REWRITE
            // elements: nn, nnapparatus, adj, measurements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:42: -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
            {
                dbg.location(80,45);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:45: ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(80,47);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                dbg.location(80,67);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:67: ( measurements )?
                if ( stream_measurements.hasNext() ) {
                    dbg.location(80,67);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                dbg.location(80,81);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:81: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(80,81);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(80,86);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:86: ( nn )?
                if ( stream_nn.hasNext() ) {
                    dbg.location(80,86);
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                dbg.location(80,90);
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    dbg.location(80,90);
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(80, 104);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: measurements : ( mmol | gram | percent | volume );
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mmol_return mmol198 = null;

        ChemicalChunkerParser.gram_return gram199 = null;

        ChemicalChunkerParser.percent_return percent200 = null;

        ChemicalChunkerParser.volume_return volume201 = null;



        try { dbg.enterRule(getGrammarFileName(), "measurements");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(81, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:2: ( mmol | gram | percent | volume )
            int alt53=4;
            try { dbg.enterDecision(53);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==120) ) {
                int LA53_1 = input.LA(2);

                if ( (LA53_1==TOKEN) ) {
                    switch ( input.LA(3) ) {
                    case 38:
                        {
                        alt53=4;
                        }
                        break;
                    case 35:
                        {
                        alt53=1;
                        }
                        break;
                    case 101:
                        {
                        alt53=3;
                        }
                        break;
                    case 34:
                        {
                        alt53=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:3: mmol
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(82,3);
                    pushFollow(FOLLOW_mmol_in_measurements1094);
                    mmol198=mmol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mmol198.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:8: gram
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(82,8);
                    pushFollow(FOLLOW_gram_in_measurements1096);
                    gram199=gram();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gram199.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:13: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(82,13);
                    pushFollow(FOLLOW_percent_in_measurements1098);
                    percent200=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent200.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:21: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(82,21);
                    pushFollow(FOLLOW_volume_in_measurements1100);
                    volume201=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume201.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(82, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "measurements");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "measurements"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1202 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2203 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3204 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm205 = null;

        ChemicalChunkerParser.rrb_return rrb206 = null;



        try { dbg.enterRule(getGrammarFileName(), "oscarCompound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(85, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:17: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(85,17);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:17: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )
            int alt54=4;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54);

            try {
                isCyclicDecision = true;
                alt54 = dfa54.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:18: oscarCompound1
                    {
                    dbg.location(85,18);
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1111);
                    oscarCompound1202=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1202.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:33: oscarCompound2
                    {
                    dbg.location(85,33);
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1113);
                    oscarCompound2203=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2203.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:48: oscarCompound3
                    {
                    dbg.location(85,48);
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1115);
                    oscarCompound3204=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3204.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:63: oscarcm
                    {
                    dbg.location(85,63);
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1117);
                    oscarcm205=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm205.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(85,72);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:72: ( rrb )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55);

            int LA55_0 = input.LA(1);

            if ( (LA55_0==105) ) {
                int LA55_1 = input.LA(2);

                if ( (LA55_1==TOKEN) ) {
                    int LA55_3 = input.LA(3);

                    if ( (synpred179_ChemicalChunker()) ) {
                        alt55=1;
                    }
                }
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rrb
                    {
                    dbg.location(85,72);
                    pushFollow(FOLLOW_rrb_in_oscarCompound1120);
                    rrb206=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb206.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(85, 76);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: oscarCompound3 : oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm207 = null;

        ChemicalChunkerParser.dash_return dash208 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm209 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(86, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:16: ( oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:18: oscarcm dash oscarcm
            {
            dbg.location(86,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31128);
            oscarcm207=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm207.getTree());
            dbg.location(86,26);
            pushFollow(FOLLOW_dash_in_oscarCompound31130);
            dash208=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dash.add(dash208.getTree());
            dbg.location(86,31);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31132);
            oscarcm209=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm209.getTree());


            // AST REWRITE
            // elements: oscarcm, dash, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:39: -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
            {
                dbg.location(86,42);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:42: ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(86,44);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(86,61);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(86,69);
                adaptor.addChild(root_1, stream_dash.nextTree());
                dbg.location(86,74);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(86, 82);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm210 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm211 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(87, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: oscarcm ( oscarcm )+
            {
            dbg.location(87,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21153);
            oscarcm210=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm210.getTree());
            dbg.location(87,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:26: ( oscarcm )+
            int cnt56=0;
            try { dbg.enterSubRule(56);

            loop56:
            do {
                int alt56=2;
                try { dbg.enterDecision(56);

                int LA56_0 = input.LA(1);

                if ( (LA56_0==51) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==TOKEN) ) {
                        int LA56_3 = input.LA(3);

                        if ( (synpred180_ChemicalChunker()) ) {
                            alt56=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(56);}

                switch (alt56) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    dbg.location(87,26);
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21155);
            	    oscarcm211=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm211.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt56++;
            } while (true);
            } finally {dbg.exitSubRule(56);}



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                dbg.location(87,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(87,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(87,57);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(87,65);
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    dbg.location(87,65);
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(87, 74);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm212 = null;

        ChemicalChunkerParser.jj_return jj213 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm214 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(88, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:18: oscarcm jj oscarcm
            {
            dbg.location(88,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11176);
            oscarcm212=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm212.getTree());
            dbg.location(88,26);
            pushFollow(FOLLOW_jj_in_oscarCompound11178);
            jj213=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj213.getTree());
            dbg.location(88,29);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11180);
            oscarcm214=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm214.getTree());


            // AST REWRITE
            // elements: oscarcm, jj, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 88:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                dbg.location(88,40);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(88,42);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(88,59);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(88,67);
                adaptor.addChild(root_1, stream_jj.nextTree());
                dbg.location(88,70);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(88, 78);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: moleculeamount1 : measurements ( amount )? inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements215 = null;

        ChemicalChunkerParser.amount_return amount216 = null;

        ChemicalChunkerParser.inof_return inof217 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound218 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(89, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:2: ( measurements ( amount )? inof oscarCompound )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:3: measurements ( amount )? inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(90,3);
            pushFollow(FOLLOW_measurements_in_moleculeamount11201);
            measurements215=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements215.getTree());
            dbg.location(90,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:16: ( amount )?
            int alt57=2;
            try { dbg.enterSubRule(57);
            try { dbg.enterDecision(57);

            int LA57_0 = input.LA(1);

            if ( (LA57_0==104) ) {
                alt57=1;
            }
            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(90,16);
                    pushFollow(FOLLOW_amount_in_moleculeamount11203);
                    amount216=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount216.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(57);}

            dbg.location(90,24);
            pushFollow(FOLLOW_inof_in_moleculeamount11206);
            inof217=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof217.getTree());
            dbg.location(90,29);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11208);
            oscarCompound218=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound218.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(90, 42);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: moleculeamount2 : oscarCompound ( amount )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound219 = null;

        ChemicalChunkerParser.amount_return amount220 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(91, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:2: ( oscarCompound ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:3: oscarCompound ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(92,3);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount21216);
            oscarCompound219=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound219.getTree());
            dbg.location(92,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:18: ( amount )*
            try { dbg.enterSubRule(58);

            loop58:
            do {
                int alt58=2;
                try { dbg.enterDecision(58);

                try {
                    isCyclicDecision = true;
                    alt58 = dfa58.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(58);}

                switch (alt58) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(92,18);
            	    pushFollow(FOLLOW_amount_in_moleculeamount21219);
            	    amount220=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount220.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);
            } finally {dbg.exitSubRule(58);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(92, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1221 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2222 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(93, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:16: ( moleculeamount1 | moleculeamount2 )
            int alt59=2;
            try { dbg.enterDecision(59);

            int LA59_0 = input.LA(1);

            if ( (LA59_0==120) ) {
                alt59=1;
            }
            else if ( (LA59_0==51) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(93,18);
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1229);
                    moleculeamount1221=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1221.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(93,36);
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1233);
                    moleculeamount2222=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2222.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(93, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount223 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "molecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(94, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:5: moleculeamount
            {
            dbg.location(95,5);
            pushFollow(FOLLOW_moleculeamount_in_molecule1254);
            moleculeamount223=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount223.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                dbg.location(95,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(95,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                dbg.location(95,42);
                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(95, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "molecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: unnamedmoleculeamount1 : measurements ( amount )? inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements224 = null;

        ChemicalChunkerParser.amount_return amount225 = null;

        ChemicalChunkerParser.inof_return inof226 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd227 = null;

        ChemicalChunkerParser.cd_return cd228 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(97, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:2: ( measurements ( amount )? inof ( oscarcd | cd ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:3: measurements ( amount )? inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(98,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount11273);
            measurements224=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements224.getTree());
            dbg.location(98,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:16: ( amount )?
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60);

            int LA60_0 = input.LA(1);

            if ( (LA60_0==104) ) {
                alt60=1;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(98,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount11275);
                    amount225=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount225.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}

            dbg.location(98,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11278);
            inof226=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof226.getTree());
            dbg.location(98,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:29: ( oscarcd | cd )
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61);

            int LA61_0 = input.LA(1);

            if ( (LA61_0==10) ) {
                alt61=1;
            }
            else if ( (LA61_0==120) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:30: oscarcd
                    {
                    dbg.location(98,30);
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11281);
                    oscarcd227=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd227.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:38: cd
                    {
                    dbg.location(98,38);
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11283);
                    cd228=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd228.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(98, 41);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: unnamedmoleculeamount2 : oscarcd ( amount )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd229 = null;

        ChemicalChunkerParser.amount_return amount230 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(99, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:2: ( oscarcd ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:3: oscarcd ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(100,3);
            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21292);
            oscarcd229=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd229.getTree());
            dbg.location(100,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:11: ( amount )*
            try { dbg.enterSubRule(62);

            loop62:
            do {
                int alt62=2;
                try { dbg.enterDecision(62);

                try {
                    isCyclicDecision = true;
                    alt62 = dfa62.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(62);}

                switch (alt62) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(100,11);
            	    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount21294);
            	    amount230=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount230.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);
            } finally {dbg.exitSubRule(62);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(100, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: unnamedmoleculeamount3 : measurements ( amount )? inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements231 = null;

        ChemicalChunkerParser.amount_return amount232 = null;

        ChemicalChunkerParser.inof_return inof233 = null;

        ChemicalChunkerParser.jj_return jj234 = null;

        ChemicalChunkerParser.noun_return noun235 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(101, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:2: ( measurements ( amount )? inof ( ( jj )? noun )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:3: measurements ( amount )? inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(102,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount31304);
            measurements231=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements231.getTree());
            dbg.location(102,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:16: ( amount )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==104) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(102,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount31306);
                    amount232=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount232.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(102,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31309);
            inof233=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof233.getTree());
            dbg.location(102,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:29: ( ( jj )? noun )+
            int cnt65=0;
            try { dbg.enterSubRule(65);

            loop65:
            do {
                int alt65=2;
                try { dbg.enterDecision(65);

                try {
                    isCyclicDecision = true;
                    alt65 = dfa65.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(65);}

                switch (alt65) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( jj )? noun
            	    {
            	    dbg.location(102,30);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( jj )?
            	    int alt64=2;
            	    try { dbg.enterSubRule(64);
            	    try { dbg.enterDecision(64);

            	    int LA64_0 = input.LA(1);

            	    if ( (LA64_0==136) ) {
            	        int LA64_1 = input.LA(2);

            	        if ( (LA64_1==TOKEN) ) {
            	            int LA64_3 = input.LA(3);

            	            if ( (synpred188_ChemicalChunker()) ) {
            	                alt64=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(64);}

            	    switch (alt64) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            dbg.location(102,30);
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31312);
            	            jj234=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj234.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(64);}

            	    dbg.location(102,34);
            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31315);
            	    noun235=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun235.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt65++;
            } while (true);
            } finally {dbg.exitSubRule(65);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(102, 40);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1236 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2237 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3238 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(104, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt66=3;
            try { dbg.enterDecision(66);

            int LA66_0 = input.LA(1);

            if ( (LA66_0==120) ) {
                int LA66_1 = input.LA(2);

                if ( (synpred190_ChemicalChunker()) ) {
                    alt66=1;
                }
                else if ( (true) ) {
                    alt66=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA66_0==10) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(105,3);
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1326);
                    unnamedmoleculeamount1236=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1236.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(105,28);
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1330);
                    unnamedmoleculeamount2237=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2237.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(105,53);
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1334);
                    unnamedmoleculeamount3238=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(105, 76);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount239 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "unnamedmolecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(108, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:4: unnamedmoleculeamount
            {
            dbg.location(109,4);
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1347);
            unnamedmoleculeamount239=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount239.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 109:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                dbg.location(109,29);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(109,31);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                dbg.location(109,55);
                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(109, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmolecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: amount : lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb240 = null;

        ChemicalChunkerParser.measurements_return measurements241 = null;

        ChemicalChunkerParser.comma_return comma242 = null;

        ChemicalChunkerParser.measurements_return measurements243 = null;

        ChemicalChunkerParser.rrb_return rrb244 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try { dbg.enterRule(getGrammarFileName(), "amount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(111, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:9: ( lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:11: lrb measurements ( comma measurements )* rrb
            {
            dbg.location(111,11);
            pushFollow(FOLLOW_lrb_in_amount1368);
            lrb240=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb240.getTree());
            dbg.location(111,15);
            pushFollow(FOLLOW_measurements_in_amount1370);
            measurements241=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measurements.add(measurements241.getTree());
            dbg.location(111,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:28: ( comma measurements )*
            try { dbg.enterSubRule(67);

            loop67:
            do {
                int alt67=2;
                try { dbg.enterDecision(67);

                int LA67_0 = input.LA(1);

                if ( (LA67_0==96) ) {
                    alt67=1;
                }


                } finally {dbg.exitDecision(67);}

                switch (alt67) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:29: comma measurements
            	    {
            	    dbg.location(111,29);
            	    pushFollow(FOLLOW_comma_in_amount1373);
            	    comma242=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma242.getTree());
            	    dbg.location(111,36);
            	    pushFollow(FOLLOW_measurements_in_amount1376);
            	    measurements243=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements243.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);
            } finally {dbg.exitSubRule(67);}

            dbg.location(111,52);
            pushFollow(FOLLOW_rrb_in_amount1381);
            rrb244=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb244.getTree());


            // AST REWRITE
            // elements: measurements, measurements, lrb, comma, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 111:56: -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
            {
                dbg.location(111,61);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:61: ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(111,63);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                dbg.location(111,79);
                adaptor.addChild(root_1, stream_lrb.nextTree());
                dbg.location(111,83);
                adaptor.addChild(root_1, stream_measurements.nextTree());
                dbg.location(111,96);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:96: ( comma measurements )*
                while ( stream_measurements.hasNext()||stream_comma.hasNext() ) {
                    dbg.location(111,97);
                    adaptor.addChild(root_1, stream_comma.nextTree());
                    dbg.location(111,104);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                stream_comma.reset();
                dbg.location(111,120);
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(111, 124);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "amount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "amount"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral245 = null;

        ChemicalChunkerParser.nn_return nn246 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod247 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd248 = null;

        ChemicalChunkerParser.cd_return cd249 = null;



        try { dbg.enterRule(getGrammarFileName(), "method");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(113, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(114,5);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:5: ( nngeneral | nn )?
            int alt68=3;
            try { dbg.enterSubRule(68);
            try { dbg.enterDecision(68);

            int LA68_0 = input.LA(1);

            if ( (LA68_0==42) ) {
                alt68=1;
            }
            else if ( (LA68_0==142) ) {
                alt68=2;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:6: nngeneral
                    {
                    dbg.location(114,6);
                    pushFollow(FOLLOW_nngeneral_in_method1418);
                    nngeneral245=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral245.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:16: nn
                    {
                    dbg.location(114,16);
                    pushFollow(FOLLOW_nn_in_method1420);
                    nn246=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn246.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(68);}

            dbg.location(114,21);
            pushFollow(FOLLOW_nnmethod_in_method1424);
            nnmethod247=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod247.getTree());
            dbg.location(114,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:30: ( oscarcd | cd )?
            int alt69=3;
            try { dbg.enterSubRule(69);
            try { dbg.enterDecision(69);

            int LA69_0 = input.LA(1);

            if ( (LA69_0==10) ) {
                alt69=1;
            }
            else if ( (LA69_0==120) ) {
                alt69=2;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:31: oscarcd
                    {
                    dbg.location(114,31);
                    pushFollow(FOLLOW_oscarcd_in_method1427);
                    oscarcd248=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd248.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:39: cd
                    {
                    dbg.location(114,39);
                    pushFollow(FOLLOW_cd_in_method1429);
                    cd249=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd249.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(69);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(114, 45);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "method");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "method"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal250=null;
        Token TOKEN251=null;

        Object string_literal250_tree=null;
        Object TOKEN251_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(117, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:8: ( 'OSCAR-CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(117,9);
            string_literal250=(Token)match(input,10,FOLLOW_10_in_oscarcd1440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal250_tree = (Object)adaptor.create(string_literal250);
            adaptor.addChild(root_0, string_literal250_tree);
            }
            dbg.location(117,20);
            TOKEN251=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd1442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN251_tree = (Object)adaptor.create(TOKEN251);
            adaptor.addChild(root_0, TOKEN251_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(117, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal252=null;
        Token TOKEN253=null;

        Object string_literal252_tree=null;
        Object TOKEN253_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(118, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:8: ( 'OSCAR-CJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(118,9);
            string_literal252=(Token)match(input,11,FOLLOW_11_in_oscarcj1447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal252_tree = (Object)adaptor.create(string_literal252);
            adaptor.addChild(root_0, string_literal252_tree);
            }
            dbg.location(118,20);
            TOKEN253=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj1449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN253_tree = (Object)adaptor.create(TOKEN253);
            adaptor.addChild(root_0, TOKEN253_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(118, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal254=null;
        Token TOKEN255=null;

        Object string_literal254_tree=null;
        Object TOKEN255_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarrn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(119, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:8: ( 'OSCAR-RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(119,9);
            string_literal254=(Token)match(input,12,FOLLOW_12_in_oscarrn1454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal254_tree = (Object)adaptor.create(string_literal254);
            adaptor.addChild(root_0, string_literal254_tree);
            }
            dbg.location(119,20);
            TOKEN255=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn1456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN255_tree = (Object)adaptor.create(TOKEN255);
            adaptor.addChild(root_0, TOKEN255_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(119, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarrn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal256=null;
        Token TOKEN257=null;

        Object string_literal256_tree=null;
        Object TOKEN257_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscaront");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(120, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:9: ( 'OSCAR-ONT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(120,11);
            string_literal256=(Token)match(input,13,FOLLOW_13_in_oscaront1462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal256_tree = (Object)adaptor.create(string_literal256);
            adaptor.addChild(root_0, string_literal256_tree);
            }
            dbg.location(120,23);
            TOKEN257=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront1464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN257_tree = (Object)adaptor.create(TOKEN257);
            adaptor.addChild(root_0, TOKEN257_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(120, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscaront");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal258=null;
        Token TOKEN259=null;

        Object string_literal258_tree=null;
        Object TOKEN259_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "tmunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(121, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:10: ( 'TM-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(121,11);
            string_literal258=(Token)match(input,14,FOLLOW_14_in_tmunicode1469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal258_tree = (Object)adaptor.create(string_literal258);
            adaptor.addChild(root_0, string_literal258_tree);
            }
            dbg.location(121,24);
            TOKEN259=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode1471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN259_tree = (Object)adaptor.create(TOKEN259);
            adaptor.addChild(root_0, TOKEN259_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(121, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "tmunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal260=null;
        Token TOKEN261=null;

        Object string_literal260_tree=null;
        Object TOKEN261_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cdunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(122, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:10: ( 'CD-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(122,11);
            string_literal260=(Token)match(input,15,FOLLOW_15_in_cdunicode1476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal260_tree = (Object)adaptor.create(string_literal260);
            adaptor.addChild(root_0, string_literal260_tree);
            }
            dbg.location(122,24);
            TOKEN261=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode1478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN261_tree = (Object)adaptor.create(TOKEN261);
            adaptor.addChild(root_0, TOKEN261_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(122, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cdunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal262=null;
        Token TOKEN263=null;

        Object string_literal262_tree=null;
        Object TOKEN263_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inas");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(125, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:5: ( 'IN-AS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(125,6);
            string_literal262=(Token)match(input,16,FOLLOW_16_in_inas1485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal262_tree = (Object)adaptor.create(string_literal262);
            adaptor.addChild(root_0, string_literal262_tree);
            }
            dbg.location(125,14);
            TOKEN263=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas1487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN263_tree = (Object)adaptor.create(TOKEN263);
            adaptor.addChild(root_0, TOKEN263_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(125, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inas");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal264=null;
        Token TOKEN265=null;

        Object string_literal264_tree=null;
        Object TOKEN265_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inbefore");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(126, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:9: ( 'IN-BEFORE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(126,10);
            string_literal264=(Token)match(input,17,FOLLOW_17_in_inbefore1492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal264_tree = (Object)adaptor.create(string_literal264);
            adaptor.addChild(root_0, string_literal264_tree);
            }
            dbg.location(126,22);
            TOKEN265=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore1494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN265_tree = (Object)adaptor.create(TOKEN265);
            adaptor.addChild(root_0, TOKEN265_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(126, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inbefore");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal266=null;
        Token TOKEN267=null;

        Object string_literal266_tree=null;
        Object TOKEN267_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inafter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(127, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:8: ( 'IN-AFTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(127,9);
            string_literal266=(Token)match(input,18,FOLLOW_18_in_inafter1499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal266_tree = (Object)adaptor.create(string_literal266);
            adaptor.addChild(root_0, string_literal266_tree);
            }
            dbg.location(127,20);
            TOKEN267=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter1501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN267_tree = (Object)adaptor.create(TOKEN267);
            adaptor.addChild(root_0, TOKEN267_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(127, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inafter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal268=null;
        Token TOKEN269=null;

        Object string_literal268_tree=null;
        Object TOKEN269_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(128, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:5: ( 'IN-IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(128,6);
            string_literal268=(Token)match(input,19,FOLLOW_19_in_inin1506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal268_tree = (Object)adaptor.create(string_literal268);
            adaptor.addChild(root_0, string_literal268_tree);
            }
            dbg.location(128,14);
            TOKEN269=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin1508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN269_tree = (Object)adaptor.create(TOKEN269);
            adaptor.addChild(root_0, TOKEN269_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(128, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal270=null;
        Token TOKEN271=null;

        Object string_literal270_tree=null;
        Object TOKEN271_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ininto");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(129, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:7: ( 'IN-INTO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(129,8);
            string_literal270=(Token)match(input,20,FOLLOW_20_in_ininto1513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal270_tree = (Object)adaptor.create(string_literal270);
            adaptor.addChild(root_0, string_literal270_tree);
            }
            dbg.location(129,18);
            TOKEN271=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto1515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN271_tree = (Object)adaptor.create(TOKEN271);
            adaptor.addChild(root_0, TOKEN271_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(129, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ininto");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal272=null;
        Token TOKEN273=null;

        Object string_literal272_tree=null;
        Object TOKEN273_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwith");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(130, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:7: ( 'IN-WITH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(130,8);
            string_literal272=(Token)match(input,21,FOLLOW_21_in_inwith1520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal272_tree = (Object)adaptor.create(string_literal272);
            adaptor.addChild(root_0, string_literal272_tree);
            }
            dbg.location(130,18);
            TOKEN273=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith1522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN273_tree = (Object)adaptor.create(TOKEN273);
            adaptor.addChild(root_0, TOKEN273_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(130, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwith");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal274=null;
        Token TOKEN275=null;

        Object string_literal274_tree=null;
        Object TOKEN275_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwithout");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(131, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:10: ( 'IN-WITHOUT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(131,11);
            string_literal274=(Token)match(input,22,FOLLOW_22_in_inwithout1527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal274_tree = (Object)adaptor.create(string_literal274);
            adaptor.addChild(root_0, string_literal274_tree);
            }
            dbg.location(131,24);
            TOKEN275=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout1529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN275_tree = (Object)adaptor.create(TOKEN275);
            adaptor.addChild(root_0, TOKEN275_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(131, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwithout");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal276=null;
        Token TOKEN277=null;

        Object string_literal276_tree=null;
        Object TOKEN277_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inby");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(132, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:5: ( 'IN-BY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(132,6);
            string_literal276=(Token)match(input,23,FOLLOW_23_in_inby1534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal276_tree = (Object)adaptor.create(string_literal276);
            adaptor.addChild(root_0, string_literal276_tree);
            }
            dbg.location(132,14);
            TOKEN277=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby1536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN277_tree = (Object)adaptor.create(TOKEN277);
            adaptor.addChild(root_0, TOKEN277_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(132, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inby");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal278=null;
        Token TOKEN279=null;

        Object string_literal278_tree=null;
        Object TOKEN279_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "invia");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(133, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:6: ( 'IN-VIA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(133,7);
            string_literal278=(Token)match(input,24,FOLLOW_24_in_invia1541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal278_tree = (Object)adaptor.create(string_literal278);
            adaptor.addChild(root_0, string_literal278_tree);
            }
            dbg.location(133,16);
            TOKEN279=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia1543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN279_tree = (Object)adaptor.create(TOKEN279);
            adaptor.addChild(root_0, TOKEN279_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(133, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "invia");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal280=null;
        Token TOKEN281=null;

        Object string_literal280_tree=null;
        Object TOKEN281_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inof");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(134, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:5: ( 'IN-OF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(134,6);
            string_literal280=(Token)match(input,25,FOLLOW_25_in_inof1548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal280_tree = (Object)adaptor.create(string_literal280);
            adaptor.addChild(root_0, string_literal280_tree);
            }
            dbg.location(134,14);
            TOKEN281=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof1550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN281_tree = (Object)adaptor.create(TOKEN281);
            adaptor.addChild(root_0, TOKEN281_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(134, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inof");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal282=null;
        Token TOKEN283=null;

        Object string_literal282_tree=null;
        Object TOKEN283_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(135, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:5: ( 'IN-ON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(135,6);
            string_literal282=(Token)match(input,26,FOLLOW_26_in_inon1555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal282_tree = (Object)adaptor.create(string_literal282);
            adaptor.addChild(root_0, string_literal282_tree);
            }
            dbg.location(135,14);
            TOKEN283=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon1557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN283_tree = (Object)adaptor.create(TOKEN283);
            adaptor.addChild(root_0, TOKEN283_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(135, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal284=null;
        Token TOKEN285=null;

        Object string_literal284_tree=null;
        Object TOKEN285_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(136, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:6: ( 'IN-FOR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(136,7);
            string_literal284=(Token)match(input,27,FOLLOW_27_in_infor1562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal284_tree = (Object)adaptor.create(string_literal284);
            adaptor.addChild(root_0, string_literal284_tree);
            }
            dbg.location(136,16);
            TOKEN285=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor1564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN285_tree = (Object)adaptor.create(TOKEN285);
            adaptor.addChild(root_0, TOKEN285_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(136, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal286=null;
        Token TOKEN287=null;

        Object string_literal286_tree=null;
        Object TOKEN287_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infrom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(137, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:7: ( 'IN-FROM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(137,8);
            string_literal286=(Token)match(input,28,FOLLOW_28_in_infrom1569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal286_tree = (Object)adaptor.create(string_literal286);
            adaptor.addChild(root_0, string_literal286_tree);
            }
            dbg.location(137,18);
            TOKEN287=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom1571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN287_tree = (Object)adaptor.create(TOKEN287);
            adaptor.addChild(root_0, TOKEN287_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(137, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infrom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal288=null;
        Token TOKEN289=null;

        Object string_literal288_tree=null;
        Object TOKEN289_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inunder");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(138, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:8: ( 'IN-UNDER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(138,9);
            string_literal288=(Token)match(input,29,FOLLOW_29_in_inunder1576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal288_tree = (Object)adaptor.create(string_literal288);
            adaptor.addChild(root_0, string_literal288_tree);
            }
            dbg.location(138,20);
            TOKEN289=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder1578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN289_tree = (Object)adaptor.create(TOKEN289);
            adaptor.addChild(root_0, TOKEN289_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(138, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inunder");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal290=null;
        Token TOKEN291=null;

        Object string_literal290_tree=null;
        Object TOKEN291_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(139, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:7: ( 'IN-OVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(139,8);
            string_literal290=(Token)match(input,30,FOLLOW_30_in_inover1583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal290_tree = (Object)adaptor.create(string_literal290);
            adaptor.addChild(root_0, string_literal290_tree);
            }
            dbg.location(139,18);
            TOKEN291=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover1585); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN291_tree = (Object)adaptor.create(TOKEN291);
            adaptor.addChild(root_0, TOKEN291_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(139, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal292=null;
        Token TOKEN293=null;

        Object string_literal292_tree=null;
        Object TOKEN293_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inoff");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(140, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:6: ( 'IN-OFF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(140,7);
            string_literal292=(Token)match(input,31,FOLLOW_31_in_inoff1590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal292_tree = (Object)adaptor.create(string_literal292);
            adaptor.addChild(root_0, string_literal292_tree);
            }
            dbg.location(140,16);
            TOKEN293=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff1592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN293_tree = (Object)adaptor.create(TOKEN293);
            adaptor.addChild(root_0, TOKEN293_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(140, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inoff");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal294=null;
        Token TOKEN295=null;

        Object string_literal294_tree=null;
        Object TOKEN295_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnstate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(143, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:8: ( 'NN-STATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(143,9);
            string_literal294=(Token)match(input,32,FOLLOW_32_in_nnstate1599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal294_tree = (Object)adaptor.create(string_literal294);
            adaptor.addChild(root_0, string_literal294_tree);
            }
            dbg.location(143,20);
            TOKEN295=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate1601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN295_tree = (Object)adaptor.create(TOKEN295);
            adaptor.addChild(root_0, TOKEN295_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(143, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnstate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal296=null;
        Token TOKEN297=null;

        Object string_literal296_tree=null;
        Object TOKEN297_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(144, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:7: ( 'NN-TIME' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(144,8);
            string_literal296=(Token)match(input,33,FOLLOW_33_in_nntime1606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal296_tree = (Object)adaptor.create(string_literal296);
            adaptor.addChild(root_0, string_literal296_tree);
            }
            dbg.location(144,18);
            TOKEN297=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime1608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN297_tree = (Object)adaptor.create(TOKEN297);
            adaptor.addChild(root_0, TOKEN297_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(144, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntime"

    public static class nngram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: nngram : 'NN-GRAM' TOKEN ;
    public final ChemicalChunkerParser.nngram_return nngram() throws RecognitionException {
        ChemicalChunkerParser.nngram_return retval = new ChemicalChunkerParser.nngram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal298=null;
        Token TOKEN299=null;

        Object string_literal298_tree=null;
        Object TOKEN299_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(145, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:7: ( 'NN-GRAM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:8: 'NN-GRAM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(145,8);
            string_literal298=(Token)match(input,34,FOLLOW_34_in_nngram1613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal298_tree = (Object)adaptor.create(string_literal298);
            adaptor.addChild(root_0, string_literal298_tree);
            }
            dbg.location(145,18);
            TOKEN299=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngram1615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN299_tree = (Object)adaptor.create(TOKEN299);
            adaptor.addChild(root_0, TOKEN299_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(145, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngram"

    public static class nnmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: nnmol : 'NN-MOL' TOKEN ;
    public final ChemicalChunkerParser.nnmol_return nnmol() throws RecognitionException {
        ChemicalChunkerParser.nnmol_return retval = new ChemicalChunkerParser.nnmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal300=null;
        Token TOKEN301=null;

        Object string_literal300_tree=null;
        Object TOKEN301_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(146, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:6: ( 'NN-MOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:7: 'NN-MOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(146,7);
            string_literal300=(Token)match(input,35,FOLLOW_35_in_nnmol1620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal300_tree = (Object)adaptor.create(string_literal300);
            adaptor.addChild(root_0, string_literal300_tree);
            }
            dbg.location(146,16);
            TOKEN301=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmol1622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN301_tree = (Object)adaptor.create(TOKEN301);
            adaptor.addChild(root_0, TOKEN301_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(146, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmol"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal302=null;
        Token TOKEN303=null;

        Object string_literal302_tree=null;
        Object TOKEN303_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnatmosphere");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(147, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:13: ( 'NN-ATMOSPHERE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(147,14);
            string_literal302=(Token)match(input,36,FOLLOW_36_in_nnatmosphere1627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal302_tree = (Object)adaptor.create(string_literal302);
            adaptor.addChild(root_0, string_literal302_tree);
            }
            dbg.location(147,30);
            TOKEN303=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere1629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN303_tree = (Object)adaptor.create(TOKEN303);
            adaptor.addChild(root_0, TOKEN303_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(147, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnatmosphere");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal304=null;
        Token TOKEN305=null;

        Object string_literal304_tree=null;
        Object TOKEN305_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nneq");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(148, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:5: ( 'NN-EQ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(148,6);
            string_literal304=(Token)match(input,37,FOLLOW_37_in_nneq1634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal304_tree = (Object)adaptor.create(string_literal304);
            adaptor.addChild(root_0, string_literal304_tree);
            }
            dbg.location(148,14);
            TOKEN305=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq1636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN305_tree = (Object)adaptor.create(TOKEN305);
            adaptor.addChild(root_0, TOKEN305_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(148, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nneq");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal306=null;
        Token TOKEN307=null;

        Object string_literal306_tree=null;
        Object TOKEN307_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(149, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:6: ( 'NN-VOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(149,7);
            string_literal306=(Token)match(input,38,FOLLOW_38_in_nnvol1641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal306_tree = (Object)adaptor.create(string_literal306);
            adaptor.addChild(root_0, string_literal306_tree);
            }
            dbg.location(149,16);
            TOKEN307=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol1643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN307_tree = (Object)adaptor.create(TOKEN307);
            adaptor.addChild(root_0, TOKEN307_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(149, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal308=null;
        Token TOKEN309=null;

        Object string_literal308_tree=null;
        Object TOKEN309_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchementity");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(150, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:13: ( 'NN-CHEMENTITY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(150,14);
            string_literal308=(Token)match(input,39,FOLLOW_39_in_nnchementity1648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal308_tree = (Object)adaptor.create(string_literal308);
            adaptor.addChild(root_0, string_literal308_tree);
            }
            dbg.location(150,30);
            TOKEN309=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity1650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN309_tree = (Object)adaptor.create(TOKEN309);
            adaptor.addChild(root_0, TOKEN309_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(150, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchementity");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal310=null;
        Token TOKEN311=null;

        Object string_literal310_tree=null;
        Object TOKEN311_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(151, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:7: ( 'NN-TEMP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(151,8);
            string_literal310=(Token)match(input,40,FOLLOW_40_in_nntemp1655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal310_tree = (Object)adaptor.create(string_literal310);
            adaptor.addChild(root_0, string_literal310_tree);
            }
            dbg.location(151,18);
            TOKEN311=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp1657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN311_tree = (Object)adaptor.create(TOKEN311);
            adaptor.addChild(root_0, TOKEN311_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(151, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal312=null;
        Token TOKEN313=null;

        Object string_literal312_tree=null;
        Object TOKEN313_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnflash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(152, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:8: ( 'NN-FLASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(152,9);
            string_literal312=(Token)match(input,41,FOLLOW_41_in_nnflash1662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal312_tree = (Object)adaptor.create(string_literal312);
            adaptor.addChild(root_0, string_literal312_tree);
            }
            dbg.location(152,20);
            TOKEN313=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash1664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN313_tree = (Object)adaptor.create(TOKEN313);
            adaptor.addChild(root_0, TOKEN313_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(152, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnflash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal314=null;
        Token TOKEN315=null;

        Object string_literal314_tree=null;
        Object TOKEN315_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngeneral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(153, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:10: ( 'NN-GENERAL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(153,11);
            string_literal314=(Token)match(input,42,FOLLOW_42_in_nngeneral1669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal314_tree = (Object)adaptor.create(string_literal314);
            adaptor.addChild(root_0, string_literal314_tree);
            }
            dbg.location(153,24);
            TOKEN315=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral1671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN315_tree = (Object)adaptor.create(TOKEN315);
            adaptor.addChild(root_0, TOKEN315_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(153, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngeneral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal316=null;
        Token TOKEN317=null;

        Object string_literal316_tree=null;
        Object TOKEN317_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmethod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(154, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:9: ( 'NN-METHOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(154,10);
            string_literal316=(Token)match(input,43,FOLLOW_43_in_nnmethod1676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal316_tree = (Object)adaptor.create(string_literal316);
            adaptor.addChild(root_0, string_literal316_tree);
            }
            dbg.location(154,22);
            TOKEN317=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod1678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN317_tree = (Object)adaptor.create(TOKEN317);
            adaptor.addChild(root_0, TOKEN317_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(154, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmethod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal318=null;
        Token TOKEN319=null;

        Object string_literal318_tree=null;
        Object TOKEN319_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(155, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:9: ( 'NN-AMOUNT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(155,10);
            string_literal318=(Token)match(input,44,FOLLOW_44_in_nnamount1683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal318_tree = (Object)adaptor.create(string_literal318);
            adaptor.addChild(root_0, string_literal318_tree);
            }
            dbg.location(155,22);
            TOKEN319=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount1685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN319_tree = (Object)adaptor.create(TOKEN319);
            adaptor.addChild(root_0, TOKEN319_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(155, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal320=null;
        Token TOKEN321=null;

        Object string_literal320_tree=null;
        Object TOKEN321_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpressure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(156, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:11: ( 'NN-PRESSURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(156,12);
            string_literal320=(Token)match(input,45,FOLLOW_45_in_nnpressure1690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal320_tree = (Object)adaptor.create(string_literal320);
            adaptor.addChild(root_0, string_literal320_tree);
            }
            dbg.location(156,26);
            TOKEN321=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure1692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN321_tree = (Object)adaptor.create(TOKEN321);
            adaptor.addChild(root_0, TOKEN321_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(156, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpressure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal322=null;
        Token TOKEN323=null;

        Object string_literal322_tree=null;
        Object TOKEN323_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncolumn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(157, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:9: ( 'NN-COLUMN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(157,10);
            string_literal322=(Token)match(input,46,FOLLOW_46_in_nncolumn1697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal322_tree = (Object)adaptor.create(string_literal322);
            adaptor.addChild(root_0, string_literal322_tree);
            }
            dbg.location(157,22);
            TOKEN323=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn1699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN323_tree = (Object)adaptor.create(TOKEN323);
            adaptor.addChild(root_0, TOKEN323_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(157, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncolumn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal324=null;
        Token TOKEN325=null;

        Object string_literal324_tree=null;
        Object TOKEN325_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchromatography");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(158, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(158,18);
            string_literal324=(Token)match(input,47,FOLLOW_47_in_nnchromatography1704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal324_tree = (Object)adaptor.create(string_literal324);
            adaptor.addChild(root_0, string_literal324_tree);
            }
            dbg.location(158,38);
            TOKEN325=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography1706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN325_tree = (Object)adaptor.create(TOKEN325);
            adaptor.addChild(root_0, TOKEN325_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(158, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchromatography");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal326=null;
        Token TOKEN327=null;

        Object string_literal326_tree=null;
        Object TOKEN327_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvacuum");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(159, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:9: ( 'NN-VACUUM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(159,10);
            string_literal326=(Token)match(input,48,FOLLOW_48_in_nnvacuum1711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal326_tree = (Object)adaptor.create(string_literal326);
            adaptor.addChild(root_0, string_literal326_tree);
            }
            dbg.location(159,22);
            TOKEN327=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum1713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN327_tree = (Object)adaptor.create(TOKEN327);
            adaptor.addChild(root_0, TOKEN327_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(159, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvacuum");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal328=null;
        Token TOKEN329=null;

        Object string_literal328_tree=null;
        Object TOKEN329_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncycle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(160, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:8: ( 'NN-CYCLE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(160,9);
            string_literal328=(Token)match(input,49,FOLLOW_49_in_nncycle1718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal328_tree = (Object)adaptor.create(string_literal328);
            adaptor.addChild(root_0, string_literal328_tree);
            }
            dbg.location(160,20);
            TOKEN329=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle1720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN329_tree = (Object)adaptor.create(TOKEN329);
            adaptor.addChild(root_0, TOKEN329_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(160, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncycle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal330=null;
        Token TOKEN331=null;

        Object string_literal330_tree=null;
        Object TOKEN331_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntimes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(161, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:8: ( 'NN-TIMES' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(161,9);
            string_literal330=(Token)match(input,50,FOLLOW_50_in_nntimes1725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal330_tree = (Object)adaptor.create(string_literal330);
            adaptor.addChild(root_0, string_literal330_tree);
            }
            dbg.location(161,20);
            TOKEN331=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes1727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN331_tree = (Object)adaptor.create(TOKEN331);
            adaptor.addChild(root_0, TOKEN331_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(161, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntimes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal332=null;
        Token TOKEN333=null;

        Object string_literal332_tree=null;
        Object TOKEN333_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(164, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:8: ( 'OSCAR-CM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(164,9);
            string_literal332=(Token)match(input,51,FOLLOW_51_in_oscarcm1734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal332_tree = (Object)adaptor.create(string_literal332);
            adaptor.addChild(root_0, string_literal332_tree);
            }
            dbg.location(164,20);
            TOKEN333=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm1736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN333_tree = (Object)adaptor.create(TOKEN333);
            adaptor.addChild(root_0, TOKEN333_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(164, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal334=null;
        Token TOKEN335=null;

        Object string_literal334_tree=null;
        Object TOKEN335_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbuse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(167, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:6: ( 'VB-USE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(167,7);
            string_literal334=(Token)match(input,52,FOLLOW_52_in_vbuse1743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal334_tree = (Object)adaptor.create(string_literal334);
            adaptor.addChild(root_0, string_literal334_tree);
            }
            dbg.location(167,16);
            TOKEN335=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse1745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN335_tree = (Object)adaptor.create(TOKEN335);
            adaptor.addChild(root_0, TOKEN335_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(167, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbuse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal336=null;
        Token TOKEN337=null;

        Object string_literal336_tree=null;
        Object TOKEN337_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbchange");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(168, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:9: ( 'VB-CHANGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(168,10);
            string_literal336=(Token)match(input,53,FOLLOW_53_in_vbchange1750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal336_tree = (Object)adaptor.create(string_literal336);
            adaptor.addChild(root_0, string_literal336_tree);
            }
            dbg.location(168,22);
            TOKEN337=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange1752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN337_tree = (Object)adaptor.create(TOKEN337);
            adaptor.addChild(root_0, TOKEN337_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(168, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbchange");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal338=null;
        Token TOKEN339=null;

        Object string_literal338_tree=null;
        Object TOKEN339_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubmerge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(169, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:11: ( 'VB-SUBMERGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(169,12);
            string_literal338=(Token)match(input,54,FOLLOW_54_in_vbsubmerge1757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal338_tree = (Object)adaptor.create(string_literal338);
            adaptor.addChild(root_0, string_literal338_tree);
            }
            dbg.location(169,26);
            TOKEN339=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge1759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN339_tree = (Object)adaptor.create(TOKEN339);
            adaptor.addChild(root_0, TOKEN339_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(169, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubmerge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal340=null;
        Token TOKEN341=null;

        Object string_literal340_tree=null;
        Object TOKEN341_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubject");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(170, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:10: ( 'VB-SUBJECT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(170,11);
            string_literal340=(Token)match(input,55,FOLLOW_55_in_vbsubject1764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal340_tree = (Object)adaptor.create(string_literal340);
            adaptor.addChild(root_0, string_literal340_tree);
            }
            dbg.location(170,24);
            TOKEN341=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject1766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN341_tree = (Object)adaptor.create(TOKEN341);
            adaptor.addChild(root_0, TOKEN341_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(170, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubject");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal342=null;
        Token TOKEN343=null;

        Object string_literal342_tree=null;
        Object TOKEN343_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(173, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:6: ( 'NN-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(173,7);
            string_literal342=(Token)match(input,56,FOLLOW_56_in_nnadd1773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal342_tree = (Object)adaptor.create(string_literal342);
            adaptor.addChild(root_0, string_literal342_tree);
            }
            dbg.location(173,16);
            TOKEN343=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd1775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN343_tree = (Object)adaptor.create(TOKEN343);
            adaptor.addChild(root_0, TOKEN343_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(173, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal344=null;
        Token TOKEN345=null;

        Object string_literal344_tree=null;
        Object TOKEN345_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(174, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:10: ( 'NN-MIXTURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(174,11);
            string_literal344=(Token)match(input,57,FOLLOW_57_in_nnmixture1780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal344_tree = (Object)adaptor.create(string_literal344);
            adaptor.addChild(root_0, string_literal344_tree);
            }
            dbg.location(174,24);
            TOKEN345=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture1782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN345_tree = (Object)adaptor.create(TOKEN345);
            adaptor.addChild(root_0, TOKEN345_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(174, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal346=null;
        Token TOKEN347=null;

        Object string_literal346_tree=null;
        Object TOKEN347_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(175, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:6: ( 'VB-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(175,7);
            string_literal346=(Token)match(input,58,FOLLOW_58_in_vbadd1787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal346_tree = (Object)adaptor.create(string_literal346);
            adaptor.addChild(root_0, string_literal346_tree);
            }
            dbg.location(175,16);
            TOKEN347=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd1789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN347_tree = (Object)adaptor.create(TOKEN347);
            adaptor.addChild(root_0, TOKEN347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(175, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal348=null;
        Token TOKEN349=null;

        Object string_literal348_tree=null;
        Object TOKEN349_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcharge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(176, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:9: ( 'VB-CHARGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(176,10);
            string_literal348=(Token)match(input,59,FOLLOW_59_in_vbcharge1794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal348_tree = (Object)adaptor.create(string_literal348);
            adaptor.addChild(root_0, string_literal348_tree);
            }
            dbg.location(176,22);
            TOKEN349=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge1796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN349_tree = (Object)adaptor.create(TOKEN349);
            adaptor.addChild(root_0, TOKEN349_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(176, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcharge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal350=null;
        Token TOKEN351=null;

        Object string_literal350_tree=null;
        Object TOKEN351_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcontain");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(177, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:10: ( 'VB-CONTAIN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(177,11);
            string_literal350=(Token)match(input,60,FOLLOW_60_in_vbcontain1801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal350_tree = (Object)adaptor.create(string_literal350);
            adaptor.addChild(root_0, string_literal350_tree);
            }
            dbg.location(177,24);
            TOKEN351=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain1803); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN351_tree = (Object)adaptor.create(TOKEN351);
            adaptor.addChild(root_0, TOKEN351_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(177, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcontain");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal352=null;
        Token TOKEN353=null;

        Object string_literal352_tree=null;
        Object TOKEN353_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdrop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(178, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:7: ( 'VB-DROP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(178,8);
            string_literal352=(Token)match(input,61,FOLLOW_61_in_vbdrop1808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal352_tree = (Object)adaptor.create(string_literal352);
            adaptor.addChild(root_0, string_literal352_tree);
            }
            dbg.location(178,18);
            TOKEN353=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop1810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN353_tree = (Object)adaptor.create(TOKEN353);
            adaptor.addChild(root_0, TOKEN353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(178, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdrop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal354=null;
        Token TOKEN355=null;

        Object string_literal354_tree=null;
        Object TOKEN355_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfill");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(179, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:7: ( 'VB-FILL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(179,8);
            string_literal354=(Token)match(input,62,FOLLOW_62_in_vbfill1815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal354_tree = (Object)adaptor.create(string_literal354);
            adaptor.addChild(root_0, string_literal354_tree);
            }
            dbg.location(179,18);
            TOKEN355=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill1817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN355_tree = (Object)adaptor.create(TOKEN355);
            adaptor.addChild(root_0, TOKEN355_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(179, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfill");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal356=null;
        Token TOKEN357=null;

        Object string_literal356_tree=null;
        Object TOKEN357_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsuspend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(180, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:10: ( 'VB-SUSPEND' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(180,11);
            string_literal356=(Token)match(input,63,FOLLOW_63_in_vbsuspend1822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal356_tree = (Object)adaptor.create(string_literal356);
            adaptor.addChild(root_0, string_literal356_tree);
            }
            dbg.location(180,24);
            TOKEN357=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend1824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN357_tree = (Object)adaptor.create(TOKEN357);
            adaptor.addChild(root_0, TOKEN357_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(180, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsuspend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal358=null;
        Token TOKEN359=null;

        Object string_literal358_tree=null;
        Object TOKEN359_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbtreat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(181, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:8: ( 'VB-TREAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(181,9);
            string_literal358=(Token)match(input,64,FOLLOW_64_in_vbtreat1829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal358_tree = (Object)adaptor.create(string_literal358);
            adaptor.addChild(root_0, string_literal358_tree);
            }
            dbg.location(181,20);
            TOKEN359=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat1831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN359_tree = (Object)adaptor.create(TOKEN359);
            adaptor.addChild(root_0, TOKEN359_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(181, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbtreat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal360=null;
        Token TOKEN361=null;

        Object string_literal360_tree=null;
        Object TOKEN361_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(184, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:12: ( 'VB-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(184,13);
            string_literal360=(Token)match(input,65,FOLLOW_65_in_vbapparatus1838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal360_tree = (Object)adaptor.create(string_literal360);
            adaptor.addChild(root_0, string_literal360_tree);
            }
            dbg.location(184,28);
            TOKEN361=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus1840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN361_tree = (Object)adaptor.create(TOKEN361);
            adaptor.addChild(root_0, TOKEN361_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(184, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal362=null;
        Token TOKEN363=null;

        Object string_literal362_tree=null;
        Object TOKEN363_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(185, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:12: ( 'NN-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(185,13);
            string_literal362=(Token)match(input,66,FOLLOW_66_in_nnapparatus1845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal362_tree = (Object)adaptor.create(string_literal362);
            adaptor.addChild(root_0, string_literal362_tree);
            }
            dbg.location(185,28);
            TOKEN363=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus1847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN363_tree = (Object)adaptor.create(TOKEN363);
            adaptor.addChild(root_0, TOKEN363_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(185, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal364=null;
        Token TOKEN365=null;

        Object string_literal364_tree=null;
        Object TOKEN365_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(188, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:14: ( 'VB-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(188,15);
            string_literal364=(Token)match(input,67,FOLLOW_67_in_vbconcentrate1854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal364_tree = (Object)adaptor.create(string_literal364);
            adaptor.addChild(root_0, string_literal364_tree);
            }
            dbg.location(188,32);
            TOKEN365=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate1856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN365_tree = (Object)adaptor.create(TOKEN365);
            adaptor.addChild(root_0, TOKEN365_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(188, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal366=null;
        Token TOKEN367=null;

        Object string_literal366_tree=null;
        Object TOKEN367_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(189, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:14: ( 'NN-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(189,15);
            string_literal366=(Token)match(input,68,FOLLOW_68_in_nnconcentrate1861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal366_tree = (Object)adaptor.create(string_literal366);
            adaptor.addChild(root_0, string_literal366_tree);
            }
            dbg.location(189,32);
            TOKEN367=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate1863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN367_tree = (Object)adaptor.create(TOKEN367);
            adaptor.addChild(root_0, TOKEN367_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(189, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal368=null;
        Token TOKEN369=null;

        Object string_literal368_tree=null;
        Object TOKEN369_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcool");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(192, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:7: ( 'VB-COOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(192,8);
            string_literal368=(Token)match(input,69,FOLLOW_69_in_vbcool1870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal368_tree = (Object)adaptor.create(string_literal368);
            adaptor.addChild(root_0, string_literal368_tree);
            }
            dbg.location(192,18);
            TOKEN369=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool1872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN369_tree = (Object)adaptor.create(TOKEN369);
            adaptor.addChild(root_0, TOKEN369_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(192, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcool");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal370=null;
        Token TOKEN371=null;

        Object string_literal370_tree=null;
        Object TOKEN371_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdegass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(195, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:9: ( 'VB-DEGASS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(195,10);
            string_literal370=(Token)match(input,70,FOLLOW_70_in_vbdegass1879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal370_tree = (Object)adaptor.create(string_literal370);
            adaptor.addChild(root_0, string_literal370_tree);
            }
            dbg.location(195,22);
            TOKEN371=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN371_tree = (Object)adaptor.create(TOKEN371);
            adaptor.addChild(root_0, TOKEN371_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(195, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdegass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal372=null;
        Token TOKEN373=null;

        Object string_literal372_tree=null;
        Object TOKEN373_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdissolve");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(198, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:11: ( 'VB-DISSOLVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(198,12);
            string_literal372=(Token)match(input,71,FOLLOW_71_in_vbdissolve1888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal372_tree = (Object)adaptor.create(string_literal372);
            adaptor.addChild(root_0, string_literal372_tree);
            }
            dbg.location(198,26);
            TOKEN373=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve1890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN373_tree = (Object)adaptor.create(TOKEN373);
            adaptor.addChild(root_0, TOKEN373_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(198, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdissolve");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal374=null;
        Token TOKEN375=null;

        Object string_literal374_tree=null;
        Object TOKEN375_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(201, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:6: ( 'VB-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(201,7);
            string_literal374=(Token)match(input,72,FOLLOW_72_in_vbdry1897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal374_tree = (Object)adaptor.create(string_literal374);
            adaptor.addChild(root_0, string_literal374_tree);
            }
            dbg.location(201,16);
            TOKEN375=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry1899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN375_tree = (Object)adaptor.create(TOKEN375);
            adaptor.addChild(root_0, TOKEN375_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(201, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal376=null;
        Token TOKEN377=null;

        Object string_literal376_tree=null;
        Object TOKEN377_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nndry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(202, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:6: ( 'NN-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(202,7);
            string_literal376=(Token)match(input,73,FOLLOW_73_in_nndry1904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal376_tree = (Object)adaptor.create(string_literal376);
            adaptor.addChild(root_0, string_literal376_tree);
            }
            dbg.location(202,16);
            TOKEN377=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry1906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN377_tree = (Object)adaptor.create(TOKEN377);
            adaptor.addChild(root_0, TOKEN377_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(202, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nndry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal378=null;
        Token TOKEN379=null;

        Object string_literal378_tree=null;
        Object TOKEN379_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(205, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:10: ( 'VB-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(205,11);
            string_literal378=(Token)match(input,74,FOLLOW_74_in_vbextract1913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal378_tree = (Object)adaptor.create(string_literal378);
            adaptor.addChild(root_0, string_literal378_tree);
            }
            dbg.location(205,24);
            TOKEN379=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract1915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN379_tree = (Object)adaptor.create(TOKEN379);
            adaptor.addChild(root_0, TOKEN379_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(205, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal380=null;
        Token TOKEN381=null;

        Object string_literal380_tree=null;
        Object TOKEN381_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(206, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:10: ( 'NN-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(206,11);
            string_literal380=(Token)match(input,75,FOLLOW_75_in_nnextract1920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal380_tree = (Object)adaptor.create(string_literal380);
            adaptor.addChild(root_0, string_literal380_tree);
            }
            dbg.location(206,24);
            TOKEN381=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract1922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN381_tree = (Object)adaptor.create(TOKEN381);
            adaptor.addChild(root_0, TOKEN381_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(206, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal382=null;
        Token TOKEN383=null;

        Object string_literal382_tree=null;
        Object TOKEN383_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(209, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:9: ( 'VB-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(209,10);
            string_literal382=(Token)match(input,76,FOLLOW_76_in_vbfilter1929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal382_tree = (Object)adaptor.create(string_literal382);
            adaptor.addChild(root_0, string_literal382_tree);
            }
            dbg.location(209,22);
            TOKEN383=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter1931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN383_tree = (Object)adaptor.create(TOKEN383);
            adaptor.addChild(root_0, TOKEN383_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(209, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal384=null;
        Token TOKEN385=null;

        Object string_literal384_tree=null;
        Object TOKEN385_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(210, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:9: ( 'NN-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(210,10);
            string_literal384=(Token)match(input,77,FOLLOW_77_in_nnfilter1936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal384_tree = (Object)adaptor.create(string_literal384);
            adaptor.addChild(root_0, string_literal384_tree);
            }
            dbg.location(210,22);
            TOKEN385=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter1938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN385_tree = (Object)adaptor.create(TOKEN385);
            adaptor.addChild(root_0, TOKEN385_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(210, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal386=null;
        Token TOKEN387=null;

        Object string_literal386_tree=null;
        Object TOKEN387_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbheat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(213, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:7: ( 'VB-HEAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(213,8);
            string_literal386=(Token)match(input,78,FOLLOW_78_in_vbheat1945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = (Object)adaptor.create(string_literal386);
            adaptor.addChild(root_0, string_literal386_tree);
            }
            dbg.location(213,18);
            TOKEN387=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat1947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN387_tree = (Object)adaptor.create(TOKEN387);
            adaptor.addChild(root_0, TOKEN387_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(213, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbheat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal388=null;
        Token TOKEN389=null;

        Object string_literal388_tree=null;
        Object TOKEN389_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbincrease");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(214, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:11: ( 'VB-INCREASE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(214,12);
            string_literal388=(Token)match(input,79,FOLLOW_79_in_vbincrease1952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal388_tree = (Object)adaptor.create(string_literal388);
            adaptor.addChild(root_0, string_literal388_tree);
            }
            dbg.location(214,26);
            TOKEN389=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease1954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN389_tree = (Object)adaptor.create(TOKEN389);
            adaptor.addChild(root_0, TOKEN389_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(214, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbincrease");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal390=null;
        Token TOKEN391=null;

        Object string_literal390_tree=null;
        Object TOKEN391_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpartition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(217, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:12: ( 'VB-PARTITION' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(217,13);
            string_literal390=(Token)match(input,80,FOLLOW_80_in_vbpartition1961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal390_tree = (Object)adaptor.create(string_literal390);
            adaptor.addChild(root_0, string_literal390_tree);
            }
            dbg.location(217,28);
            TOKEN391=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition1963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN391_tree = (Object)adaptor.create(TOKEN391);
            adaptor.addChild(root_0, TOKEN391_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(217, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpartition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal392=null;
        Token TOKEN393=null;

        Object string_literal392_tree=null;
        Object TOKEN393_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(220, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:14: ( 'VB-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(220,15);
            string_literal392=(Token)match(input,81,FOLLOW_81_in_vbprecipitate1970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal392_tree = (Object)adaptor.create(string_literal392);
            adaptor.addChild(root_0, string_literal392_tree);
            }
            dbg.location(220,32);
            TOKEN393=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate1972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN393_tree = (Object)adaptor.create(TOKEN393);
            adaptor.addChild(root_0, TOKEN393_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(220, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal394=null;
        Token TOKEN395=null;

        Object string_literal394_tree=null;
        Object TOKEN395_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(221, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:14: ( 'NN-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(221,15);
            string_literal394=(Token)match(input,82,FOLLOW_82_in_nnprecipitate1977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal394_tree = (Object)adaptor.create(string_literal394);
            adaptor.addChild(root_0, string_literal394_tree);
            }
            dbg.location(221,32);
            TOKEN395=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate1979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN395_tree = (Object)adaptor.create(TOKEN395);
            adaptor.addChild(root_0, TOKEN395_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(221, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal396=null;
        Token TOKEN397=null;

        Object string_literal396_tree=null;
        Object TOKEN397_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(224, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:9: ( 'VB-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(224,10);
            string_literal396=(Token)match(input,83,FOLLOW_83_in_vbpurify1986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal396_tree = (Object)adaptor.create(string_literal396);
            adaptor.addChild(root_0, string_literal396_tree);
            }
            dbg.location(224,22);
            TOKEN397=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify1988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN397_tree = (Object)adaptor.create(TOKEN397);
            adaptor.addChild(root_0, TOKEN397_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(224, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal398=null;
        Token TOKEN399=null;

        Object string_literal398_tree=null;
        Object TOKEN399_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(225, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:9: ( 'NN-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(225,10);
            string_literal398=(Token)match(input,84,FOLLOW_84_in_nnpurify1993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal398_tree = (Object)adaptor.create(string_literal398);
            adaptor.addChild(root_0, string_literal398_tree);
            }
            dbg.location(225,22);
            TOKEN399=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify1995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN399_tree = (Object)adaptor.create(TOKEN399);
            adaptor.addChild(root_0, TOKEN399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(225, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal400=null;
        Token TOKEN401=null;

        Object string_literal400_tree=null;
        Object TOKEN401_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbquench");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(228, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:9: ( 'VB-QUENCH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(228,10);
            string_literal400=(Token)match(input,85,FOLLOW_85_in_vbquench2002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal400_tree = (Object)adaptor.create(string_literal400);
            adaptor.addChild(root_0, string_literal400_tree);
            }
            dbg.location(228,22);
            TOKEN401=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN401_tree = (Object)adaptor.create(TOKEN401);
            adaptor.addChild(root_0, TOKEN401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(228, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbquench");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal402=null;
        Token TOKEN403=null;

        Object string_literal402_tree=null;
        Object TOKEN403_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbrecover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(231, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:10: ( 'VB-RECOVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(231,11);
            string_literal402=(Token)match(input,86,FOLLOW_86_in_vbrecover2011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal402_tree = (Object)adaptor.create(string_literal402);
            adaptor.addChild(root_0, string_literal402_tree);
            }
            dbg.location(231,24);
            TOKEN403=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN403_tree = (Object)adaptor.create(TOKEN403);
            adaptor.addChild(root_0, TOKEN403_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(231, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbrecover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal404=null;
        Token TOKEN405=null;

        Object string_literal404_tree=null;
        Object TOKEN405_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(234, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: ( 'VB-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(234,10);
            string_literal404=(Token)match(input,87,FOLLOW_87_in_vbremove2020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal404_tree = (Object)adaptor.create(string_literal404);
            adaptor.addChild(root_0, string_literal404_tree);
            }
            dbg.location(234,22);
            TOKEN405=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN405_tree = (Object)adaptor.create(TOKEN405);
            adaptor.addChild(root_0, TOKEN405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(234, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal406=null;
        Token TOKEN407=null;

        Object string_literal406_tree=null;
        Object TOKEN407_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(235, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:9: ( 'NN-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(235,10);
            string_literal406=(Token)match(input,88,FOLLOW_88_in_nnremove2027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = (Object)adaptor.create(string_literal406);
            adaptor.addChild(root_0, string_literal406_tree);
            }
            dbg.location(235,22);
            TOKEN407=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN407_tree = (Object)adaptor.create(TOKEN407);
            adaptor.addChild(root_0, TOKEN407_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(235, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal408=null;
        Token TOKEN409=null;

        Object string_literal408_tree=null;
        Object TOKEN409_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbstir");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(238, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:7: ( 'VB-STIR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(238,8);
            string_literal408=(Token)match(input,89,FOLLOW_89_in_vbstir2036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal408_tree = (Object)adaptor.create(string_literal408);
            adaptor.addChild(root_0, string_literal408_tree);
            }
            dbg.location(238,18);
            TOKEN409=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN409_tree = (Object)adaptor.create(TOKEN409);
            adaptor.addChild(root_0, TOKEN409_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(238, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbstir");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal410=null;
        Token TOKEN411=null;

        Object string_literal410_tree=null;
        Object TOKEN411_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(241, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:13: ( 'VB-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(241,14);
            string_literal410=(Token)match(input,90,FOLLOW_90_in_vbsynthesize2045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal410_tree = (Object)adaptor.create(string_literal410);
            adaptor.addChild(root_0, string_literal410_tree);
            }
            dbg.location(241,30);
            TOKEN411=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN411_tree = (Object)adaptor.create(TOKEN411);
            adaptor.addChild(root_0, TOKEN411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(241, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal412=null;
        Token TOKEN413=null;

        Object string_literal412_tree=null;
        Object TOKEN413_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(242, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:13: ( 'NN-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(242,14);
            string_literal412=(Token)match(input,91,FOLLOW_91_in_nnsynthesize2052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = (Object)adaptor.create(string_literal412);
            adaptor.addChild(root_0, string_literal412_tree);
            }
            dbg.location(242,30);
            TOKEN413=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN413_tree = (Object)adaptor.create(TOKEN413);
            adaptor.addChild(root_0, TOKEN413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(242, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal414=null;
        Token TOKEN415=null;

        Object string_literal414_tree=null;
        Object TOKEN415_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwait");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(245, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:7: ( 'VB-WAIT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(245,8);
            string_literal414=(Token)match(input,92,FOLLOW_92_in_vbwait2061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal414_tree = (Object)adaptor.create(string_literal414);
            adaptor.addChild(root_0, string_literal414_tree);
            }
            dbg.location(245,18);
            TOKEN415=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN415_tree = (Object)adaptor.create(TOKEN415);
            adaptor.addChild(root_0, TOKEN415_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(245, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwait");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal416=null;
        Token TOKEN417=null;

        Object string_literal416_tree=null;
        Object TOKEN417_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(248, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:7: ( 'VB-WASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(248,8);
            string_literal416=(Token)match(input,93,FOLLOW_93_in_vbwash2070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal416_tree = (Object)adaptor.create(string_literal416);
            adaptor.addChild(root_0, string_literal416_tree);
            }
            dbg.location(248,18);
            TOKEN417=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN417_tree = (Object)adaptor.create(TOKEN417);
            adaptor.addChild(root_0, TOKEN417_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(248, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal418=null;
        Token TOKEN419=null;

        Object string_literal418_tree=null;
        Object TOKEN419_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbyield");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(251, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:8: ( 'VB-YIELD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(251,9);
            string_literal418=(Token)match(input,94,FOLLOW_94_in_vbyield2079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal418_tree = (Object)adaptor.create(string_literal418);
            adaptor.addChild(root_0, string_literal418_tree);
            }
            dbg.location(251,20);
            TOKEN419=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN419_tree = (Object)adaptor.create(TOKEN419);
            adaptor.addChild(root_0, TOKEN419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(251, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbyield");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal420=null;
        Token TOKEN421=null;

        Object string_literal420_tree=null;
        Object TOKEN421_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "colon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(254, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:6: ( 'COLON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(254,7);
            string_literal420=(Token)match(input,95,FOLLOW_95_in_colon2088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal420_tree = (Object)adaptor.create(string_literal420);
            adaptor.addChild(root_0, string_literal420_tree);
            }
            dbg.location(254,15);
            TOKEN421=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN421_tree = (Object)adaptor.create(TOKEN421);
            adaptor.addChild(root_0, TOKEN421_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(254, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "colon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal422=null;
        Token TOKEN423=null;

        Object string_literal422_tree=null;
        Object TOKEN423_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "comma");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(255, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:6: ( 'COMMA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(255,7);
            string_literal422=(Token)match(input,96,FOLLOW_96_in_comma2095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal422_tree = (Object)adaptor.create(string_literal422);
            adaptor.addChild(root_0, string_literal422_tree);
            }
            dbg.location(255,15);
            TOKEN423=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN423_tree = (Object)adaptor.create(TOKEN423);
            adaptor.addChild(root_0, TOKEN423_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(255, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comma");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal424=null;
        Token TOKEN425=null;

        Object string_literal424_tree=null;
        Object TOKEN425_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "apost");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(256, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:6: ( 'APOST' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(256,7);
            string_literal424=(Token)match(input,97,FOLLOW_97_in_apost2102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal424_tree = (Object)adaptor.create(string_literal424);
            adaptor.addChild(root_0, string_literal424_tree);
            }
            dbg.location(256,15);
            TOKEN425=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN425_tree = (Object)adaptor.create(TOKEN425);
            adaptor.addChild(root_0, TOKEN425_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(256, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apost");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal426=null;
        Token TOKEN427=null;

        Object string_literal426_tree=null;
        Object TOKEN427_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "neg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(257, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:4: ( 'NEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(257,5);
            string_literal426=(Token)match(input,98,FOLLOW_98_in_neg2109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = (Object)adaptor.create(string_literal426);
            adaptor.addChild(root_0, string_literal426_tree);
            }
            dbg.location(257,11);
            TOKEN427=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN427_tree = (Object)adaptor.create(TOKEN427);
            adaptor.addChild(root_0, TOKEN427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(257, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "neg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal428=null;
        Token TOKEN429=null;

        Object string_literal428_tree=null;
        Object TOKEN429_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(258, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:5: ( 'DASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(258,6);
            string_literal428=(Token)match(input,99,FOLLOW_99_in_dash2116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal428_tree = (Object)adaptor.create(string_literal428);
            adaptor.addChild(root_0, string_literal428_tree);
            }
            dbg.location(258,13);
            TOKEN429=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN429_tree = (Object)adaptor.create(TOKEN429);
            adaptor.addChild(root_0, TOKEN429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(258, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal430=null;
        Token TOKEN431=null;

        Object string_literal430_tree=null;
        Object TOKEN431_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "stop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(259, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:5: ( 'STOP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(259,6);
            string_literal430=(Token)match(input,100,FOLLOW_100_in_stop2123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal430_tree = (Object)adaptor.create(string_literal430);
            adaptor.addChild(root_0, string_literal430_tree);
            }
            dbg.location(259,13);
            TOKEN431=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN431_tree = (Object)adaptor.create(TOKEN431);
            adaptor.addChild(root_0, TOKEN431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(259, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "stop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal432=null;
        Token TOKEN433=null;

        Object string_literal432_tree=null;
        Object TOKEN433_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpercent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(260, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:10: ( 'NN-PERCENT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(260,11);
            string_literal432=(Token)match(input,101,FOLLOW_101_in_nnpercent2130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal432_tree = (Object)adaptor.create(string_literal432);
            adaptor.addChild(root_0, string_literal432_tree);
            }
            dbg.location(260,24);
            TOKEN433=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN433_tree = (Object)adaptor.create(TOKEN433);
            adaptor.addChild(root_0, TOKEN433_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(260, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpercent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal434=null;
        Token TOKEN435=null;

        Object string_literal434_tree=null;
        Object TOKEN435_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(261, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:5: ( 'LSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(261,6);
            string_literal434=(Token)match(input,102,FOLLOW_102_in_lsqb2137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = (Object)adaptor.create(string_literal434);
            adaptor.addChild(root_0, string_literal434_tree);
            }
            dbg.location(261,13);
            TOKEN435=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN435_tree = (Object)adaptor.create(TOKEN435);
            adaptor.addChild(root_0, TOKEN435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(261, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal436=null;
        Token TOKEN437=null;

        Object string_literal436_tree=null;
        Object TOKEN437_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(262, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:5: ( 'RSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(262,6);
            string_literal436=(Token)match(input,103,FOLLOW_103_in_rsqb2144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal436_tree = (Object)adaptor.create(string_literal436);
            adaptor.addChild(root_0, string_literal436_tree);
            }
            dbg.location(262,13);
            TOKEN437=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN437_tree = (Object)adaptor.create(TOKEN437);
            adaptor.addChild(root_0, TOKEN437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(262, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal438=null;
        Token TOKEN439=null;

        Object string_literal438_tree=null;
        Object TOKEN439_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(263, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:4: ( '-LRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(263,5);
            string_literal438=(Token)match(input,104,FOLLOW_104_in_lrb2151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = (Object)adaptor.create(string_literal438);
            adaptor.addChild(root_0, string_literal438_tree);
            }
            dbg.location(263,13);
            TOKEN439=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN439_tree = (Object)adaptor.create(TOKEN439);
            adaptor.addChild(root_0, TOKEN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(263, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal440=null;
        Token TOKEN441=null;

        Object string_literal440_tree=null;
        Object TOKEN441_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(264, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:4: ( '-RRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(264,5);
            string_literal440=(Token)match(input,105,FOLLOW_105_in_rrb2158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = (Object)adaptor.create(string_literal440);
            adaptor.addChild(root_0, string_literal440_tree);
            }
            dbg.location(264,13);
            TOKEN441=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN441_tree = (Object)adaptor.create(TOKEN441);
            adaptor.addChild(root_0, TOKEN441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(264, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal442=null;
        Token TOKEN443=null;

        Object string_literal442_tree=null;
        Object TOKEN443_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(269, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:4: ( 'ABL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(269,5);
            string_literal442=(Token)match(input,106,FOLLOW_106_in_abl2169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = (Object)adaptor.create(string_literal442);
            adaptor.addChild(root_0, string_literal442_tree);
            }
            dbg.location(269,11);
            TOKEN443=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN443_tree = (Object)adaptor.create(TOKEN443);
            adaptor.addChild(root_0, TOKEN443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(269, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal444=null;
        Token TOKEN445=null;

        Object string_literal444_tree=null;
        Object TOKEN445_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(272, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:4: ( 'ABN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(272,5);
            string_literal444=(Token)match(input,107,FOLLOW_107_in_abn2178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (Object)adaptor.create(string_literal444);
            adaptor.addChild(root_0, string_literal444_tree);
            }
            dbg.location(272,11);
            TOKEN445=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN445_tree = (Object)adaptor.create(TOKEN445);
            adaptor.addChild(root_0, TOKEN445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(272, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal446=null;
        Token TOKEN447=null;

        Object string_literal446_tree=null;
        Object TOKEN447_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(275, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:4: ( 'ABX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(275,5);
            string_literal446=(Token)match(input,108,FOLLOW_108_in_abx2187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (Object)adaptor.create(string_literal446);
            adaptor.addChild(root_0, string_literal446_tree);
            }
            dbg.location(275,11);
            TOKEN447=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN447_tree = (Object)adaptor.create(TOKEN447);
            adaptor.addChild(root_0, TOKEN447_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(275, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal448=null;
        Token TOKEN449=null;

        Object string_literal448_tree=null;
        Object TOKEN449_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ap");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(278, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:3: ( 'AP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(278,4);
            string_literal448=(Token)match(input,109,FOLLOW_109_in_ap2196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (Object)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            dbg.location(278,9);
            TOKEN449=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN449_tree = (Object)adaptor.create(TOKEN449);
            adaptor.addChild(root_0, TOKEN449_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(278, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ap");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal450=null;
        Token TOKEN451=null;

        Object string_literal450_tree=null;
        Object TOKEN451_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "at");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(281, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:3: ( 'AT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(281,4);
            string_literal450=(Token)match(input,110,FOLLOW_110_in_at2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = (Object)adaptor.create(string_literal450);
            adaptor.addChild(root_0, string_literal450_tree);
            }
            dbg.location(281,9);
            TOKEN451=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN451_tree = (Object)adaptor.create(TOKEN451);
            adaptor.addChild(root_0, TOKEN451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(281, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal452=null;
        Token TOKEN453=null;

        Object string_literal452_tree=null;
        Object TOKEN453_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "be");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(284, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:3: ( 'BE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(284,4);
            string_literal452=(Token)match(input,111,FOLLOW_111_in_be2214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = (Object)adaptor.create(string_literal452);
            adaptor.addChild(root_0, string_literal452_tree);
            }
            dbg.location(284,9);
            TOKEN453=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN453_tree = (Object)adaptor.create(TOKEN453);
            adaptor.addChild(root_0, TOKEN453_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(284, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "be");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal454=null;
        Token TOKEN455=null;

        Object string_literal454_tree=null;
        Object TOKEN455_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bed");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(287, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:4: ( 'BED' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(287,5);
            string_literal454=(Token)match(input,112,FOLLOW_112_in_bed2223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal454_tree = (Object)adaptor.create(string_literal454);
            adaptor.addChild(root_0, string_literal454_tree);
            }
            dbg.location(287,11);
            TOKEN455=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN455_tree = (Object)adaptor.create(TOKEN455);
            adaptor.addChild(root_0, TOKEN455_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(287, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bed");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal456=null;
        Token TOKEN457=null;

        Object string_literal456_tree=null;
        Object TOKEN457_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bedz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(290, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:5: ( 'BEDZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(290,6);
            string_literal456=(Token)match(input,113,FOLLOW_113_in_bedz2232); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (Object)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            dbg.location(290,13);
            TOKEN457=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN457_tree = (Object)adaptor.create(TOKEN457);
            adaptor.addChild(root_0, TOKEN457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(290, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bedz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal458=null;
        Token TOKEN459=null;

        Object string_literal458_tree=null;
        Object TOKEN459_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "beg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(293, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:4: ( 'BEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(293,5);
            string_literal458=(Token)match(input,114,FOLLOW_114_in_beg2241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (Object)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            dbg.location(293,11);
            TOKEN459=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN459_tree = (Object)adaptor.create(TOKEN459);
            adaptor.addChild(root_0, TOKEN459_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(293, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "beg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal460=null;
        Token TOKEN461=null;

        Object string_literal460_tree=null;
        Object TOKEN461_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(296, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:4: ( 'BEM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(296,5);
            string_literal460=(Token)match(input,115,FOLLOW_115_in_bem2250); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (Object)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            dbg.location(296,11);
            TOKEN461=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN461_tree = (Object)adaptor.create(TOKEN461);
            adaptor.addChild(root_0, TOKEN461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(296, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal462=null;
        Token TOKEN463=null;

        Object string_literal462_tree=null;
        Object TOKEN463_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ben");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(299, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:4: ( 'BEN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(299,5);
            string_literal462=(Token)match(input,116,FOLLOW_116_in_ben2259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = (Object)adaptor.create(string_literal462);
            adaptor.addChild(root_0, string_literal462_tree);
            }
            dbg.location(299,11);
            TOKEN463=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN463_tree = (Object)adaptor.create(TOKEN463);
            adaptor.addChild(root_0, TOKEN463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(299, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ben");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal464=null;
        Token TOKEN465=null;

        Object string_literal464_tree=null;
        Object TOKEN465_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ber");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(302, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:4: ( 'BER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(302,5);
            string_literal464=(Token)match(input,117,FOLLOW_117_in_ber2268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (Object)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            dbg.location(302,11);
            TOKEN465=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN465_tree = (Object)adaptor.create(TOKEN465);
            adaptor.addChild(root_0, TOKEN465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(302, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ber");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal466=null;
        Token TOKEN467=null;

        Object string_literal466_tree=null;
        Object TOKEN467_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bez");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(305, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:4: ( 'BEZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(305,5);
            string_literal466=(Token)match(input,118,FOLLOW_118_in_bez2277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = (Object)adaptor.create(string_literal466);
            adaptor.addChild(root_0, string_literal466_tree);
            }
            dbg.location(305,11);
            TOKEN467=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN467_tree = (Object)adaptor.create(TOKEN467);
            adaptor.addChild(root_0, TOKEN467_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(305, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bez");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal468=null;
        Token TOKEN469=null;

        Object string_literal468_tree=null;
        Object TOKEN469_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(308, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:3: ( 'CC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(308,4);
            string_literal468=(Token)match(input,119,FOLLOW_119_in_cc2286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (Object)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            dbg.location(308,9);
            TOKEN469=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN469_tree = (Object)adaptor.create(TOKEN469);
            adaptor.addChild(root_0, TOKEN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(308, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal470=null;
        Token TOKEN471=null;

        Object string_literal470_tree=null;
        Object TOKEN471_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(311, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:3: ( 'CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(311,4);
            string_literal470=(Token)match(input,120,FOLLOW_120_in_cd2295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = (Object)adaptor.create(string_literal470);
            adaptor.addChild(root_0, string_literal470_tree);
            }
            dbg.location(311,9);
            TOKEN471=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN471_tree = (Object)adaptor.create(TOKEN471);
            adaptor.addChild(root_0, TOKEN471_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(311, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal472=null;
        Token TOKEN473=null;

        Object string_literal472_tree=null;
        Object TOKEN473_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(314, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:3: ( 'CS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(314,4);
            string_literal472=(Token)match(input,121,FOLLOW_121_in_cs2304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = (Object)adaptor.create(string_literal472);
            adaptor.addChild(root_0, string_literal472_tree);
            }
            dbg.location(314,9);
            TOKEN473=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN473_tree = (Object)adaptor.create(TOKEN473);
            adaptor.addChild(root_0, TOKEN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(314, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal474=null;
        Token TOKEN475=null;

        Object string_literal474_tree=null;
        Object TOKEN475_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dotok");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(317, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:7: ( 'DO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(317,8);
            string_literal474=(Token)match(input,122,FOLLOW_122_in_dotok2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (Object)adaptor.create(string_literal474);
            adaptor.addChild(root_0, string_literal474_tree);
            }
            dbg.location(317,13);
            TOKEN475=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN475_tree = (Object)adaptor.create(TOKEN475);
            adaptor.addChild(root_0, TOKEN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(317, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dotok");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal476=null;
        Token TOKEN477=null;

        Object string_literal476_tree=null;
        Object TOKEN477_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(320, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:4: ( 'DOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(320,5);
            string_literal476=(Token)match(input,123,FOLLOW_123_in_dod2323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal476_tree = (Object)adaptor.create(string_literal476);
            adaptor.addChild(root_0, string_literal476_tree);
            }
            dbg.location(320,11);
            TOKEN477=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN477_tree = (Object)adaptor.create(TOKEN477);
            adaptor.addChild(root_0, TOKEN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(320, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal478=null;
        Token TOKEN479=null;

        Object string_literal478_tree=null;
        Object TOKEN479_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "doz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(323, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:4: ( 'DOZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(323,5);
            string_literal478=(Token)match(input,124,FOLLOW_124_in_doz2332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (Object)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            dbg.location(323,11);
            TOKEN479=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN479_tree = (Object)adaptor.create(TOKEN479);
            adaptor.addChild(root_0, TOKEN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(323, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "doz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal480=null;
        Token TOKEN481=null;

        Object string_literal480_tree=null;
        Object TOKEN481_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(326, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:3: ( 'DT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(326,4);
            string_literal480=(Token)match(input,125,FOLLOW_125_in_dt2341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (Object)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            dbg.location(326,9);
            TOKEN481=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN481_tree = (Object)adaptor.create(TOKEN481);
            adaptor.addChild(root_0, TOKEN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(326, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal482=null;
        Token TOKEN483=null;

        Object string_literal482_tree=null;
        Object TOKEN483_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dti");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(329, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:4: ( 'DTI' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(329,5);
            string_literal482=(Token)match(input,126,FOLLOW_126_in_dti2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (Object)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            dbg.location(329,11);
            TOKEN483=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti2352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN483_tree = (Object)adaptor.create(TOKEN483);
            adaptor.addChild(root_0, TOKEN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(329, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dti");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal484=null;
        Token TOKEN485=null;

        Object string_literal484_tree=null;
        Object TOKEN485_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dts");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(332, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:4: ( 'DTS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(332,5);
            string_literal484=(Token)match(input,127,FOLLOW_127_in_dts2359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (Object)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            dbg.location(332,11);
            TOKEN485=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts2361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN485_tree = (Object)adaptor.create(TOKEN485);
            adaptor.addChild(root_0, TOKEN485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(332, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dts");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal486=null;
        Token TOKEN487=null;

        Object string_literal486_tree=null;
        Object TOKEN487_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dtx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(335, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:4: ( 'DTX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(335,5);
            string_literal486=(Token)match(input,128,FOLLOW_128_in_dtx2368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = (Object)adaptor.create(string_literal486);
            adaptor.addChild(root_0, string_literal486_tree);
            }
            dbg.location(335,11);
            TOKEN487=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx2370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN487_tree = (Object)adaptor.create(TOKEN487);
            adaptor.addChild(root_0, TOKEN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(335, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dtx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal488=null;
        Token TOKEN489=null;

        Object string_literal488_tree=null;
        Object TOKEN489_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ex");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(338, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:3: ( 'EX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(338,4);
            string_literal488=(Token)match(input,129,FOLLOW_129_in_ex2377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal488_tree = (Object)adaptor.create(string_literal488);
            adaptor.addChild(root_0, string_literal488_tree);
            }
            dbg.location(338,9);
            TOKEN489=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex2379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN489_tree = (Object)adaptor.create(TOKEN489);
            adaptor.addChild(root_0, TOKEN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(338, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ex");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal490=null;
        Token TOKEN491=null;

        Object string_literal490_tree=null;
        Object TOKEN491_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fw");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(341, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:3: ( 'FW' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(341,4);
            string_literal490=(Token)match(input,130,FOLLOW_130_in_fw2386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = (Object)adaptor.create(string_literal490);
            adaptor.addChild(root_0, string_literal490_tree);
            }
            dbg.location(341,9);
            TOKEN491=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw2388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN491_tree = (Object)adaptor.create(TOKEN491);
            adaptor.addChild(root_0, TOKEN491_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(341, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fw");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fw"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal492=null;
        Token TOKEN493=null;

        Object string_literal492_tree=null;
        Object TOKEN493_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:3: ( 'HV' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(344,4);
            string_literal492=(Token)match(input,131,FOLLOW_131_in_hv2395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal492_tree = (Object)adaptor.create(string_literal492);
            adaptor.addChild(root_0, string_literal492_tree);
            }
            dbg.location(344,9);
            TOKEN493=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv2397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN493_tree = (Object)adaptor.create(TOKEN493);
            adaptor.addChild(root_0, TOKEN493_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(344, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal494=null;
        Token TOKEN495=null;

        Object string_literal494_tree=null;
        Object TOKEN495_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(347, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:4: ( 'HVD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(347,5);
            string_literal494=(Token)match(input,132,FOLLOW_132_in_hvd2404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal494_tree = (Object)adaptor.create(string_literal494);
            adaptor.addChild(root_0, string_literal494_tree);
            }
            dbg.location(347,11);
            TOKEN495=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd2406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN495_tree = (Object)adaptor.create(TOKEN495);
            adaptor.addChild(root_0, TOKEN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(347, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;
        Token TOKEN497=null;

        Object string_literal496_tree=null;
        Object TOKEN497_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:4: ( 'HVG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(350,5);
            string_literal496=(Token)match(input,133,FOLLOW_133_in_hvg2413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (Object)adaptor.create(string_literal496);
            adaptor.addChild(root_0, string_literal496_tree);
            }
            dbg.location(350,11);
            TOKEN497=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg2415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN497_tree = (Object)adaptor.create(TOKEN497);
            adaptor.addChild(root_0, TOKEN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(350, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal498=null;
        Token TOKEN499=null;

        Object string_literal498_tree=null;
        Object TOKEN499_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(353, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:4: ( 'HVN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(353,5);
            string_literal498=(Token)match(input,134,FOLLOW_134_in_hvn2422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal498_tree = (Object)adaptor.create(string_literal498);
            adaptor.addChild(root_0, string_literal498_tree);
            }
            dbg.location(353,11);
            TOKEN499=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn2424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN499_tree = (Object)adaptor.create(TOKEN499);
            adaptor.addChild(root_0, TOKEN499_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(353, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal500=null;
        Token TOKEN501=null;

        Object string_literal500_tree=null;
        Object TOKEN501_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "in");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:3: ( 'IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(356,4);
            string_literal500=(Token)match(input,135,FOLLOW_135_in_in2431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (Object)adaptor.create(string_literal500);
            adaptor.addChild(root_0, string_literal500_tree);
            }
            dbg.location(356,9);
            TOKEN501=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in2433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN501_tree = (Object)adaptor.create(TOKEN501);
            adaptor.addChild(root_0, TOKEN501_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(356, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "in");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal502=null;
        Token TOKEN503=null;

        Object string_literal502_tree=null;
        Object TOKEN503_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(359, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:3: ( 'JJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(359,4);
            string_literal502=(Token)match(input,136,FOLLOW_136_in_jj2440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = (Object)adaptor.create(string_literal502);
            adaptor.addChild(root_0, string_literal502_tree);
            }
            dbg.location(359,9);
            TOKEN503=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj2442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN503_tree = (Object)adaptor.create(TOKEN503);
            adaptor.addChild(root_0, TOKEN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(359, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal504=null;
        Token TOKEN505=null;

        Object string_literal504_tree=null;
        Object TOKEN505_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(362, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:4: ( 'JJR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(362,5);
            string_literal504=(Token)match(input,137,FOLLOW_137_in_jjr2449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = (Object)adaptor.create(string_literal504);
            adaptor.addChild(root_0, string_literal504_tree);
            }
            dbg.location(362,11);
            TOKEN505=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr2451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN505_tree = (Object)adaptor.create(TOKEN505);
            adaptor.addChild(root_0, TOKEN505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(362, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal506=null;
        Token TOKEN507=null;

        Object string_literal506_tree=null;
        Object TOKEN507_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(365, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:4: ( 'JJS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(365,5);
            string_literal506=(Token)match(input,138,FOLLOW_138_in_jjs2458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal506_tree = (Object)adaptor.create(string_literal506);
            adaptor.addChild(root_0, string_literal506_tree);
            }
            dbg.location(365,11);
            TOKEN507=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs2460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN507_tree = (Object)adaptor.create(TOKEN507);
            adaptor.addChild(root_0, TOKEN507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(365, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal508=null;
        Token TOKEN509=null;

        Object string_literal508_tree=null;
        Object TOKEN509_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:4: ( 'JJT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(368,5);
            string_literal508=(Token)match(input,139,FOLLOW_139_in_jjt2467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal508_tree = (Object)adaptor.create(string_literal508);
            adaptor.addChild(root_0, string_literal508_tree);
            }
            dbg.location(368,11);
            TOKEN509=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt2469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN509_tree = (Object)adaptor.create(TOKEN509);
            adaptor.addChild(root_0, TOKEN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(368, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal510=null;
        Token TOKEN511=null;

        Object string_literal510_tree=null;
        Object TOKEN511_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "md");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(371, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:3: ( 'MD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(371,4);
            string_literal510=(Token)match(input,140,FOLLOW_140_in_md2476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal510_tree = (Object)adaptor.create(string_literal510);
            adaptor.addChild(root_0, string_literal510_tree);
            }
            dbg.location(371,9);
            TOKEN511=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md2478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN511_tree = (Object)adaptor.create(TOKEN511);
            adaptor.addChild(root_0, TOKEN511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(371, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "md");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal512=null;
        Token TOKEN513=null;

        Object string_literal512_tree=null;
        Object TOKEN513_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(374, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:3: ( 'NC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(374,4);
            string_literal512=(Token)match(input,141,FOLLOW_141_in_nc2485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal512_tree = (Object)adaptor.create(string_literal512);
            adaptor.addChild(root_0, string_literal512_tree);
            }
            dbg.location(374,9);
            TOKEN513=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc2487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN513_tree = (Object)adaptor.create(TOKEN513);
            adaptor.addChild(root_0, TOKEN513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(374, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal514=null;
        Token TOKEN515=null;

        Object string_literal514_tree=null;
        Object TOKEN515_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(377, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:3: ( 'NN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(377,4);
            string_literal514=(Token)match(input,142,FOLLOW_142_in_nn2494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal514_tree = (Object)adaptor.create(string_literal514);
            adaptor.addChild(root_0, string_literal514_tree);
            }
            dbg.location(377,9);
            TOKEN515=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn2496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN515_tree = (Object)adaptor.create(TOKEN515);
            adaptor.addChild(root_0, TOKEN515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(377, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal516=null;
        Token TOKEN517=null;

        Object string_literal516_tree=null;
        Object TOKEN517_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:8: ( 'NN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(380,9);
            string_literal516=(Token)match(input,143,FOLLOW_143_in_nn_poss2503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal516_tree = (Object)adaptor.create(string_literal516);
            adaptor.addChild(root_0, string_literal516_tree);
            }
            dbg.location(380,15);
            TOKEN517=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss2505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN517_tree = (Object)adaptor.create(TOKEN517);
            adaptor.addChild(root_0, TOKEN517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(380, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal518=null;
        Token TOKEN519=null;

        Object string_literal518_tree=null;
        Object TOKEN519_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(383, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:4: ( 'NNS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(383,5);
            string_literal518=(Token)match(input,144,FOLLOW_144_in_nns2512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (Object)adaptor.create(string_literal518);
            adaptor.addChild(root_0, string_literal518_tree);
            }
            dbg.location(383,11);
            TOKEN519=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns2514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN519_tree = (Object)adaptor.create(TOKEN519);
            adaptor.addChild(root_0, TOKEN519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(383, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal520=null;
        Token TOKEN521=null;

        Object string_literal520_tree=null;
        Object TOKEN521_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(386, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:9: ( 'NNS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(386,10);
            string_literal520=(Token)match(input,145,FOLLOW_145_in_nns_poss2521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = (Object)adaptor.create(string_literal520);
            adaptor.addChild(root_0, string_literal520_tree);
            }
            dbg.location(386,17);
            TOKEN521=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss2523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN521_tree = (Object)adaptor.create(TOKEN521);
            adaptor.addChild(root_0, TOKEN521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(386, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal522=null;
        Token TOKEN523=null;

        Object string_literal522_tree=null;
        Object TOKEN523_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(389, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:3: ( 'NP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(389,4);
            string_literal522=(Token)match(input,146,FOLLOW_146_in_np2530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (Object)adaptor.create(string_literal522);
            adaptor.addChild(root_0, string_literal522_tree);
            }
            dbg.location(389,9);
            TOKEN523=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np2532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN523_tree = (Object)adaptor.create(TOKEN523);
            adaptor.addChild(root_0, TOKEN523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(389, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal524=null;
        Token TOKEN525=null;

        Object string_literal524_tree=null;
        Object TOKEN525_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(393, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:4: ( 'NNP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(393,5);
            string_literal524=(Token)match(input,147,FOLLOW_147_in_nnp2540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal524_tree = (Object)adaptor.create(string_literal524);
            adaptor.addChild(root_0, string_literal524_tree);
            }
            dbg.location(393,11);
            TOKEN525=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp2542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN525_tree = (Object)adaptor.create(TOKEN525);
            adaptor.addChild(root_0, TOKEN525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(393, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal526=null;
        Token TOKEN527=null;

        Object string_literal526_tree=null;
        Object TOKEN527_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(397, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:8: ( 'NP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(397,9);
            string_literal526=(Token)match(input,148,FOLLOW_148_in_np_poss2550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal526_tree = (Object)adaptor.create(string_literal526);
            adaptor.addChild(root_0, string_literal526_tree);
            }
            dbg.location(397,15);
            TOKEN527=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss2552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN527_tree = (Object)adaptor.create(TOKEN527);
            adaptor.addChild(root_0, TOKEN527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(397, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal528=null;
        Token TOKEN529=null;

        Object string_literal528_tree=null;
        Object TOKEN529_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(400, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:4: ( 'NPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(400,5);
            string_literal528=(Token)match(input,149,FOLLOW_149_in_nps2559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = (Object)adaptor.create(string_literal528);
            adaptor.addChild(root_0, string_literal528_tree);
            }
            dbg.location(400,11);
            TOKEN529=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps2561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN529_tree = (Object)adaptor.create(TOKEN529);
            adaptor.addChild(root_0, TOKEN529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(400, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal530=null;
        Token TOKEN531=null;

        Object string_literal530_tree=null;
        Object TOKEN531_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(403, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:9: ( 'NPS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(403,10);
            string_literal530=(Token)match(input,150,FOLLOW_150_in_nps_poss2568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal530_tree = (Object)adaptor.create(string_literal530);
            adaptor.addChild(root_0, string_literal530_tree);
            }
            dbg.location(403,17);
            TOKEN531=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss2570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN531_tree = (Object)adaptor.create(TOKEN531);
            adaptor.addChild(root_0, TOKEN531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(403, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(406, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:3: ( 'NR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(406,4);
            string_literal532=(Token)match(input,151,FOLLOW_151_in_nr2577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            dbg.location(406,9);
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr2579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(406, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "od");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(409, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:3: ( 'OD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(409,4);
            string_literal534=(Token)match(input,152,FOLLOW_152_in_od2586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            dbg.location(409,9);
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od2588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(409, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "od");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(412, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:3: ( 'PN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(412,4);
            string_literal536=(Token)match(input,153,FOLLOW_153_in_pn2595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            dbg.location(412,9);
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn2597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(412, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(415, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:8: ( 'PN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(415,9);
            string_literal538=(Token)match(input,154,FOLLOW_154_in_pn_poss2604); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            dbg.location(415,15);
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss2606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(415, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:8: ( 'PP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(418,9);
            string_literal540=(Token)match(input,155,FOLLOW_155_in_pp_poss2613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            dbg.location(418,15);
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss2615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(418, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:13: ( 'PP$$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(421,14);
            string_literal542=(Token)match(input,156,FOLLOW_156_in_pp_poss_poss2622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            dbg.location(421,21);
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss2624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(421, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(424, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: ( 'PPL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(424,5);
            string_literal544=(Token)match(input,157,FOLLOW_157_in_ppl2631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            dbg.location(424,11);
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl2633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(424, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppls");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(427, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:5: ( 'PPLS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(427,6);
            string_literal546=(Token)match(input,158,FOLLOW_158_in_ppls2640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            dbg.location(427,13);
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls2642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(427, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppls");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppls"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(430, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:4: ( 'PPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(430,5);
            string_literal548=(Token)match(input,159,FOLLOW_159_in_ppo2649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            dbg.location(430,11);
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo2651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(430, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(433, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: ( 'PPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(433,5);
            string_literal550=(Token)match(input,160,FOLLOW_160_in_pps2658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            dbg.location(433,11);
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps2660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(433, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(436, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:5: ( 'PPSS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(436,6);
            string_literal552=(Token)match(input,161,FOLLOW_161_in_ppss2667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            dbg.location(436,13);
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss2669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(436, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(439, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:3: ( 'QL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(439,4);
            string_literal554=(Token)match(input,162,FOLLOW_162_in_ql2676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            dbg.location(439,9);
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql2678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(439, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "qlp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(442, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:4: ( 'QLP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(442,5);
            string_literal556=(Token)match(input,163,FOLLOW_163_in_qlp2685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            dbg.location(442,11);
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp2687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(442, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qlp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(445, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:3: ( 'RB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(445,4);
            string_literal558=(Token)match(input,164,FOLLOW_164_in_rb2694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            dbg.location(445,9);
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb2696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(445, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(448, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:4: ( 'RBR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(448,5);
            string_literal560=(Token)match(input,165,FOLLOW_165_in_rbr2703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            dbg.location(448,11);
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr2705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(448, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(451, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: ( 'RBT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(451,5);
            string_literal562=(Token)match(input,166,FOLLOW_166_in_rbt2712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            dbg.location(451,11);
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt2714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(451, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbt"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(454, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:3: ( 'RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(454,4);
            string_literal564=(Token)match(input,167,FOLLOW_167_in_rn2721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            dbg.location(454,9);
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn2723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(454, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(457, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:3: ( 'RP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(457,4);
            string_literal566=(Token)match(input,168,FOLLOW_168_in_rp2730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            dbg.location(457,9);
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp2732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(457, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(460, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:5: ( 'SYM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(460,7);
            string_literal568=(Token)match(input,169,FOLLOW_169_in_sym2741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            dbg.location(460,13);
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym2743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(460, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "to");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(463, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:3: ( 'TO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(463,4);
            string_literal570=(Token)match(input,170,FOLLOW_170_in_to2750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            dbg.location(463,9);
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to2752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(463, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "to");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "uh");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(466, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:3: ( 'UH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(466,4);
            string_literal572=(Token)match(input,171,FOLLOW_171_in_uh2759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            dbg.location(466,9);
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh2761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(466, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "uh");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(469, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:3: ( 'VB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(469,4);
            string_literal574=(Token)match(input,172,FOLLOW_172_in_vb2768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            dbg.location(469,9);
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb2770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(469, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(472, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:4: ( 'VBD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(472,5);
            string_literal576=(Token)match(input,173,FOLLOW_173_in_vbd2777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            dbg.location(472,11);
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd2779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(472, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(475, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:4: ( 'VBG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(475,5);
            string_literal578=(Token)match(input,174,FOLLOW_174_in_vbg2786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            dbg.location(475,11);
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg2788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(475, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(478, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:4: ( 'VBN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(478,5);
            string_literal580=(Token)match(input,175,FOLLOW_175_in_vbn2795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            dbg.location(478,11);
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn2797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(478, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(481, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:4: ( 'VBZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(481,5);
            string_literal582=(Token)match(input,176,FOLLOW_176_in_vbz2804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            dbg.location(481,11);
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz2806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(481, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wdt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(484, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:4: ( 'WDT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(484,5);
            string_literal584=(Token)match(input,177,FOLLOW_177_in_wdt2813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            dbg.location(484,11);
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt2815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(484, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wdt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(487, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:8: ( 'WP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(487,9);
            string_literal586=(Token)match(input,178,FOLLOW_178_in_wp_poss2822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            dbg.location(487,15);
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss2824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(487, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wpo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(491, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:4: ( 'WPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(491,5);
            string_literal588=(Token)match(input,179,FOLLOW_179_in_wpo2832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            dbg.location(491,11);
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo2834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(491, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wpo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(494, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:4: ( 'WPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(494,5);
            string_literal590=(Token)match(input,180,FOLLOW_180_in_wps2841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            dbg.location(494,11);
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(494, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(498, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:4: ( 'WQL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(498,5);
            string_literal592=(Token)match(input,181,FOLLOW_181_in_wql2851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            dbg.location(498,11);
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql2853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(498, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(501, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:4: ( 'WRB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(501,5);
            string_literal594=(Token)match(input,182,FOLLOW_182_in_wrb2860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            dbg.location(501,11);
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(501, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: ( sentence1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: sentence1
        {
        dbg.location(32,13);
        pushFollow(FOLLOW_sentence1_in_synpred2_ChemicalChunker192);
        sentence1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: ( sentence2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: sentence2
        {
        dbg.location(32,23);
        pushFollow(FOLLOW_sentence2_in_synpred3_ChemicalChunker194);
        sentence2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: ( sentence3 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: sentence3
        {
        dbg.location(32,33);
        pushFollow(FOLLOW_sentence3_in_synpred4_ChemicalChunker196);
        sentence3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:62: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:62: adv
        {
        dbg.location(32,62);
        pushFollow(FOLLOW_adv_in_synpred8_ChemicalChunker209);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: nounphrase
        {
        dbg.location(34,4);
        pushFollow(FOLLOW_nounphrase_in_synpred9_ChemicalChunker220);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: verbphrase
        {
        dbg.location(34,16);
        pushFollow(FOLLOW_verbphrase_in_synpred10_ChemicalChunker223);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: prepphrase
        {
        dbg.location(34,28);
        pushFollow(FOLLOW_prepphrase_in_synpred11_ChemicalChunker226);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: verbphrase
        {
        dbg.location(36,4);
        pushFollow(FOLLOW_verbphrase_in_synpred12_ChemicalChunker260);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: nounphrase
        {
        dbg.location(36,16);
        pushFollow(FOLLOW_nounphrase_in_synpred13_ChemicalChunker263);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: prepphrase
        {
        dbg.location(36,28);
        pushFollow(FOLLOW_prepphrase_in_synpred14_ChemicalChunker266);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: prepphrase
        {
        dbg.location(38,4);
        pushFollow(FOLLOW_prepphrase_in_synpred15_ChemicalChunker300);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:17: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:17: nounphrase
        {
        dbg.location(38,17);
        pushFollow(FOLLOW_nounphrase_in_synpred16_ChemicalChunker304);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: verbphrase
        {
        dbg.location(38,28);
        pushFollow(FOLLOW_verbphrase_in_synpred17_ChemicalChunker306);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:19: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:19: adj
        {
        dbg.location(40,19);
        pushFollow(FOLLOW_adj_in_synpred19_ChemicalChunker346);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:30: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:30: noun
        {
        dbg.location(40,30);
        pushFollow(FOLLOW_noun_in_synpred21_ChemicalChunker353);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( cc )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: cc
        {
        dbg.location(40,37);
        pushFollow(FOLLOW_cc_in_synpred22_ChemicalChunker357);
        cc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred25_ChemicalChunker
    public final void synpred25_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:53: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:53: adj
        {
        dbg.location(40,53);
        pushFollow(FOLLOW_adj_in_synpred25_ChemicalChunker367);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( cc )? ( comma )? ( cc )? ( adj )+ noun
        {
        dbg.location(40,37);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:37: ( cc )?
        int alt70=2;
        try { dbg.enterSubRule(70);
        try { dbg.enterDecision(70);

        int LA70_0 = input.LA(1);

        if ( (LA70_0==119) ) {
            int LA70_1 = input.LA(2);

            if ( (LA70_1==TOKEN) ) {
                int LA70_3 = input.LA(3);

                if ( (synpred22_ChemicalChunker()) ) {
                    alt70=1;
                }
            }
        }
        } finally {dbg.exitDecision(70);}

        switch (alt70) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(40,37);
                pushFollow(FOLLOW_cc_in_synpred26_ChemicalChunker357);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(70);}

        dbg.location(40,41);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:41: ( comma )?
        int alt71=2;
        try { dbg.enterSubRule(71);
        try { dbg.enterDecision(71);

        int LA71_0 = input.LA(1);

        if ( (LA71_0==96) ) {
            alt71=1;
        }
        } finally {dbg.exitDecision(71);}

        switch (alt71) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(40,41);
                pushFollow(FOLLOW_comma_in_synpred26_ChemicalChunker360);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(71);}

        dbg.location(40,48);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:48: ( cc )?
        int alt72=2;
        try { dbg.enterSubRule(72);
        try { dbg.enterDecision(72);

        int LA72_0 = input.LA(1);

        if ( (LA72_0==119) ) {
            alt72=1;
        }
        } finally {dbg.exitDecision(72);}

        switch (alt72) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(40,48);
                pushFollow(FOLLOW_cc_in_synpred26_ChemicalChunker363);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(72);}

        dbg.location(40,53);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:53: ( adj )+
        int cnt73=0;
        try { dbg.enterSubRule(73);

        loop73:
        do {
            int alt73=2;
            try { dbg.enterDecision(73);

            try {
                isCyclicDecision = true;
                alt73 = dfa73.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    dbg.location(40,53);
        	    pushFollow(FOLLOW_adj_in_synpred26_ChemicalChunker367);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt73 >= 1 ) break loop73;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(73, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt73++;
        } while (true);
        } finally {dbg.exitSubRule(73);}

        dbg.location(40,58);
        pushFollow(FOLLOW_noun_in_synpred26_ChemicalChunker370);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:69: ( prepphraseOf )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:69: prepphraseOf
        {
        dbg.location(40,69);
        pushFollow(FOLLOW_prepphraseOf_in_synpred27_ChemicalChunker378);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:83: ( prepphraseIN )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:83: prepphraseIN
        {
        dbg.location(40,83);
        pushFollow(FOLLOW_prepphraseIN_in_synpred28_ChemicalChunker381);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:15: ( to )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:15: to
        {
        dbg.location(43,15);
        pushFollow(FOLLOW_to_in_synpred29_ChemicalChunker395);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: ( inAll )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: inAll
        {
        dbg.location(43,19);
        pushFollow(FOLLOW_inAll_in_synpred30_ChemicalChunker398);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:46: ( verb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:46: verb
        {
        dbg.location(43,46);
        pushFollow(FOLLOW_verb_in_synpred34_ChemicalChunker411);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:52: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:52: adv
        {
        dbg.location(43,52);
        pushFollow(FOLLOW_adv_in_synpred35_ChemicalChunker414);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:57: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:57: adj
        {
        dbg.location(43,57);
        pushFollow(FOLLOW_adj_in_synpred36_ChemicalChunker417);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
        {
        dbg.location(43,36);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( adv )*
        try { dbg.enterSubRule(74);

        loop74:
        do {
            int alt74=2;
            try { dbg.enterDecision(74);

            int LA74_0 = input.LA(1);

            if ( ((LA74_0>=164 && LA74_0<=166)) ) {
                alt74=1;
            }


            } finally {dbg.exitDecision(74);}

            switch (alt74) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(43,36);
        	    pushFollow(FOLLOW_adv_in_synpred37_ChemicalChunker405);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop74;
            }
        } while (true);
        } finally {dbg.exitSubRule(74);}

        dbg.location(43,41);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:41: ( adj )?
        int alt75=2;
        try { dbg.enterSubRule(75);
        try { dbg.enterDecision(75);

        int LA75_0 = input.LA(1);

        if ( ((LA75_0>=11 && LA75_0<=12)||(LA75_0>=136 && LA75_0<=139)) ) {
            alt75=1;
        }
        } finally {dbg.exitDecision(75);}

        switch (alt75) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(43,41);
                pushFollow(FOLLOW_adj_in_synpred37_ChemicalChunker408);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(75);}

        dbg.location(43,46);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:46: ( verb )+
        int cnt76=0;
        try { dbg.enterSubRule(76);

        loop76:
        do {
            int alt76=2;
            try { dbg.enterDecision(76);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=52 && LA76_0<=55)||(LA76_0>=58 && LA76_0<=65)||LA76_0==67||(LA76_0>=69 && LA76_0<=72)||LA76_0==74||LA76_0==76||(LA76_0>=78 && LA76_0<=81)||LA76_0==83||(LA76_0>=85 && LA76_0<=87)||(LA76_0>=89 && LA76_0<=90)||(LA76_0>=92 && LA76_0<=94)||LA76_0==173||(LA76_0>=175 && LA76_0<=176)) ) {
                alt76=1;
            }


            } finally {dbg.exitDecision(76);}

            switch (alt76) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    dbg.location(43,46);
        	    pushFollow(FOLLOW_verb_in_synpred37_ChemicalChunker411);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt76 >= 1 ) break loop76;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(76, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt76++;
        } while (true);
        } finally {dbg.exitSubRule(76);}

        dbg.location(43,52);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:52: ( adv )*
        try { dbg.enterSubRule(77);

        loop77:
        do {
            int alt77=2;
            try { dbg.enterDecision(77);

            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=164 && LA77_0<=166)) ) {
                alt77=1;
            }


            } finally {dbg.exitDecision(77);}

            switch (alt77) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(43,52);
        	    pushFollow(FOLLOW_adv_in_synpred37_ChemicalChunker414);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop77;
            }
        } while (true);
        } finally {dbg.exitSubRule(77);}

        dbg.location(43,57);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:57: ( adj )?
        int alt78=2;
        try { dbg.enterSubRule(78);
        try { dbg.enterDecision(78);

        int LA78_0 = input.LA(1);

        if ( ((LA78_0>=11 && LA78_0<=12)||(LA78_0>=136 && LA78_0<=139)) ) {
            alt78=1;
        }
        } finally {dbg.exitDecision(78);}

        switch (alt78) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(43,57);
                pushFollow(FOLLOW_adj_in_synpred37_ChemicalChunker417);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(78);}


        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:65: ( ( cc )? ( comma )? prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:65: ( cc )? ( comma )? prepphrase
        {
        dbg.location(43,65);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:65: ( cc )?
        int alt79=2;
        try { dbg.enterSubRule(79);
        try { dbg.enterDecision(79);

        int LA79_0 = input.LA(1);

        if ( (LA79_0==119) ) {
            alt79=1;
        }
        } finally {dbg.exitDecision(79);}

        switch (alt79) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(43,65);
                pushFollow(FOLLOW_cc_in_synpred40_ChemicalChunker423);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(79);}

        dbg.location(43,69);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:69: ( comma )?
        int alt80=2;
        try { dbg.enterSubRule(80);
        try { dbg.enterDecision(80);

        int LA80_0 = input.LA(1);

        if ( (LA80_0==96) ) {
            alt80=1;
        }
        } finally {dbg.exitDecision(80);}

        switch (alt80) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(43,69);
                pushFollow(FOLLOW_comma_in_synpred40_ChemicalChunker426);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(80);}

        dbg.location(43,76);
        pushFollow(FOLLOW_prepphrase_in_synpred40_ChemicalChunker429);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred77_ChemicalChunker
    public final void synpred77_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:12: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:12: unnamedmolecule
        {
        dbg.location(47,12);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred77_ChemicalChunker529);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_ChemicalChunker

    // $ANTLR start synpred78_ChemicalChunker
    public final void synpred78_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:28: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:28: molecule
        {
        dbg.location(47,28);
        pushFollow(FOLLOW_molecule_in_synpred78_ChemicalChunker531);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_ChemicalChunker

    // $ANTLR start synpred80_ChemicalChunker
    public final void synpred80_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:45: ( nn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:45: nn
        {
        dbg.location(47,45);
        pushFollow(FOLLOW_nn_in_synpred80_ChemicalChunker535);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_ChemicalChunker

    // $ANTLR start synpred83_ChemicalChunker
    public final void synpred83_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:59: ( apparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:59: apparatus
        {
        dbg.location(47,59);
        pushFollow(FOLLOW_apparatus_in_synpred83_ChemicalChunker541);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:100: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:100: measurements
        {
        dbg.location(47,100);
        pushFollow(FOLLOW_measurements_in_synpred87_ChemicalChunker549);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:67: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:67: amount
        {
        dbg.location(48,67);
        pushFollow(FOLLOW_amount_in_synpred108_ChemicalChunker592);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:74: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:74: cd
        {
        dbg.location(48,74);
        pushFollow(FOLLOW_cd_in_synpred109_ChemicalChunker594);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:87: ( mixture )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:87: mixture
        {
        dbg.location(48,87);
        pushFollow(FOLLOW_mixture_in_synpred112_ChemicalChunker600);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:16: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:16: measurements
        {
        dbg.location(50,16);
        pushFollow(FOLLOW_measurements_in_synpred113_ChemicalChunker613);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:29: ( md )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:29: md
        {
        dbg.location(50,29);
        pushFollow(FOLLOW_md_in_synpred114_ChemicalChunker615);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: ( oscarCompound )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: oscarCompound
        {
        dbg.location(50,37);
        pushFollow(FOLLOW_oscarCompound_in_synpred116_ChemicalChunker619);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:51: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:51: molecule
        {
        dbg.location(50,51);
        pushFollow(FOLLOW_molecule_in_synpred117_ChemicalChunker621);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: unnamedmolecule
        {
        dbg.location(50,60);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred118_ChemicalChunker623);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:85: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:85: cd
        {
        dbg.location(50,85);
        pushFollow(FOLLOW_cd_in_synpred121_ChemicalChunker629);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: noun
        {
        dbg.location(50,88);
        pushFollow(FOLLOW_noun_in_synpred122_ChemicalChunker631);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:98: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:98: cd
        {
        dbg.location(50,98);
        pushFollow(FOLLOW_cd_in_synpred124_ChemicalChunker635);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:107: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:107: adj
        {
        dbg.location(50,107);
        pushFollow(FOLLOW_adj_in_synpred126_ChemicalChunker639);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred134_ChemicalChunker
    public final void synpred134_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:5: ( prepphraseOther )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:5: prepphraseOther
        {
        dbg.location(57,5);
        pushFollow(FOLLOW_prepphraseOther_in_synpred134_ChemicalChunker684);
        prepphraseOther();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_ChemicalChunker

    // $ANTLR start synpred135_ChemicalChunker
    public final void synpred135_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:21: ( prepphraseTemp )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:21: prepphraseTemp
        {
        dbg.location(57,21);
        pushFollow(FOLLOW_prepphraseTemp_in_synpred135_ChemicalChunker686);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:4: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:4: adv
        {
        dbg.location(65,4);
        pushFollow(FOLLOW_adv_in_synpred139_ChemicalChunker766);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred140_ChemicalChunker
    public final void synpred140_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:8: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:8: adj
        {
        dbg.location(65,8);
        pushFollow(FOLLOW_adj_in_synpred140_ChemicalChunker768);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:19: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:19: adv
        {
        dbg.location(71,19);
        pushFollow(FOLLOW_adv_in_synpred162_ChemicalChunker894);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred163_ChemicalChunker
    public final void synpred163_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: adj
        {
        dbg.location(71,23);
        pushFollow(FOLLOW_adj_in_synpred163_ChemicalChunker896);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:18: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:18: adj
        {
        dbg.location(80,18);
        pushFollow(FOLLOW_adj_in_synpred169_ChemicalChunker1057);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:22: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:22: jj
        {
        dbg.location(80,22);
        pushFollow(FOLLOW_jj_in_synpred170_ChemicalChunker1059);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:30: ( nnapparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:30: nnapparatus
        {
        dbg.location(80,30);
        pushFollow(FOLLOW_nnapparatus_in_synpred172_ChemicalChunker1065);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:18: ( oscarCompound1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:18: oscarCompound1
        {
        dbg.location(85,18);
        pushFollow(FOLLOW_oscarCompound1_in_synpred176_ChemicalChunker1111);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:33: ( oscarCompound2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:33: oscarCompound2
        {
        dbg.location(85,33);
        pushFollow(FOLLOW_oscarCompound2_in_synpred177_ChemicalChunker1113);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:48: ( oscarCompound3 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:48: oscarCompound3
        {
        dbg.location(85,48);
        pushFollow(FOLLOW_oscarCompound3_in_synpred178_ChemicalChunker1115);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:72: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:72: rrb
        {
        dbg.location(85,72);
        pushFollow(FOLLOW_rrb_in_synpred179_ChemicalChunker1120);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:26: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:26: oscarcm
        {
        dbg.location(87,26);
        pushFollow(FOLLOW_oscarcm_in_synpred180_ChemicalChunker1155);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:18: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:18: amount
        {
        dbg.location(92,18);
        pushFollow(FOLLOW_amount_in_synpred182_ChemicalChunker1219);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:11: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:11: amount
        {
        dbg.location(100,11);
        pushFollow(FOLLOW_amount_in_synpred186_ChemicalChunker1294);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: jj
        {
        dbg.location(102,30);
        pushFollow(FOLLOW_jj_in_synpred188_ChemicalChunker1312);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( ( jj )? noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( jj )? noun
        {
        dbg.location(102,30);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:30: ( jj )?
        int alt81=2;
        try { dbg.enterSubRule(81);
        try { dbg.enterDecision(81);

        int LA81_0 = input.LA(1);

        if ( (LA81_0==136) ) {
            int LA81_1 = input.LA(2);

            if ( (LA81_1==TOKEN) ) {
                int LA81_3 = input.LA(3);

                if ( (synpred188_ChemicalChunker()) ) {
                    alt81=1;
                }
            }
        }
        } finally {dbg.exitDecision(81);}

        switch (alt81) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                dbg.location(102,30);
                pushFollow(FOLLOW_jj_in_synpred189_ChemicalChunker1312);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(81);}

        dbg.location(102,34);
        pushFollow(FOLLOW_noun_in_synpred189_ChemicalChunker1315);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:3: ( unnamedmoleculeamount1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:3: unnamedmoleculeamount1
        {
        dbg.location(105,3);
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred190_ChemicalChunker1326);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred77_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred140_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred134_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred83_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred78_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred80_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred135_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred163_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA73 dfa73 = new DFA73(this);
    static final String DFA2_eotS =
        "\146\uffff";
    static final String DFA2_eofS =
        "\1\1\145\uffff";
    static final String DFA2_minS =
        "\1\12\1\uffff\141\0\3\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\141\0\3\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\4\141\uffff\1\1\1\2\1\3";
    static final String DFA2_specialS =
        "\2\uffff\1\127\1\16\1\40\1\107\1\103\1\133\1\100\1\56\1\76\1\113"+
        "\1\1\1\121\1\3\1\116\1\7\1\41\1\30\1\15\1\25\1\35\1\44\1\52\1\54"+
        "\1\61\1\70\1\64\1\74\1\102\1\77\1\105\1\104\1\112\1\60\1\55\1\130"+
        "\1\75\1\63\1\67\1\5\1\46\1\14\1\2\1\117\1\10\1\122\1\32\1\50\1\4"+
        "\1\131\1\11\1\47\1\36\1\111\1\71\1\110\1\20\1\73\1\17\1\13\1\123"+
        "\1\31\1\22\1\114\1\126\1\136\1\120\1\125\1\137\1\135\1\6\1\23\1"+
        "\26\1\21\1\37\1\45\1\34\1\57\1\51\1\72\1\66\1\65\1\106\1\101\1\115"+
        "\1\140\1\134\1\132\1\53\1\62\1\33\1\43\1\42\1\27\1\24\1\0\1\12\1"+
        "\124\3\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\16\1\12\1\13\1\51\2\uffff\1\61\1\62\1\60\1\66\1\67\1\76\1"+
            "\77\1\63\1\75\1\70\1\72\1\64\1\65\1\74\1\73\1\71\1\20\1\23\2"+
            "\uffff\1\24\1\25\1\uffff\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
            "\1\35\1\36\1\37\1\40\1\41\1\17\1\103\1\104\1\105\1\106\1\55"+
            "\1\52\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\42\1"+
            "\117\1\43\1\120\1\121\1\122\1\123\1\uffff\1\124\1\uffff\1\125"+
            "\1\uffff\1\126\1\127\1\130\1\131\1\uffff\1\132\1\uffff\1\133"+
            "\1\134\1\135\1\uffff\1\136\1\137\1\50\1\140\1\141\1\142\1\uffff"+
            "\1\1\3\uffff\1\1\3\uffff\1\53\16\uffff\1\1\1\15\4\uffff\1\5"+
            "\11\uffff\1\57\1\6\1\7\1\10\1\11\1\14\1\uffff\1\21\1\uffff\1"+
            "\22\2\uffff\1\54\20\uffff\1\2\1\3\1\4\3\uffff\1\56\2\uffff\1"+
            "\100\1\uffff\1\102\1\101\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 32:12: ( sentence1 | sentence2 | sentence3 )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\14\uffff";
    static final String DFA3_eofS =
        "\1\1\13\uffff";
    static final String DFA3_minS =
        "\1\12\1\uffff\3\11\3\uffff\3\0\1\uffff";
    static final String DFA3_maxS =
        "\1\u00b4\1\uffff\3\11\3\uffff\3\0\1\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\5\3\uffff\1\1\1\2\1\3\3\uffff\1\4";
    static final String DFA3_specialS =
        "\10\uffff\1\1\1\2\1\0\1\uffff}>";
    static final String[] DFA3_transitionS = {
            "\4\1\2\uffff\22\1\2\uffff\2\1\1\uffff\42\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff"+
            "\1\5\3\uffff\1\7\3\uffff\1\1\16\uffff\1\6\1\1\4\uffff\1\1\11"+
            "\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\1\2"+
            "\1\3\1\4\3\uffff\1\1\2\uffff\1\1\1\uffff\6\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 32:47: ( comma | cc | stop | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\57\uffff";
    static final String DFA4_eofS =
        "\1\1\56\uffff";
    static final String DFA4_minS =
        "\1\12\1\uffff\54\0\1\uffff";
    static final String DFA4_maxS =
        "\1\u00b4\1\uffff\54\0\1\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA4_specialS =
        "\2\uffff\1\16\1\11\1\50\1\7\1\1\1\41\1\23\1\44\1\26\1\35\1\45\1"+
        "\27\1\51\1\0\1\20\1\36\1\46\1\33\1\21\1\34\1\6\1\17\1\32\1\53\1"+
        "\5\1\15\1\31\1\30\1\47\1\42\1\24\1\10\1\40\1\12\1\22\1\13\1\2\1"+
        "\37\1\4\1\14\1\25\1\52\1\3\1\43\1\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\16\1\11\1\12\1\51\2\uffff\20\1\1\20\1\23\2\uffff\1\24\1\25"+
            "\1\uffff\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1"+
            "\40\1\41\1\17\4\1\1\55\1\52\10\1\1\42\1\1\1\43\4\1\1\uffff\1"+
            "\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\2"+
            "\1\1\50\3\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\53\16\uffff\1"+
            "\1\1\14\4\uffff\1\13\11\uffff\1\1\1\5\1\6\1\7\1\10\1\15\1\uffff"+
            "\1\21\1\uffff\1\22\2\uffff\1\54\20\uffff\1\2\1\3\1\4\3\uffff"+
            "\1\1\2\uffff\1\1\1\uffff\2\1\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 34:4: ( nounphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\147\uffff";
    static final String DFA5_eofS =
        "\1\34\146\uffff";
    static final String DFA5_minS =
        "\1\12\33\0\47\uffff\43\0\1\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\33\0\47\uffff\43\0\1\uffff";
    static final String DFA5_acceptS =
        "\34\uffff\1\2\111\uffff\1\1";
    static final String DFA5_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\47\uffff\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\34\1\10\1\11\1\34\2\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1"+
            "\32\1\16\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\2\34\2\uffff"+
            "\2\34\1\uffff\15\34\1\106\1\107\1\110\1\111\2\34\1\112\1\113"+
            "\1\114\1\115\1\116\1\117\1\120\1\121\1\34\1\122\1\34\1\123\1"+
            "\124\1\125\1\126\1\uffff\1\127\1\uffff\1\130\1\uffff\1\131\1"+
            "\132\1\133\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff"+
            "\1\141\1\142\1\34\1\143\1\144\1\145\1\uffff\1\34\3\uffff\1\34"+
            "\3\uffff\1\34\16\uffff\2\34\4\uffff\1\34\11\uffff\1\12\1\4\1"+
            "\5\1\6\1\7\1\34\1\uffff\1\34\1\uffff\1\34\2\uffff\1\34\20\uffff"+
            "\1\1\1\2\1\3\3\uffff\1\33\2\uffff\1\103\1\uffff\1\105\1\104"+
            "\4\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 34:16: ( verbphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_11 = input.LA(1);

                         
                        int index5_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA6_eotS =
        "\147\uffff";
    static final String DFA6_eofS =
        "\1\1\146\uffff";
    static final String DFA6_minS =
        "\1\12\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\44\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\44\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\2\144\uffff\1\1";
    static final String DFA6_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\40\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\15\1\16\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1"+
            "\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff"+
            "\2\1\1\uffff\42\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff"+
            "\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\3\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\1\1\1\20\4\uffff\1\10\11\uffff\1\62\1\11\1\12"+
            "\1\13\1\14\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff"+
            "\1\4\1\5\1\6\3\uffff\1\61\2\uffff\1\1\1\uffff\6\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 34:28: ( prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_4 = input.LA(1);

                         
                        int index6_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA6_8 = input.LA(1);

                         
                        int index6_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA6_9 = input.LA(1);

                         
                        int index6_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA6_10 = input.LA(1);

                         
                        int index6_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA6_11 = input.LA(1);

                         
                        int index6_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA6_12 = input.LA(1);

                         
                        int index6_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA6_49 = input.LA(1);

                         
                        int index6_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA6_50 = input.LA(1);

                         
                        int index6_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA6_51 = input.LA(1);

                         
                        int index6_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA6_52 = input.LA(1);

                         
                        int index6_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA6_53 = input.LA(1);

                         
                        int index6_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA6_54 = input.LA(1);

                         
                        int index6_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA6_55 = input.LA(1);

                         
                        int index6_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA6_56 = input.LA(1);

                         
                        int index6_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA6_57 = input.LA(1);

                         
                        int index6_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA6_58 = input.LA(1);

                         
                        int index6_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA6_59 = input.LA(1);

                         
                        int index6_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA6_60 = input.LA(1);

                         
                        int index6_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA6_61 = input.LA(1);

                         
                        int index6_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA6_62 = input.LA(1);

                         
                        int index6_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA6_63 = input.LA(1);

                         
                        int index6_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA6_64 = input.LA(1);

                         
                        int index6_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA6_65 = input.LA(1);

                         
                        int index6_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA6_66 = input.LA(1);

                         
                        int index6_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\101\uffff";
    static final String DFA7_eofS =
        "\1\1\100\uffff";
    static final String DFA7_minS =
        "\1\12\1\uffff\76\0\1\uffff";
    static final String DFA7_maxS =
        "\1\u00b4\1\uffff\76\0\1\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA7_specialS =
        "\2\uffff\1\5\1\0\1\40\1\21\1\73\1\55\1\17\1\10\1\75\1\53\1\46\1"+
        "\64\1\32\1\33\1\37\1\67\1\30\1\62\1\34\1\24\1\70\1\11\1\36\1\66"+
        "\1\26\1\65\1\63\1\12\1\72\1\6\1\41\1\22\1\13\1\1\1\52\1\45\1\42"+
        "\1\23\1\31\1\14\1\3\1\60\1\47\1\25\1\44\1\4\1\16\1\71\1\51\1\27"+
        "\1\43\1\2\1\15\1\50\1\56\1\20\1\7\1\35\1\54\1\74\1\57\1\61\1\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\1\1\6\1\7\1\1\2\uffff\1\15\1\16\1\14\1\22\1\23\1\32\1\33"+
            "\1\17\1\31\1\24\1\26\1\20\1\21\1\30\1\27\1\25\2\1\2\uffff\2"+
            "\1\1\uffff\15\1\1\40\1\41\1\42\1\43\2\1\1\44\1\45\1\46\1\47"+
            "\1\50\1\51\1\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\60\1\uffff"+
            "\1\61\1\uffff\1\62\1\uffff\1\63\1\64\1\65\1\66\1\uffff\1\67"+
            "\1\uffff\1\70\1\71\1\72\1\uffff\1\73\1\74\1\1\1\75\1\76\1\77"+
            "\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1\16\uffff\2\1\4\uffff\1"+
            "\1\11\uffff\1\13\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\20\uffff\1\10\1\11\1\12\3\uffff\1\34\2\uffff\1"+
            "\35\1\uffff\1\37\1\36\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:4: ( verbphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_35 = input.LA(1);

                         
                        int index7_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_53 = input.LA(1);

                         
                        int index7_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_53);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_42 = input.LA(1);

                         
                        int index7_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_47 = input.LA(1);

                         
                        int index7_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_2 = input.LA(1);

                         
                        int index7_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_31 = input.LA(1);

                         
                        int index7_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_31);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_58 = input.LA(1);

                         
                        int index7_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_58);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_23 = input.LA(1);

                         
                        int index7_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_23);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_29 = input.LA(1);

                         
                        int index7_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_34 = input.LA(1);

                         
                        int index7_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_41 = input.LA(1);

                         
                        int index7_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_41);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_54 = input.LA(1);

                         
                        int index7_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_48 = input.LA(1);

                         
                        int index7_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_48);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA7_57 = input.LA(1);

                         
                        int index7_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_57);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA7_33 = input.LA(1);

                         
                        int index7_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_33);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA7_39 = input.LA(1);

                         
                        int index7_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_39);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA7_45 = input.LA(1);

                         
                        int index7_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_45);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA7_26 = input.LA(1);

                         
                        int index7_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_26);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA7_51 = input.LA(1);

                         
                        int index7_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_51);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA7_18 = input.LA(1);

                         
                        int index7_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_18);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA7_40 = input.LA(1);

                         
                        int index7_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_40);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA7_20 = input.LA(1);

                         
                        int index7_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_20);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA7_59 = input.LA(1);

                         
                        int index7_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_59);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA7_24 = input.LA(1);

                         
                        int index7_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_24);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA7_32 = input.LA(1);

                         
                        int index7_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_32);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA7_38 = input.LA(1);

                         
                        int index7_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_38);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA7_52 = input.LA(1);

                         
                        int index7_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_52);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA7_46 = input.LA(1);

                         
                        int index7_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_46);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA7_37 = input.LA(1);

                         
                        int index7_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA7_44 = input.LA(1);

                         
                        int index7_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA7_55 = input.LA(1);

                         
                        int index7_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_55);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA7_50 = input.LA(1);

                         
                        int index7_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_50);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA7_36 = input.LA(1);

                         
                        int index7_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_36);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA7_60 = input.LA(1);

                         
                        int index7_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_60);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA7_56 = input.LA(1);

                         
                        int index7_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_56);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA7_62 = input.LA(1);

                         
                        int index7_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_62);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA7_43 = input.LA(1);

                         
                        int index7_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_43);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA7_63 = input.LA(1);

                         
                        int index7_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_63);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA7_19 = input.LA(1);

                         
                        int index7_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_19);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA7_28 = input.LA(1);

                         
                        int index7_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_28);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA7_27 = input.LA(1);

                         
                        int index7_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_27);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA7_25 = input.LA(1);

                         
                        int index7_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_25);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA7_17 = input.LA(1);

                         
                        int index7_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_17);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA7_22 = input.LA(1);

                         
                        int index7_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_22);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA7_49 = input.LA(1);

                         
                        int index7_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_49);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA7_30 = input.LA(1);

                         
                        int index7_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_30);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA7_61 = input.LA(1);

                         
                        int index7_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\147\uffff";
    static final String DFA8_eofS =
        "\1\12\146\uffff";
    static final String DFA8_minS =
        "\1\12\11\0\22\uffff\2\0\4\uffff\41\0\44\uffff";
    static final String DFA8_maxS =
        "\1\u00b4\11\0\22\uffff\2\0\4\uffff\41\0\44\uffff";
    static final String DFA8_acceptS =
        "\12\uffff\1\2\133\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\22\uffff\1\11\1\12"+
        "\4\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\44\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\43\1\10\1\11\1\76\2\uffff\20\12\1\45\1\50\2\uffff\1\51\1"+
            "\52\1\uffff\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
            "\1\65\1\66\1\44\4\12\1\102\1\77\10\12\1\67\1\12\1\70\4\12\1"+
            "\uffff\1\12\1\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\3"+
            "\12\1\uffff\2\12\1\75\3\12\1\uffff\1\12\3\uffff\1\12\3\uffff"+
            "\1\100\16\uffff\1\12\1\35\4\uffff\1\34\11\uffff\1\12\1\4\1\5"+
            "\1\6\1\7\1\42\1\uffff\1\46\1\uffff\1\47\2\uffff\1\101\20\uffff"+
            "\1\1\1\2\1\3\3\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\71\1\72"+
            "\1\73\1\74",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()* loopback of 36:16: ( nounphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_28 = input.LA(1);

                         
                        int index8_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_29 = input.LA(1);

                         
                        int index8_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_34 = input.LA(1);

                         
                        int index8_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_35 = input.LA(1);

                         
                        int index8_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_35);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_36 = input.LA(1);

                         
                        int index8_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_36);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_37 = input.LA(1);

                         
                        int index8_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_37);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_38 = input.LA(1);

                         
                        int index8_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_38);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_39 = input.LA(1);

                         
                        int index8_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_40 = input.LA(1);

                         
                        int index8_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_40);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_41 = input.LA(1);

                         
                        int index8_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_42 = input.LA(1);

                         
                        int index8_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_42);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_43 = input.LA(1);

                         
                        int index8_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_43);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA8_44 = input.LA(1);

                         
                        int index8_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_44);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA8_45 = input.LA(1);

                         
                        int index8_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_45);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA8_46 = input.LA(1);

                         
                        int index8_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_46);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA8_47 = input.LA(1);

                         
                        int index8_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA8_48 = input.LA(1);

                         
                        int index8_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA8_49 = input.LA(1);

                         
                        int index8_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_49);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA8_50 = input.LA(1);

                         
                        int index8_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_50);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA8_51 = input.LA(1);

                         
                        int index8_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_51);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA8_52 = input.LA(1);

                         
                        int index8_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA8_53 = input.LA(1);

                         
                        int index8_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_53);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA8_54 = input.LA(1);

                         
                        int index8_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_54);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA8_55 = input.LA(1);

                         
                        int index8_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_55);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA8_56 = input.LA(1);

                         
                        int index8_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_56);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA8_57 = input.LA(1);

                         
                        int index8_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_57);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA8_58 = input.LA(1);

                         
                        int index8_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_58);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA8_59 = input.LA(1);

                         
                        int index8_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_59);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA8_60 = input.LA(1);

                         
                        int index8_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_60);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA8_61 = input.LA(1);

                         
                        int index8_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_61);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA8_62 = input.LA(1);

                         
                        int index8_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_62);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA8_63 = input.LA(1);

                         
                        int index8_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_63);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA8_64 = input.LA(1);

                         
                        int index8_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_64);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA8_65 = input.LA(1);

                         
                        int index8_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_65);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA8_66 = input.LA(1);

                         
                        int index8_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\147\uffff";
    static final String DFA9_eofS =
        "\1\1\146\uffff";
    static final String DFA9_minS =
        "\1\12\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\44\uffff";
    static final String DFA9_maxS =
        "\1\u00b4\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\44\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\144\uffff\1\1";
    static final String DFA9_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\40\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\1\1\15\1\16\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1"+
            "\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff"+
            "\2\1\1\uffff\42\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff"+
            "\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\3\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\1\1\1\20\4\uffff\1\10\11\uffff\1\62\1\11\1\12"+
            "\1\13\1\14\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff"+
            "\1\4\1\5\1\6\3\uffff\1\61\2\uffff\1\1\1\uffff\6\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 36:28: ( prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_4 = input.LA(1);

                         
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_5 = input.LA(1);

                         
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_49 = input.LA(1);

                         
                        int index9_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_50 = input.LA(1);

                         
                        int index9_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_51 = input.LA(1);

                         
                        int index9_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_52 = input.LA(1);

                         
                        int index9_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_53 = input.LA(1);

                         
                        int index9_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA9_54 = input.LA(1);

                         
                        int index9_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA9_55 = input.LA(1);

                         
                        int index9_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA9_56 = input.LA(1);

                         
                        int index9_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA9_57 = input.LA(1);

                         
                        int index9_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA9_58 = input.LA(1);

                         
                        int index9_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA9_59 = input.LA(1);

                         
                        int index9_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA9_60 = input.LA(1);

                         
                        int index9_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA9_61 = input.LA(1);

                         
                        int index9_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA9_62 = input.LA(1);

                         
                        int index9_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA9_63 = input.LA(1);

                         
                        int index9_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA9_64 = input.LA(1);

                         
                        int index9_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA9_65 = input.LA(1);

                         
                        int index9_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA9_66 = input.LA(1);

                         
                        int index9_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\u00af\uffff";
    static final String DFA10_eofS =
        "\51\uffff\1\13\u0085\uffff";
    static final String DFA10_minS =
        "\1\12\12\11\1\uffff\23\11\35\12\11\11\1\uffff\47\11\22\12\2\0\34"+
        "\12\11\11\11\12";
    static final String DFA10_maxS =
        "\1\u00b4\12\11\1\uffff\23\11\35\u00b4\11\11\1\uffff\47\11\22\u00b4"+
        "\2\0\34\u00b4\11\11\11\u00b4";
    static final String DFA10_acceptS =
        "\13\uffff\1\2\71\uffff\1\1\151\uffff";
    static final String DFA10_specialS =
        "\177\uffff\1\0\1\1\56\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\13\1\6\1\7\1\13\2\uffff\1\20\1\21\1\17\1\25\1\26\1\35\1\36"+
            "\1\22\1\34\1\27\1\31\1\23\1\24\1\33\1\32\1\30\2\13\2\uffff\2"+
            "\13\1\uffff\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff"+
            "\1\13\1\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14"+
            "\4\uffff\1\1\11\uffff\1\16\1\2\1\3\1\4\1\5\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\10\1\11\1\12\3\uffff\1"+
            "\15\2\uffff\1\13\1\uffff\6\13",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\73",
            "\1\13\1\100\1\101\1\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15"+
            "\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14"+
            "\uffff\1\13\17\uffff\1\14\17\uffff\1\74\1\75\1\76\1\77\1\13"+
            "\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103"+
            "\1\104\12\uffff\4\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\100\1\101\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\74\1\75\1\76\1\77\1\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\1\102\1\103\1\104\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\112\1\113\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\106\1\107\1\110\1\111\1\13\1\uffff\1"+
            "\13\1\uffff\1\13\2\uffff\1\13\20\uffff\1\114\1\115\1\116\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\112\1\113\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\106\1\107\1\110\1\111\1\13\1\uffff\1"+
            "\13\1\uffff\1\13\2\uffff\1\13\20\uffff\1\114\1\115\1\116\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\1\13\1\112\1\113\1\13\2\uffff\20\105\2\13\2\uffff\2\13\1\uffff"+
            "\42\13\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1"+
            "\uffff\3\13\1\uffff\6\13\11\uffff\1\13\17\uffff\1\14\4\uffff"+
            "\1\105\11\uffff\1\105\1\106\1\107\1\110\1\111\1\13\1\uffff\1"+
            "\13\1\uffff\1\13\2\uffff\1\13\20\uffff\1\114\1\115\1\116\3\uffff"+
            "\1\105\2\uffff\1\13\1\uffff\6\13",
            "\4\13\2\uffff\21\13\1\117\6\13\1\120\40\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\6\13\1"+
            "\uffff\1\13\3\uffff\2\13\2\uffff\1\13\16\uffff\2\13\4\uffff"+
            "\1\13\11\uffff\6\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\3\uffff\1\13\2\uffff\1\13\1\uffff\6\13",
            "\1\105\1\130\1\131\1\105\2\uffff\1\134\1\135\1\133\1\141\1"+
            "\142\1\151\1\152\1\136\1\150\1\143\1\145\1\137\1\140\1\147\1"+
            "\146\1\144\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105\10"+
            "\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\4\uffff\1\105\11\uffff\1\132\1\124\1\125"+
            "\1\126\1\127\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105"+
            "\20\uffff\1\121\1\122\1\123\3\uffff\1\153\2\uffff\1\13\1\uffff"+
            "\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\105\1\130\1\131\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\124\1\125\1\126\1\127\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\121\1"+
            "\122\1\123\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\155",
            "\1\156",
            "\1\157",
            "\1\160",
            "\1\161",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\u0096",
            "\1\u0097",
            "\1\u0098",
            "\1\u0099",
            "\1\u009a",
            "\1\u009b",
            "\1\u009c",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\42\13\1\uffff\1\13"+
            "\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff"+
            "\6\13\11\uffff\1\13\17\uffff\1\14\17\uffff\5\13\1\uffff\1\13"+
            "\1\uffff\1\13\2\uffff\1\13\20\uffff\3\13\6\uffff\1\13\1\uffff"+
            "\6\13",
            "\1\uffff",
            "\1\uffff",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\2\105\1\154\17\105\2\uffff"+
            "\2\105\1\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13"+
            "\1\uffff\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\3\13\1\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105"+
            "\4\uffff\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0"+
            "\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2"+
            "\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\2\uffff\22\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\4\uffff"+
            "\1\105\11\uffff\1\105\1\u009d\1\u009e\1\u009f\1\u00a0\1\105"+
            "\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\20\uffff\1\u00a3"+
            "\1\u00a4\1\u00a5\3\uffff\1\105\2\uffff\1\13\1\uffff\2\13\4\105",
            "\1\u00a6",
            "\1\u00a7",
            "\1\u00a8",
            "\1\u00a9",
            "\1\u00aa",
            "\1\u00ab",
            "\1\u00ac",
            "\1\u00ad",
            "\1\u00ae",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\4\105\22\uffff\2\105\2\uffff\2\105\1\uffff\15\105\4\13\2\105"+
            "\10\13\1\105\1\13\1\105\4\13\1\uffff\1\13\1\uffff\1\13\1\uffff"+
            "\4\13\1\uffff\1\13\1\uffff\3\13\1\uffff\2\13\1\105\3\13\11\uffff"+
            "\1\105\17\uffff\1\105\17\uffff\5\105\1\uffff\1\105\1\uffff\1"+
            "\105\2\uffff\1\105\20\uffff\3\105\6\uffff\1\13\1\uffff\2\13"+
            "\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105",
            "\1\105\1\u00a1\1\u00a2\1\105\22\uffff\2\105\2\uffff\2\105\1"+
            "\uffff\15\105\4\13\2\105\10\13\1\105\1\13\1\105\4\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\2\13\1\105\3\13\11\uffff\1\105\17\uffff\1\105\17\uffff"+
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\105\1\uffff\1\105\1\uffff"+
            "\1\105\2\uffff\1\105\20\uffff\1\u00a3\1\u00a4\1\u00a5\6\uffff"+
            "\1\13\1\uffff\2\13\4\105"
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:4: ( prepphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_127 = input.LA(1);

                         
                        int index10_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index10_127);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_128 = input.LA(1);

                         
                        int index10_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index10_128);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\150\uffff";
    static final String DFA11_eofS =
        "\1\1\147\uffff";
    static final String DFA11_minS =
        "\1\12\3\uffff\3\0\1\uffff\136\0\2\uffff";
    static final String DFA11_maxS =
        "\1\u00b4\3\uffff\3\0\1\uffff\136\0\2\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\3\144\uffff\1\1\1\2";
    static final String DFA11_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
        "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
        "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
        "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
        "\1\140\2\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\21\1\15\1\16\1\54\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101"+
            "\1\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\1\23\1"+
            "\26\2\uffff\1\27\1\30\1\uffff\1\31\1\32\1\33\1\34\1\35\1\36"+
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\22\1\106\1\107\1\110\1\111"+
            "\1\60\1\55\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1"+
            "\45\1\122\1\46\1\123\1\124\1\125\1\126\1\uffff\1\127\1\uffff"+
            "\1\130\1\uffff\1\131\1\132\1\133\1\134\1\uffff\1\135\1\uffff"+
            "\1\136\1\137\1\140\1\uffff\1\141\1\142\1\53\1\143\1\144\1\145"+
            "\1\uffff\1\1\3\uffff\1\1\3\uffff\1\56\16\uffff\1\1\1\20\4\uffff"+
            "\1\10\11\uffff\1\62\1\11\1\12\1\13\1\14\1\17\1\uffff\1\24\1"+
            "\uffff\1\25\2\uffff\1\57\20\uffff\1\4\1\5\1\6\3\uffff\1\61\2"+
            "\uffff\1\103\1\uffff\1\105\1\104\1\47\1\50\1\51\1\52",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:16: ( nounphrase | verbphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_4 = input.LA(1);

                         
                        int index11_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_5 = input.LA(1);

                         
                        int index11_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_6 = input.LA(1);

                         
                        int index11_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_8 = input.LA(1);

                         
                        int index11_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA11_17 = input.LA(1);

                         
                        int index11_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA11_18 = input.LA(1);

                         
                        int index11_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_18);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA11_19 = input.LA(1);

                         
                        int index11_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA11_20 = input.LA(1);

                         
                        int index11_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA11_21 = input.LA(1);

                         
                        int index11_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_21);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA11_22 = input.LA(1);

                         
                        int index11_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA11_23 = input.LA(1);

                         
                        int index11_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_23);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA11_24 = input.LA(1);

                         
                        int index11_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA11_25 = input.LA(1);

                         
                        int index11_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_25);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA11_26 = input.LA(1);

                         
                        int index11_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_26);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA11_27 = input.LA(1);

                         
                        int index11_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_27);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA11_28 = input.LA(1);

                         
                        int index11_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_28);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA11_29 = input.LA(1);

                         
                        int index11_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_29);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA11_30 = input.LA(1);

                         
                        int index11_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_30);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA11_31 = input.LA(1);

                         
                        int index11_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_31);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA11_32 = input.LA(1);

                         
                        int index11_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_32);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA11_33 = input.LA(1);

                         
                        int index11_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_33);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA11_34 = input.LA(1);

                         
                        int index11_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_34);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA11_35 = input.LA(1);

                         
                        int index11_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_35);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA11_36 = input.LA(1);

                         
                        int index11_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_36);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA11_37 = input.LA(1);

                         
                        int index11_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_37);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA11_38 = input.LA(1);

                         
                        int index11_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_38);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA11_39 = input.LA(1);

                         
                        int index11_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_39);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA11_40 = input.LA(1);

                         
                        int index11_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_40);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA11_41 = input.LA(1);

                         
                        int index11_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_41);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA11_42 = input.LA(1);

                         
                        int index11_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_42);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA11_43 = input.LA(1);

                         
                        int index11_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_43);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA11_44 = input.LA(1);

                         
                        int index11_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA11_45 = input.LA(1);

                         
                        int index11_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_45);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA11_46 = input.LA(1);

                         
                        int index11_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_46);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA11_47 = input.LA(1);

                         
                        int index11_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_47);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA11_48 = input.LA(1);

                         
                        int index11_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_48);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA11_49 = input.LA(1);

                         
                        int index11_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_49);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA11_50 = input.LA(1);

                         
                        int index11_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_50);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA11_51 = input.LA(1);

                         
                        int index11_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_51);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA11_52 = input.LA(1);

                         
                        int index11_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_52);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA11_53 = input.LA(1);

                         
                        int index11_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_53);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA11_54 = input.LA(1);

                         
                        int index11_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_54);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA11_55 = input.LA(1);

                         
                        int index11_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_55);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA11_56 = input.LA(1);

                         
                        int index11_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_56);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA11_57 = input.LA(1);

                         
                        int index11_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_57);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA11_58 = input.LA(1);

                         
                        int index11_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_58);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA11_59 = input.LA(1);

                         
                        int index11_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_59);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA11_60 = input.LA(1);

                         
                        int index11_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_60);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA11_61 = input.LA(1);

                         
                        int index11_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_61);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA11_62 = input.LA(1);

                         
                        int index11_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_62);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA11_63 = input.LA(1);

                         
                        int index11_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_63);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA11_64 = input.LA(1);

                         
                        int index11_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_64);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA11_65 = input.LA(1);

                         
                        int index11_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_65);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA11_66 = input.LA(1);

                         
                        int index11_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_66);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA11_67 = input.LA(1);

                         
                        int index11_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_67);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA11_68 = input.LA(1);

                         
                        int index11_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_68);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA11_69 = input.LA(1);

                         
                        int index11_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_69);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA11_70 = input.LA(1);

                         
                        int index11_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_70);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA11_71 = input.LA(1);

                         
                        int index11_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_71);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA11_72 = input.LA(1);

                         
                        int index11_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_72);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA11_73 = input.LA(1);

                         
                        int index11_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_73);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA11_74 = input.LA(1);

                         
                        int index11_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_74);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA11_75 = input.LA(1);

                         
                        int index11_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_75);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA11_76 = input.LA(1);

                         
                        int index11_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_76);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA11_77 = input.LA(1);

                         
                        int index11_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_77);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA11_78 = input.LA(1);

                         
                        int index11_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_78);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA11_79 = input.LA(1);

                         
                        int index11_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_79);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA11_80 = input.LA(1);

                         
                        int index11_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_80);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA11_81 = input.LA(1);

                         
                        int index11_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_81);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA11_82 = input.LA(1);

                         
                        int index11_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_82);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA11_83 = input.LA(1);

                         
                        int index11_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_83);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA11_84 = input.LA(1);

                         
                        int index11_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_84);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA11_85 = input.LA(1);

                         
                        int index11_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_85);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA11_86 = input.LA(1);

                         
                        int index11_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_86);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA11_87 = input.LA(1);

                         
                        int index11_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_87);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA11_88 = input.LA(1);

                         
                        int index11_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_88);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA11_89 = input.LA(1);

                         
                        int index11_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_89);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA11_90 = input.LA(1);

                         
                        int index11_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_90);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA11_91 = input.LA(1);

                         
                        int index11_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_91);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA11_92 = input.LA(1);

                         
                        int index11_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_92);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA11_93 = input.LA(1);

                         
                        int index11_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_93);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA11_94 = input.LA(1);

                         
                        int index11_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_94);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA11_95 = input.LA(1);

                         
                        int index11_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_95);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA11_96 = input.LA(1);

                         
                        int index11_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_96);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA11_97 = input.LA(1);

                         
                        int index11_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_97);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA11_98 = input.LA(1);

                         
                        int index11_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_98);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA11_99 = input.LA(1);

                         
                        int index11_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_99);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA11_100 = input.LA(1);

                         
                        int index11_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_100);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA11_101 = input.LA(1);

                         
                        int index11_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\20\uffff";
    static final String DFA13_eofS =
        "\20\uffff";
    static final String DFA13_minS =
        "\1\12\1\uffff\6\11\1\uffff\6\0\1\uffff";
    static final String DFA13_maxS =
        "\1\u00b4\1\uffff\6\11\1\uffff\6\0\1\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA13_specialS =
        "\11\uffff\1\1\1\4\1\2\1\5\1\3\1\0\1\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\20\uffff\3\10\12\uffff\4\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 40:18: ( adj | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_14 = input.LA(1);

                         
                        int index13_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\53\uffff";
    static final String DFA14_eofS =
        "\1\1\52\uffff";
    static final String DFA14_minS =
        "\1\12\1\uffff\50\0\1\uffff";
    static final String DFA14_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA14_specialS =
        "\2\uffff\1\22\1\21\1\43\1\5\1\27\1\34\1\45\1\6\1\44\1\2\1\42\1\20"+
        "\1\35\1\17\1\41\1\16\1\12\1\37\1\13\1\46\1\14\1\40\1\15\1\11\1\36"+
        "\1\31\1\3\1\24\1\26\1\25\1\0\1\30\1\1\1\23\1\10\1\33\1\4\1\47\1"+
        "\7\1\32\1\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\12\1\6\1\7\1\45\2\uffff\20\1\1\14\1\17\2\uffff\1\20\1\21"+
            "\1\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1"+
            "\34\1\35\1\13\4\1\1\51\1\46\10\1\1\36\1\1\1\37\4\1\1\uffff\1"+
            "\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\2"+
            "\1\1\44\3\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\47\16\uffff\1"+
            "\1\1\10\4\uffff\1\1\11\uffff\1\1\1\2\1\3\1\4\1\5\1\11\1\uffff"+
            "\1\15\1\uffff\1\16\2\uffff\1\50\20\uffff\3\1\3\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\1\40\1\41\1\42\1\43",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()+ loopback of 40:30: ( noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_32 = input.LA(1);

                         
                        int index14_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_32);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_34 = input.LA(1);

                         
                        int index14_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_28 = input.LA(1);

                         
                        int index14_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_28);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_38 = input.LA(1);

                         
                        int index14_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_38);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA14_40 = input.LA(1);

                         
                        int index14_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA14_36 = input.LA(1);

                         
                        int index14_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_36);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA14_25 = input.LA(1);

                         
                        int index14_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA14_22 = input.LA(1);

                         
                        int index14_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA14_24 = input.LA(1);

                         
                        int index14_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA14_35 = input.LA(1);

                         
                        int index14_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_35);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA14_29 = input.LA(1);

                         
                        int index14_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA14_31 = input.LA(1);

                         
                        int index14_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA14_30 = input.LA(1);

                         
                        int index14_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_30);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA14_33 = input.LA(1);

                         
                        int index14_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_33);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA14_27 = input.LA(1);

                         
                        int index14_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA14_41 = input.LA(1);

                         
                        int index14_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_41);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA14_37 = input.LA(1);

                         
                        int index14_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_37);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA14_26 = input.LA(1);

                         
                        int index14_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA14_23 = input.LA(1);

                         
                        int index14_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_23);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA14_39 = input.LA(1);

                         
                        int index14_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA19_eotS =
        "\147\uffff";
    static final String DFA19_eofS =
        "\1\1\146\uffff";
    static final String DFA19_minS =
        "\1\12\25\uffff\6\0\45\uffff\2\0\44\uffff";
    static final String DFA19_maxS =
        "\1\u00b4\25\uffff\6\0\45\uffff\2\0\44\uffff";
    static final String DFA19_acceptS =
        "\1\uffff\1\2\144\uffff\1\1";
    static final String DFA19_specialS =
        "\26\uffff\1\0\1\1\1\2\1\3\1\4\1\5\45\uffff\1\6\1\7\44\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\1\1\32\1\33\1\1\2\uffff\22\1\2\uffff\2\1\1\uffff\42\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\101\3\uffff\1\1\3\uffff\1\1\16\uffff\1\102\1"+
            "\1\4\uffff\1\1\11\uffff\1\1\1\26\1\27\1\30\1\31\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\3\1\3\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "()* loopback of 40:36: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_22 = input.LA(1);

                         
                        int index19_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_23 = input.LA(1);

                         
                        int index19_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_24 = input.LA(1);

                         
                        int index19_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_25 = input.LA(1);

                         
                        int index19_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_26 = input.LA(1);

                         
                        int index19_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_26);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_27 = input.LA(1);

                         
                        int index19_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_65 = input.LA(1);

                         
                        int index19_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_66 = input.LA(1);

                         
                        int index19_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index19_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\17\uffff";
    static final String DFA18_eofS =
        "\17\uffff";
    static final String DFA18_minS =
        "\1\12\1\uffff\6\11\6\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\1\uffff\6\11\6\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA18_specialS =
        "\10\uffff\1\5\1\3\1\4\1\0\1\1\1\2\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\35\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()+ loopback of 40:53: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\57\uffff";
    static final String DFA29_eofS =
        "\1\1\56\uffff";
    static final String DFA29_minS =
        "\1\12\1\uffff\54\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u00b4\1\uffff\54\0\1\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA29_specialS =
        "\2\uffff\1\3\1\22\1\51\1\31\1\50\1\41\1\21\1\52\1\35\1\33\1\30\1"+
        "\23\1\34\1\2\1\43\1\13\1\32\1\0\1\36\1\4\1\16\1\42\1\17\1\11\1\1"+
        "\1\10\1\47\1\20\1\46\1\27\1\26\1\15\1\45\1\14\1\44\1\6\1\5\1\53"+
        "\1\25\1\24\1\40\1\37\1\7\1\12\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\1\1\11\1\12\1\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\16"+
            "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
            "\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\uffff\1\37\1\uffff\1\40"+
            "\1\uffff\1\41\1\42\1\43\1\44\1\uffff\1\45\1\uffff\1\46\1\47"+
            "\1\50\1\uffff\1\51\1\52\1\1\1\53\1\54\1\55\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\1\1\1\5\1"+
            "\6\1\7\1\10\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff"+
            "\1\2\1\3\1\4\3\uffff\1\1\2\uffff\1\13\1\uffff\1\15\1\14\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()+ loopback of 43:35: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_19 = input.LA(1);

                         
                        int index29_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_26 = input.LA(1);

                         
                        int index29_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_26);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_15 = input.LA(1);

                         
                        int index29_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_21 = input.LA(1);

                         
                        int index29_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_38 = input.LA(1);

                         
                        int index29_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_37 = input.LA(1);

                         
                        int index29_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_44 = input.LA(1);

                         
                        int index29_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_27 = input.LA(1);

                         
                        int index29_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_25 = input.LA(1);

                         
                        int index29_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_45 = input.LA(1);

                         
                        int index29_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_45);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_17 = input.LA(1);

                         
                        int index29_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_35 = input.LA(1);

                         
                        int index29_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_35);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_33 = input.LA(1);

                         
                        int index29_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA29_22 = input.LA(1);

                         
                        int index29_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_22);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA29_24 = input.LA(1);

                         
                        int index29_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA29_29 = input.LA(1);

                         
                        int index29_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_29);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA29_41 = input.LA(1);

                         
                        int index29_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_41);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA29_40 = input.LA(1);

                         
                        int index29_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_40);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA29_32 = input.LA(1);

                         
                        int index29_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA29_31 = input.LA(1);

                         
                        int index29_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_31);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA29_20 = input.LA(1);

                         
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA29_43 = input.LA(1);

                         
                        int index29_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_43);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA29_42 = input.LA(1);

                         
                        int index29_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_42);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA29_23 = input.LA(1);

                         
                        int index29_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_23);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA29_36 = input.LA(1);

                         
                        int index29_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA29_34 = input.LA(1);

                         
                        int index29_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_34);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA29_30 = input.LA(1);

                         
                        int index29_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_30);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA29_28 = input.LA(1);

                         
                        int index29_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_28);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA29_39 = input.LA(1);

                         
                        int index29_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\46\uffff";
    static final String DFA26_eofS =
        "\1\1\45\uffff";
    static final String DFA26_minS =
        "\1\12\1\uffff\43\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u00b4\1\uffff\43\0\1\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA26_specialS =
        "\2\uffff\1\3\1\37\1\22\1\23\1\4\1\24\1\7\1\42\1\14\1\31\1\10\1\30"+
        "\1\36\1\16\1\35\1\0\1\17\1\41\1\21\1\40\1\20\1\12\1\15\1\26\1\5"+
        "\1\27\1\13\1\25\1\2\1\34\1\32\1\6\1\1\1\33\1\11\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\4\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\5\1\6\1\7\1\10"+
            "\2\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\1\1"+
            "\22\1\23\1\24\1\25\1\uffff\1\26\1\uffff\1\27\1\uffff\1\30\1"+
            "\31\1\32\1\33\1\uffff\1\34\1\uffff\1\35\1\36\1\37\1\uffff\1"+
            "\40\1\41\1\1\1\42\1\43\1\44\1\uffff\1\1\3\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\20\uffff\3\1\3\uffff\1\1\2\uffff\1\2\1\uffff"+
            "\1\4\1\3\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()+ loopback of 43:46: ( verb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_26 = input.LA(1);

                         
                        int index26_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_26);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_15 = input.LA(1);

                         
                        int index26_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_25 = input.LA(1);

                         
                        int index26_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\17\uffff";
    static final String DFA28_eofS =
        "\1\7\16\uffff";
    static final String DFA28_minS =
        "\1\12\6\11\1\uffff\6\0\1\uffff";
    static final String DFA28_maxS =
        "\1\u00b4\6\11\1\uffff\6\0\1\uffff";
    static final String DFA28_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA28_specialS =
        "\10\uffff\1\4\1\0\1\3\1\1\1\5\1\2\1\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\22\7\2\uffff\2\7\1\uffff\42\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\3\7\1\uffff"+
            "\6\7\1\uffff\1\7\3\uffff\1\7\3\uffff\1\7\16\uffff\2\7\4\uffff"+
            "\1\7\11\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\2\uffff\1\7\20\uffff\3\7\3\uffff\1\7\2\uffff\1\7\1\uffff"+
            "\6\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "43:57: ( adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_9 = input.LA(1);

                         
                        int index28_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_11 = input.LA(1);

                         
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_13 = input.LA(1);

                         
                        int index28_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_10 = input.LA(1);

                         
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_8 = input.LA(1);

                         
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_12 = input.LA(1);

                         
                        int index28_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\147\uffff";
    static final String DFA32_eofS =
        "\1\40\146\uffff";
    static final String DFA32_minS =
        "\1\12\37\0\107\uffff";
    static final String DFA32_maxS =
        "\1\u00b4\37\0\107\uffff";
    static final String DFA32_acceptS =
        "\40\uffff\1\2\105\uffff\1\1";
    static final String DFA32_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\107\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\40\1\10\1\11\1\40\2\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1"+
            "\32\1\16\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\2\40\2\uffff"+
            "\2\40\1\uffff\42\40\1\uffff\1\40\1\uffff\1\40\1\uffff\4\40\1"+
            "\uffff\1\40\1\uffff\3\40\1\uffff\6\40\1\uffff\1\36\3\uffff\1"+
            "\40\3\uffff\1\40\16\uffff\1\37\1\35\4\uffff\1\34\11\uffff\1"+
            "\12\1\4\1\5\1\6\1\7\1\40\1\uffff\1\40\1\uffff\1\40\2\uffff\1"+
            "\40\20\uffff\1\1\1\2\1\3\3\uffff\1\33\2\uffff\1\40\1\uffff\6"+
            "\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 43:64: ( ( cc )? ( comma )? prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA32_7 = input.LA(1);

                         
                        int index32_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA32_8 = input.LA(1);

                         
                        int index32_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA32_9 = input.LA(1);

                         
                        int index32_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA32_10 = input.LA(1);

                         
                        int index32_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA32_11 = input.LA(1);

                         
                        int index32_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA32_12 = input.LA(1);

                         
                        int index32_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA32_13 = input.LA(1);

                         
                        int index32_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA32_14 = input.LA(1);

                         
                        int index32_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA32_15 = input.LA(1);

                         
                        int index32_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA32_16 = input.LA(1);

                         
                        int index32_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA32_17 = input.LA(1);

                         
                        int index32_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA32_18 = input.LA(1);

                         
                        int index32_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA32_19 = input.LA(1);

                         
                        int index32_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA32_20 = input.LA(1);

                         
                        int index32_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA32_21 = input.LA(1);

                         
                        int index32_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA32_22 = input.LA(1);

                         
                        int index32_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA32_23 = input.LA(1);

                         
                        int index32_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA32_24 = input.LA(1);

                         
                        int index32_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA32_25 = input.LA(1);

                         
                        int index32_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA32_26 = input.LA(1);

                         
                        int index32_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA32_27 = input.LA(1);

                         
                        int index32_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA32_28 = input.LA(1);

                         
                        int index32_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA32_29 = input.LA(1);

                         
                        int index32_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA32_30 = input.LA(1);

                         
                        int index32_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA32_31 = input.LA(1);

                         
                        int index32_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index32_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\60\uffff";
    static final String DFA35_eofS =
        "\60\uffff";
    static final String DFA35_minS =
        "\1\12\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\37\uffff\1\0\11\uffff";
    static final String DFA35_maxS =
        "\1\u00b4\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\37\uffff\1\0\11\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\4\1\uffff\1\6\1\7\1\10\5\uffff"+
        "\1\11\1\12\1\13\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
        "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\uffff\1\43"+
        "\1\44\1\3\1\14\1\42\1\46\1\5\1\41\1\45";
    static final String DFA35_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\uffff\1\2\37\uffff\1\3\11\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\3\2\11\1\44\22\uffff\1\5\1\10\2\uffff\1\17\1\20\1\uffff\1"+
            "\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1"+
            "\4\4\uffff\1\50\1\45\10\uffff\1\35\1\uffff\1\36\26\uffff\1\43"+
            "\14\uffff\1\46\17\uffff\1\2\17\uffff\4\11\1\1\1\uffff\1\6\1"+
            "\uffff\1\7\2\uffff\1\47\35\uffff\1\37\1\40\1\41\1\42",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "47:1: noun : ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred78_ChemicalChunker()) ) {s = 41;}

                        else if ( (synpred83_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 42;}

                        else if ( (synpred109_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_ChemicalChunker()) ) {s = 45;}

                        else if ( (synpred83_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_38 = input.LA(1);

                         
                        int index35_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 46;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 47;}

                         
                        input.seek(index35_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\67\uffff";
    static final String DFA36_eofS =
        "\67\uffff";
    static final String DFA36_minS =
        "\1\12\1\uffff\2\0\1\uffff\2\0\6\uffff\6\0\44\uffff";
    static final String DFA36_maxS =
        "\1\u00b4\1\uffff\2\0\1\uffff\2\0\6\uffff\6\0\44\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\17\2\uffff\1\3\2\uffff\1\7\1\10\1\12\43\uffff\1\13\1"+
        "\15\1\1\1\5\1\6\1\11\1\14\1\2\1\4\1\16";
    static final String DFA36_specialS =
        "\2\uffff\1\0\1\1\1\uffff\1\2\1\3\6\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\44\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\6\1\21\1\22\1\11\13\uffff\1\55\6\uffff\2\11\2\uffff\2\11"+
            "\1\uffff\14\11\1\5\4\uffff\2\11\10\uffff\1\11\1\uffff\1\11\26"+
            "\uffff\1\11\4\uffff\1\56\2\uffff\1\7\1\4\3\uffff\1\11\1\1\16"+
            "\uffff\1\2\17\uffff\1\15\1\16\1\17\1\20\1\3\1\uffff\1\11\1\uffff"+
            "\1\11\2\uffff\1\11\25\uffff\1\10\7\uffff\4\11",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()+ loopback of 50:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred117_ChemicalChunker()) ) {s = 48;}

                        else if ( (synpred118_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred121_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred124_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 52;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 53;}

                        else if ( (synpred117_ChemicalChunker()) ) {s = 48;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\152\uffff";
    static final String DFA39_eofS =
        "\145\uffff\1\117\4\uffff";
    static final String DFA39_minS =
        "\1\13\35\11\11\13\22\12\1\13\1\41\24\11\3\uffff\11\170\13\12\2\11"+
        "\2\0";
    static final String DFA39_maxS =
        "\1\u00aa\35\11\11\u00aa\22\u00b4\1\u00a6\1\50\24\11\3\uffff\11\170"+
        "\13\u00b4\2\11\2\0";
    static final String DFA39_acceptS =
        "\117\uffff\1\1\1\3\1\2\30\uffff";
    static final String DFA39_specialS =
        "\150\uffff\1\1\1\0}>";
    static final String[] DFA39_transitionS = {
            "\1\10\1\11\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16\1"+
            "\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff"+
            "\1\33",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\102\1\103\153\uffff\1\35\17\uffff\1\76\1\77\1\100\1\101"+
            "\30\uffff\1\73\1\74\1\75",
            "\1\120\6\uffff\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\131",
            "\1\132",
            "\1\133",
            "\1\134",
            "\1\135",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145",
            "",
            "",
            "",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\117\1\114\1\115\1\117\22\uffff\2\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\17\uffff\1\110\1\111\1"+
            "\112\1\113\1\117\1\uffff\1\117\1\uffff\1\117\2\uffff\1\117\20"+
            "\uffff\1\105\1\106\1\107\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\2\uffff\21\117\1\147\6\117\1\146\40\117\1\uffff\1\117"+
            "\1\uffff\1\117\1\uffff\4\117\1\uffff\1\117\1\uffff\3\117\1\uffff"+
            "\6\117\1\uffff\1\117\3\uffff\2\117\2\uffff\1\117\16\uffff\2"+
            "\117\4\uffff\1\117\11\uffff\6\117\1\uffff\1\117\1\uffff\1\117"+
            "\2\uffff\1\117\20\uffff\3\117\3\uffff\1\117\2\uffff\1\117\1"+
            "\uffff\6\117",
            "\1\150",
            "\1\151",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "56:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_105 = input.LA(1);

                         
                        int index39_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index39_105);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_104 = input.LA(1);

                         
                        int index39_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index39_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\26\uffff";
    static final String DFA42_eofS =
        "\26\uffff";
    static final String DFA42_minS =
        "\1\13\11\11\1\uffff\11\0\2\uffff";
    static final String DFA42_maxS =
        "\1\u00aa\11\11\1\uffff\11\0\2\uffff";
    static final String DFA42_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA42_specialS =
        "\13\uffff\1\5\1\2\1\10\1\3\1\7\1\6\1\1\1\4\1\0\2\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\10\1\11\3\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "65:3: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_19 = input.LA(1);

                         
                        int index42_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_17 = input.LA(1);

                         
                        int index42_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_18 = input.LA(1);

                         
                        int index42_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_16 = input.LA(1);

                         
                        int index42_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\26\uffff";
    static final String DFA47_eofS =
        "\26\uffff";
    static final String DFA47_minS =
        "\1\13\11\11\1\uffff\11\0\2\uffff";
    static final String DFA47_maxS =
        "\1\u00aa\11\11\1\uffff\11\0\2\uffff";
    static final String DFA47_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA47_specialS =
        "\13\uffff\1\7\1\1\1\4\1\3\1\5\1\6\1\0\1\10\1\2\2\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\10\1\11\3\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "71:18: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_13 = input.LA(1);

                         
                        int index47_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_15 = input.LA(1);

                         
                        int index47_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\21\uffff";
    static final String DFA54_eofS =
        "\2\uffff\1\5\16\uffff";
    static final String DFA54_minS =
        "\1\63\1\11\1\12\2\11\1\uffff\1\11\2\12\1\0\2\11\1\uffff\2\0\2\uffff";
    static final String DFA54_maxS =
        "\1\63\1\11\1\u00b4\2\11\1\uffff\1\11\2\u00b4\1\0\2\11\1\uffff\2"+
        "\0\2\uffff";
    static final String DFA54_acceptS =
        "\5\uffff\1\4\6\uffff\1\2\2\uffff\1\3\1\1";
    static final String DFA54_specialS =
        "\11\uffff\1\0\3\uffff\1\2\1\1\2\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\1",
            "\1\2",
            "\4\5\2\uffff\22\5\2\uffff\2\5\1\uffff\14\5\1\6\25\5\1\uffff"+
            "\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\uffff\3\5\1\uffff"+
            "\6\5\1\uffff\1\5\2\uffff\1\3\1\5\3\uffff\2\5\15\uffff\2\5\4"+
            "\uffff\1\5\11\uffff\1\5\1\4\4\5\1\uffff\1\5\1\uffff\1\5\2\uffff"+
            "\1\5\20\uffff\3\5\2\uffff\2\5\2\uffff\1\5\1\uffff\6\5",
            "\1\7",
            "\1\10",
            "",
            "\1\11",
            "\4\5\13\uffff\1\5\6\uffff\2\5\2\uffff\2\5\1\uffff\14\5\1\12"+
            "\4\uffff\2\5\10\uffff\1\5\1\uffff\1\5\26\uffff\1\5\4\uffff\1"+
            "\5\2\uffff\2\5\3\uffff\2\5\16\uffff\1\5\17\uffff\5\5\1\uffff"+
            "\1\5\1\uffff\1\5\2\uffff\1\5\25\uffff\1\5\7\uffff\4\5",
            "\4\5\2\uffff\22\5\2\uffff\2\5\1\uffff\14\5\1\13\25\5\1\uffff"+
            "\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\uffff\3\5\1\uffff"+
            "\6\5\1\uffff\1\5\2\uffff\2\5\3\uffff\2\5\16\uffff\1\5\4\uffff"+
            "\1\5\11\uffff\6\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\20\uffff"+
            "\3\5\2\uffff\2\5\2\uffff\1\5\1\uffff\6\5",
            "\1\uffff",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "85:17: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\152\uffff";
    static final String DFA58_eofS =
        "\1\1\151\uffff";
    static final String DFA58_minS =
        "\1\12\142\uffff\1\0\6\uffff";
    static final String DFA58_maxS =
        "\1\u00b4\142\uffff\1\0\6\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\147\uffff\1\1";
    static final String DFA58_specialS =
        "\143\uffff\1\0\6\uffff}>";
    static final String[] DFA58_transitionS = {
            "\4\1\2\uffff\22\1\2\uffff\2\1\1\uffff\42\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff"+
            "\1\1\2\uffff\2\1\3\uffff\1\143\1\1\15\uffff\2\1\4\uffff\1\1"+
            "\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\3"+
            "\1\2\uffff\2\1\2\uffff\1\1\1\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 92:18: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_99 = input.LA(1);

                         
                        int index58_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 105;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_99);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA62_eotS =
        "\152\uffff";
    static final String DFA62_eofS =
        "\1\1\151\uffff";
    static final String DFA62_minS =
        "\1\12\142\uffff\1\0\6\uffff";
    static final String DFA62_maxS =
        "\1\u00b4\142\uffff\1\0\6\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\2\147\uffff\1\1";
    static final String DFA62_specialS =
        "\143\uffff\1\0\6\uffff}>";
    static final String[] DFA62_transitionS = {
            "\4\1\2\uffff\22\1\2\uffff\2\1\1\uffff\42\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff"+
            "\1\1\2\uffff\2\1\3\uffff\1\143\1\1\15\uffff\2\1\4\uffff\1\1"+
            "\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\3"+
            "\1\2\uffff\2\1\2\uffff\1\1\1\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 100:11: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_99 = input.LA(1);

                         
                        int index62_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_ChemicalChunker()) ) {s = 105;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_99);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\53\uffff";
    static final String DFA65_eofS =
        "\1\1\52\uffff";
    static final String DFA65_minS =
        "\1\12\1\uffff\50\0\1\uffff";
    static final String DFA65_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA65_specialS =
        "\2\uffff\1\4\1\2\1\37\1\27\1\43\1\33\1\26\1\14\1\20\1\3\1\34\1\15"+
        "\1\16\1\41\1\7\1\42\1\17\1\11\1\22\1\5\1\21\1\24\1\45\1\12\1\23"+
        "\1\1\1\47\1\31\1\10\1\46\1\32\1\25\1\13\1\40\1\36\1\44\1\6\1\35"+
        "\1\0\1\30\1\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\12\1\6\1\7\1\45\2\uffff\20\1\1\14\1\17\2\uffff\1\20\1\21"+
            "\1\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1"+
            "\34\1\35\1\13\4\1\1\51\1\46\10\1\1\36\1\1\1\37\4\1\1\uffff\1"+
            "\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\2"+
            "\1\1\44\3\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1\47\1\1\15\uffff"+
            "\1\1\1\10\4\uffff\1\1\11\uffff\1\1\1\2\1\3\1\4\1\5\1\11\1\uffff"+
            "\1\15\1\uffff\1\16\2\uffff\1\50\20\uffff\3\1\2\uffff\2\1\2\uffff"+
            "\1\1\1\uffff\2\1\1\40\1\41\1\42\1\43",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()+ loopback of 102:29: ( ( jj )? noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_40 = input.LA(1);

                         
                        int index65_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_27 = input.LA(1);

                         
                        int index65_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_27);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_38 = input.LA(1);

                         
                        int index65_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_16 = input.LA(1);

                         
                        int index65_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_30 = input.LA(1);

                         
                        int index65_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_30);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_25 = input.LA(1);

                         
                        int index65_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_25);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_34 = input.LA(1);

                         
                        int index65_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_13 = input.LA(1);

                         
                        int index65_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA65_18 = input.LA(1);

                         
                        int index65_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA65_22 = input.LA(1);

                         
                        int index65_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA65_20 = input.LA(1);

                         
                        int index65_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA65_26 = input.LA(1);

                         
                        int index65_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_26);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA65_23 = input.LA(1);

                         
                        int index65_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA65_33 = input.LA(1);

                         
                        int index65_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_33);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA65_41 = input.LA(1);

                         
                        int index65_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_41);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA65_29 = input.LA(1);

                         
                        int index65_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_29);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA65_32 = input.LA(1);

                         
                        int index65_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA65_39 = input.LA(1);

                         
                        int index65_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_39);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA65_36 = input.LA(1);

                         
                        int index65_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA65_35 = input.LA(1);

                         
                        int index65_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA65_17 = input.LA(1);

                         
                        int index65_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_17);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA65_37 = input.LA(1);

                         
                        int index65_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA65_24 = input.LA(1);

                         
                        int index65_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_24);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA65_31 = input.LA(1);

                         
                        int index65_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_31);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA65_28 = input.LA(1);

                         
                        int index65_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\17\uffff";
    static final String DFA73_eofS =
        "\17\uffff";
    static final String DFA73_minS =
        "\1\12\1\uffff\6\11\6\0\1\uffff";
    static final String DFA73_maxS =
        "\1\u00b4\1\uffff\6\11\6\0\1\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA73_specialS =
        "\10\uffff\1\2\1\4\1\5\1\0\1\1\1\3\1\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\35\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "()+ loopback of 40:53: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_11 = input.LA(1);

                         
                        int index73_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_12 = input.LA(1);

                         
                        int index73_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_8 = input.LA(1);

                         
                        int index73_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_13 = input.LA(1);

                         
                        int index73_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_9 = input.LA(1);

                         
                        int index73_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_10 = input.LA(1);

                         
                        int index73_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentence_in_document169 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_sentence1_in_sentence192 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x218001117EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_sentence2_in_sentence194 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x218001117EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_sentence3_in_sentence196 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x218001117EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_comma_in_sentence203 = new BitSet(new long[]{0x0000000000001802L,0x0080001100000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_cc_in_sentence205 = new BitSet(new long[]{0x0000000000001802L,0x0080001100000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_stop_in_sentence207 = new BitSet(new long[]{0x0000000000001802L,0x0080001100000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_adv_in_sentence209 = new BitSet(new long[]{0x0000000000001802L,0x0080001100000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence1220 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_verbphrase_in_sentence1223 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_prepphrase_in_sentence1226 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_verbphrase_in_sentence2260 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_nounphrase_in_sentence2263 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_prepphrase_in_sentence2266 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_prepphrase_in_sentence3300 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_nounphrase_in_sentence3304 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_verbphrase_in_sentence3306 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_dt_in_nounphrase342 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_adj_in_nounphrase346 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_adv_in_nounphrase348 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_noun_in_nounphrase353 = new BitSet(new long[]{0x030FFFB302083C02L,0x2180010108000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_cc_in_nounphrase357 = new BitSet(new long[]{0x0000000000001800L,0x0080000100000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_comma_in_nounphrase360 = new BitSet(new long[]{0x0000000000001800L,0x0080000000000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_cc_in_nounphrase363 = new BitSet(new long[]{0x0000000000001800L,0x0000000000000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_adj_in_nounphrase367 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_noun_in_nounphrase370 = new BitSet(new long[]{0x0000000002081802L,0x0080000100000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphrase378 = new BitSet(new long[]{0x0000000002080002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphrase381 = new BitSet(new long[]{0x0000000002080002L});
    public static final BitSet FOLLOW_to_in_verbphrase395 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_inAll_in_verbphrase398 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_inafter_in_verbphrase401 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_adv_in_verbphrase405 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_adj_in_verbphrase408 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_verb_in_verbphrase411 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_adv_in_verbphrase414 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_adj_in_verbphrase417 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_cc_in_verbphrase423 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_comma_in_verbphrase426 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_prepphrase_in_verbphrase429 = new BitSet(new long[]{0xFFFFFFB3FFFF3C02L,0x218001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_vbd_in_verb439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_noun527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_noun573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_noun594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixture610 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100011908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_measurements_in_mixture613 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_md_in_mixture615 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_stop_in_mixture617 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_oscarCompound_in_mixture619 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_molecule_in_mixture621 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixture623 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_dash_in_mixture625 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_sym_in_mixture627 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_cd_in_mixture629 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_noun_in_mixture631 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_inof_in_mixture633 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_cd_in_mixture635 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_comma_in_mixture637 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_adj_in_mixture639 = new BitSet(new long[]{0x030FFFB302003C00L,0x2100031908000014L,0x001E027000095F00L});
    public static final BitSet FOLLOW_rrb_in_mixture643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_adj651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseOther700 = new BitSet(new long[]{0x00000000FFFF0000L,0x0000000000000000L,0x0000040000000080L});
    public static final BitSet FOLLOW_adj_in_prepphraseOther702 = new BitSet(new long[]{0x00000000FFFF0000L,0x0000000000000000L,0x0000040000000080L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther706 = new BitSet(new long[]{0x030FFFB3FFFF3C00L,0x2100010008000014L,0x001E047000095F80L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf740 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime766 = new BitSet(new long[]{0x00000000FFFF1800L,0x2100000000000000L,0x0000047000000F80L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime768 = new BitSet(new long[]{0x00000000FFFF1800L,0x2100000000000000L,0x0000047000000F80L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime772 = new BitSet(new long[]{0x0000000000001800L,0x2100000000000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime776 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime780 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime782 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime786 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN827 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp894 = new BitSet(new long[]{0x00000000FFFF1800L,0x2100000000000000L,0x0000047000000F80L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp896 = new BitSet(new long[]{0x00000000FFFF1800L,0x2100000000000000L,0x0000047000000F80L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp900 = new BitSet(new long[]{0x0000000000001800L,0x2100000000000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp903 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp907 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp909 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp913 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mmol960 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_nnmol_in_mmol962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_gram983 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_nngram_in_gram985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1006 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1029 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_apparatus1055 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000004L,0x0000000000004F00L});
    public static final BitSet FOLLOW_adj_in_apparatus1057 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000004L,0x0000000000004F00L});
    public static final BitSet FOLLOW_jj_in_apparatus1059 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000004L,0x0000000000004F00L});
    public static final BitSet FOLLOW_nn_in_apparatus1061 = new BitSet(new long[]{0x0000000000001800L,0x0100000000000004L,0x0000000000004F00L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_mmol_in_measurements1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gram_in_measurements1096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurements1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurements1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1111 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1113 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1115 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1117 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31128 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31130 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21153 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21155 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11178 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_moleculeamount11201 = new BitSet(new long[]{0x0000000002000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount11203 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11206 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21216 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount21219 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount11273 = new BitSet(new long[]{0x0000000002000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount11275 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11278 = new BitSet(new long[]{0x0000000000000400L,0x0100000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21292 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount21294 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount31304 = new BitSet(new long[]{0x0000000002000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount31306 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31309 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31312 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31315 = new BitSet(new long[]{0x030FFFB300003C02L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_amount1368 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1370 = new BitSet(new long[]{0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_comma_in_amount1373 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1376 = new BitSet(new long[]{0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_rrb_in_amount1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_method1418 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nn_in_method1420 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method1424 = new BitSet(new long[]{0x0000000000000402L,0x0100000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_10_in_oscarcd1440 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd1442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_11_in_oscarcj1447 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarrn1454 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscaront1462 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_tmunicode1469 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_cdunicode1476 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode1478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_inas1485 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inas1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_inbefore1492 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inafter1499 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inafter1501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inin1506 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inin1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_ininto1513 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ininto1515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inwith1520 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inwith1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_inwithout1527 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inby1534 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inby1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_invia1541 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_invia1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inof1548 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inof1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_inon1555 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inon1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_infor1562 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_infor1564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_infrom1569 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_infrom1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_inunder1576 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inunder1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_inover1583 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inover1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inoff1590 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inoff1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_nnstate1599 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_nntime1606 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntime1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nngram1613 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nngram1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnmol1620 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmol1622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nnatmosphere1627 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere1629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nneq1634 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nneq1636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnvol1641 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol1643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnchementity1648 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nntemp1655 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nnflash1662 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash1664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nngeneral1669 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnmethod1676 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nnamount1683 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnpressure1690 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure1692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nncolumn1697 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnchromatography1704 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnvacuum1711 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncycle1718 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nntimes1725 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes1727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_oscarcm1734 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_vbuse1743 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse1745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_vbchange1750 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_vbsubmerge1757 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbsubject1764 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_nnadd1773 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_nnmixture1780 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbadd1787 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd1789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_vbcharge1794 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_vbcontain1801 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain1803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbdrop1808 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbfill1815 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbsuspend1822 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbtreat1829 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat1831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbapparatus1838 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_nnapparatus1845 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus1847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbconcentrate1854 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_nnconcentrate1861 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_vbcool1870 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbdegass1879 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_vbdissolve1888 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbdry1897 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_nndry1904 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nndry1906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbextract1913 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract1915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_nnextract1920 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_vbfilter1929 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter1931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_nnfilter1936 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_vbheat1945 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbincrease1952 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease1954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_vbpartition1961 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbprecipitate1970 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_nnprecipitate1977 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbpurify1986 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_nnpurify1993 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbquench2002 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbrecover2011 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbremove2020 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_nnremove2027 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbstir2036 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbsynthesize2045 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_nnsynthesize2052 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbwait2061 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbwash2070 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbyield2079 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_colon2088 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_colon2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_comma2095 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_comma2097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_apost2102 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_apost2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_neg2109 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_neg2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_dash2116 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dash2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_stop2123 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_stop2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_nnpercent2130 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_lsqb2137 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_rsqb2144 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_lrb2151 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_rrb2158 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_abl2169 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abl2171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_abn2178 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abn2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_abx2187 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abx2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_ap2196 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ap2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_at2205 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_at2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_be2214 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_be2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_bed2223 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bed2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_bedz2232 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_beg2241 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_beg2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bem2250 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bem2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_ben2259 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ben2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_ber2268 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ber2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bez2277 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bez2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cc2286 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cc2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_cd2295 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cd2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_cs2304 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cs2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_dotok2314 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_dod2323 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dod2325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_doz2332 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_doz2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dt2341 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dt2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dti2350 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dti2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dts2359 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dts2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dtx2368 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dtx2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_ex2377 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ex2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_fw2386 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_fw2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_hv2395 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hv2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_hvd2404 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvd2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_hvg2413 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvg2415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_hvn2422 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvn2424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_in2431 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_in2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_jj2440 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jj2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_jjr2449 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjr2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_jjs2458 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjs2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_jjt2467 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjt2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_md2476 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_md2478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_nc2485 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nc2487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_nn2494 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nn2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_nn_poss2503 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss2505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_nns2512 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nns2514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nns_poss2521 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss2523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_np2530 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_np2532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nnp2540 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnp2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_np_poss2550 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nps2559 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nps2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_nps_poss2568 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss2570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nr2577 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nr2579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_od2586 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_od2588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_pn2595 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pn2597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_pn_poss2604 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_pp_poss2613 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_pp_poss_poss2622 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_ppl2631 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppl2633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_ppls2640 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppls2642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ppo2649 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppo2651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pps2658 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pps2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ppss2667 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppss2669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ql2676 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ql2678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_qlp2685 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_qlp2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_rb2694 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rb2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_rbr2703 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rbr2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_rbt2712 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rbt2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_rn2721 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rn2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_rp2730 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rp2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_sym2741 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_sym2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_to2750 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_to2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_uh2759 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_uh2761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_vb2768 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vb2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_vbd2777 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbd2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_vbg2786 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbg2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_vbn2795 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbn2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_vbz2804 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbz2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_wdt2813 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wdt2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_wp_poss2822 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss2824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_wpo2832 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wpo2834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_wps2841 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wps2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_wql2851 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wql2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_wrb2860 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wrb2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence1_in_synpred2_ChemicalChunker192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence2_in_synpred3_ChemicalChunker194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence3_in_synpred4_ChemicalChunker196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred8_ChemicalChunker209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred9_ChemicalChunker220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred10_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred11_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred12_ChemicalChunker260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred13_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred14_ChemicalChunker266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred15_ChemicalChunker300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred16_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred17_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred19_ChemicalChunker346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred21_ChemicalChunker353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred22_ChemicalChunker357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred25_ChemicalChunker367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred26_ChemicalChunker357 = new BitSet(new long[]{0x0000000000001800L,0x0080000100000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_comma_in_synpred26_ChemicalChunker360 = new BitSet(new long[]{0x0000000000001800L,0x0080000000000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_cc_in_synpred26_ChemicalChunker363 = new BitSet(new long[]{0x0000000000001800L,0x0000000000000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_adj_in_synpred26_ChemicalChunker367 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_noun_in_synpred26_ChemicalChunker370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred27_ChemicalChunker378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred28_ChemicalChunker381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred29_ChemicalChunker395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred30_ChemicalChunker398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred34_ChemicalChunker411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred35_ChemicalChunker414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred36_ChemicalChunker417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred37_ChemicalChunker405 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_adj_in_synpred37_ChemicalChunker408 = new BitSet(new long[]{0xFCF00000FFFF1800L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_verb_in_synpred37_ChemicalChunker411 = new BitSet(new long[]{0xFCF00000FFFF1802L,0x0000000076EBD5EBL,0x0001A47000000F80L});
    public static final BitSet FOLLOW_adv_in_synpred37_ChemicalChunker414 = new BitSet(new long[]{0x0000000000001802L,0x0000000000000000L,0x0000007000000F00L});
    public static final BitSet FOLLOW_adj_in_synpred37_ChemicalChunker417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred40_ChemicalChunker423 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001017EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_comma_in_synpred40_ChemicalChunker426 = new BitSet(new long[]{0xFFFFFFB3FFFF3C00L,0x210001007EEBD5FFL,0x001FA47000095F80L});
    public static final BitSet FOLLOW_prepphrase_in_synpred40_ChemicalChunker429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred77_ChemicalChunker529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred78_ChemicalChunker531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred80_ChemicalChunker535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred83_ChemicalChunker541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred87_ChemicalChunker549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred108_ChemicalChunker592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred109_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred112_ChemicalChunker600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred113_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred114_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred116_ChemicalChunker619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred117_ChemicalChunker621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred118_ChemicalChunker623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred121_ChemicalChunker629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred122_ChemicalChunker631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred124_ChemicalChunker635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred126_ChemicalChunker639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_synpred134_ChemicalChunker684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred135_ChemicalChunker686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred139_ChemicalChunker766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred140_ChemicalChunker768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred162_ChemicalChunker894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred163_ChemicalChunker896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred169_ChemicalChunker1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred170_ChemicalChunker1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred172_ChemicalChunker1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred176_ChemicalChunker1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred177_ChemicalChunker1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred178_ChemicalChunker1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred179_ChemicalChunker1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred180_ChemicalChunker1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred182_ChemicalChunker1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred186_ChemicalChunker1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred188_ChemicalChunker1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred189_ChemicalChunker1312 = new BitSet(new long[]{0x030FFFB300003C00L,0x2100010008000014L,0x001E007000095F00L});
    public static final BitSet FOLLOW_noun_in_synpred189_ChemicalChunker1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred190_ChemicalChunker1326 = new BitSet(new long[]{0x0000000000000002L});

}