// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-02-16 14:32:06

    package uk.ac.cam.ch.wwmm.chemicaltagger;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int WS=5;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int NEWLINE=6;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=11 && LA1_0<=15)||(LA1_0>=18 && LA1_0<=36)||(LA1_0>=39 && LA1_0<=75)||(LA1_0>=77 && LA1_0<=99)||LA1_0==101||(LA1_0>=105 && LA1_0<=108)||LA1_0==123||LA1_0==128||(LA1_0>=132 && LA1_0<=134)||(LA1_0>=139 && LA1_0<=144)||LA1_0==146||LA1_0==148||LA1_0==151||LA1_0==163||(LA1_0>=169 && LA1_0<=173)||(LA1_0>=175 && LA1_0<=177)||(LA1_0>=179 && LA1_0<=191)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document207);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 33:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:1: sentences : ( sentence | unmatchedPhrase )+ ( adv | colon )* ( comma | cc | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.adv_return adv4 = null;

        ChemicalChunkerParser.colon_return colon5 = null;

        ChemicalChunkerParser.comma_return comma6 = null;

        ChemicalChunkerParser.cc_return cc7 = null;

        ChemicalChunkerParser.stop_return stop8 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:10: ( ( sentence | unmatchedPhrase )+ ( adv | colon )* ( comma | cc | stop )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+ ( adv | colon )* ( comma | cc | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences229);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences231);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:43: ( adv | colon )*
            loop3:
            do {
                int alt3=3;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_sentences238);
            	    adv4=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:48: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentences240);
            	    colon5=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:56: ( comma | cc | stop )*
            loop4:
            do {
                int alt4=4;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    int LA4_2 = input.LA(2);

                    if ( (LA4_2==TOKEN) ) {
                        int LA4_5 = input.LA(3);

                        if ( (synpred6_ChemicalChunker()) ) {
                            alt4=1;
                        }


                    }


                    }
                    break;
                case 122:
                    {
                    alt4=2;
                    }
                    break;
                case 103:
                    {
                    alt4=3;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:57: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences245);
            	    comma6=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:63: cc
            	    {
            	    pushFollow(FOLLOW_cc_in_sentences247);
            	    cc7=cc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:66: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences249);
            	    stop8=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop8.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase9 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase10 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase11 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:9: ( ( nounphrase | verbphrase | prepphrase )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt5=0;
            loop5:
            do {
                int alt5=4;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence261);
            	    nounphrase9=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence263);
            	    verbphrase10=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase10.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence265);
            	    prepphrase11=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase11.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens12 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase279);
            unmatchedTokens12=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens12.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 41:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:1: unmatchedTokens : ( fw | noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md | neg | number ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw13 = null;

        ChemicalChunkerParser.noun_return noun14 = null;

        ChemicalChunkerParser.verb_return verb15 = null;

        ChemicalChunkerParser.adj_return adj16 = null;

        ChemicalChunkerParser.adv_return adv17 = null;

        ChemicalChunkerParser.inAll_return inAll18 = null;

        ChemicalChunkerParser.dt_return dt19 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd20 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm21 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn22 = null;

        ChemicalChunkerParser.oscaront_return oscaront23 = null;

        ChemicalChunkerParser.brackets_return brackets24 = null;

        ChemicalChunkerParser.sym_return sym25 = null;

        ChemicalChunkerParser.colon_return colon26 = null;

        ChemicalChunkerParser.comma_return comma27 = null;

        ChemicalChunkerParser.md_return md28 = null;

        ChemicalChunkerParser.neg_return neg29 = null;

        ChemicalChunkerParser.number_return number30 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:2: ( ( fw | noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md | neg | number ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( fw | noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md | neg | number )
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( fw | noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md | neg | number )
            int alt6=18;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens300);
                    fw13=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw13.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens302);
                    noun14=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun14.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens304);
                    verb15=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb15.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:18: adj
                    {
                    pushFollow(FOLLOW_adj_in_unmatchedTokens306);
                    adj16=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj16.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:22: adv
                    {
                    pushFollow(FOLLOW_adv_in_unmatchedTokens308);
                    adv17=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv17.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:26: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens310);
                    inAll18=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll18.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens312);
                    dt19=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt19.getTree());

                    }
                    break;
                case 8 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:35: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens314);
                    oscarcd20=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd20.getTree());

                    }
                    break;
                case 9 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:43: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens316);
                    oscarcm21=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm21.getTree());

                    }
                    break;
                case 10 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:51: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens318);
                    oscarrn22=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn22.getTree());

                    }
                    break;
                case 11 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:59: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens320);
                    oscaront23=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront23.getTree());

                    }
                    break;
                case 12 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:68: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens322);
                    brackets24=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets24.getTree());

                    }
                    break;
                case 13 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:77: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens324);
                    sym25=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym25.getTree());

                    }
                    break;
                case 14 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:81: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens326);
                    colon26=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon26.getTree());

                    }
                    break;
                case 15 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:87: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens328);
                    comma27=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma27.getTree());

                    }
                    break;
                case 16 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:93: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens330);
                    md28=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md28.getTree());

                    }
                    break;
                case 17 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:96: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens332);
                    neg29=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg29.getTree());

                    }
                    break;
                case 18 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:100: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens334);
                    number30=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number30.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure31 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase346);
            nounphraseStructure31=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure31.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 48:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:1: nounphraseStructure : ( dt )? ( adj | adv )* ( noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt32 = null;

        ChemicalChunkerParser.adj_return adj33 = null;

        ChemicalChunkerParser.adv_return adv34 = null;

        ChemicalChunkerParser.noun_return noun35 = null;

        ChemicalChunkerParser.number_return number36 = null;

        ChemicalChunkerParser.ratio_return ratio37 = null;

        ChemicalChunkerParser.conjunction_return conjunction38 = null;

        ChemicalChunkerParser.adj_return adj39 = null;

        ChemicalChunkerParser.adv_return adv40 = null;

        ChemicalChunkerParser.noun_return noun41 = null;

        ChemicalChunkerParser.number_return number42 = null;

        ChemicalChunkerParser.ratio_return ratio43 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf44 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN45 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:21: ( ( dt )? ( adj | adv )* ( noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )? ( adj | adv )* ( noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==128) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure365);
                    dt32=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt32.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:27: ( adj | adv )*
            loop8:
            do {
                int alt8=3;
                alt8 = dfa8.predict(input);
                switch (alt8) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_nounphraseStructure369);
            	    adj33=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj33.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:32: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_nounphraseStructure371);
            	    adv34=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv34.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:39: ( noun | number | ratio )+
            int cnt9=0;
            loop9:
            do {
                int alt9=4;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure377);
            	    noun35=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun35.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure379);
            	    number36=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number36.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure381);
            	    ratio37=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio37.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:63: ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )*
            loop13:
            do {
                int alt13=4;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( conjunction )* ( adj )* ( adv )* noun
            	    {
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( conjunction )*
            	    loop10:
            	    do {
            	        int alt10=2;
            	        alt10 = dfa10.predict(input);
            	        switch (alt10) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure389);
            	    	    conjunction38=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction38.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop10;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:77: ( adj )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    pushFollow(FOLLOW_adj_in_nounphraseStructure392);
            	    	    adj39=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj39.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:82: ( adv )*
            	    loop12:
            	    do {
            	        int alt12=2;
            	        int LA12_0 = input.LA(1);

            	        if ( ((LA12_0>=169 && LA12_0<=173)||LA12_0==175) ) {
            	            alt12=1;
            	        }


            	        switch (alt12) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_nounphraseStructure395);
            	    	    adv40=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv40.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop12;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_noun_in_nounphraseStructure399);
            	    noun41=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun41.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:93: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure401);
            	    number42=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number42.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure403);
            	    ratio43=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio43.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:112: ( prepphraseOf | prepphraseIN )*
            loop14:
            do {
                int alt14=3;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==21) ) {
                    int LA14_2 = input.LA(2);

                    if ( (synpred42_ChemicalChunker()) ) {
                        alt14=2;
                    }


                }
                else if ( (LA14_0==27) ) {
                    int LA14_3 = input.LA(2);

                    if ( (synpred41_ChemicalChunker()) ) {
                        alt14=1;
                    }


                }


                switch (alt14) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:113: prepphraseOf
            	    {
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure412);
            	    prepphraseOf44=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf44.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:127: prepphraseIN
            	    {
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure415);
            	    prepphraseIN45=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN45.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc46 = null;

        ChemicalChunkerParser.comma_return comma47 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:2: ( cc | comma )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==122) ) {
                alt15=1;
            }
            else if ( (LA15_0==99) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction429);
                    cc46=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc46.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction431);
                    comma47=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure48 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase441);
            verbphraseStructure48=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure48.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 55:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to49 = null;

        ChemicalChunkerParser.inAll_return inAll50 = null;

        ChemicalChunkerParser.inafter_return inafter51 = null;

        ChemicalChunkerParser.md_return md52 = null;

        ChemicalChunkerParser.adv_return adv53 = null;

        ChemicalChunkerParser.adj_return adj54 = null;

        ChemicalChunkerParser.verb_return verb55 = null;

        ChemicalChunkerParser.md_return md56 = null;

        ChemicalChunkerParser.adv_return adv57 = null;

        ChemicalChunkerParser.adj_return adj58 = null;

        ChemicalChunkerParser.neg_return neg59 = null;

        ChemicalChunkerParser.cc_return cc60 = null;

        ChemicalChunkerParser.comma_return comma61 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase62 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:21: ( ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==177) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==TOKEN) ) {
                    int LA16_3 = input.LA(3);

                    if ( (synpred44_ChemicalChunker()) ) {
                        alt16=1;
                    }
                }
            }
            switch (alt16) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure460);
                    to49=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to49.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: ( inAll )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( ((LA17_0>=18 && LA17_0<=19)||(LA17_0>=21 && LA17_0<=33)||LA17_0==139||LA17_0==177) ) {
                alt17=1;
            }
            else if ( (LA17_0==20) ) {
                int LA17_2 = input.LA(2);

                if ( (LA17_2==TOKEN) ) {
                    int LA17_4 = input.LA(3);

                    if ( (synpred45_ChemicalChunker()) ) {
                        alt17=1;
                    }
                }
            }
            switch (alt17) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure463);
                    inAll50=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll50.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:35: ( inafter )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==20) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure466);
                    inafter51=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter51.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt27=0;
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )*
            	    loop19:
            	    do {
            	        int alt19=2;
            	        int LA19_0 = input.LA(1);

            	        if ( (LA19_0==144) ) {
            	            alt19=1;
            	        }


            	        switch (alt19) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure470);
            	    	    md52=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md52.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop19;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:49: ( adv )*
            	    loop20:
            	    do {
            	        int alt20=2;
            	        int LA20_0 = input.LA(1);

            	        if ( ((LA20_0>=169 && LA20_0<=173)||LA20_0==175) ) {
            	            alt20=1;
            	        }


            	        switch (alt20) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure473);
            	    	    adv53=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv53.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop20;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:54: ( adj )?
            	    int alt21=2;
            	    int LA21_0 = input.LA(1);

            	    if ( ((LA21_0>=12 && LA21_0<=13)||(LA21_0>=140 && LA21_0<=143)) ) {
            	        alt21=1;
            	    }
            	    switch (alt21) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure476);
            	            adj54=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj54.getTree());

            	            }
            	            break;

            	    }

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )+
            	    int cnt22=0;
            	    loop22:
            	    do {
            	        int alt22=2;
            	        alt22 = dfa22.predict(input);
            	        switch (alt22) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure479);
            	    	    verb55=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb55.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt22 >= 1 ) break loop22;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(22, input);
            	                throw eee;
            	        }
            	        cnt22++;
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )*
            	    loop23:
            	    do {
            	        int alt23=2;
            	        int LA23_0 = input.LA(1);

            	        if ( (LA23_0==144) ) {
            	            int LA23_2 = input.LA(2);

            	            if ( (LA23_2==TOKEN) ) {
            	                int LA23_3 = input.LA(3);

            	                if ( (synpred51_ChemicalChunker()) ) {
            	                    alt23=1;
            	                }


            	            }


            	        }


            	        switch (alt23) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure482);
            	    	    md56=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md56.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop23;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )*
            	    loop24:
            	    do {
            	        int alt24=2;
            	        alt24 = dfa24.predict(input);
            	        switch (alt24) {
            	    	case 1 :
            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure485);
            	    	    adv57=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv57.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop24;
            	        }
            	    } while (true);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )?
            	    int alt25=2;
            	    alt25 = dfa25.predict(input);
            	    switch (alt25) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure488);
            	            adj58=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj58.getTree());

            	            }
            	            break;

            	    }

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )?
            	    int alt26=2;
            	    int LA26_0 = input.LA(1);

            	    if ( (LA26_0==101) ) {
            	        int LA26_1 = input.LA(2);

            	        if ( (LA26_1==TOKEN) ) {
            	            int LA26_3 = input.LA(3);

            	            if ( (synpred54_ChemicalChunker()) ) {
            	                alt26=1;
            	            }
            	        }
            	    }
            	    switch (alt26) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure491);
            	            neg59=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg59.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt27 >= 1 ) break loop27;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(27, input);
                        throw eee;
                }
                cnt27++;
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:87: ( ( cc )? ( comma )? prepphrase )*
            loop30:
            do {
                int alt30=2;
                alt30 = dfa30.predict(input);
                switch (alt30) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )? ( comma )? prepphrase
            	    {
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )?
            	    int alt28=2;
            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==122) ) {
            	        alt28=1;
            	    }
            	    switch (alt28) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure498);
            	            cc60=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc60.getTree());

            	            }
            	            break;

            	    }

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:92: ( comma )?
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==99) ) {
            	        alt29=1;
            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure501);
            	            comma61=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma61.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure504);
            	    prepphrase62=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase62.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb63 = null;

        ChemicalChunkerParser.vbp_return vbp64 = null;

        ChemicalChunkerParser.vbg_return vbg65 = null;

        ChemicalChunkerParser.vbd_return vbd66 = null;

        ChemicalChunkerParser.vbz_return vbz67 = null;

        ChemicalChunkerParser.vbn_return vbn68 = null;

        ChemicalChunkerParser.vbuse_return vbuse69 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge70 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject71 = null;

        ChemicalChunkerParser.vbadd_return vbadd72 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge73 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain74 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop75 = null;

        ChemicalChunkerParser.vbfill_return vbfill76 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend77 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat78 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus79 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate80 = null;

        ChemicalChunkerParser.vbcool_return vbcool81 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass82 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve83 = null;

        ChemicalChunkerParser.vbdry_return vbdry84 = null;

        ChemicalChunkerParser.vbextract_return vbextract85 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter86 = null;

        ChemicalChunkerParser.vbheat_return vbheat87 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease88 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition89 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate90 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify91 = null;

        ChemicalChunkerParser.vbquench_return vbquench92 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover93 = null;

        ChemicalChunkerParser.vbremove_return vbremove94 = null;

        ChemicalChunkerParser.vbstir_return vbstir95 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize96 = null;

        ChemicalChunkerParser.vbwait_return vbwait97 = null;

        ChemicalChunkerParser.vbwash_return vbwash98 = null;

        ChemicalChunkerParser.vbyield_return vbyield99 = null;

        ChemicalChunkerParser.vbchange_return vbchange100 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt31=38;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt31=1;
                }
                break;
            case 180:
                {
                alt31=2;
                }
                break;
            case 182:
                {
                alt31=3;
                }
                break;
            case 181:
                {
                alt31=4;
                }
                break;
            case 184:
                {
                alt31=5;
                }
                break;
            case 183:
                {
                alt31=6;
                }
                break;
            case 55:
                {
                alt31=7;
                }
                break;
            case 57:
                {
                alt31=8;
                }
                break;
            case 58:
                {
                alt31=9;
                }
                break;
            case 61:
                {
                alt31=10;
                }
                break;
            case 62:
                {
                alt31=11;
                }
                break;
            case 63:
                {
                alt31=12;
                }
                break;
            case 64:
                {
                alt31=13;
                }
                break;
            case 65:
                {
                alt31=14;
                }
                break;
            case 66:
                {
                alt31=15;
                }
                break;
            case 67:
                {
                alt31=16;
                }
                break;
            case 68:
                {
                alt31=17;
                }
                break;
            case 70:
                {
                alt31=18;
                }
                break;
            case 72:
                {
                alt31=19;
                }
                break;
            case 73:
                {
                alt31=20;
                }
                break;
            case 74:
                {
                alt31=21;
                }
                break;
            case 75:
                {
                alt31=22;
                }
                break;
            case 77:
                {
                alt31=23;
                }
                break;
            case 79:
                {
                alt31=24;
                }
                break;
            case 81:
                {
                alt31=25;
                }
                break;
            case 82:
                {
                alt31=26;
                }
                break;
            case 83:
                {
                alt31=27;
                }
                break;
            case 84:
                {
                alt31=28;
                }
                break;
            case 86:
                {
                alt31=29;
                }
                break;
            case 88:
                {
                alt31=30;
                }
                break;
            case 89:
                {
                alt31=31;
                }
                break;
            case 90:
                {
                alt31=32;
                }
                break;
            case 92:
                {
                alt31=33;
                }
                break;
            case 93:
                {
                alt31=34;
                }
                break;
            case 95:
                {
                alt31=35;
                }
                break;
            case 96:
                {
                alt31=36;
                }
                break;
            case 97:
                {
                alt31=37;
                }
                break;
            case 56:
                {
                alt31=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb514);
                    vb63=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb63.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb516);
                    vbp64=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp64.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb518);
                    vbg65=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg65.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb520);
                    vbd66=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd66.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb522);
                    vbz67=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz67.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb524);
                    vbn68=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn68.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb526);
                    vbuse69=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse69.getTree());

                    }
                    break;
                case 8 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb528);
                    vbsubmerge70=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge70.getTree());

                    }
                    break;
                case 9 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:48: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb530);
                    vbsubject71=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject71.getTree());

                    }
                    break;
                case 10 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:58: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb532);
                    vbadd72=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd72.getTree());

                    }
                    break;
                case 11 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:64: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb534);
                    vbcharge73=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge73.getTree());

                    }
                    break;
                case 12 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:73: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb536);
                    vbcontain74=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain74.getTree());

                    }
                    break;
                case 13 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:83: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb538);
                    vbdrop75=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop75.getTree());

                    }
                    break;
                case 14 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:90: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb540);
                    vbfill76=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill76.getTree());

                    }
                    break;
                case 15 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:97: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb542);
                    vbsuspend77=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend77.getTree());

                    }
                    break;
                case 16 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:107: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb544);
                    vbtreat78=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat78.getTree());

                    }
                    break;
                case 17 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:115: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb546);
                    vbapparatus79=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus79.getTree());

                    }
                    break;
                case 18 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:127: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb548);
                    vbconcentrate80=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate80.getTree());

                    }
                    break;
                case 19 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:141: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb550);
                    vbcool81=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool81.getTree());

                    }
                    break;
                case 20 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:148: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb552);
                    vbdegass82=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass82.getTree());

                    }
                    break;
                case 21 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:157: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb554);
                    vbdissolve83=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve83.getTree());

                    }
                    break;
                case 22 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:168: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb556);
                    vbdry84=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry84.getTree());

                    }
                    break;
                case 23 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:174: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb558);
                    vbextract85=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract85.getTree());

                    }
                    break;
                case 24 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:184: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb560);
                    vbfilter86=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter86.getTree());

                    }
                    break;
                case 25 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:194: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb563);
                    vbheat87=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat87.getTree());

                    }
                    break;
                case 26 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:201: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb565);
                    vbincrease88=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease88.getTree());

                    }
                    break;
                case 27 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:212: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb567);
                    vbpartition89=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition89.getTree());

                    }
                    break;
                case 28 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:224: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb569);
                    vbprecipitate90=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate90.getTree());

                    }
                    break;
                case 29 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:238: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb571);
                    vbpurify91=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify91.getTree());

                    }
                    break;
                case 30 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:247: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb573);
                    vbquench92=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench92.getTree());

                    }
                    break;
                case 31 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:256: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb575);
                    vbrecover93=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover93.getTree());

                    }
                    break;
                case 32 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:266: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb577);
                    vbremove94=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove94.getTree());

                    }
                    break;
                case 33 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:275: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb579);
                    vbstir95=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir95.getTree());

                    }
                    break;
                case 34 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:282: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb581);
                    vbsynthesize96=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize96.getTree());

                    }
                    break;
                case 35 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:295: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb583);
                    vbwait97=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait97.getTree());

                    }
                    break;
                case 36 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:302: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb585);
                    vbwash98=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash98.getTree());

                    }
                    break;
                case 37 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:309: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb587);
                    vbyield99=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield99.getTree());

                    }
                    break;
                case 38 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:317: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb589);
                    vbchange100=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange100.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd101 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd102 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:8: ( cd | oscarcd )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==123) ) {
                alt32=1;
            }
            else if ( (LA32_0==11) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number597);
                    cd101=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd101.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number599);
                    oscarcd102=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt103 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss104 = null;

        ChemicalChunkerParser.wpo_return wpo105 = null;

        ChemicalChunkerParser.wpo_return wpo106 = null;

        ChemicalChunkerParser.wps_return wps107 = null;

        ChemicalChunkerParser.wql_return wql108 = null;

        ChemicalChunkerParser.wrb_return wrb109 = null;

        ChemicalChunkerParser.ex_return ex110 = null;

        ChemicalChunkerParser.pdt_return pdt111 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt33=9;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause607);
                    wdt103=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt103.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause609);
                    wp_poss104=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss104.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause611);
                    wpo105=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo105.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause613);
                    wpo106=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo106.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause615);
                    wps107=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps107.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause617);
                    wql108=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql108.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause619);
                    wrb109=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb109.getTree());

                    }
                    break;
                case 8 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause621);
                    ex110=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex110.getTree());

                    }
                    break;
                case 9 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause623);
                    pdt111=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt111.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: noun : ( prp | unnamedmolecule | molecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp112 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule113 = null;

        ChemicalChunkerParser.molecule_return molecule114 = null;

        ChemicalChunkerParser.nnstate_return nnstate115 = null;

        ChemicalChunkerParser.nn_return nn116 = null;

        ChemicalChunkerParser.nns_return nns117 = null;

        ChemicalChunkerParser.nnp_return nnp118 = null;

        ChemicalChunkerParser.nnadd_return nnadd119 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase120 = null;

        ChemicalChunkerParser.nnexample_return nnexample121 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr122 = null;

        ChemicalChunkerParser.range_return range123 = null;

        ChemicalChunkerParser.amount_return amount124 = null;

        ChemicalChunkerParser.mixture_return mixture125 = null;

        ChemicalChunkerParser.nntime_return nntime126 = null;

        ChemicalChunkerParser.apparatus_return apparatus127 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere128 = null;

        ChemicalChunkerParser.nneq_return nneq129 = null;

        ChemicalChunkerParser.quantity_return quantity130 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity131 = null;

        ChemicalChunkerParser.measurements_return measurements132 = null;

        ChemicalChunkerParser.nntemp_return nntemp133 = null;

        ChemicalChunkerParser.nnflash_return nnflash134 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral135 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod136 = null;

        ChemicalChunkerParser.nnamount_return nnamount137 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure138 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn139 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography140 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum141 = null;

        ChemicalChunkerParser.nncycle_return nncycle142 = null;

        ChemicalChunkerParser.nntimes_return nntimes143 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate144 = null;

        ChemicalChunkerParser.nnvol_return nnvol145 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify146 = null;

        ChemicalChunkerParser.wdt_return wdt147 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss148 = null;

        ChemicalChunkerParser.wpo_return wpo149 = null;

        ChemicalChunkerParser.wps_return wps150 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize151 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture152 = null;

        ChemicalChunkerParser.oscaront_return oscaront153 = null;

        ChemicalChunkerParser.number_return number154 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound155 = null;

        ChemicalChunkerParser.nnextract_return nnextract156 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter157 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate158 = null;

        ChemicalChunkerParser.nnremove_return nnremove159 = null;

        ChemicalChunkerParser.fw_return fw160 = null;

        ChemicalChunkerParser.fwin_return fwin161 = null;

        ChemicalChunkerParser.sym_return sym162 = null;

        ChemicalChunkerParser.clause_return clause163 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:6: ( prp | unnamedmolecule | molecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:9: prp
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_prp_in_noun631);
            prp112=prp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prp112.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:13: unnamedmolecule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmolecule_in_noun633);
            unnamedmolecule113=unnamedmolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule113.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:29: molecule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_molecule_in_noun635);
            molecule114=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule114.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:38: nnstate
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnstate_in_noun637);
            nnstate115=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate115.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:46: nn
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nn_in_noun639);
            nn116=nn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn116.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:49: nns
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nns_in_noun641);
            nns117=nns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nns117.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:53: nnp
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnp_in_noun643);
            nnp118=nnp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp118.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:57: nnadd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnadd_in_noun645);
            nnadd119=nnadd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd119.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:63: preparationphrase
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_preparationphrase_in_noun647);
            preparationphrase120=preparationphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase120.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:81: nnexample
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnexample_in_noun649);
            nnexample121=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample121.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:91: oscarcpr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcpr_in_noun651);
            oscarcpr122=oscarcpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr122.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:100: range
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_range_in_noun653);
            range123=range();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, range123.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:106: amount
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_amount_in_noun655);
            amount124=amount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, amount124.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:113: mixture
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mixture_in_noun657);
            mixture125=mixture();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture125.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:121: nntime
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nntime_in_noun659);
            nntime126=nntime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime126.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:128: apparatus
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_noun661);
            apparatus127=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus127.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:138: nnatmosphere
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnatmosphere_in_noun663);
            nnatmosphere128=nnatmosphere();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere128.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:151: nneq
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nneq_in_noun665);
            nneq129=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq129.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:156: quantity
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_noun667);
            quantity130=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity130.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:165: nnchementity
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnchementity_in_noun669);
            nnchementity131=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity131.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:178: measurements
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_noun671);
            measurements132=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements132.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:191: nntemp
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nntemp_in_noun673);
            nntemp133=nntemp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp133.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:198: nnflash
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnflash_in_noun675);
            nnflash134=nnflash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash134.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:206: nngeneral
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nngeneral_in_noun677);
            nngeneral135=nngeneral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral135.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:216: nnmethod
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnmethod_in_noun679);
            nnmethod136=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod136.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:225: nnamount
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnamount_in_noun681);
            nnamount137=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount137.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:234: nnpressure
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnpressure_in_noun683);
            nnpressure138=nnpressure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure138.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:245: nncolumn
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nncolumn_in_noun685);
            nncolumn139=nncolumn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn139.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:254: nnchromatography
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnchromatography_in_noun687);
            nnchromatography140=nnchromatography();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography140.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:271: nnvacuum
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnvacuum_in_noun689);
            nnvacuum141=nnvacuum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum141.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:280: nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nncycle_in_noun691);
            nncycle142=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle142.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:288: nntimes
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nntimes_in_noun693);
            nntimes143=nntimes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes143.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:296: nnconcentrate
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnconcentrate_in_noun695);
            nnconcentrate144=nnconcentrate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate144.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:310: nnvol
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnvol_in_noun697);
            nnvol145=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol145.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:316: nnpurify
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnpurify_in_noun699);
            nnpurify146=nnpurify();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify146.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:325: wdt
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_wdt_in_noun701);
            wdt147=wdt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt147.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:329: wp_poss
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_wp_poss_in_noun703);
            wp_poss148=wp_poss();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss148.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:337: wpo
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_wpo_in_noun705);
            wpo149=wpo();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo149.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:341: wps
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_wps_in_noun707);
            wps150=wps();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, wps150.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:345: nnsynthesize
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnsynthesize_in_noun709);
            nnsynthesize151=nnsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize151.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:358: nnmixture
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnmixture_in_noun711);
            nnmixture152=nnmixture();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture152.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:368: oscaront
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscaront_in_noun713);
            oscaront153=oscaront();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront153.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:377: number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_noun715);
            number154=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number154.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:384: oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarCompound_in_noun717);
            oscarCompound155=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound155.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:398: nnextract
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnextract_in_noun719);
            nnextract156=nnextract();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract156.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:408: nnfilter
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnfilter_in_noun721);
            nnfilter157=nnfilter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter157.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:417: nnprecipitate
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnprecipitate_in_noun723);
            nnprecipitate158=nnprecipitate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate158.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:431: nnremove
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnremove_in_noun725);
            nnremove159=nnremove();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove159.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:440: fw
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_fw_in_noun727);
            fw160=fw();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fw160.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:443: fwin
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_fwin_in_noun729);
            fwin161=fwin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin161.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:448: sym
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sym_in_noun731);
            sym162=sym();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sym162.getTree());

            }// /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:452: clause
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_clause_in_noun733);
            clause163=clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, clause163.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd164 = null;

        ChemicalChunkerParser.dash_return dash165 = null;

        ChemicalChunkerParser.cd_return cd166 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:6: ( cd dash cd )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range739);
            cd164=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd164.getTree());
            pushFollow(FOLLOW_dash_in_range741);
            dash165=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash165.getTree());
            pushFollow(FOLLOW_cd_in_range743);
            cd166=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd166.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio167 = null;

        ChemicalChunkerParser.nounratio_return nounratio168 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:9: ( numberratio | nounratio )
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:9: ( numberratio | nounratio )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==123) ) {
                int LA35_1 = input.LA(2);

                if ( (LA35_1==TOKEN) ) {
                    int LA35_3 = input.LA(3);

                    if ( ((LA35_3>=37 && LA35_3<=39)||LA35_3==42||LA35_3==102||LA35_3==104||LA35_3==146) ) {
                        alt35=2;
                    }
                    else if ( (LA35_3==98) ) {
                        int LA35_4 = input.LA(4);

                        if ( (LA35_4==TOKEN) ) {
                            int LA35_5 = input.LA(5);

                            if ( ((LA35_5>=11 && LA35_5<=15)||(LA35_5>=34 && LA35_5<=36)||(LA35_5>=39 && LA35_5<=54)||(LA35_5>=59 && LA35_5<=60)||LA35_5==69||LA35_5==71||LA35_5==78||LA35_5==80||LA35_5==85||LA35_5==87||LA35_5==91||(LA35_5>=93 && LA35_5<=94)||LA35_5==99||LA35_5==107||(LA35_5>=132 && LA35_5<=134)||(LA35_5>=140 && LA35_5<=143)||LA35_5==146||LA35_5==148||LA35_5==151||LA35_5==163||LA35_5==176||(LA35_5>=185 && LA35_5<=191)) ) {
                                alt35=2;
                            }
                            else if ( (LA35_5==123) ) {
                                int LA35_6 = input.LA(6);

                                if ( (LA35_6==TOKEN) ) {
                                    int LA35_7 = input.LA(7);

                                    if ( (synpred156_ChemicalChunker()) ) {
                                        alt35=1;
                                    }
                                    else if ( (true) ) {
                                        alt35=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 35, 7, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 35, 6, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 35, 5, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 35, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA35_0>=11 && LA35_0<=15)||(LA35_0>=34 && LA35_0<=36)||(LA35_0>=39 && LA35_0<=54)||(LA35_0>=59 && LA35_0<=60)||LA35_0==69||LA35_0==71||LA35_0==78||LA35_0==80||LA35_0==85||LA35_0==87||LA35_0==91||(LA35_0>=93 && LA35_0<=94)||LA35_0==99||LA35_0==107||(LA35_0>=132 && LA35_0<=134)||(LA35_0>=140 && LA35_0<=143)||LA35_0==146||LA35_0==148||LA35_0==151||LA35_0==163||LA35_0==176||(LA35_0>=185 && LA35_0<=191)) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio751);
                    numberratio167=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio167.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio753);
                    nounratio168=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio168.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numberratio, nounratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 63:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd169 = null;

        ChemicalChunkerParser.colon_return colon170 = null;

        ChemicalChunkerParser.cd_return cd171 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:13: ( cd ( colon cd )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio777);
            cd169=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd169.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:19: ( colon cd )+
            int cnt36=0;
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==98) ) {
                    int LA36_2 = input.LA(2);

                    if ( (LA36_2==TOKEN) ) {
                        int LA36_3 = input.LA(3);

                        if ( (LA36_3==123) ) {
                            int LA36_4 = input.LA(4);

                            if ( (LA36_4==TOKEN) ) {
                                int LA36_5 = input.LA(5);

                                if ( (synpred157_ChemicalChunker()) ) {
                                    alt36=1;
                                }


                            }


                        }


                    }


                }


                switch (alt36) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio780);
            	    colon170=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon170.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio782);
            	    cd171=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd171.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        throw eee;
                }
                cnt36++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun172 = null;

        ChemicalChunkerParser.colon_return colon173 = null;

        ChemicalChunkerParser.noun_return noun174 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:2: ( noun ( colon noun )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio795);
            noun172=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun172.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:11: ( colon noun )+
            int cnt37=0;
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==98) ) {
                    int LA37_2 = input.LA(2);

                    if ( (synpred158_ChemicalChunker()) ) {
                        alt37=1;
                    }


                }


                switch (alt37) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio799);
            	    colon173=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon173.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio801);
            	    noun174=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun174.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt37 >= 1 ) break loop37;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(37, input);
                        throw eee;
                }
                cnt37++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2175 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1176 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==99) ) {
                alt38=1;
            }
            else if ( (LA38_0==107) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture814);
                    mixtureStructure2175=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2175.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture816);
                    mixtureStructure1176=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1176.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 68:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma177 = null;

        ChemicalChunkerParser.lrb_return lrb178 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent179 = null;

        ChemicalChunkerParser.rrb_return rrb180 = null;

        ChemicalChunkerParser.comma_return comma181 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:18: ( comma lrb mixtureContent rrb comma )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure2837);
            comma177=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma177.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure2839);
            lrb178=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb178.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure2841);
            mixtureContent179=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent179.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure2843);
            rrb180=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb180.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure2845);
            comma181=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma181.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb182 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent183 = null;

        ChemicalChunkerParser.rrb_return rrb184 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:18: ( lrb mixtureContent rrb )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure1852);
            lrb182=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb182.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure1854);
            mixtureContent183=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent183.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure1856);
            rrb184=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw185 = null;

        ChemicalChunkerParser.verb_return verb186 = null;

        ChemicalChunkerParser.measurements_return measurements187 = null;

        ChemicalChunkerParser.md_return md188 = null;

        ChemicalChunkerParser.stop_return stop189 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound190 = null;

        ChemicalChunkerParser.molecule_return molecule191 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule192 = null;

        ChemicalChunkerParser.dash_return dash193 = null;

        ChemicalChunkerParser.sym_return sym194 = null;

        ChemicalChunkerParser.cd_return cd195 = null;

        ChemicalChunkerParser.noun_return noun196 = null;

        ChemicalChunkerParser.inof_return inof197 = null;

        ChemicalChunkerParser.inAll_return inAll198 = null;

        ChemicalChunkerParser.cd_return cd199 = null;

        ChemicalChunkerParser.comma_return comma200 = null;

        ChemicalChunkerParser.adj_return adj201 = null;

        ChemicalChunkerParser.colon_return colon202 = null;

        ChemicalChunkerParser.stop_return stop203 = null;

        ChemicalChunkerParser.fw_return fw204 = null;

        ChemicalChunkerParser.verb_return verb205 = null;

        ChemicalChunkerParser.measurements_return measurements206 = null;

        ChemicalChunkerParser.md_return md207 = null;

        ChemicalChunkerParser.stop_return stop208 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound209 = null;

        ChemicalChunkerParser.molecule_return molecule210 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule211 = null;

        ChemicalChunkerParser.dash_return dash212 = null;

        ChemicalChunkerParser.sym_return sym213 = null;

        ChemicalChunkerParser.cd_return cd214 = null;

        ChemicalChunkerParser.noun_return noun215 = null;

        ChemicalChunkerParser.inof_return inof216 = null;

        ChemicalChunkerParser.inAll_return inAll217 = null;

        ChemicalChunkerParser.cd_return cd218 = null;

        ChemicalChunkerParser.comma_return comma219 = null;

        ChemicalChunkerParser.adj_return adj220 = null;

        ChemicalChunkerParser.colon_return colon221 = null;

        ChemicalChunkerParser.stop_return stop222 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt39=19;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent865);
                    fw185=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw185.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent867);
                    verb186=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb186.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent869);
                    measurements187=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements187.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent871);
                    md188=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md188.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent873);
                    stop189=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop189.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent875);
                    oscarCompound190=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound190.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent877);
                    molecule191=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule191.getTree());

                    }
                    break;
                case 8 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent879);
                    unnamedmolecule192=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule192.getTree());

                    }
                    break;
                case 9 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent881);
                    dash193=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash193.getTree());

                    }
                    break;
                case 10 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent883);
                    sym194=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym194.getTree());

                    }
                    break;
                case 11 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent885);
                    cd195=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd195.getTree());

                    }
                    break;
                case 12 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent887);
                    noun196=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun196.getTree());

                    }
                    break;
                case 13 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent889);
                    inof197=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof197.getTree());

                    }
                    break;
                case 14 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent891);
                    inAll198=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll198.getTree());

                    }
                    break;
                case 15 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent893);
                    cd199=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd199.getTree());

                    }
                    break;
                case 16 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent895);
                    comma200=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma200.getTree());

                    }
                    break;
                case 17 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent897);
                    adj201=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj201.getTree());

                    }
                    break;
                case 18 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent899);
                    colon202=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon202.getTree());

                    }
                    break;
                case 19 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent901);
                    stop203=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop203.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt40=0;
            loop40:
            do {
                int alt40=20;
                alt40 = dfa40.predict(input);
                switch (alt40) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:142: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent905);
            	    fw204=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw204.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:145: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent907);
            	    verb205=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb205.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:150: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent909);
            	    measurements206=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements206.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:163: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent911);
            	    md207=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md207.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:166: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent913);
            	    stop208=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop208.getTree());

            	    }
            	    break;
            	case 6 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:171: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent915);
            	    oscarCompound209=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound209.getTree());

            	    }
            	    break;
            	case 7 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:185: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent917);
            	    molecule210=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule210.getTree());

            	    }
            	    break;
            	case 8 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:194: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent919);
            	    unnamedmolecule211=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule211.getTree());

            	    }
            	    break;
            	case 9 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:210: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent921);
            	    dash212=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash212.getTree());

            	    }
            	    break;
            	case 10 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:215: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent923);
            	    sym213=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym213.getTree());

            	    }
            	    break;
            	case 11 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:219: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent925);
            	    cd214=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd214.getTree());

            	    }
            	    break;
            	case 12 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:222: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent927);
            	    noun215=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun215.getTree());

            	    }
            	    break;
            	case 13 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:227: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent929);
            	    inof216=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof216.getTree());

            	    }
            	    break;
            	case 14 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:232: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent931);
            	    inAll217=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll217.getTree());

            	    }
            	    break;
            	case 15 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:238: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent933);
            	    cd218=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd218.getTree());

            	    }
            	    break;
            	case 16 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:241: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent935);
            	    comma219=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma219.getTree());

            	    }
            	    break;
            	case 17 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:247: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent937);
            	    adj220=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj220.getTree());

            	    }
            	    break;
            	case 18 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:251: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent939);
            	    colon221=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon221.getTree());

            	    }
            	    break;
            	case 19 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:257: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent941);
            	    stop222=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop222.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj223 = null;

        ChemicalChunkerParser.jjr_return jjr224 = null;

        ChemicalChunkerParser.jjs_return jjs225 = null;

        ChemicalChunkerParser.jjt_return jjt226 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj227 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn228 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt41=6;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt41=1;
                }
                break;
            case 141:
                {
                alt41=2;
                }
                break;
            case 142:
                {
                alt41=3;
                }
                break;
            case 143:
                {
                alt41=4;
                }
                break;
            case 12:
                {
                alt41=5;
                }
                break;
            case 13:
                {
                alt41=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj951);
                    jj223=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj223.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj953);
                    jjr224=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr224.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj955);
                    jjs225=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs225.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj957);
                    jjt226=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt226.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj959);
                    oscarcj227=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj227.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj961);
                    oscarrn228=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn228.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:1: adv : ( rb | rbr | rbt | rp | rbs | rbconj );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb229 = null;

        ChemicalChunkerParser.rbr_return rbr230 = null;

        ChemicalChunkerParser.rbt_return rbt231 = null;

        ChemicalChunkerParser.rp_return rp232 = null;

        ChemicalChunkerParser.rbs_return rbs233 = null;

        ChemicalChunkerParser.rbconj_return rbconj234 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:5: ( rb | rbr | rbt | rp | rbs | rbconj )
            int alt42=6;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt42=1;
                }
                break;
            case 170:
                {
                alt42=2;
                }
                break;
            case 172:
                {
                alt42=3;
                }
                break;
            case 175:
                {
                alt42=4;
                }
                break;
            case 173:
                {
                alt42=5;
                }
                break;
            case 171:
                {
                alt42=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv969);
                    rb229=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb229.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv971);
                    rbr230=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr230.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv973);
                    rbt231=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt231.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv975);
                    rp232=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp232.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv977);
                    rbs233=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs233.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:25: rbconj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbconj_in_adv979);
                    rbconj234=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj234.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTemp | prepphraseTime | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg235 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere236 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp237 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime238 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN239 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther240 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTemp | prepphraseTime | prepphraseIN | prepphraseOther ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:5: ( neg )? ( prepphraseAtmosphere | prepphraseTemp | prepphraseTime | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:5: ( neg )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==101) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase992);
                    neg235=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg235.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:10: ( prepphraseAtmosphere | prepphraseTemp | prepphraseTime | prepphraseIN | prepphraseOther )
            int alt44=5;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase996);
                    prepphraseAtmosphere236=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere236.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:32: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase998);
                    prepphraseTemp237=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp237.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1000);
                    prepphraseTime238=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime238.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1002);
                    prepphraseIN239=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN239.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1004);
                    prepphraseOther240=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther240.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: prepphraseOther : ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv241 = null;

        ChemicalChunkerParser.adj_return adj242 = null;

        ChemicalChunkerParser.inAll_return inAll243 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase244 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:2: ( ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:4: ( adv | adj )? ( inAll )+ nounphrase
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:4: ( adv | adj )?
            int alt45=3;
            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=169 && LA45_0<=173)||LA45_0==175) ) {
                alt45=1;
            }
            else if ( ((LA45_0>=12 && LA45_0<=13)||(LA45_0>=140 && LA45_0<=143)) ) {
                alt45=2;
            }
            switch (alt45) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:5: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseOther1017);
                    adv241=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv241.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:9: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseOther1019);
                    adj242=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj242.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:15: ( inAll )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( ((LA46_0>=18 && LA46_0<=33)||LA46_0==139||LA46_0==177) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1023);
            	    inAll243=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll243.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1027);
            nounphrase244=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase244.getTree());


            // AST REWRITE
            // elements: adj, inAll, nounphrase, adv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 82:34: -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:38: ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:60: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:65: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof245 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase246 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1057);
            inof245=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof245.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1060);
            nounphrase246=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase246.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 84:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: prepphraseTime : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntime )+ -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntime )+ ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv247 = null;

        ChemicalChunkerParser.adj_return adj248 = null;

        ChemicalChunkerParser.inAll_return inAll249 = null;

        ChemicalChunkerParser.dt_return dt250 = null;

        ChemicalChunkerParser.adv_return adv251 = null;

        ChemicalChunkerParser.adj_return adj252 = null;

        ChemicalChunkerParser.cd_return cd253 = null;

        ChemicalChunkerParser.nntime_return nntime254 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:2: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntime )+ -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntime )+ ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:3: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntime )+
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:3: ( adv | adj )?
            int alt47=3;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:4: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTime1083);
                    adv247=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv247.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:8: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTime1085);
                    adj248=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj248.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:14: ( inAll )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=18 && LA48_0<=33)||LA48_0==139||LA48_0==177) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTime1089);
                    inAll249=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll249.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:22: ( dt )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==128) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTime1093);
                    dt250=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt250.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:26: ( adv | adj )?
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=169 && LA50_0<=173)||LA50_0==175) ) {
                alt50=1;
            }
            else if ( ((LA50_0>=12 && LA50_0<=13)||(LA50_0>=140 && LA50_0<=143)) ) {
                alt50=2;
            }
            switch (alt50) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:27: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTime1097);
                    adv251=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv251.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:31: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTime1099);
                    adj252=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj252.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:37: ( cd )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==123) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTime1103);
                    cd253=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd253.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:41: ( nntime )+
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==36) ) {
                    int LA52_2 = input.LA(2);

                    if ( (synpred222_ChemicalChunker()) ) {
                        alt52=1;
                    }


                }


                switch (alt52) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepphraseTime1106);
            	    nntime254=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nntime.add(nntime254.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);



            // AST REWRITE
            // elements: dt, inAll, nntime, adj, adv, adj, adv, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:49: -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntime )+ )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:53: ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntime )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:75: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:80: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:85: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:92: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:96: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:101: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:106: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                if ( !(stream_nntime.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nntime.hasNext() ) {
                    adaptor.addChild(root_1, stream_nntime.nextTree());

                }
                stream_nntime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin255 = null;

        ChemicalChunkerParser.molecule_return molecule256 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1149);
            inin255=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin255.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1151);
            molecule256=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule256.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: prepphraseAtmosphere : inunder ( dt )? ( adv | adj )? molecule ( nnatmosphere )? -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( adv )? ( adj )? molecule ( nnatmosphere )? ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder257 = null;

        ChemicalChunkerParser.dt_return dt258 = null;

        ChemicalChunkerParser.adv_return adv259 = null;

        ChemicalChunkerParser.adj_return adj260 = null;

        ChemicalChunkerParser.molecule_return molecule261 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere262 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inunder=new RewriteRuleSubtreeStream(adaptor,"rule inunder");
        RewriteRuleSubtreeStream stream_nnatmosphere=new RewriteRuleSubtreeStream(adaptor,"rule nnatmosphere");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:2: ( inunder ( dt )? ( adv | adj )? molecule ( nnatmosphere )? -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( adv )? ( adj )? molecule ( nnatmosphere )? ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:4: inunder ( dt )? ( adv | adj )? molecule ( nnatmosphere )?
            {
            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphere1175);
            inunder257=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inunder.add(inunder257.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:13: ( dt )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==128) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphere1178);
                    dt258=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt258.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:17: ( adv | adj )?
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=169 && LA54_0<=173)||LA54_0==175) ) {
                alt54=1;
            }
            else if ( ((LA54_0>=12 && LA54_0<=13)||(LA54_0>=140 && LA54_0<=143)) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:18: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseAtmosphere1182);
                    adv259=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv259.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:22: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseAtmosphere1184);
                    adj260=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj260.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphere1188);
            molecule261=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule261.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:37: ( nnatmosphere )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==40) ) {
                int LA55_1 = input.LA(2);

                if ( (LA55_1==TOKEN) ) {
                    int LA55_3 = input.LA(3);

                    if ( (synpred226_ChemicalChunker()) ) {
                        alt55=1;
                    }
                }
            }
            switch (alt55) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphere1190);
                    nnatmosphere262=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnatmosphere.add(nnatmosphere262.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: adj, nnatmosphere, molecule, dt, inunder, adv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 93:51: -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( adv )? ( adj )? molecule ( nnatmosphere )? )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:55: ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( adv )? ( adj )? molecule ( nnatmosphere )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_inunder.nextTree());
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:92: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:96: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:101: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                adaptor.addChild(root_1, stream_molecule.nextTree());
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:115: ( nnatmosphere )?
                if ( stream_nnatmosphere.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnatmosphere.nextTree());

                }
                stream_nnatmosphere.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in263 = null;

        ChemicalChunkerParser.inafter_return inafter264 = null;

        ChemicalChunkerParser.inas_return inas265 = null;

        ChemicalChunkerParser.inbefore_return inbefore266 = null;

        ChemicalChunkerParser.inby_return inby267 = null;

        ChemicalChunkerParser.infor_return infor268 = null;

        ChemicalChunkerParser.infrom_return infrom269 = null;

        ChemicalChunkerParser.inin_return inin270 = null;

        ChemicalChunkerParser.ininto_return ininto271 = null;

        ChemicalChunkerParser.inof_return inof272 = null;

        ChemicalChunkerParser.inoff_return inoff273 = null;

        ChemicalChunkerParser.inon_return inon274 = null;

        ChemicalChunkerParser.inover_return inover275 = null;

        ChemicalChunkerParser.inunder_return inunder276 = null;

        ChemicalChunkerParser.invia_return invia277 = null;

        ChemicalChunkerParser.inwith_return inwith278 = null;

        ChemicalChunkerParser.inwithout_return inwithout279 = null;

        ChemicalChunkerParser.to_return to280 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt56=18;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt56=1;
                }
                break;
            case 20:
                {
                alt56=2;
                }
                break;
            case 18:
                {
                alt56=3;
                }
                break;
            case 19:
                {
                alt56=4;
                }
                break;
            case 25:
                {
                alt56=5;
                }
                break;
            case 29:
                {
                alt56=6;
                }
                break;
            case 30:
                {
                alt56=7;
                }
                break;
            case 21:
                {
                alt56=8;
                }
                break;
            case 22:
                {
                alt56=9;
                }
                break;
            case 27:
                {
                alt56=10;
                }
                break;
            case 33:
                {
                alt56=11;
                }
                break;
            case 28:
                {
                alt56=12;
                }
                break;
            case 32:
                {
                alt56=13;
                }
                break;
            case 31:
                {
                alt56=14;
                }
                break;
            case 26:
                {
                alt56=15;
                }
                break;
            case 23:
                {
                alt56=16;
                }
                break;
            case 24:
                {
                alt56=17;
                }
                break;
            case 177:
                {
                alt56=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1229);
                    in263=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in263.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1231);
                    inafter264=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter264.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1233);
                    inas265=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas265.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1235);
                    inbefore266=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore266.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1237);
                    inby267=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby267.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1239);
                    infor268=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor268.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1241);
                    infrom269=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom269.getTree());

                    }
                    break;
                case 8 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1243);
                    inin270=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin270.getTree());

                    }
                    break;
                case 9 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1245);
                    ininto271=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto271.getTree());

                    }
                    break;
                case 10 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1247);
                    inof272=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof272.getTree());

                    }
                    break;
                case 11 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1249);
                    inoff273=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff273.getTree());

                    }
                    break;
                case 12 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1251);
                    inon274=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon274.getTree());

                    }
                    break;
                case 13 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1253);
                    inover275=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover275.getTree());

                    }
                    break;
                case 14 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1255);
                    inunder276=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder276.getTree());

                    }
                    break;
                case 15 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1257);
                    invia277=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia277.getTree());

                    }
                    break;
                case 16 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1259);
                    inwith278=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith278.getTree());

                    }
                    break;
                case 17 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1261);
                    inwithout279=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout279.getTree());

                    }
                    break;
                case 18 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1263);
                    to280=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+ -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv281 = null;

        ChemicalChunkerParser.adj_return adj282 = null;

        ChemicalChunkerParser.inAll_return inAll283 = null;

        ChemicalChunkerParser.dt_return dt284 = null;

        ChemicalChunkerParser.adv_return adv285 = null;

        ChemicalChunkerParser.adj_return adj286 = null;

        ChemicalChunkerParser.cd_return cd287 = null;

        ChemicalChunkerParser.nntemp_return nntemp288 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+ -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:18: ( adv | adj )?
            int alt57=3;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:19: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1271);
                    adv281=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv281.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:23: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1273);
                    adj282=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj282.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:29: ( inAll )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( ((LA58_0>=18 && LA58_0<=33)||LA58_0==139||LA58_0==177) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp1277);
                    inAll283=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll283.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:36: ( dt )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==128) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTemp1280);
                    dt284=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt284.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:40: ( adv | adj )?
            int alt60=3;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=169 && LA60_0<=173)||LA60_0==175) ) {
                alt60=1;
            }
            else if ( ((LA60_0>=12 && LA60_0<=13)||(LA60_0>=140 && LA60_0<=143)) ) {
                alt60=2;
            }
            switch (alt60) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:41: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1284);
                    adv285=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv285.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:45: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1286);
                    adj286=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj286.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:51: ( cd )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==123) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTemp1290);
                    cd287=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd287.getTree());

                    }
                    break;

            }

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:55: ( nntemp )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==44) ) {
                    int LA62_2 = input.LA(2);

                    if ( (synpred251_ChemicalChunker()) ) {
                        alt62=1;
                    }


                }


                switch (alt62) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTemp1293);
            	    nntemp288=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nntemp.add(nntemp288.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);



            // AST REWRITE
            // elements: adj, adv, adv, cd, adj, nntemp, dt, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 97:63: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:67: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:89: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:94: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:100: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:108: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:112: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:117: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:122: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                if ( !(stream_nntemp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nntemp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nntemp.nextTree());

                }
                stream_nntemp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:1: amount : cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd289 = null;

        ChemicalChunkerParser.nnamount_return nnamount290 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:8: ( cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount1341);
            cd289=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd289.getTree());
            pushFollow(FOLLOW_nnamount_in_amount1343);
            nnamount290=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount290.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:22: -> ^( NODE[\"AMOUNT\"] cd nnamount )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:25: ^( NODE[\"AMOUNT\"] cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: mass : cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd291 = null;

        ChemicalChunkerParser.nnmass_return nnmass292 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:6: ( cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass1364);
            cd291=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd291.getTree());
            pushFollow(FOLLOW_nnmass_in_mass1366);
            nnmass292=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass292.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 101:17: -> ^( NODE[\"MASS\"] cd nnmass )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:20: ^( NODE[\"MASS\"] cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd293 = null;

        ChemicalChunkerParser.nn_return nn294 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent295 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1387);
            cd293=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd293.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:14: ( nn )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==146) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1389);
                    nn294=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn294.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1392);
            nnpercent295=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent295.getTree());


            // AST REWRITE
            // elements: nn, cd, nnpercent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 102:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd296 = null;

        ChemicalChunkerParser.nnvol_return nnvol297 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume1416);
            cd296=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd296.getTree());
            pushFollow(FOLLOW_nnvol_in_volume1418);
            nnvol297=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol297.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 103:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: molar : cd nnmolar -> ^( NODE[\"MOLAR\"] cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd298 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar299 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:7: ( cd nnmolar -> ^( NODE[\"MOLAR\"] cd nnmolar ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar1439);
            cd298=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd298.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar1441);
            nnmolar299=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar299.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 104:20: -> ^( NODE[\"MOLAR\"] cd nnmolar )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:23: ^( NODE[\"MOLAR\"] cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize300 = null;

        ChemicalChunkerParser.inas_return inas301 = null;

        ChemicalChunkerParser.nnexample_return nnexample302 = null;

        ChemicalChunkerParser.cd_return cd303 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase304 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1463);
            vbsynthesize300=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize300.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1465);
            inas301=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas301.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:22: ( nnexample cd | prepphrase )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==34) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=12 && LA64_0<=13)||(LA64_0>=18 && LA64_0<=33)||LA64_0==36||LA64_0==44||LA64_0==101||LA64_0==123||LA64_0==128||(LA64_0>=139 && LA64_0<=143)||(LA64_0>=169 && LA64_0<=173)||LA64_0==175||LA64_0==177) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1468);
                    nnexample302=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample302.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1470);
                    cd303=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd303.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1473);
                    prepphrase304=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase304.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: apparatus : ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus305 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus306 = null;


        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:2: ( ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:4: ( preapparatus )* ( nnapparatus )+
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:4: ( preapparatus )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( ((LA65_0>=12 && LA65_0<=13)||LA65_0==35||LA65_0==43||LA65_0==48||LA65_0==59||LA65_0==107||LA65_0==123||(LA65_0>=140 && LA65_0<=143)||LA65_0==146) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1483);
            	    preapparatus305=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus305.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:18: ( nnapparatus )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==69) ) {
                    int LA66_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt66=1;
                    }


                }


                switch (alt66) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1486);
            	    nnapparatus306=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus306.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);



            // AST REWRITE
            // elements: nnapparatus, preapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:30: -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:33: ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:55: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:1: preapparatus : ( quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate );
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity307 = null;

        ChemicalChunkerParser.nn_return nn308 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure309 = null;

        ChemicalChunkerParser.adj_return adj310 = null;

        ChemicalChunkerParser.nnadd_return nnadd311 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity312 = null;

        ChemicalChunkerParser.nnstate_return nnstate313 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:2: ( quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate )
            int alt67=7;
            switch ( input.LA(1) ) {
            case 107:
            case 123:
                {
                alt67=1;
                }
                break;
            case 146:
                {
                alt67=2;
                }
                break;
            case 48:
                {
                alt67=3;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt67=4;
                }
                break;
            case 59:
                {
                alt67=5;
                }
                break;
            case 43:
                {
                alt67=6;
                }
                break;
            case 35:
                {
                alt67=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:6: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_preapparatus1513);
                    quantity307=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity307.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:15: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_preapparatus1515);
                    nn308=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn308.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:18: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_preapparatus1517);
                    nnpressure309=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure309.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:29: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_preapparatus1519);
                    adj310=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj310.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:33: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_preapparatus1521);
                    nnadd311=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd311.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:39: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_preapparatus1523);
                    nnchementity312=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity312.getTree());

                    }
                    break;
                case 7 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:52: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_preapparatus1525);
                    nnstate313=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate313.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:1: measurements : ( cd nn )? measurementtypes ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd314 = null;

        ChemicalChunkerParser.nn_return nn315 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes316 = null;

        ChemicalChunkerParser.dt_return dt317 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:2: ( ( cd nn )? measurementtypes ( dt )? )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:3: ( cd nn )? measurementtypes ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:3: ( cd nn )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==123) ) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==TOKEN) ) {
                    int LA68_2 = input.LA(3);

                    if ( (LA68_2==146) ) {
                        int LA68_4 = input.LA(4);

                        if ( (LA68_4==TOKEN) ) {
                            int LA68_5 = input.LA(5);

                            if ( (LA68_5==123) ) {
                                alt68=1;
                            }
                        }
                    }
                }
            }
            switch (alt68) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements1534);
                    cd314=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd314.getTree());
                    pushFollow(FOLLOW_nn_in_measurements1536);
                    nn315=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn315.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_measurementtypes_in_measurements1540);
            measurementtypes316=measurementtypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes316.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:32: ( dt )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==128) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==TOKEN) ) {
                    int LA69_3 = input.LA(3);

                    if ( (synpred263_ChemicalChunker()) ) {
                        alt69=1;
                    }
                }
            }
            switch (alt69) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements1545);
                    dt317=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt317.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: measurementtypes : ( amount | mass | percent | volume | molar );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.amount_return amount318 = null;

        ChemicalChunkerParser.mass_return mass319 = null;

        ChemicalChunkerParser.percent_return percent320 = null;

        ChemicalChunkerParser.volume_return volume321 = null;

        ChemicalChunkerParser.molar_return molar322 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:2: ( amount | mass | percent | volume | molar )
            int alt70=5;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==123) ) {
                int LA70_1 = input.LA(2);

                if ( (LA70_1==TOKEN) ) {
                    switch ( input.LA(3) ) {
                    case 42:
                        {
                        alt70=4;
                        }
                        break;
                    case 37:
                        {
                        alt70=2;
                        }
                        break;
                    case 104:
                    case 146:
                        {
                        alt70=3;
                        }
                        break;
                    case 39:
                        {
                        alt70=1;
                        }
                        break;
                    case 38:
                        {
                        alt70=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 70, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:4: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes1555);
                    amount318=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount318.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:11: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes1557);
                    mass319=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass319.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:16: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes1559);
                    percent320=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent320.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:24: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes1561);
                    volume321=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume321.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:31: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes1563);
                    molar322=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1323 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2324 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3325 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4326 = null;

        ChemicalChunkerParser.oscarCompound5_return oscarCompound5327 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm328 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            int alt71=6;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:19: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1577);
                    oscarCompound1323=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1323.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:34: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1579);
                    oscarCompound2324=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2324.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:49: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1581);
                    oscarCompound3325=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3325.getTree());

                    }
                    break;
                case 4 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:64: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1583);
                    oscarCompound4326=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4326.getTree());

                    }
                    break;
                case 5 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:79: oscarCompound5
                    {
                    pushFollow(FOLLOW_oscarCompound5_in_oscarCompound1585);
                    oscarCompound5327=oscarCompound5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound5327.getTree());

                    }
                    break;
                case 6 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:94: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1587);
                    oscarcm328=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm328.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound5"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: oscarCompound5 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound5_return oscarCompound5() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound5_return retval = new ChemicalChunkerParser.oscarCompound5_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb329 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm330 = null;

        ChemicalChunkerParser.rrb_return rrb331 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound51597);
            lrb329=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb329.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound51599);
            oscarcm330=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm330.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound51601);
            rrb331=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb331.getTree());


            // AST REWRITE
            // elements: lrb, oscarcm, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:34: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:37: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound5"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:1: oscarCompound4 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm332 = null;

        ChemicalChunkerParser.dash_return dash333 = null;

        ChemicalChunkerParser.apost_return apost334 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41624);
            oscarcm332=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm332.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:26: ( dash | apost )+
            int cnt72=0;
            loop72:
            do {
                int alt72=3;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==102) ) {
                    int LA72_2 = input.LA(2);

                    if ( (LA72_2==TOKEN) ) {
                        int LA72_4 = input.LA(3);

                        if ( (synpred273_ChemicalChunker()) ) {
                            alt72=1;
                        }


                    }


                }
                else if ( (LA72_0==100) ) {
                    alt72=2;
                }


                switch (alt72) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound41627);
            	    dash333=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash333.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound41629);
            	    apost334=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost334.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);



            // AST REWRITE
            // elements: dash, oscarcm, apost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 122:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:71: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:77: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: oscarCompound3 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm335 = null;

        ChemicalChunkerParser.dash_return dash336 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm337 = null;

        ChemicalChunkerParser.dash_return dash338 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31656);
            oscarcm335=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm335.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:26: ( dash oscarcm )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==102) ) {
                    int LA73_1 = input.LA(2);

                    if ( (LA73_1==TOKEN) ) {
                        int LA73_3 = input.LA(3);

                        if ( (LA73_3==54) ) {
                            int LA73_4 = input.LA(4);

                            if ( (LA73_4==TOKEN) ) {
                                int LA73_5 = input.LA(5);

                                if ( (synpred275_ChemicalChunker()) ) {
                                    alt73=1;
                                }


                            }


                        }


                    }


                }


                switch (alt73) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound31659);
            	    dash336=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash336.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound31661);
            	    oscarcm337=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm337.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:42: ( dash )?
            int alt74=2;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound31665);
                    dash338=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash338.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dash, oscarcm, dash, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 123:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_dash.hasNext()||stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dash.hasNext()||stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_dash.reset();
                stream_oscarcm.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:93: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm339 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm340 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21693);
            oscarcm339=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm339.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:26: ( oscarcm )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==54) ) {
                    int LA75_2 = input.LA(2);

                    if ( (LA75_2==TOKEN) ) {
                        int LA75_3 = input.LA(3);

                        if ( (synpred277_ChemicalChunker()) ) {
                            alt75=1;
                        }


                    }


                }


                switch (alt75) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21695);
            	    oscarcm340=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 124:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm341 = null;

        ChemicalChunkerParser.jj_return jj342 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm343 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:18: oscarcm jj oscarcm
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11716);
            oscarcm341=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm341.getTree());
            pushFollow(FOLLOW_jj_in_oscarCompound11718);
            jj342=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj342.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11720);
            oscarcm343=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm343.getTree());


            // AST REWRITE
            // elements: jj, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 125:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_jj.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity344 = null;

        ChemicalChunkerParser.mixture_return mixture345 = null;

        ChemicalChunkerParser.inof_return inof346 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound347 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:2: ( ( quantity | mixture )+ inof oscarCompound )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:3: ( quantity | mixture )+
            int cnt76=0;
            loop76:
            do {
                int alt76=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA76_2 = input.LA(2);

                    if ( (synpred278_ChemicalChunker()) ) {
                        alt76=1;
                    }
                    else if ( (synpred279_ChemicalChunker()) ) {
                        alt76=2;
                    }


                    }
                    break;
                case 123:
                    {
                    alt76=1;
                    }
                    break;
                case 99:
                    {
                    alt76=2;
                    }
                    break;

                }

                switch (alt76) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11744);
            	    quantity344=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity344.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11746);
            	    mixture345=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture345.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11750);
            inof346=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof346.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11752);
            oscarCompound347=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound347.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity348 = null;

        ChemicalChunkerParser.mixture_return mixture349 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound350 = null;

        ChemicalChunkerParser.quantity_return quantity351 = null;

        ChemicalChunkerParser.mixture_return mixture352 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:2: ( ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:3: ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:3: ( quantity | mixture )*
            loop77:
            do {
                int alt77=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred280_ChemicalChunker()) ) {
                        alt77=1;
                    }
                    else if ( (synpred281_ChemicalChunker()) ) {
                        alt77=2;
                    }


                    }
                    break;
                case 123:
                    {
                    alt77=1;
                    }
                    break;
                case 99:
                    {
                    alt77=2;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21762);
            	    quantity348=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity348.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21764);
            	    mixture349=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture349.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:23: ( oscarCompound )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==107) ) {
                    int LA78_1 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt78=1;
                    }


                }
                else if ( (LA78_0==54) ) {
                    int LA78_3 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt78=1;
                    }


                }


                switch (alt78) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21768);
            	    oscarCompound350=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound350.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:39: ( quantity | mixture )*
            loop79:
            do {
                int alt79=3;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:40: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21773);
            	    quantity351=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity351.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:49: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21775);
            	    mixture352=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture352.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1353 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2354 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:16: ( moleculeamount1 | moleculeamount2 )
            int alt80=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA80_1 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt80=1;
                }
                else if ( (true) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA80_2 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt80=1;
                }
                else if ( (true) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 2, input);

                    throw nvae;
                }
                }
                break;
            case 99:
                {
                int LA80_3 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt80=1;
                }
                else if ( (true) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 3, input);

                    throw nvae;
                }
                }
                break;
            case 54:
                {
                alt80=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1786);
                    moleculeamount1353=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1353.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1790);
                    moleculeamount2354=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2354.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount355 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1811);
            moleculeamount355=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount355.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 135:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity356 = null;

        ChemicalChunkerParser.inof_return inof357 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd358 = null;

        ChemicalChunkerParser.cd_return cd359 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:2: ( quantity inof ( oscarcd | cd ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11833);
            quantity356=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity356.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11835);
            inof357=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof357.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:18: ( oscarcd | cd )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==11) ) {
                alt81=1;
            }
            else if ( (LA81_0==123) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11838);
                    oscarcd358=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd358.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11840);
                    cd359=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: unnamedmoleculeamount2 : oscarcd ( quantity )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd360 = null;

        ChemicalChunkerParser.quantity_return quantity361 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:2: ( oscarcd ( quantity )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:3: oscarcd ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21848);
            oscarcd360=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd360.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:11: ( quantity )*
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21850);
            	    quantity361=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity361.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity362 = null;

        ChemicalChunkerParser.inof_return inof363 = null;

        ChemicalChunkerParser.jj_return jj364 = null;

        ChemicalChunkerParser.noun_return noun365 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:2: ( quantity inof ( ( jj )? noun )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount31863);
            quantity362=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity362.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31865);
            inof363=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof363.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:17: ( ( jj )? noun )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( jj )? noun
            	    {
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( jj )?
            	    int alt83=2;
            	    int LA83_0 = input.LA(1);

            	    if ( (LA83_0==140) ) {
            	        int LA83_1 = input.LA(2);

            	        if ( (LA83_1==TOKEN) ) {
            	            int LA83_3 = input.LA(3);

            	            if ( (synpred288_ChemicalChunker()) ) {
            	                alt83=1;
            	            }
            	        }
            	    }
            	    switch (alt83) {
            	        case 1 :
            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31868);
            	            jj364=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj364.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31871);
            	    noun365=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun365.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1366 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2367 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3368 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt85=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA85_1 = input.LA(2);

                if ( (synpred290_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA85_2 = input.LA(2);

                if ( (synpred290_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 2, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt85=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1882);
                    unnamedmoleculeamount1366=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1366.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1886);
                    unnamedmoleculeamount2367=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2367.getTree());

                    }
                    break;
                case 3 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1890);
                    unnamedmoleculeamount3368=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount369 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1903);
            unnamedmoleculeamount369=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount369.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1370 = null;

        ChemicalChunkerParser.quantity2_return quantity2371 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:14: ( quantity1 | quantity2 )
            {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:14: ( quantity1 | quantity2 )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==107) ) {
                alt86=1;
            }
            else if ( (LA86_0==123) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity1926);
                    quantity1370=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1370.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity1928);
                    quantity2371=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2371.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 156:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb372 = null;

        ChemicalChunkerParser.measurements_return measurements373 = null;

        ChemicalChunkerParser.comma_return comma374 = null;

        ChemicalChunkerParser.measurements_return measurements375 = null;

        ChemicalChunkerParser.comma_return comma376 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase377 = null;

        ChemicalChunkerParser.stop_return stop378 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase379 = null;

        ChemicalChunkerParser.rrb_return rrb380 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity11953);
            lrb372=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb372.getTree());
            pushFollow(FOLLOW_measurements_in_quantity11955);
            measurements373=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements373.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:21: ( comma measurements )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==99) ) {
                    int LA87_1 = input.LA(2);

                    if ( (LA87_1==TOKEN) ) {
                        int LA87_3 = input.LA(3);

                        if ( (LA87_3==123) ) {
                            alt87=1;
                        }


                    }


                }


                switch (alt87) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11958);
            	    comma374=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma374.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity11961);
            	    measurements375=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements375.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:44: ( comma preparationphrase )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==99) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11966);
            	    comma376=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma376.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11968);
            	    preparationphrase377=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase377.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:71: ( stop preparationphrase )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==103) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity11973);
            	    stop378=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop378.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11975);
            	    preparationphrase379=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase379.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity11980);
            rrb380=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb380.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements381 = null;

        ChemicalChunkerParser.comma_return comma382 = null;

        ChemicalChunkerParser.measurements_return measurements383 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:2: ( measurements ( comma measurements )* )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity21991);
            measurements381=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements381.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:18: ( comma measurements )*
            loop90:
            do {
                int alt90=2;
                alt90 = dfa90.predict(input);
                switch (alt90) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity21994);
            	    comma382=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma382.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity21997);
            	    measurements383=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements383.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral384 = null;

        ChemicalChunkerParser.nn_return nn385 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod386 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd387 = null;

        ChemicalChunkerParser.cd_return cd388 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:5: ( nngeneral | nn )?
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==46) ) {
                alt91=1;
            }
            else if ( (LA91_0==146) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2013);
                    nngeneral384=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral384.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2015);
                    nn385=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn385.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2019);
            nnmethod386=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod386.getTree());
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:30: ( oscarcd | cd )?
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==11) ) {
                alt92=1;
            }
            else if ( (LA92_0==123) ) {
                alt92=2;
            }
            switch (alt92) {
                case 1 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2022);
                    oscarcd387=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd387.getTree());

                    }
                    break;
                case 2 :
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2024);
                    cd388=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd388.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb389 = null;

        ChemicalChunkerParser.rrb_return rrb390 = null;

        ChemicalChunkerParser.lsqb_return lsqb391 = null;

        ChemicalChunkerParser.rsqb_return rsqb392 = null;



        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt93=0;
            loop93:
            do {
                int alt93=5;
                alt93 = dfa93.predict(input);
                switch (alt93) {
            	case 1 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2046);
            	    lrb389=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb389.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2048);
            	    rrb390=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb390.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2050);
            	    lsqb391=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb391.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2052);
            	    rsqb392=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb392.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal393=null;
        Token TOKEN394=null;

        Object string_literal393_tree=null;
        Object TOKEN394_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:8: ( 'OSCAR-CD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal393=(Token)match(input,11,FOLLOW_11_in_oscarcd2060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal393_tree = (Object)adaptor.create(string_literal393);
            adaptor.addChild(root_0, string_literal393_tree);
            }
            TOKEN394=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN394_tree = (Object)adaptor.create(TOKEN394);
            adaptor.addChild(root_0, TOKEN394_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal395=null;
        Token TOKEN396=null;

        Object string_literal395_tree=null;
        Object TOKEN396_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:8: ( 'OSCAR-CJ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal395=(Token)match(input,12,FOLLOW_12_in_oscarcj2067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal395_tree = (Object)adaptor.create(string_literal395);
            adaptor.addChild(root_0, string_literal395_tree);
            }
            TOKEN396=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN396_tree = (Object)adaptor.create(TOKEN396);
            adaptor.addChild(root_0, TOKEN396_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal397=null;
        Token TOKEN398=null;

        Object string_literal397_tree=null;
        Object TOKEN398_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:8: ( 'OSCAR-RN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal397=(Token)match(input,13,FOLLOW_13_in_oscarrn2074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal397_tree = (Object)adaptor.create(string_literal397);
            adaptor.addChild(root_0, string_literal397_tree);
            }
            TOKEN398=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN398_tree = (Object)adaptor.create(TOKEN398);
            adaptor.addChild(root_0, TOKEN398_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal399=null;
        Token TOKEN400=null;

        Object string_literal399_tree=null;
        Object TOKEN400_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:9: ( 'OSCAR-CPR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal399=(Token)match(input,14,FOLLOW_14_in_oscarcpr2081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal399_tree = (Object)adaptor.create(string_literal399);
            adaptor.addChild(root_0, string_literal399_tree);
            }
            TOKEN400=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN400_tree = (Object)adaptor.create(TOKEN400);
            adaptor.addChild(root_0, TOKEN400_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal401=null;
        Token TOKEN402=null;

        Object string_literal401_tree=null;
        Object TOKEN402_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:9: ( 'OSCAR-ONT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal401=(Token)match(input,15,FOLLOW_15_in_oscaront2089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal401_tree = (Object)adaptor.create(string_literal401);
            adaptor.addChild(root_0, string_literal401_tree);
            }
            TOKEN402=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN402_tree = (Object)adaptor.create(TOKEN402);
            adaptor.addChild(root_0, TOKEN402_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal403=null;
        Token TOKEN404=null;

        Object string_literal403_tree=null;
        Object TOKEN404_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:10: ( 'TM-UNICODE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal403=(Token)match(input,16,FOLLOW_16_in_tmunicode2096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal403_tree = (Object)adaptor.create(string_literal403);
            adaptor.addChild(root_0, string_literal403_tree);
            }
            TOKEN404=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN404_tree = (Object)adaptor.create(TOKEN404);
            adaptor.addChild(root_0, TOKEN404_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal405=null;
        Token TOKEN406=null;

        Object string_literal405_tree=null;
        Object TOKEN406_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:10: ( 'CD-UNICODE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal405=(Token)match(input,17,FOLLOW_17_in_cdunicode2103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal405_tree = (Object)adaptor.create(string_literal405);
            adaptor.addChild(root_0, string_literal405_tree);
            }
            TOKEN406=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN406_tree = (Object)adaptor.create(TOKEN406);
            adaptor.addChild(root_0, TOKEN406_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal407=null;
        Token TOKEN408=null;

        Object string_literal407_tree=null;
        Object TOKEN408_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:5: ( 'IN-AS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal407=(Token)match(input,18,FOLLOW_18_in_inas2112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal407_tree = (Object)adaptor.create(string_literal407);
            adaptor.addChild(root_0, string_literal407_tree);
            }
            TOKEN408=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN408_tree = (Object)adaptor.create(TOKEN408);
            adaptor.addChild(root_0, TOKEN408_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal409=null;
        Token TOKEN410=null;

        Object string_literal409_tree=null;
        Object TOKEN410_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:9: ( 'IN-BEFORE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal409=(Token)match(input,19,FOLLOW_19_in_inbefore2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal409_tree = (Object)adaptor.create(string_literal409);
            adaptor.addChild(root_0, string_literal409_tree);
            }
            TOKEN410=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN410_tree = (Object)adaptor.create(TOKEN410);
            adaptor.addChild(root_0, TOKEN410_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal411=null;
        Token TOKEN412=null;

        Object string_literal411_tree=null;
        Object TOKEN412_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:8: ( 'IN-AFTER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal411=(Token)match(input,20,FOLLOW_20_in_inafter2126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal411_tree = (Object)adaptor.create(string_literal411);
            adaptor.addChild(root_0, string_literal411_tree);
            }
            TOKEN412=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN412_tree = (Object)adaptor.create(TOKEN412);
            adaptor.addChild(root_0, TOKEN412_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal413=null;
        Token TOKEN414=null;

        Object string_literal413_tree=null;
        Object TOKEN414_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:5: ( 'IN-IN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal413=(Token)match(input,21,FOLLOW_21_in_inin2133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal413_tree = (Object)adaptor.create(string_literal413);
            adaptor.addChild(root_0, string_literal413_tree);
            }
            TOKEN414=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN414_tree = (Object)adaptor.create(TOKEN414);
            adaptor.addChild(root_0, TOKEN414_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal415=null;
        Token TOKEN416=null;

        Object string_literal415_tree=null;
        Object TOKEN416_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:7: ( 'IN-INTO' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal415=(Token)match(input,22,FOLLOW_22_in_ininto2140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal415_tree = (Object)adaptor.create(string_literal415);
            adaptor.addChild(root_0, string_literal415_tree);
            }
            TOKEN416=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN416_tree = (Object)adaptor.create(TOKEN416);
            adaptor.addChild(root_0, TOKEN416_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal417=null;
        Token TOKEN418=null;

        Object string_literal417_tree=null;
        Object TOKEN418_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:7: ( 'IN-WITH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal417=(Token)match(input,23,FOLLOW_23_in_inwith2147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal417_tree = (Object)adaptor.create(string_literal417);
            adaptor.addChild(root_0, string_literal417_tree);
            }
            TOKEN418=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN418_tree = (Object)adaptor.create(TOKEN418);
            adaptor.addChild(root_0, TOKEN418_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal419=null;
        Token TOKEN420=null;

        Object string_literal419_tree=null;
        Object TOKEN420_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:10: ( 'IN-WITHOUT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal419=(Token)match(input,24,FOLLOW_24_in_inwithout2154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal419_tree = (Object)adaptor.create(string_literal419);
            adaptor.addChild(root_0, string_literal419_tree);
            }
            TOKEN420=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN420_tree = (Object)adaptor.create(TOKEN420);
            adaptor.addChild(root_0, TOKEN420_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal421=null;
        Token TOKEN422=null;

        Object string_literal421_tree=null;
        Object TOKEN422_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:5: ( 'IN-BY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal421=(Token)match(input,25,FOLLOW_25_in_inby2161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal421_tree = (Object)adaptor.create(string_literal421);
            adaptor.addChild(root_0, string_literal421_tree);
            }
            TOKEN422=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN422_tree = (Object)adaptor.create(TOKEN422);
            adaptor.addChild(root_0, TOKEN422_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal423=null;
        Token TOKEN424=null;

        Object string_literal423_tree=null;
        Object TOKEN424_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:6: ( 'IN-VIA' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal423=(Token)match(input,26,FOLLOW_26_in_invia2168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal423_tree = (Object)adaptor.create(string_literal423);
            adaptor.addChild(root_0, string_literal423_tree);
            }
            TOKEN424=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN424_tree = (Object)adaptor.create(TOKEN424);
            adaptor.addChild(root_0, TOKEN424_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal425=null;
        Token TOKEN426=null;

        Object string_literal425_tree=null;
        Object TOKEN426_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:5: ( 'IN-OF' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal425=(Token)match(input,27,FOLLOW_27_in_inof2175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal425_tree = (Object)adaptor.create(string_literal425);
            adaptor.addChild(root_0, string_literal425_tree);
            }
            TOKEN426=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN426_tree = (Object)adaptor.create(TOKEN426);
            adaptor.addChild(root_0, TOKEN426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal427=null;
        Token TOKEN428=null;

        Object string_literal427_tree=null;
        Object TOKEN428_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:5: ( 'IN-ON' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal427=(Token)match(input,28,FOLLOW_28_in_inon2182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal427_tree = (Object)adaptor.create(string_literal427);
            adaptor.addChild(root_0, string_literal427_tree);
            }
            TOKEN428=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN428_tree = (Object)adaptor.create(TOKEN428);
            adaptor.addChild(root_0, TOKEN428_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal429=null;
        Token TOKEN430=null;

        Object string_literal429_tree=null;
        Object TOKEN430_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:6: ( 'IN-FOR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal429=(Token)match(input,29,FOLLOW_29_in_infor2189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal429_tree = (Object)adaptor.create(string_literal429);
            adaptor.addChild(root_0, string_literal429_tree);
            }
            TOKEN430=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN430_tree = (Object)adaptor.create(TOKEN430);
            adaptor.addChild(root_0, TOKEN430_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal431=null;
        Token TOKEN432=null;

        Object string_literal431_tree=null;
        Object TOKEN432_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:7: ( 'IN-FROM' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal431=(Token)match(input,30,FOLLOW_30_in_infrom2196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal431_tree = (Object)adaptor.create(string_literal431);
            adaptor.addChild(root_0, string_literal431_tree);
            }
            TOKEN432=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN432_tree = (Object)adaptor.create(TOKEN432);
            adaptor.addChild(root_0, TOKEN432_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal433=null;
        Token TOKEN434=null;

        Object string_literal433_tree=null;
        Object TOKEN434_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:8: ( 'IN-UNDER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal433=(Token)match(input,31,FOLLOW_31_in_inunder2203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal433_tree = (Object)adaptor.create(string_literal433);
            adaptor.addChild(root_0, string_literal433_tree);
            }
            TOKEN434=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN434_tree = (Object)adaptor.create(TOKEN434);
            adaptor.addChild(root_0, TOKEN434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal435=null;
        Token TOKEN436=null;

        Object string_literal435_tree=null;
        Object TOKEN436_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:7: ( 'IN-OVER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal435=(Token)match(input,32,FOLLOW_32_in_inover2210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal435_tree = (Object)adaptor.create(string_literal435);
            adaptor.addChild(root_0, string_literal435_tree);
            }
            TOKEN436=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN436_tree = (Object)adaptor.create(TOKEN436);
            adaptor.addChild(root_0, TOKEN436_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal437=null;
        Token TOKEN438=null;

        Object string_literal437_tree=null;
        Object TOKEN438_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:6: ( 'IN-OFF' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal437=(Token)match(input,33,FOLLOW_33_in_inoff2217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal437_tree = (Object)adaptor.create(string_literal437);
            adaptor.addChild(root_0, string_literal437_tree);
            }
            TOKEN438=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN438_tree = (Object)adaptor.create(TOKEN438);
            adaptor.addChild(root_0, TOKEN438_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal439=null;
        Token TOKEN440=null;

        Object string_literal439_tree=null;
        Object TOKEN440_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:10: ( 'NN-EXAMPLE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal439=(Token)match(input,34,FOLLOW_34_in_nnexample2226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal439_tree = (Object)adaptor.create(string_literal439);
            adaptor.addChild(root_0, string_literal439_tree);
            }
            TOKEN440=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN440_tree = (Object)adaptor.create(TOKEN440);
            adaptor.addChild(root_0, TOKEN440_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal441=null;
        Token TOKEN442=null;

        Object string_literal441_tree=null;
        Object TOKEN442_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:8: ( 'NN-STATE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal441=(Token)match(input,35,FOLLOW_35_in_nnstate2233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal441_tree = (Object)adaptor.create(string_literal441);
            adaptor.addChild(root_0, string_literal441_tree);
            }
            TOKEN442=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN442_tree = (Object)adaptor.create(TOKEN442);
            adaptor.addChild(root_0, TOKEN442_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal443=null;
        Token TOKEN444=null;

        Object string_literal443_tree=null;
        Object TOKEN444_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:7: ( 'NN-TIME' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal443=(Token)match(input,36,FOLLOW_36_in_nntime2240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal443_tree = (Object)adaptor.create(string_literal443);
            adaptor.addChild(root_0, string_literal443_tree);
            }
            TOKEN444=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN444_tree = (Object)adaptor.create(TOKEN444);
            adaptor.addChild(root_0, TOKEN444_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal445=null;
        Token TOKEN446=null;

        Object string_literal445_tree=null;
        Object TOKEN446_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:7: ( 'NN-MASS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal445=(Token)match(input,37,FOLLOW_37_in_nnmass2247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal445_tree = (Object)adaptor.create(string_literal445);
            adaptor.addChild(root_0, string_literal445_tree);
            }
            TOKEN446=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN446_tree = (Object)adaptor.create(TOKEN446);
            adaptor.addChild(root_0, TOKEN446_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal447=null;
        Token TOKEN448=null;

        Object string_literal447_tree=null;
        Object TOKEN448_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:8: ( 'NN-MOLAR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal447=(Token)match(input,38,FOLLOW_38_in_nnmolar2255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal447_tree = (Object)adaptor.create(string_literal447);
            adaptor.addChild(root_0, string_literal447_tree);
            }
            TOKEN448=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN448_tree = (Object)adaptor.create(TOKEN448);
            adaptor.addChild(root_0, TOKEN448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal449=null;
        Token TOKEN450=null;

        Object string_literal449_tree=null;
        Object TOKEN450_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:9: ( 'NN-AMOUNT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal449=(Token)match(input,39,FOLLOW_39_in_nnamount2263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal449_tree = (Object)adaptor.create(string_literal449);
            adaptor.addChild(root_0, string_literal449_tree);
            }
            TOKEN450=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN450_tree = (Object)adaptor.create(TOKEN450);
            adaptor.addChild(root_0, TOKEN450_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal451=null;
        Token TOKEN452=null;

        Object string_literal451_tree=null;
        Object TOKEN452_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:13: ( 'NN-ATMOSPHERE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal451=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal451_tree = (Object)adaptor.create(string_literal451);
            adaptor.addChild(root_0, string_literal451_tree);
            }
            TOKEN452=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN452_tree = (Object)adaptor.create(TOKEN452);
            adaptor.addChild(root_0, TOKEN452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal453=null;
        Token TOKEN454=null;

        Object string_literal453_tree=null;
        Object TOKEN454_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:5: ( 'NN-EQ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal453=(Token)match(input,41,FOLLOW_41_in_nneq2277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal453_tree = (Object)adaptor.create(string_literal453);
            adaptor.addChild(root_0, string_literal453_tree);
            }
            TOKEN454=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN454_tree = (Object)adaptor.create(TOKEN454);
            adaptor.addChild(root_0, TOKEN454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal455=null;
        Token TOKEN456=null;

        Object string_literal455_tree=null;
        Object TOKEN456_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:6: ( 'NN-VOL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal455=(Token)match(input,42,FOLLOW_42_in_nnvol2284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal455_tree = (Object)adaptor.create(string_literal455);
            adaptor.addChild(root_0, string_literal455_tree);
            }
            TOKEN456=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN456_tree = (Object)adaptor.create(TOKEN456);
            adaptor.addChild(root_0, TOKEN456_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal457=null;
        Token TOKEN458=null;

        Object string_literal457_tree=null;
        Object TOKEN458_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:13: ( 'NN-CHEMENTITY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal457=(Token)match(input,43,FOLLOW_43_in_nnchementity2291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal457_tree = (Object)adaptor.create(string_literal457);
            adaptor.addChild(root_0, string_literal457_tree);
            }
            TOKEN458=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN458_tree = (Object)adaptor.create(TOKEN458);
            adaptor.addChild(root_0, TOKEN458_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal459=null;
        Token TOKEN460=null;

        Object string_literal459_tree=null;
        Object TOKEN460_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:7: ( 'NN-TEMP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal459=(Token)match(input,44,FOLLOW_44_in_nntemp2298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal459_tree = (Object)adaptor.create(string_literal459);
            adaptor.addChild(root_0, string_literal459_tree);
            }
            TOKEN460=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN460_tree = (Object)adaptor.create(TOKEN460);
            adaptor.addChild(root_0, TOKEN460_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal461=null;
        Token TOKEN462=null;

        Object string_literal461_tree=null;
        Object TOKEN462_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:8: ( 'NN-FLASH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal461=(Token)match(input,45,FOLLOW_45_in_nnflash2305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = (Object)adaptor.create(string_literal461);
            adaptor.addChild(root_0, string_literal461_tree);
            }
            TOKEN462=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN462_tree = (Object)adaptor.create(TOKEN462);
            adaptor.addChild(root_0, TOKEN462_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal463=null;
        Token TOKEN464=null;

        Object string_literal463_tree=null;
        Object TOKEN464_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:10: ( 'NN-GENERAL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal463=(Token)match(input,46,FOLLOW_46_in_nngeneral2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal463_tree = (Object)adaptor.create(string_literal463);
            adaptor.addChild(root_0, string_literal463_tree);
            }
            TOKEN464=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN464_tree = (Object)adaptor.create(TOKEN464);
            adaptor.addChild(root_0, TOKEN464_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal465=null;
        Token TOKEN466=null;

        Object string_literal465_tree=null;
        Object TOKEN466_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:9: ( 'NN-METHOD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal465=(Token)match(input,47,FOLLOW_47_in_nnmethod2319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal465_tree = (Object)adaptor.create(string_literal465);
            adaptor.addChild(root_0, string_literal465_tree);
            }
            TOKEN466=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN466_tree = (Object)adaptor.create(TOKEN466);
            adaptor.addChild(root_0, TOKEN466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal467=null;
        Token TOKEN468=null;

        Object string_literal467_tree=null;
        Object TOKEN468_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:11: ( 'NN-PRESSURE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal467=(Token)match(input,48,FOLLOW_48_in_nnpressure2327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = (Object)adaptor.create(string_literal467);
            adaptor.addChild(root_0, string_literal467_tree);
            }
            TOKEN468=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN468_tree = (Object)adaptor.create(TOKEN468);
            adaptor.addChild(root_0, TOKEN468_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal469=null;
        Token TOKEN470=null;

        Object string_literal469_tree=null;
        Object TOKEN470_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:9: ( 'NN-COLUMN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal469=(Token)match(input,49,FOLLOW_49_in_nncolumn2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal469_tree = (Object)adaptor.create(string_literal469);
            adaptor.addChild(root_0, string_literal469_tree);
            }
            TOKEN470=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN470_tree = (Object)adaptor.create(TOKEN470);
            adaptor.addChild(root_0, TOKEN470_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal471=null;
        Token TOKEN472=null;

        Object string_literal471_tree=null;
        Object TOKEN472_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal471=(Token)match(input,50,FOLLOW_50_in_nnchromatography2341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal471_tree = (Object)adaptor.create(string_literal471);
            adaptor.addChild(root_0, string_literal471_tree);
            }
            TOKEN472=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN472_tree = (Object)adaptor.create(TOKEN472);
            adaptor.addChild(root_0, TOKEN472_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal473=null;
        Token TOKEN474=null;

        Object string_literal473_tree=null;
        Object TOKEN474_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:9: ( 'NN-VACUUM' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal473=(Token)match(input,51,FOLLOW_51_in_nnvacuum2348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal473_tree = (Object)adaptor.create(string_literal473);
            adaptor.addChild(root_0, string_literal473_tree);
            }
            TOKEN474=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN474_tree = (Object)adaptor.create(TOKEN474);
            adaptor.addChild(root_0, TOKEN474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal475=null;
        Token TOKEN476=null;

        Object string_literal475_tree=null;
        Object TOKEN476_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:8: ( 'NN-CYCLE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal475=(Token)match(input,52,FOLLOW_52_in_nncycle2355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal475_tree = (Object)adaptor.create(string_literal475);
            adaptor.addChild(root_0, string_literal475_tree);
            }
            TOKEN476=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle2357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN476_tree = (Object)adaptor.create(TOKEN476);
            adaptor.addChild(root_0, TOKEN476_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal477=null;
        Token TOKEN478=null;

        Object string_literal477_tree=null;
        Object TOKEN478_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:8: ( 'NN-TIMES' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal477=(Token)match(input,53,FOLLOW_53_in_nntimes2362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = (Object)adaptor.create(string_literal477);
            adaptor.addChild(root_0, string_literal477_tree);
            }
            TOKEN478=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes2364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN478_tree = (Object)adaptor.create(TOKEN478);
            adaptor.addChild(root_0, TOKEN478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal479=null;
        Token TOKEN480=null;

        Object string_literal479_tree=null;
        Object TOKEN480_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:8: ( 'OSCAR-CM' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal479=(Token)match(input,54,FOLLOW_54_in_oscarcm2371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal479_tree = (Object)adaptor.create(string_literal479);
            adaptor.addChild(root_0, string_literal479_tree);
            }
            TOKEN480=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm2373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN480_tree = (Object)adaptor.create(TOKEN480);
            adaptor.addChild(root_0, TOKEN480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal481=null;
        Token TOKEN482=null;

        Object string_literal481_tree=null;
        Object TOKEN482_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:6: ( 'VB-USE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal481=(Token)match(input,55,FOLLOW_55_in_vbuse2380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal481_tree = (Object)adaptor.create(string_literal481);
            adaptor.addChild(root_0, string_literal481_tree);
            }
            TOKEN482=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN482_tree = (Object)adaptor.create(TOKEN482);
            adaptor.addChild(root_0, TOKEN482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal483=null;
        Token TOKEN484=null;

        Object string_literal483_tree=null;
        Object TOKEN484_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:9: ( 'VB-CHANGE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal483=(Token)match(input,56,FOLLOW_56_in_vbchange2387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal483_tree = (Object)adaptor.create(string_literal483);
            adaptor.addChild(root_0, string_literal483_tree);
            }
            TOKEN484=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN484_tree = (Object)adaptor.create(TOKEN484);
            adaptor.addChild(root_0, TOKEN484_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal485=null;
        Token TOKEN486=null;

        Object string_literal485_tree=null;
        Object TOKEN486_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:11: ( 'VB-SUBMERGE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal485=(Token)match(input,57,FOLLOW_57_in_vbsubmerge2394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal485_tree = (Object)adaptor.create(string_literal485);
            adaptor.addChild(root_0, string_literal485_tree);
            }
            TOKEN486=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN486_tree = (Object)adaptor.create(TOKEN486);
            adaptor.addChild(root_0, TOKEN486_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal487=null;
        Token TOKEN488=null;

        Object string_literal487_tree=null;
        Object TOKEN488_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:10: ( 'VB-SUBJECT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal487=(Token)match(input,58,FOLLOW_58_in_vbsubject2401); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal487_tree = (Object)adaptor.create(string_literal487);
            adaptor.addChild(root_0, string_literal487_tree);
            }
            TOKEN488=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN488_tree = (Object)adaptor.create(TOKEN488);
            adaptor.addChild(root_0, TOKEN488_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal489=null;
        Token TOKEN490=null;

        Object string_literal489_tree=null;
        Object TOKEN490_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:6: ( 'NN-ADD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal489=(Token)match(input,59,FOLLOW_59_in_nnadd2410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal489_tree = (Object)adaptor.create(string_literal489);
            adaptor.addChild(root_0, string_literal489_tree);
            }
            TOKEN490=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN490_tree = (Object)adaptor.create(TOKEN490);
            adaptor.addChild(root_0, TOKEN490_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal491=null;
        Token TOKEN492=null;

        Object string_literal491_tree=null;
        Object TOKEN492_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:10: ( 'NN-MIXTURE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal491=(Token)match(input,60,FOLLOW_60_in_nnmixture2417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal491_tree = (Object)adaptor.create(string_literal491);
            adaptor.addChild(root_0, string_literal491_tree);
            }
            TOKEN492=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN492_tree = (Object)adaptor.create(TOKEN492);
            adaptor.addChild(root_0, TOKEN492_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal493=null;
        Token TOKEN494=null;

        Object string_literal493_tree=null;
        Object TOKEN494_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:6: ( 'VB-ADD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal493=(Token)match(input,61,FOLLOW_61_in_vbadd2424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal493_tree = (Object)adaptor.create(string_literal493);
            adaptor.addChild(root_0, string_literal493_tree);
            }
            TOKEN494=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN494_tree = (Object)adaptor.create(TOKEN494);
            adaptor.addChild(root_0, TOKEN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal495=null;
        Token TOKEN496=null;

        Object string_literal495_tree=null;
        Object TOKEN496_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:9: ( 'VB-CHARGE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal495=(Token)match(input,62,FOLLOW_62_in_vbcharge2431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal495_tree = (Object)adaptor.create(string_literal495);
            adaptor.addChild(root_0, string_literal495_tree);
            }
            TOKEN496=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN496_tree = (Object)adaptor.create(TOKEN496);
            adaptor.addChild(root_0, TOKEN496_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal497=null;
        Token TOKEN498=null;

        Object string_literal497_tree=null;
        Object TOKEN498_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:10: ( 'VB-CONTAIN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal497=(Token)match(input,63,FOLLOW_63_in_vbcontain2438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal497_tree = (Object)adaptor.create(string_literal497);
            adaptor.addChild(root_0, string_literal497_tree);
            }
            TOKEN498=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN498_tree = (Object)adaptor.create(TOKEN498);
            adaptor.addChild(root_0, TOKEN498_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal499=null;
        Token TOKEN500=null;

        Object string_literal499_tree=null;
        Object TOKEN500_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:7: ( 'VB-DROP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal499=(Token)match(input,64,FOLLOW_64_in_vbdrop2445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal499_tree = (Object)adaptor.create(string_literal499);
            adaptor.addChild(root_0, string_literal499_tree);
            }
            TOKEN500=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop2447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN500_tree = (Object)adaptor.create(TOKEN500);
            adaptor.addChild(root_0, TOKEN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal501=null;
        Token TOKEN502=null;

        Object string_literal501_tree=null;
        Object TOKEN502_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:7: ( 'VB-FILL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal501=(Token)match(input,65,FOLLOW_65_in_vbfill2452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal501_tree = (Object)adaptor.create(string_literal501);
            adaptor.addChild(root_0, string_literal501_tree);
            }
            TOKEN502=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill2454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN502_tree = (Object)adaptor.create(TOKEN502);
            adaptor.addChild(root_0, TOKEN502_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal503=null;
        Token TOKEN504=null;

        Object string_literal503_tree=null;
        Object TOKEN504_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:10: ( 'VB-SUSPEND' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal503=(Token)match(input,66,FOLLOW_66_in_vbsuspend2459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal503_tree = (Object)adaptor.create(string_literal503);
            adaptor.addChild(root_0, string_literal503_tree);
            }
            TOKEN504=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend2461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN504_tree = (Object)adaptor.create(TOKEN504);
            adaptor.addChild(root_0, TOKEN504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal505=null;
        Token TOKEN506=null;

        Object string_literal505_tree=null;
        Object TOKEN506_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:8: ( 'VB-TREAT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal505=(Token)match(input,67,FOLLOW_67_in_vbtreat2466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal505_tree = (Object)adaptor.create(string_literal505);
            adaptor.addChild(root_0, string_literal505_tree);
            }
            TOKEN506=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat2468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN506_tree = (Object)adaptor.create(TOKEN506);
            adaptor.addChild(root_0, TOKEN506_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal507=null;
        Token TOKEN508=null;

        Object string_literal507_tree=null;
        Object TOKEN508_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:12: ( 'VB-APPARATUS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal507=(Token)match(input,68,FOLLOW_68_in_vbapparatus2475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal507_tree = (Object)adaptor.create(string_literal507);
            adaptor.addChild(root_0, string_literal507_tree);
            }
            TOKEN508=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus2477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN508_tree = (Object)adaptor.create(TOKEN508);
            adaptor.addChild(root_0, TOKEN508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal509=null;
        Token TOKEN510=null;

        Object string_literal509_tree=null;
        Object TOKEN510_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:12: ( 'NN-APPARATUS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal509=(Token)match(input,69,FOLLOW_69_in_nnapparatus2482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal509_tree = (Object)adaptor.create(string_literal509);
            adaptor.addChild(root_0, string_literal509_tree);
            }
            TOKEN510=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus2484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN510_tree = (Object)adaptor.create(TOKEN510);
            adaptor.addChild(root_0, TOKEN510_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal511=null;
        Token TOKEN512=null;

        Object string_literal511_tree=null;
        Object TOKEN512_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:14: ( 'VB-CONCENTRATE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal511=(Token)match(input,70,FOLLOW_70_in_vbconcentrate2491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal511_tree = (Object)adaptor.create(string_literal511);
            adaptor.addChild(root_0, string_literal511_tree);
            }
            TOKEN512=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate2493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN512_tree = (Object)adaptor.create(TOKEN512);
            adaptor.addChild(root_0, TOKEN512_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal513=null;
        Token TOKEN514=null;

        Object string_literal513_tree=null;
        Object TOKEN514_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:14: ( 'NN-CONCENTRATE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal513=(Token)match(input,71,FOLLOW_71_in_nnconcentrate2498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal513_tree = (Object)adaptor.create(string_literal513);
            adaptor.addChild(root_0, string_literal513_tree);
            }
            TOKEN514=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN514_tree = (Object)adaptor.create(TOKEN514);
            adaptor.addChild(root_0, TOKEN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal515=null;
        Token TOKEN516=null;

        Object string_literal515_tree=null;
        Object TOKEN516_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:7: ( 'VB-COOL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal515=(Token)match(input,72,FOLLOW_72_in_vbcool2507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal515_tree = (Object)adaptor.create(string_literal515);
            adaptor.addChild(root_0, string_literal515_tree);
            }
            TOKEN516=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool2509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN516_tree = (Object)adaptor.create(TOKEN516);
            adaptor.addChild(root_0, TOKEN516_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal517=null;
        Token TOKEN518=null;

        Object string_literal517_tree=null;
        Object TOKEN518_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:9: ( 'VB-DEGASS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal517=(Token)match(input,73,FOLLOW_73_in_vbdegass2516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal517_tree = (Object)adaptor.create(string_literal517);
            adaptor.addChild(root_0, string_literal517_tree);
            }
            TOKEN518=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass2518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN518_tree = (Object)adaptor.create(TOKEN518);
            adaptor.addChild(root_0, TOKEN518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal519=null;
        Token TOKEN520=null;

        Object string_literal519_tree=null;
        Object TOKEN520_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:11: ( 'VB-DISSOLVE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal519=(Token)match(input,74,FOLLOW_74_in_vbdissolve2525); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal519_tree = (Object)adaptor.create(string_literal519);
            adaptor.addChild(root_0, string_literal519_tree);
            }
            TOKEN520=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve2527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN520_tree = (Object)adaptor.create(TOKEN520);
            adaptor.addChild(root_0, TOKEN520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal521=null;
        Token TOKEN522=null;

        Object string_literal521_tree=null;
        Object TOKEN522_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:6: ( 'VB-DRY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal521=(Token)match(input,75,FOLLOW_75_in_vbdry2534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal521_tree = (Object)adaptor.create(string_literal521);
            adaptor.addChild(root_0, string_literal521_tree);
            }
            TOKEN522=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry2536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN522_tree = (Object)adaptor.create(TOKEN522);
            adaptor.addChild(root_0, TOKEN522_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal523=null;
        Token TOKEN524=null;

        Object string_literal523_tree=null;
        Object TOKEN524_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:6: ( 'NN-DRY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal523=(Token)match(input,76,FOLLOW_76_in_nndry2541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal523_tree = (Object)adaptor.create(string_literal523);
            adaptor.addChild(root_0, string_literal523_tree);
            }
            TOKEN524=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry2543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN524_tree = (Object)adaptor.create(TOKEN524);
            adaptor.addChild(root_0, TOKEN524_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal525=null;
        Token TOKEN526=null;

        Object string_literal525_tree=null;
        Object TOKEN526_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:10: ( 'VB-EXTRACT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal525=(Token)match(input,77,FOLLOW_77_in_vbextract2550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal525_tree = (Object)adaptor.create(string_literal525);
            adaptor.addChild(root_0, string_literal525_tree);
            }
            TOKEN526=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract2552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN526_tree = (Object)adaptor.create(TOKEN526);
            adaptor.addChild(root_0, TOKEN526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal527=null;
        Token TOKEN528=null;

        Object string_literal527_tree=null;
        Object TOKEN528_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:10: ( 'NN-EXTRACT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal527=(Token)match(input,78,FOLLOW_78_in_nnextract2557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal527_tree = (Object)adaptor.create(string_literal527);
            adaptor.addChild(root_0, string_literal527_tree);
            }
            TOKEN528=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract2559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN528_tree = (Object)adaptor.create(TOKEN528);
            adaptor.addChild(root_0, TOKEN528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal529=null;
        Token TOKEN530=null;

        Object string_literal529_tree=null;
        Object TOKEN530_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:9: ( 'VB-FILTER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal529=(Token)match(input,79,FOLLOW_79_in_vbfilter2566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal529_tree = (Object)adaptor.create(string_literal529);
            adaptor.addChild(root_0, string_literal529_tree);
            }
            TOKEN530=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter2568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN530_tree = (Object)adaptor.create(TOKEN530);
            adaptor.addChild(root_0, TOKEN530_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal531=null;
        Token TOKEN532=null;

        Object string_literal531_tree=null;
        Object TOKEN532_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:9: ( 'NN-FILTER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal531=(Token)match(input,80,FOLLOW_80_in_nnfilter2573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal531_tree = (Object)adaptor.create(string_literal531);
            adaptor.addChild(root_0, string_literal531_tree);
            }
            TOKEN532=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN532_tree = (Object)adaptor.create(TOKEN532);
            adaptor.addChild(root_0, TOKEN532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal533=null;
        Token TOKEN534=null;

        Object string_literal533_tree=null;
        Object TOKEN534_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:7: ( 'VB-HEAT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal533=(Token)match(input,81,FOLLOW_81_in_vbheat2582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal533_tree = (Object)adaptor.create(string_literal533);
            adaptor.addChild(root_0, string_literal533_tree);
            }
            TOKEN534=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN534_tree = (Object)adaptor.create(TOKEN534);
            adaptor.addChild(root_0, TOKEN534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal535=null;
        Token TOKEN536=null;

        Object string_literal535_tree=null;
        Object TOKEN536_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:11: ( 'VB-INCREASE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal535=(Token)match(input,82,FOLLOW_82_in_vbincrease2589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal535_tree = (Object)adaptor.create(string_literal535);
            adaptor.addChild(root_0, string_literal535_tree);
            }
            TOKEN536=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN536_tree = (Object)adaptor.create(TOKEN536);
            adaptor.addChild(root_0, TOKEN536_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal537=null;
        Token TOKEN538=null;

        Object string_literal537_tree=null;
        Object TOKEN538_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:12: ( 'VB-PARTITION' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal537=(Token)match(input,83,FOLLOW_83_in_vbpartition2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal537_tree = (Object)adaptor.create(string_literal537);
            adaptor.addChild(root_0, string_literal537_tree);
            }
            TOKEN538=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN538_tree = (Object)adaptor.create(TOKEN538);
            adaptor.addChild(root_0, TOKEN538_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal539=null;
        Token TOKEN540=null;

        Object string_literal539_tree=null;
        Object TOKEN540_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:14: ( 'VB-PRECIPITATE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal539=(Token)match(input,84,FOLLOW_84_in_vbprecipitate2607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal539_tree = (Object)adaptor.create(string_literal539);
            adaptor.addChild(root_0, string_literal539_tree);
            }
            TOKEN540=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN540_tree = (Object)adaptor.create(TOKEN540);
            adaptor.addChild(root_0, TOKEN540_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal541=null;
        Token TOKEN542=null;

        Object string_literal541_tree=null;
        Object TOKEN542_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:14: ( 'NN-PRECIPITATE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal541=(Token)match(input,85,FOLLOW_85_in_nnprecipitate2614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal541_tree = (Object)adaptor.create(string_literal541);
            adaptor.addChild(root_0, string_literal541_tree);
            }
            TOKEN542=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN542_tree = (Object)adaptor.create(TOKEN542);
            adaptor.addChild(root_0, TOKEN542_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal543=null;
        Token TOKEN544=null;

        Object string_literal543_tree=null;
        Object TOKEN544_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:9: ( 'VB-PURIFY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal543=(Token)match(input,86,FOLLOW_86_in_vbpurify2623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = (Object)adaptor.create(string_literal543);
            adaptor.addChild(root_0, string_literal543_tree);
            }
            TOKEN544=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN544_tree = (Object)adaptor.create(TOKEN544);
            adaptor.addChild(root_0, TOKEN544_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal545=null;
        Token TOKEN546=null;

        Object string_literal545_tree=null;
        Object TOKEN546_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:9: ( 'NN-PURIFY' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal545=(Token)match(input,87,FOLLOW_87_in_nnpurify2630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal545_tree = (Object)adaptor.create(string_literal545);
            adaptor.addChild(root_0, string_literal545_tree);
            }
            TOKEN546=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN546_tree = (Object)adaptor.create(TOKEN546);
            adaptor.addChild(root_0, TOKEN546_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal547=null;
        Token TOKEN548=null;

        Object string_literal547_tree=null;
        Object TOKEN548_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:9: ( 'VB-QUENCH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal547=(Token)match(input,88,FOLLOW_88_in_vbquench2639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal547_tree = (Object)adaptor.create(string_literal547);
            adaptor.addChild(root_0, string_literal547_tree);
            }
            TOKEN548=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN548_tree = (Object)adaptor.create(TOKEN548);
            adaptor.addChild(root_0, TOKEN548_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal549=null;
        Token TOKEN550=null;

        Object string_literal549_tree=null;
        Object TOKEN550_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:10: ( 'VB-RECOVER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal549=(Token)match(input,89,FOLLOW_89_in_vbrecover2648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal549_tree = (Object)adaptor.create(string_literal549);
            adaptor.addChild(root_0, string_literal549_tree);
            }
            TOKEN550=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN550_tree = (Object)adaptor.create(TOKEN550);
            adaptor.addChild(root_0, TOKEN550_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal551=null;
        Token TOKEN552=null;

        Object string_literal551_tree=null;
        Object TOKEN552_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:9: ( 'VB-REMOVE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal551=(Token)match(input,90,FOLLOW_90_in_vbremove2657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal551_tree = (Object)adaptor.create(string_literal551);
            adaptor.addChild(root_0, string_literal551_tree);
            }
            TOKEN552=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN552_tree = (Object)adaptor.create(TOKEN552);
            adaptor.addChild(root_0, TOKEN552_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal553=null;
        Token TOKEN554=null;

        Object string_literal553_tree=null;
        Object TOKEN554_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:9: ( 'NN-REMOVE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal553=(Token)match(input,91,FOLLOW_91_in_nnremove2664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal553_tree = (Object)adaptor.create(string_literal553);
            adaptor.addChild(root_0, string_literal553_tree);
            }
            TOKEN554=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN554_tree = (Object)adaptor.create(TOKEN554);
            adaptor.addChild(root_0, TOKEN554_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal555=null;
        Token TOKEN556=null;

        Object string_literal555_tree=null;
        Object TOKEN556_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:7: ( 'VB-STIR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal555=(Token)match(input,92,FOLLOW_92_in_vbstir2673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal555_tree = (Object)adaptor.create(string_literal555);
            adaptor.addChild(root_0, string_literal555_tree);
            }
            TOKEN556=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN556_tree = (Object)adaptor.create(TOKEN556);
            adaptor.addChild(root_0, TOKEN556_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal557=null;
        Token TOKEN558=null;

        Object string_literal557_tree=null;
        Object TOKEN558_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:13: ( 'VB-SYNTHESIZE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal557=(Token)match(input,93,FOLLOW_93_in_vbsynthesize2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal557_tree = (Object)adaptor.create(string_literal557);
            adaptor.addChild(root_0, string_literal557_tree);
            }
            TOKEN558=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN558_tree = (Object)adaptor.create(TOKEN558);
            adaptor.addChild(root_0, TOKEN558_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal559=null;
        Token TOKEN560=null;

        Object string_literal559_tree=null;
        Object TOKEN560_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:13: ( 'NN-SYNTHESIZE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal559=(Token)match(input,94,FOLLOW_94_in_nnsynthesize2689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal559_tree = (Object)adaptor.create(string_literal559);
            adaptor.addChild(root_0, string_literal559_tree);
            }
            TOKEN560=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN560_tree = (Object)adaptor.create(TOKEN560);
            adaptor.addChild(root_0, TOKEN560_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal561=null;
        Token TOKEN562=null;

        Object string_literal561_tree=null;
        Object TOKEN562_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:7: ( 'VB-WAIT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal561=(Token)match(input,95,FOLLOW_95_in_vbwait2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal561_tree = (Object)adaptor.create(string_literal561);
            adaptor.addChild(root_0, string_literal561_tree);
            }
            TOKEN562=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN562_tree = (Object)adaptor.create(TOKEN562);
            adaptor.addChild(root_0, TOKEN562_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal563=null;
        Token TOKEN564=null;

        Object string_literal563_tree=null;
        Object TOKEN564_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:7: ( 'VB-WASH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal563=(Token)match(input,96,FOLLOW_96_in_vbwash2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal563_tree = (Object)adaptor.create(string_literal563);
            adaptor.addChild(root_0, string_literal563_tree);
            }
            TOKEN564=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN564_tree = (Object)adaptor.create(TOKEN564);
            adaptor.addChild(root_0, TOKEN564_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal565=null;
        Token TOKEN566=null;

        Object string_literal565_tree=null;
        Object TOKEN566_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:8: ( 'VB-YIELD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal565=(Token)match(input,97,FOLLOW_97_in_vbyield2716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal565_tree = (Object)adaptor.create(string_literal565);
            adaptor.addChild(root_0, string_literal565_tree);
            }
            TOKEN566=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN566_tree = (Object)adaptor.create(TOKEN566);
            adaptor.addChild(root_0, TOKEN566_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal567=null;
        Token TOKEN568=null;

        Object string_literal567_tree=null;
        Object TOKEN568_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:6: ( 'COLON' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal567=(Token)match(input,98,FOLLOW_98_in_colon2725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal567_tree = (Object)adaptor.create(string_literal567);
            adaptor.addChild(root_0, string_literal567_tree);
            }
            TOKEN568=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN568_tree = (Object)adaptor.create(TOKEN568);
            adaptor.addChild(root_0, TOKEN568_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal569=null;
        Token TOKEN570=null;

        Object string_literal569_tree=null;
        Object TOKEN570_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:6: ( 'COMMA' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal569=(Token)match(input,99,FOLLOW_99_in_comma2732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal569_tree = (Object)adaptor.create(string_literal569);
            adaptor.addChild(root_0, string_literal569_tree);
            }
            TOKEN570=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN570_tree = (Object)adaptor.create(TOKEN570);
            adaptor.addChild(root_0, TOKEN570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal571=null;
        Token TOKEN572=null;

        Object string_literal571_tree=null;
        Object TOKEN572_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:6: ( 'APOST' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal571=(Token)match(input,100,FOLLOW_100_in_apost2739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal571_tree = (Object)adaptor.create(string_literal571);
            adaptor.addChild(root_0, string_literal571_tree);
            }
            TOKEN572=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN572_tree = (Object)adaptor.create(TOKEN572);
            adaptor.addChild(root_0, TOKEN572_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal573=null;
        Token TOKEN574=null;

        Object string_literal573_tree=null;
        Object TOKEN574_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:4: ( 'NEG' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal573=(Token)match(input,101,FOLLOW_101_in_neg2746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal573_tree = (Object)adaptor.create(string_literal573);
            adaptor.addChild(root_0, string_literal573_tree);
            }
            TOKEN574=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN574_tree = (Object)adaptor.create(TOKEN574);
            adaptor.addChild(root_0, TOKEN574_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal575=null;
        Token TOKEN576=null;

        Object string_literal575_tree=null;
        Object TOKEN576_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:5: ( 'DASH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal575=(Token)match(input,102,FOLLOW_102_in_dash2753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal575_tree = (Object)adaptor.create(string_literal575);
            adaptor.addChild(root_0, string_literal575_tree);
            }
            TOKEN576=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN576_tree = (Object)adaptor.create(TOKEN576);
            adaptor.addChild(root_0, TOKEN576_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal577=null;
        Token TOKEN578=null;

        Object string_literal577_tree=null;
        Object TOKEN578_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:5: ( 'STOP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal577=(Token)match(input,103,FOLLOW_103_in_stop2760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal577_tree = (Object)adaptor.create(string_literal577);
            adaptor.addChild(root_0, string_literal577_tree);
            }
            TOKEN578=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN578_tree = (Object)adaptor.create(TOKEN578);
            adaptor.addChild(root_0, TOKEN578_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal579=null;
        Token TOKEN580=null;

        Object string_literal579_tree=null;
        Object TOKEN580_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:10: ( 'NN-PERCENT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal579=(Token)match(input,104,FOLLOW_104_in_nnpercent2767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal579_tree = (Object)adaptor.create(string_literal579);
            adaptor.addChild(root_0, string_literal579_tree);
            }
            TOKEN580=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN580_tree = (Object)adaptor.create(TOKEN580);
            adaptor.addChild(root_0, TOKEN580_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal581=null;
        Token TOKEN582=null;

        Object string_literal581_tree=null;
        Object TOKEN582_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:5: ( 'LSQB' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal581=(Token)match(input,105,FOLLOW_105_in_lsqb2774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal581_tree = (Object)adaptor.create(string_literal581);
            adaptor.addChild(root_0, string_literal581_tree);
            }
            TOKEN582=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN582_tree = (Object)adaptor.create(TOKEN582);
            adaptor.addChild(root_0, TOKEN582_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal583=null;
        Token TOKEN584=null;

        Object string_literal583_tree=null;
        Object TOKEN584_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:5: ( 'RSQB' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal583=(Token)match(input,106,FOLLOW_106_in_rsqb2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal583_tree = (Object)adaptor.create(string_literal583);
            adaptor.addChild(root_0, string_literal583_tree);
            }
            TOKEN584=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN584_tree = (Object)adaptor.create(TOKEN584);
            adaptor.addChild(root_0, TOKEN584_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal585=null;
        Token TOKEN586=null;

        Object string_literal585_tree=null;
        Object TOKEN586_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:4: ( '-LRB-' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal585=(Token)match(input,107,FOLLOW_107_in_lrb2789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal585_tree = (Object)adaptor.create(string_literal585);
            adaptor.addChild(root_0, string_literal585_tree);
            }
            TOKEN586=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN586_tree = (Object)adaptor.create(TOKEN586);
            adaptor.addChild(root_0, TOKEN586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal587=null;
        Token TOKEN588=null;

        Object string_literal587_tree=null;
        Object TOKEN588_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:4: ( '-RRB-' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal587=(Token)match(input,108,FOLLOW_108_in_rrb2796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal587_tree = (Object)adaptor.create(string_literal587);
            adaptor.addChild(root_0, string_literal587_tree);
            }
            TOKEN588=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN588_tree = (Object)adaptor.create(TOKEN588);
            adaptor.addChild(root_0, TOKEN588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal589=null;
        Token TOKEN590=null;

        Object string_literal589_tree=null;
        Object TOKEN590_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:4: ( 'ABL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal589=(Token)match(input,109,FOLLOW_109_in_abl2807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal589_tree = (Object)adaptor.create(string_literal589);
            adaptor.addChild(root_0, string_literal589_tree);
            }
            TOKEN590=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN590_tree = (Object)adaptor.create(TOKEN590);
            adaptor.addChild(root_0, TOKEN590_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal591=null;
        Token TOKEN592=null;

        Object string_literal591_tree=null;
        Object TOKEN592_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:4: ( 'ABN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal591=(Token)match(input,110,FOLLOW_110_in_abn2816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal591_tree = (Object)adaptor.create(string_literal591);
            adaptor.addChild(root_0, string_literal591_tree);
            }
            TOKEN592=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN592_tree = (Object)adaptor.create(TOKEN592);
            adaptor.addChild(root_0, TOKEN592_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal593=null;
        Token TOKEN594=null;

        Object string_literal593_tree=null;
        Object TOKEN594_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:4: ( 'ABX' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal593=(Token)match(input,111,FOLLOW_111_in_abx2825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal593_tree = (Object)adaptor.create(string_literal593);
            adaptor.addChild(root_0, string_literal593_tree);
            }
            TOKEN594=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN594_tree = (Object)adaptor.create(TOKEN594);
            adaptor.addChild(root_0, TOKEN594_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal595=null;
        Token TOKEN596=null;

        Object string_literal595_tree=null;
        Object TOKEN596_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:3: ( 'AP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal595=(Token)match(input,112,FOLLOW_112_in_ap2834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal595_tree = (Object)adaptor.create(string_literal595);
            adaptor.addChild(root_0, string_literal595_tree);
            }
            TOKEN596=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN596_tree = (Object)adaptor.create(TOKEN596);
            adaptor.addChild(root_0, TOKEN596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal597=null;
        Token TOKEN598=null;

        Object string_literal597_tree=null;
        Object TOKEN598_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:3: ( 'AT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal597=(Token)match(input,113,FOLLOW_113_in_at2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal597_tree = (Object)adaptor.create(string_literal597);
            adaptor.addChild(root_0, string_literal597_tree);
            }
            TOKEN598=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN598_tree = (Object)adaptor.create(TOKEN598);
            adaptor.addChild(root_0, TOKEN598_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal599=null;
        Token TOKEN600=null;

        Object string_literal599_tree=null;
        Object TOKEN600_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:3: ( 'BE' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal599=(Token)match(input,114,FOLLOW_114_in_be2852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal599_tree = (Object)adaptor.create(string_literal599);
            adaptor.addChild(root_0, string_literal599_tree);
            }
            TOKEN600=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN600_tree = (Object)adaptor.create(TOKEN600);
            adaptor.addChild(root_0, TOKEN600_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal601=null;
        Token TOKEN602=null;

        Object string_literal601_tree=null;
        Object TOKEN602_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:4: ( 'BED' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal601=(Token)match(input,115,FOLLOW_115_in_bed2861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal601_tree = (Object)adaptor.create(string_literal601);
            adaptor.addChild(root_0, string_literal601_tree);
            }
            TOKEN602=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN602_tree = (Object)adaptor.create(TOKEN602);
            adaptor.addChild(root_0, TOKEN602_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal603=null;
        Token TOKEN604=null;

        Object string_literal603_tree=null;
        Object TOKEN604_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:5: ( 'BEDZ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal603=(Token)match(input,116,FOLLOW_116_in_bedz2870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal603_tree = (Object)adaptor.create(string_literal603);
            adaptor.addChild(root_0, string_literal603_tree);
            }
            TOKEN604=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN604_tree = (Object)adaptor.create(TOKEN604);
            adaptor.addChild(root_0, TOKEN604_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal605=null;
        Token TOKEN606=null;

        Object string_literal605_tree=null;
        Object TOKEN606_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:4: ( 'BEG' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal605=(Token)match(input,117,FOLLOW_117_in_beg2879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal605_tree = (Object)adaptor.create(string_literal605);
            adaptor.addChild(root_0, string_literal605_tree);
            }
            TOKEN606=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN606_tree = (Object)adaptor.create(TOKEN606);
            adaptor.addChild(root_0, TOKEN606_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal607=null;
        Token TOKEN608=null;

        Object string_literal607_tree=null;
        Object TOKEN608_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:4: ( 'BEM' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal607=(Token)match(input,118,FOLLOW_118_in_bem2888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal607_tree = (Object)adaptor.create(string_literal607);
            adaptor.addChild(root_0, string_literal607_tree);
            }
            TOKEN608=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN608_tree = (Object)adaptor.create(TOKEN608);
            adaptor.addChild(root_0, TOKEN608_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal609=null;
        Token TOKEN610=null;

        Object string_literal609_tree=null;
        Object TOKEN610_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:4: ( 'BEN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal609=(Token)match(input,119,FOLLOW_119_in_ben2897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal609_tree = (Object)adaptor.create(string_literal609);
            adaptor.addChild(root_0, string_literal609_tree);
            }
            TOKEN610=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN610_tree = (Object)adaptor.create(TOKEN610);
            adaptor.addChild(root_0, TOKEN610_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal611=null;
        Token TOKEN612=null;

        Object string_literal611_tree=null;
        Object TOKEN612_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:4: ( 'BER' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal611=(Token)match(input,120,FOLLOW_120_in_ber2906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal611_tree = (Object)adaptor.create(string_literal611);
            adaptor.addChild(root_0, string_literal611_tree);
            }
            TOKEN612=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN612_tree = (Object)adaptor.create(TOKEN612);
            adaptor.addChild(root_0, TOKEN612_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal613=null;
        Token TOKEN614=null;

        Object string_literal613_tree=null;
        Object TOKEN614_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:4: ( 'BEZ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal613=(Token)match(input,121,FOLLOW_121_in_bez2915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal613_tree = (Object)adaptor.create(string_literal613);
            adaptor.addChild(root_0, string_literal613_tree);
            }
            TOKEN614=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN614_tree = (Object)adaptor.create(TOKEN614);
            adaptor.addChild(root_0, TOKEN614_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal615=null;
        Token TOKEN616=null;

        Object string_literal615_tree=null;
        Object TOKEN616_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:3: ( 'CC' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal615=(Token)match(input,122,FOLLOW_122_in_cc2924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal615_tree = (Object)adaptor.create(string_literal615);
            adaptor.addChild(root_0, string_literal615_tree);
            }
            TOKEN616=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN616_tree = (Object)adaptor.create(TOKEN616);
            adaptor.addChild(root_0, TOKEN616_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal617=null;
        Token TOKEN618=null;

        Object string_literal617_tree=null;
        Object TOKEN618_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:3: ( 'CD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal617=(Token)match(input,123,FOLLOW_123_in_cd2933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal617_tree = (Object)adaptor.create(string_literal617);
            adaptor.addChild(root_0, string_literal617_tree);
            }
            TOKEN618=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN618_tree = (Object)adaptor.create(TOKEN618);
            adaptor.addChild(root_0, TOKEN618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal619=null;
        Token TOKEN620=null;

        Object string_literal619_tree=null;
        Object TOKEN620_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:3: ( 'CS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal619=(Token)match(input,124,FOLLOW_124_in_cs2942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal619_tree = (Object)adaptor.create(string_literal619);
            adaptor.addChild(root_0, string_literal619_tree);
            }
            TOKEN620=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN620_tree = (Object)adaptor.create(TOKEN620);
            adaptor.addChild(root_0, TOKEN620_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal621=null;
        Token TOKEN622=null;

        Object string_literal621_tree=null;
        Object TOKEN622_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:7: ( 'DO' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal621=(Token)match(input,125,FOLLOW_125_in_dotok2952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal621_tree = (Object)adaptor.create(string_literal621);
            adaptor.addChild(root_0, string_literal621_tree);
            }
            TOKEN622=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN622_tree = (Object)adaptor.create(TOKEN622);
            adaptor.addChild(root_0, TOKEN622_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal623=null;
        Token TOKEN624=null;

        Object string_literal623_tree=null;
        Object TOKEN624_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:4: ( 'DOD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal623=(Token)match(input,126,FOLLOW_126_in_dod2961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal623_tree = (Object)adaptor.create(string_literal623);
            adaptor.addChild(root_0, string_literal623_tree);
            }
            TOKEN624=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN624_tree = (Object)adaptor.create(TOKEN624);
            adaptor.addChild(root_0, TOKEN624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal625=null;
        Token TOKEN626=null;

        Object string_literal625_tree=null;
        Object TOKEN626_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:4: ( 'DOZ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal625=(Token)match(input,127,FOLLOW_127_in_doz2970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal625_tree = (Object)adaptor.create(string_literal625);
            adaptor.addChild(root_0, string_literal625_tree);
            }
            TOKEN626=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN626_tree = (Object)adaptor.create(TOKEN626);
            adaptor.addChild(root_0, TOKEN626_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal627=null;
        Token TOKEN628=null;

        Object string_literal627_tree=null;
        Object TOKEN628_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:3: ( 'DT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal627=(Token)match(input,128,FOLLOW_128_in_dt2979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal627_tree = (Object)adaptor.create(string_literal627);
            adaptor.addChild(root_0, string_literal627_tree);
            }
            TOKEN628=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt2981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN628_tree = (Object)adaptor.create(TOKEN628);
            adaptor.addChild(root_0, TOKEN628_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal629=null;
        Token TOKEN630=null;

        Object string_literal629_tree=null;
        Object TOKEN630_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:4: ( 'DTI' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal629=(Token)match(input,129,FOLLOW_129_in_dti2988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal629_tree = (Object)adaptor.create(string_literal629);
            adaptor.addChild(root_0, string_literal629_tree);
            }
            TOKEN630=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti2990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN630_tree = (Object)adaptor.create(TOKEN630);
            adaptor.addChild(root_0, TOKEN630_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal631=null;
        Token TOKEN632=null;

        Object string_literal631_tree=null;
        Object TOKEN632_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:4: ( 'DTS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal631=(Token)match(input,130,FOLLOW_130_in_dts2997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal631_tree = (Object)adaptor.create(string_literal631);
            adaptor.addChild(root_0, string_literal631_tree);
            }
            TOKEN632=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts2999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN632_tree = (Object)adaptor.create(TOKEN632);
            adaptor.addChild(root_0, TOKEN632_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal633=null;
        Token TOKEN634=null;

        Object string_literal633_tree=null;
        Object TOKEN634_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:4: ( 'DTX' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal633=(Token)match(input,131,FOLLOW_131_in_dtx3006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal633_tree = (Object)adaptor.create(string_literal633);
            adaptor.addChild(root_0, string_literal633_tree);
            }
            TOKEN634=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN634_tree = (Object)adaptor.create(TOKEN634);
            adaptor.addChild(root_0, TOKEN634_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal635=null;
        Token TOKEN636=null;

        Object string_literal635_tree=null;
        Object TOKEN636_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:3: ( 'EX' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal635=(Token)match(input,132,FOLLOW_132_in_ex3015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal635_tree = (Object)adaptor.create(string_literal635);
            adaptor.addChild(root_0, string_literal635_tree);
            }
            TOKEN636=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN636_tree = (Object)adaptor.create(TOKEN636);
            adaptor.addChild(root_0, TOKEN636_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal637=null;
        Token TOKEN638=null;

        Object string_literal637_tree=null;
        Object TOKEN638_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:3: ( 'FW' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal637=(Token)match(input,133,FOLLOW_133_in_fw3024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal637_tree = (Object)adaptor.create(string_literal637);
            adaptor.addChild(root_0, string_literal637_tree);
            }
            TOKEN638=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN638_tree = (Object)adaptor.create(TOKEN638);
            adaptor.addChild(root_0, TOKEN638_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal639=null;
        Token TOKEN640=null;

        Object string_literal639_tree=null;
        Object TOKEN640_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:5: ( 'FW-IN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal639=(Token)match(input,134,FOLLOW_134_in_fwin3033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal639_tree = (Object)adaptor.create(string_literal639);
            adaptor.addChild(root_0, string_literal639_tree);
            }
            TOKEN640=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN640_tree = (Object)adaptor.create(TOKEN640);
            adaptor.addChild(root_0, TOKEN640_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal641=null;
        Token TOKEN642=null;

        Object string_literal641_tree=null;
        Object TOKEN642_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:3: ( 'HV' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal641=(Token)match(input,135,FOLLOW_135_in_hv3042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal641_tree = (Object)adaptor.create(string_literal641);
            adaptor.addChild(root_0, string_literal641_tree);
            }
            TOKEN642=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN642_tree = (Object)adaptor.create(TOKEN642);
            adaptor.addChild(root_0, TOKEN642_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal643=null;
        Token TOKEN644=null;

        Object string_literal643_tree=null;
        Object TOKEN644_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:4: ( 'HVD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal643=(Token)match(input,136,FOLLOW_136_in_hvd3051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal643_tree = (Object)adaptor.create(string_literal643);
            adaptor.addChild(root_0, string_literal643_tree);
            }
            TOKEN644=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN644_tree = (Object)adaptor.create(TOKEN644);
            adaptor.addChild(root_0, TOKEN644_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal645=null;
        Token TOKEN646=null;

        Object string_literal645_tree=null;
        Object TOKEN646_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:4: ( 'HVG' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal645=(Token)match(input,137,FOLLOW_137_in_hvg3060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal645_tree = (Object)adaptor.create(string_literal645);
            adaptor.addChild(root_0, string_literal645_tree);
            }
            TOKEN646=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN646_tree = (Object)adaptor.create(TOKEN646);
            adaptor.addChild(root_0, TOKEN646_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal647=null;
        Token TOKEN648=null;

        Object string_literal647_tree=null;
        Object TOKEN648_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:4: ( 'HVN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal647=(Token)match(input,138,FOLLOW_138_in_hvn3069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal647_tree = (Object)adaptor.create(string_literal647);
            adaptor.addChild(root_0, string_literal647_tree);
            }
            TOKEN648=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN648_tree = (Object)adaptor.create(TOKEN648);
            adaptor.addChild(root_0, TOKEN648_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal649=null;
        Token TOKEN650=null;

        Object string_literal649_tree=null;
        Object TOKEN650_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:3: ( 'IN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal649=(Token)match(input,139,FOLLOW_139_in_in3078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal649_tree = (Object)adaptor.create(string_literal649);
            adaptor.addChild(root_0, string_literal649_tree);
            }
            TOKEN650=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN650_tree = (Object)adaptor.create(TOKEN650);
            adaptor.addChild(root_0, TOKEN650_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal651=null;
        Token TOKEN652=null;

        Object string_literal651_tree=null;
        Object TOKEN652_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:3: ( 'JJ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal651=(Token)match(input,140,FOLLOW_140_in_jj3087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal651_tree = (Object)adaptor.create(string_literal651);
            adaptor.addChild(root_0, string_literal651_tree);
            }
            TOKEN652=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN652_tree = (Object)adaptor.create(TOKEN652);
            adaptor.addChild(root_0, TOKEN652_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:419:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal653=null;
        Token TOKEN654=null;

        Object string_literal653_tree=null;
        Object TOKEN654_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:419:4: ( 'JJR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:419:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal653=(Token)match(input,141,FOLLOW_141_in_jjr3096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal653_tree = (Object)adaptor.create(string_literal653);
            adaptor.addChild(root_0, string_literal653_tree);
            }
            TOKEN654=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN654_tree = (Object)adaptor.create(TOKEN654);
            adaptor.addChild(root_0, TOKEN654_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:422:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal655=null;
        Token TOKEN656=null;

        Object string_literal655_tree=null;
        Object TOKEN656_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:422:4: ( 'JJS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:422:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal655=(Token)match(input,142,FOLLOW_142_in_jjs3105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal655_tree = (Object)adaptor.create(string_literal655);
            adaptor.addChild(root_0, string_literal655_tree);
            }
            TOKEN656=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN656_tree = (Object)adaptor.create(TOKEN656);
            adaptor.addChild(root_0, TOKEN656_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:425:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal657=null;
        Token TOKEN658=null;

        Object string_literal657_tree=null;
        Object TOKEN658_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:425:4: ( 'JJT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:425:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal657=(Token)match(input,143,FOLLOW_143_in_jjt3114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal657_tree = (Object)adaptor.create(string_literal657);
            adaptor.addChild(root_0, string_literal657_tree);
            }
            TOKEN658=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN658_tree = (Object)adaptor.create(TOKEN658);
            adaptor.addChild(root_0, TOKEN658_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:428:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal659=null;
        Token TOKEN660=null;

        Object string_literal659_tree=null;
        Object TOKEN660_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:428:3: ( 'MD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:428:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal659=(Token)match(input,144,FOLLOW_144_in_md3123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal659_tree = (Object)adaptor.create(string_literal659);
            adaptor.addChild(root_0, string_literal659_tree);
            }
            TOKEN660=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN660_tree = (Object)adaptor.create(TOKEN660);
            adaptor.addChild(root_0, TOKEN660_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:431:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal661=null;
        Token TOKEN662=null;

        Object string_literal661_tree=null;
        Object TOKEN662_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:431:3: ( 'NC' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:431:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal661=(Token)match(input,145,FOLLOW_145_in_nc3132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal661_tree = (Object)adaptor.create(string_literal661);
            adaptor.addChild(root_0, string_literal661_tree);
            }
            TOKEN662=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN662_tree = (Object)adaptor.create(TOKEN662);
            adaptor.addChild(root_0, TOKEN662_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:434:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal663=null;
        Token TOKEN664=null;

        Object string_literal663_tree=null;
        Object TOKEN664_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:434:3: ( 'NN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:434:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal663=(Token)match(input,146,FOLLOW_146_in_nn3141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal663_tree = (Object)adaptor.create(string_literal663);
            adaptor.addChild(root_0, string_literal663_tree);
            }
            TOKEN664=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN664_tree = (Object)adaptor.create(TOKEN664);
            adaptor.addChild(root_0, TOKEN664_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:437:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal665=null;
        Token TOKEN666=null;

        Object string_literal665_tree=null;
        Object TOKEN666_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:437:8: ( 'NN$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:437:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal665=(Token)match(input,147,FOLLOW_147_in_nn_poss3150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal665_tree = (Object)adaptor.create(string_literal665);
            adaptor.addChild(root_0, string_literal665_tree);
            }
            TOKEN666=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN666_tree = (Object)adaptor.create(TOKEN666);
            adaptor.addChild(root_0, TOKEN666_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:440:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal667=null;
        Token TOKEN668=null;

        Object string_literal667_tree=null;
        Object TOKEN668_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:440:4: ( 'NNS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:440:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal667=(Token)match(input,148,FOLLOW_148_in_nns3159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal667_tree = (Object)adaptor.create(string_literal667);
            adaptor.addChild(root_0, string_literal667_tree);
            }
            TOKEN668=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN668_tree = (Object)adaptor.create(TOKEN668);
            adaptor.addChild(root_0, TOKEN668_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal669=null;
        Token TOKEN670=null;

        Object string_literal669_tree=null;
        Object TOKEN670_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:9: ( 'NNS$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal669=(Token)match(input,149,FOLLOW_149_in_nns_poss3168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal669_tree = (Object)adaptor.create(string_literal669);
            adaptor.addChild(root_0, string_literal669_tree);
            }
            TOKEN670=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN670_tree = (Object)adaptor.create(TOKEN670);
            adaptor.addChild(root_0, TOKEN670_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:446:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal671=null;
        Token TOKEN672=null;

        Object string_literal671_tree=null;
        Object TOKEN672_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:446:3: ( 'NP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:446:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal671=(Token)match(input,150,FOLLOW_150_in_np3177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal671_tree = (Object)adaptor.create(string_literal671);
            adaptor.addChild(root_0, string_literal671_tree);
            }
            TOKEN672=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN672_tree = (Object)adaptor.create(TOKEN672);
            adaptor.addChild(root_0, TOKEN672_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal673=null;
        Token TOKEN674=null;

        Object string_literal673_tree=null;
        Object TOKEN674_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:4: ( 'NNP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal673=(Token)match(input,151,FOLLOW_151_in_nnp3187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal673_tree = (Object)adaptor.create(string_literal673);
            adaptor.addChild(root_0, string_literal673_tree);
            }
            TOKEN674=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN674_tree = (Object)adaptor.create(TOKEN674);
            adaptor.addChild(root_0, TOKEN674_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal675=null;
        Token TOKEN676=null;

        Object string_literal675_tree=null;
        Object TOKEN676_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:8: ( 'NP$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal675=(Token)match(input,152,FOLLOW_152_in_np_poss3197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal675_tree = (Object)adaptor.create(string_literal675);
            adaptor.addChild(root_0, string_literal675_tree);
            }
            TOKEN676=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN676_tree = (Object)adaptor.create(TOKEN676);
            adaptor.addChild(root_0, TOKEN676_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal677=null;
        Token TOKEN678=null;

        Object string_literal677_tree=null;
        Object TOKEN678_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:4: ( 'NPS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal677=(Token)match(input,153,FOLLOW_153_in_nps3206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal677_tree = (Object)adaptor.create(string_literal677);
            adaptor.addChild(root_0, string_literal677_tree);
            }
            TOKEN678=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN678_tree = (Object)adaptor.create(TOKEN678);
            adaptor.addChild(root_0, TOKEN678_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal679=null;
        Token TOKEN680=null;

        Object string_literal679_tree=null;
        Object TOKEN680_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:9: ( 'NPS$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal679=(Token)match(input,154,FOLLOW_154_in_nps_poss3215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal679_tree = (Object)adaptor.create(string_literal679);
            adaptor.addChild(root_0, string_literal679_tree);
            }
            TOKEN680=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN680_tree = (Object)adaptor.create(TOKEN680);
            adaptor.addChild(root_0, TOKEN680_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal681=null;
        Token TOKEN682=null;

        Object string_literal681_tree=null;
        Object TOKEN682_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:3: ( 'NR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal681=(Token)match(input,155,FOLLOW_155_in_nr3224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal681_tree = (Object)adaptor.create(string_literal681);
            adaptor.addChild(root_0, string_literal681_tree);
            }
            TOKEN682=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN682_tree = (Object)adaptor.create(TOKEN682);
            adaptor.addChild(root_0, TOKEN682_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal683=null;
        Token TOKEN684=null;

        Object string_literal683_tree=null;
        Object TOKEN684_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:3: ( 'OD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal683=(Token)match(input,156,FOLLOW_156_in_od3233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal683_tree = (Object)adaptor.create(string_literal683);
            adaptor.addChild(root_0, string_literal683_tree);
            }
            TOKEN684=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN684_tree = (Object)adaptor.create(TOKEN684);
            adaptor.addChild(root_0, TOKEN684_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:3: ( 'PN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal685=(Token)match(input,157,FOLLOW_157_in_pn3242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal685_tree = (Object)adaptor.create(string_literal685);
            adaptor.addChild(root_0, string_literal685_tree);
            }
            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN686_tree = (Object)adaptor.create(TOKEN686);
            adaptor.addChild(root_0, TOKEN686_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:8: ( 'PN$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal687=(Token)match(input,158,FOLLOW_158_in_pn_poss3251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal687_tree = (Object)adaptor.create(string_literal687);
            adaptor.addChild(root_0, string_literal687_tree);
            }
            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN688_tree = (Object)adaptor.create(TOKEN688);
            adaptor.addChild(root_0, TOKEN688_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:8: ( 'PP$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal689=(Token)match(input,159,FOLLOW_159_in_pp_poss3260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal689_tree = (Object)adaptor.create(string_literal689);
            adaptor.addChild(root_0, string_literal689_tree);
            }
            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN690_tree = (Object)adaptor.create(TOKEN690);
            adaptor.addChild(root_0, TOKEN690_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:13: ( 'PP$$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal691=(Token)match(input,160,FOLLOW_160_in_pp_poss_poss3269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal691_tree = (Object)adaptor.create(string_literal691);
            adaptor.addChild(root_0, string_literal691_tree);
            }
            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN692_tree = (Object)adaptor.create(TOKEN692);
            adaptor.addChild(root_0, TOKEN692_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:4: ( 'PPL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal693=(Token)match(input,161,FOLLOW_161_in_ppl3278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal693_tree = (Object)adaptor.create(string_literal693);
            adaptor.addChild(root_0, string_literal693_tree);
            }
            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN694_tree = (Object)adaptor.create(TOKEN694);
            adaptor.addChild(root_0, TOKEN694_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:5: ( 'PPLS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal695=(Token)match(input,162,FOLLOW_162_in_ppls3287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal695_tree = (Object)adaptor.create(string_literal695);
            adaptor.addChild(root_0, string_literal695_tree);
            }
            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN696_tree = (Object)adaptor.create(TOKEN696);
            adaptor.addChild(root_0, TOKEN696_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: ( 'PRP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal697=(Token)match(input,163,FOLLOW_163_in_prp3297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal697_tree = (Object)adaptor.create(string_literal697);
            adaptor.addChild(root_0, string_literal697_tree);
            }
            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN698_tree = (Object)adaptor.create(TOKEN698);
            adaptor.addChild(root_0, TOKEN698_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:4: ( 'PPO' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal699=(Token)match(input,164,FOLLOW_164_in_ppo3307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal699_tree = (Object)adaptor.create(string_literal699);
            adaptor.addChild(root_0, string_literal699_tree);
            }
            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN700_tree = (Object)adaptor.create(TOKEN700);
            adaptor.addChild(root_0, TOKEN700_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:4: ( 'PPS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal701=(Token)match(input,165,FOLLOW_165_in_pps3316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal701_tree = (Object)adaptor.create(string_literal701);
            adaptor.addChild(root_0, string_literal701_tree);
            }
            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN702_tree = (Object)adaptor.create(TOKEN702);
            adaptor.addChild(root_0, TOKEN702_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:5: ( 'PPSS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal703=(Token)match(input,166,FOLLOW_166_in_ppss3325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal703_tree = (Object)adaptor.create(string_literal703);
            adaptor.addChild(root_0, string_literal703_tree);
            }
            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss3327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN704_tree = (Object)adaptor.create(TOKEN704);
            adaptor.addChild(root_0, TOKEN704_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:3: ( 'QL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal705=(Token)match(input,167,FOLLOW_167_in_ql3334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal705_tree = (Object)adaptor.create(string_literal705);
            adaptor.addChild(root_0, string_literal705_tree);
            }
            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql3336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN706_tree = (Object)adaptor.create(TOKEN706);
            adaptor.addChild(root_0, TOKEN706_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:4: ( 'QLP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal707=(Token)match(input,168,FOLLOW_168_in_qlp3343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal707_tree = (Object)adaptor.create(string_literal707);
            adaptor.addChild(root_0, string_literal707_tree);
            }
            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp3345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN708_tree = (Object)adaptor.create(TOKEN708);
            adaptor.addChild(root_0, TOKEN708_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:3: ( 'RB' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal709=(Token)match(input,169,FOLLOW_169_in_rb3352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal709_tree = (Object)adaptor.create(string_literal709);
            adaptor.addChild(root_0, string_literal709_tree);
            }
            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb3354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN710_tree = (Object)adaptor.create(TOKEN710);
            adaptor.addChild(root_0, TOKEN710_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:4: ( 'RBR' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal711=(Token)match(input,170,FOLLOW_170_in_rbr3361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal711_tree = (Object)adaptor.create(string_literal711);
            adaptor.addChild(root_0, string_literal711_tree);
            }
            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr3363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN712_tree = (Object)adaptor.create(TOKEN712);
            adaptor.addChild(root_0, TOKEN712_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:8: ( 'RB-CONJ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal713=(Token)match(input,171,FOLLOW_171_in_rbconj3372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal713_tree = (Object)adaptor.create(string_literal713);
            adaptor.addChild(root_0, string_literal713_tree);
            }
            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj3375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN714_tree = (Object)adaptor.create(TOKEN714);
            adaptor.addChild(root_0, TOKEN714_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:4: ( 'RBT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal715=(Token)match(input,172,FOLLOW_172_in_rbt3383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal715_tree = (Object)adaptor.create(string_literal715);
            adaptor.addChild(root_0, string_literal715_tree);
            }
            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN716_tree = (Object)adaptor.create(TOKEN716);
            adaptor.addChild(root_0, TOKEN716_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:4: ( 'RBS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal717=(Token)match(input,173,FOLLOW_173_in_rbs3392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal717_tree = (Object)adaptor.create(string_literal717);
            adaptor.addChild(root_0, string_literal717_tree);
            }
            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN718_tree = (Object)adaptor.create(TOKEN718);
            adaptor.addChild(root_0, TOKEN718_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:3: ( 'RN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal719=(Token)match(input,174,FOLLOW_174_in_rn3402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal719_tree = (Object)adaptor.create(string_literal719);
            adaptor.addChild(root_0, string_literal719_tree);
            }
            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN720_tree = (Object)adaptor.create(TOKEN720);
            adaptor.addChild(root_0, TOKEN720_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:3: ( 'RP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal721=(Token)match(input,175,FOLLOW_175_in_rp3411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal721_tree = (Object)adaptor.create(string_literal721);
            adaptor.addChild(root_0, string_literal721_tree);
            }
            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN722_tree = (Object)adaptor.create(TOKEN722);
            adaptor.addChild(root_0, TOKEN722_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:5: ( 'SYM' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal723=(Token)match(input,176,FOLLOW_176_in_sym3422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal723_tree = (Object)adaptor.create(string_literal723);
            adaptor.addChild(root_0, string_literal723_tree);
            }
            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym3424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN724_tree = (Object)adaptor.create(TOKEN724);
            adaptor.addChild(root_0, TOKEN724_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:3: ( 'TO' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal725=(Token)match(input,177,FOLLOW_177_in_to3431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal725_tree = (Object)adaptor.create(string_literal725);
            adaptor.addChild(root_0, string_literal725_tree);
            }
            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to3433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN726_tree = (Object)adaptor.create(TOKEN726);
            adaptor.addChild(root_0, TOKEN726_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:3: ( 'UH' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal727=(Token)match(input,178,FOLLOW_178_in_uh3440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal727_tree = (Object)adaptor.create(string_literal727);
            adaptor.addChild(root_0, string_literal727_tree);
            }
            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh3442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN728_tree = (Object)adaptor.create(TOKEN728);
            adaptor.addChild(root_0, TOKEN728_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:3: ( 'VB' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal729=(Token)match(input,179,FOLLOW_179_in_vb3449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal729_tree = (Object)adaptor.create(string_literal729);
            adaptor.addChild(root_0, string_literal729_tree);
            }
            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb3451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN730_tree = (Object)adaptor.create(TOKEN730);
            adaptor.addChild(root_0, TOKEN730_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:5: ( 'VBP' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal731=(Token)match(input,180,FOLLOW_180_in_vbp3459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal731_tree = (Object)adaptor.create(string_literal731);
            adaptor.addChild(root_0, string_literal731_tree);
            }
            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp3461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN732_tree = (Object)adaptor.create(TOKEN732);
            adaptor.addChild(root_0, TOKEN732_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:4: ( 'VBD' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal733=(Token)match(input,181,FOLLOW_181_in_vbd3470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal733_tree = (Object)adaptor.create(string_literal733);
            adaptor.addChild(root_0, string_literal733_tree);
            }
            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd3472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN734_tree = (Object)adaptor.create(TOKEN734);
            adaptor.addChild(root_0, TOKEN734_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:4: ( 'VBG' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal735=(Token)match(input,182,FOLLOW_182_in_vbg3479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal735_tree = (Object)adaptor.create(string_literal735);
            adaptor.addChild(root_0, string_literal735_tree);
            }
            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg3481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN736_tree = (Object)adaptor.create(TOKEN736);
            adaptor.addChild(root_0, TOKEN736_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:4: ( 'VBN' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal737=(Token)match(input,183,FOLLOW_183_in_vbn3488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal737_tree = (Object)adaptor.create(string_literal737);
            adaptor.addChild(root_0, string_literal737_tree);
            }
            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn3490); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN738_tree = (Object)adaptor.create(TOKEN738);
            adaptor.addChild(root_0, TOKEN738_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:550:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:550:4: ( 'VBZ' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:550:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal739=(Token)match(input,184,FOLLOW_184_in_vbz3497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal739_tree = (Object)adaptor.create(string_literal739);
            adaptor.addChild(root_0, string_literal739_tree);
            }
            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz3499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN740_tree = (Object)adaptor.create(TOKEN740);
            adaptor.addChild(root_0, TOKEN740_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:553:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:553:4: ( 'WDT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:553:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal741=(Token)match(input,185,FOLLOW_185_in_wdt3506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal741_tree = (Object)adaptor.create(string_literal741);
            adaptor.addChild(root_0, string_literal741_tree);
            }
            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt3508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN742_tree = (Object)adaptor.create(TOKEN742);
            adaptor.addChild(root_0, TOKEN742_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:556:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:556:8: ( 'WP$' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:556:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal743=(Token)match(input,186,FOLLOW_186_in_wp_poss3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal743_tree = (Object)adaptor.create(string_literal743);
            adaptor.addChild(root_0, string_literal743_tree);
            }
            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss3517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN744_tree = (Object)adaptor.create(TOKEN744);
            adaptor.addChild(root_0, TOKEN744_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:4: ( 'WPO' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal745=(Token)match(input,187,FOLLOW_187_in_wpo3525); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal745_tree = (Object)adaptor.create(string_literal745);
            adaptor.addChild(root_0, string_literal745_tree);
            }
            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo3527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN746_tree = (Object)adaptor.create(TOKEN746);
            adaptor.addChild(root_0, TOKEN746_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:4: ( 'WPS' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal747=(Token)match(input,188,FOLLOW_188_in_wps3534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal747_tree = (Object)adaptor.create(string_literal747);
            adaptor.addChild(root_0, string_literal747_tree);
            }
            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps3536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN748_tree = (Object)adaptor.create(TOKEN748);
            adaptor.addChild(root_0, TOKEN748_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:567:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:567:4: ( 'WQL' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:567:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal749=(Token)match(input,189,FOLLOW_189_in_wql3544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal749_tree = (Object)adaptor.create(string_literal749);
            adaptor.addChild(root_0, string_literal749_tree);
            }
            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql3546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN750_tree = (Object)adaptor.create(TOKEN750);
            adaptor.addChild(root_0, TOKEN750_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:4: ( 'WRB' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal751=(Token)match(input,190,FOLLOW_190_in_wrb3553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal751_tree = (Object)adaptor.create(string_literal751);
            adaptor.addChild(root_0, string_literal751_tree);
            }
            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb3555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN752_tree = (Object)adaptor.create(TOKEN752);
            adaptor.addChild(root_0, TOKEN752_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:6: ( 'PDT' TOKEN )
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal753=(Token)match(input,191,FOLLOW_191_in_pdt3564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal753_tree = (Object)adaptor.create(string_literal753);
            adaptor.addChild(root_0, string_literal753_tree);
            }
            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt3566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN754_tree = (Object)adaptor.create(TOKEN754);
            adaptor.addChild(root_0, TOKEN754_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: ( sentence )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker229);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: ( unmatchedPhrase )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker231);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: ( adv )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: adv
        {
        pushFollow(FOLLOW_adv_in_synpred4_ChemicalChunker238);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:48: ( colon )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:48: colon
        {
        pushFollow(FOLLOW_colon_in_synpred5_ChemicalChunker240);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:57: ( comma )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:57: comma
        {
        pushFollow(FOLLOW_comma_in_synpred6_ChemicalChunker245);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: ( nounphrase )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred9_ChemicalChunker261);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: ( verbphrase )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred10_ChemicalChunker263);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: ( prepphrase )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred11_ChemicalChunker265);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: ( fw )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred12_ChemicalChunker300);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:8: ( noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred13_ChemicalChunker302);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:13: ( verb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred14_ChemicalChunker304);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:18: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:18: adj
        {
        pushFollow(FOLLOW_adj_in_synpred15_ChemicalChunker306);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:35: ( oscarcd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:35: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred19_ChemicalChunker314);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:43: ( oscarcm )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:43: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred20_ChemicalChunker316);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:51: ( oscarrn )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:51: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred21_ChemicalChunker318);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:59: ( oscaront )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:59: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred22_ChemicalChunker320);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:68: ( brackets )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:68: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred23_ChemicalChunker322);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:77: ( sym )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:77: sym
        {
        pushFollow(FOLLOW_sym_in_synpred24_ChemicalChunker324);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:87: ( comma )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:87: comma
        {
        pushFollow(FOLLOW_comma_in_synpred26_ChemicalChunker328);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
        {
        pushFollow(FOLLOW_adj_in_synpred30_ChemicalChunker369);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: ( noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred32_ChemicalChunker377);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: ( number )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: number
        {
        pushFollow(FOLLOW_number_in_synpred33_ChemicalChunker379);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:52: ( ratio )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred34_ChemicalChunker381);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( conjunction )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred35_ChemicalChunker389);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:77: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:77: adj
        {
        pushFollow(FOLLOW_adj_in_synpred36_ChemicalChunker392);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( ( conjunction )* ( adj )* ( adv )* noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( conjunction )* ( adj )* ( adv )* noun
        {
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:64: ( conjunction )*
        loop94:
        do {
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred38_ChemicalChunker389);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop94;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:77: ( adj )*
        loop95:
        do {
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    pushFollow(FOLLOW_adj_in_synpred38_ChemicalChunker392);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop95;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:82: ( adv )*
        loop96:
        do {
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=169 && LA96_0<=173)||LA96_0==175) ) {
                alt96=1;
            }


            switch (alt96) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred38_ChemicalChunker395);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop96;
            }
        } while (true);

        pushFollow(FOLLOW_noun_in_synpred38_ChemicalChunker399);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:93: ( number )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:93: number
        {
        pushFollow(FOLLOW_number_in_synpred39_ChemicalChunker401);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: ( ratio )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred40_ChemicalChunker403);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:113: ( prepphraseOf )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:113: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred41_ChemicalChunker412);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:127: ( prepphraseIN )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:127: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred42_ChemicalChunker415);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: to
        {
        pushFollow(FOLLOW_to_in_synpred44_ChemicalChunker460);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: ( inAll )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred45_ChemicalChunker463);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred50_ChemicalChunker
    public final void synpred50_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: verb
        {
        pushFollow(FOLLOW_verb_in_synpred50_ChemicalChunker479);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: md
        {
        pushFollow(FOLLOW_md_in_synpred51_ChemicalChunker482);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: adv
        {
        pushFollow(FOLLOW_adv_in_synpred52_ChemicalChunker485);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: adj
        {
        pushFollow(FOLLOW_adj_in_synpred53_ChemicalChunker488);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: neg
        {
        pushFollow(FOLLOW_neg_in_synpred54_ChemicalChunker491);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )*
        loop97:
        do {
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==144) ) {
                alt97=1;
            }


            switch (alt97) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred55_ChemicalChunker470);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop97;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:49: ( adv )*
        loop98:
        do {
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( ((LA98_0>=169 && LA98_0<=173)||LA98_0==175) ) {
                alt98=1;
            }


            switch (alt98) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred55_ChemicalChunker473);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop98;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:54: ( adj )?
        int alt99=2;
        int LA99_0 = input.LA(1);

        if ( ((LA99_0>=12 && LA99_0<=13)||(LA99_0>=140 && LA99_0<=143)) ) {
            alt99=1;
        }
        switch (alt99) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred55_ChemicalChunker476);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )+
        int cnt100=0;
        loop100:
        do {
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=55 && LA100_0<=58)||(LA100_0>=61 && LA100_0<=68)||LA100_0==70||(LA100_0>=72 && LA100_0<=75)||LA100_0==77||LA100_0==79||(LA100_0>=81 && LA100_0<=84)||LA100_0==86||(LA100_0>=88 && LA100_0<=90)||(LA100_0>=92 && LA100_0<=93)||(LA100_0>=95 && LA100_0<=97)||(LA100_0>=179 && LA100_0<=184)) ) {
                alt100=1;
            }


            switch (alt100) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred55_ChemicalChunker479);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt100 >= 1 ) break loop100;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(100, input);
                    throw eee;
            }
            cnt100++;
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )*
        loop101:
        do {
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==144) ) {
                alt101=1;
            }


            switch (alt101) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred55_ChemicalChunker482);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop101;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )*
        loop102:
        do {
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=169 && LA102_0<=173)||LA102_0==175) ) {
                alt102=1;
            }


            switch (alt102) {
        	case 1 :
        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred55_ChemicalChunker485);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop102;
            }
        } while (true);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )?
        int alt103=2;
        int LA103_0 = input.LA(1);

        if ( ((LA103_0>=12 && LA103_0<=13)||(LA103_0>=140 && LA103_0<=143)) ) {
            alt103=1;
        }
        switch (alt103) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred55_ChemicalChunker488);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )?
        int alt104=2;
        int LA104_0 = input.LA(1);

        if ( (LA104_0==101) ) {
            alt104=1;
        }
        switch (alt104) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred55_ChemicalChunker491);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred58_ChemicalChunker
    public final void synpred58_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( ( cc )? ( comma )? prepphrase )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )? ( comma )? prepphrase
        {
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )?
        int alt105=2;
        int LA105_0 = input.LA(1);

        if ( (LA105_0==122) ) {
            alt105=1;
        }
        switch (alt105) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred58_ChemicalChunker498);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:92: ( comma )?
        int alt106=2;
        int LA106_0 = input.LA(1);

        if ( (LA106_0==99) ) {
            alt106=1;
        }
        switch (alt106) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred58_ChemicalChunker501);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred58_ChemicalChunker504);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:22: ( wpo )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred99_ChemicalChunker611);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:26: ( wpo )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred100_ChemicalChunker613);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred156_ChemicalChunker
    public final void synpred156_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:10: ( numberratio )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred156_ChemicalChunker751);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_ChemicalChunker

    // $ANTLR start synpred157_ChemicalChunker
    public final void synpred157_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:20: ( colon cd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred157_ChemicalChunker780);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred157_ChemicalChunker782);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:12: ( colon noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred158_ChemicalChunker799);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred158_ChemicalChunker801);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:20: ( fw )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred160_ChemicalChunker865);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred161_ChemicalChunker
    public final void synpred161_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: ( verb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred161_ChemicalChunker867);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:28: ( measurements )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred162_ChemicalChunker869);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:44: ( stop )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred164_ChemicalChunker873);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:49: ( oscarCompound )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred165_ChemicalChunker875);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:63: ( molecule )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred166_ChemicalChunker877);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:72: ( unnamedmolecule )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred167_ChemicalChunker879);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:93: ( sym )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred169_ChemicalChunker883);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:97: ( cd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred170_ChemicalChunker885);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:100: ( noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred171_ChemicalChunker887);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:105: ( inof )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred172_ChemicalChunker889);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: ( inAll )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred173_ChemicalChunker891);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:116: ( cd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred174_ChemicalChunker893);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: ( comma )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred175_ChemicalChunker895);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred176_ChemicalChunker897);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:142: ( fw )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:142: fw
        {
        pushFollow(FOLLOW_fw_in_synpred178_ChemicalChunker905);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:145: ( verb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:145: verb
        {
        pushFollow(FOLLOW_verb_in_synpred179_ChemicalChunker907);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:150: ( measurements )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:150: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred180_ChemicalChunker909);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:166: ( stop )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:166: stop
        {
        pushFollow(FOLLOW_stop_in_synpred182_ChemicalChunker913);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:171: ( oscarCompound )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:171: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred183_ChemicalChunker915);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:185: ( molecule )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:185: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred184_ChemicalChunker917);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:194: ( unnamedmolecule )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:194: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred185_ChemicalChunker919);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:215: ( sym )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:215: sym
        {
        pushFollow(FOLLOW_sym_in_synpred187_ChemicalChunker923);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:219: ( cd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:219: cd
        {
        pushFollow(FOLLOW_cd_in_synpred188_ChemicalChunker925);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:222: ( noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:222: noun
        {
        pushFollow(FOLLOW_noun_in_synpred189_ChemicalChunker927);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:227: ( inof )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:227: inof
        {
        pushFollow(FOLLOW_inof_in_synpred190_ChemicalChunker929);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:232: ( inAll )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:232: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred191_ChemicalChunker931);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:238: ( cd )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:238: cd
        {
        pushFollow(FOLLOW_cd_in_synpred192_ChemicalChunker933);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:241: ( comma )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:241: comma
        {
        pushFollow(FOLLOW_comma_in_synpred193_ChemicalChunker935);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:247: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:247: adj
        {
        pushFollow(FOLLOW_adj_in_synpred194_ChemicalChunker937);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:257: ( stop )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:257: stop
        {
        pushFollow(FOLLOW_stop_in_synpred196_ChemicalChunker941);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:11: ( prepphraseAtmosphere )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred208_ChemicalChunker996);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred209_ChemicalChunker
    public final void synpred209_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:32: ( prepphraseTemp )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:32: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred209_ChemicalChunker998);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: ( prepphraseTime )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred210_ChemicalChunker1000);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:62: ( prepphraseIN )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred211_ChemicalChunker1002);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:4: ( adv )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:4: adv
        {
        pushFollow(FOLLOW_adv_in_synpred215_ChemicalChunker1083);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:8: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred216_ChemicalChunker1085);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:41: ( nntime )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:41: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred222_ChemicalChunker1106);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:37: ( nnatmosphere )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:37: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred226_ChemicalChunker1190);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:19: ( adv )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:19: adv
        {
        pushFollow(FOLLOW_adv_in_synpred244_ChemicalChunker1271);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:23: ( adj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:23: adj
        {
        pushFollow(FOLLOW_adj_in_synpred245_ChemicalChunker1273);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:55: ( nntemp )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:55: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred251_ChemicalChunker1293);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:18: ( nnapparatus )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:18: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1486);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:32: ( dt )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:32: dt
        {
        pushFollow(FOLLOW_dt_in_synpred263_ChemicalChunker1545);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:19: ( oscarCompound1 )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:19: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred268_ChemicalChunker1577);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:34: ( oscarCompound2 )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:34: oscarCompound2
        {
        pushFollow(FOLLOW_oscarCompound2_in_synpred269_ChemicalChunker1579);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:64: ( oscarCompound4 )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:64: oscarCompound4
        {
        pushFollow(FOLLOW_oscarCompound4_in_synpred271_ChemicalChunker1583);
        oscarCompound4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:27: ( dash )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred273_ChemicalChunker1627);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:27: ( dash oscarcm )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1659);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1661);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:42: ( dash )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1665);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:26: ( oscarcm )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1695);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:4: ( quantity )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred278_ChemicalChunker1744);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:13: ( mixture )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred279_ChemicalChunker1746);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:4: ( quantity )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred280_ChemicalChunker1762);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:13: ( mixture )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred281_ChemicalChunker1764);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:23: ( oscarCompound )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred282_ChemicalChunker1768);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:40: ( quantity )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:40: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred283_ChemicalChunker1773);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:49: ( mixture )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:49: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred284_ChemicalChunker1775);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:18: ( moleculeamount1 )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1786);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:11: ( quantity )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:11: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred287_ChemicalChunker1850);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( jj )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred288_ChemicalChunker1868);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( ( jj )? noun )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( jj )? noun
        {
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( jj )?
        int alt107=2;
        int LA107_0 = input.LA(1);

        if ( (LA107_0==140) ) {
            int LA107_1 = input.LA(2);

            if ( (LA107_1==TOKEN) ) {
                int LA107_3 = input.LA(3);

                if ( (synpred288_ChemicalChunker()) ) {
                    alt107=1;
                }
            }
        }
        switch (alt107) {
            case 1 :
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred289_ChemicalChunker1868);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred289_ChemicalChunker1871);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:3: ( unnamedmoleculeamount1 )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:3: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred290_ChemicalChunker1882);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:19: ( comma measurements )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred296_ChemicalChunker1994);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred296_ChemicalChunker1997);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:9: ( lrb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred301_ChemicalChunker2046);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:13: ( rrb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred302_ChemicalChunker2048);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: ( lsqb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred303_ChemicalChunker2050);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:22: ( rsqb )
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred304_ChemicalChunker2052);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    static final String DFA2_eotS =
        "\u0081\uffff";
    static final String DFA2_eofS =
        "\1\11\u0080\uffff";
    static final String DFA2_minS =
        "\1\13\10\0\1\uffff\165\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00bf\10\0\1\uffff\165\0\2\uffff";
    static final String DFA2_acceptS =
        "\11\uffff\1\3\165\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\102\1\40\1\105\1\127\1\57\1\21\1\132\1\31\1\uffff\1\20"+
        "\1\121\1\140\1\50\1\167\1\122\1\41\1\6\1\3\1\1\1\5\1\147\1\56\1"+
        "\33\1\154\1\104\1\36\1\65\1\43\1\120\1\125\1\162\1\142\1\135\1\71"+
        "\1\114\1\44\1\23\1\10\1\11\1\113\1\42\1\116\1\70\1\160\1\134\1\12"+
        "\1\76\1\101\1\35\1\126\1\13\1\22\1\74\1\133\1\7\1\73\1\60\1\144"+
        "\1\14\1\66\1\165\1\150\1\117\1\51\1\115\1\34\1\67\1\27\1\112\1\166"+
        "\1\0\1\55\1\24\1\61\1\163\1\106\1\75\1\157\1\174\1\100\1\46\1\45"+
        "\1\171\1\26\1\137\1\111\1\131\1\156\1\143\1\2\1\172\1\63\1\103\1"+
        "\123\1\164\1\15\1\4\1\25\1\17\1\37\1\64\1\53\1\124\1\151\1\141\1"+
        "\155\1\170\1\153\1\110\1\72\1\54\1\52\1\30\1\16\1\161\1\173\1\146"+
        "\1\130\1\62\1\32\1\47\1\77\1\152\1\107\1\136\1\145\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\24\1\17\1\20\1\35\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\34\1\26\1\36\2\uffff\1\50\1\42\1\43\1\57\1\40\1"+
            "\44\1\45\1\46\1\47\1\37\1\51\1\52\1\53\1\54\1\55\1\25\1\134"+
            "\1\172\1\135\1\136\1\32\1\66\1\137\1\140\1\141\1\142\1\143\1"+
            "\144\1\145\1\146\1\41\1\147\1\56\1\150\1\151\1\152\1\153\1\uffff"+
            "\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1\162\1"+
            "\60\1\163\1\164\1\165\1\73\1\166\1\33\1\65\1\167\1\170\1\171"+
            "\1\7\1\10\1\uffff\1\173\1\uffff\1\11\1\uffff\1\175\1\176\1\22"+
            "\1\174\15\uffff\1\11\1\23\4\uffff\1\12\3\uffff\1\101\1\74\1"+
            "\75\4\uffff\1\104\1\13\1\14\1\15\1\16\1\125\1\uffff\1\27\1\uffff"+
            "\1\30\2\uffff\1\31\13\uffff\1\21\5\uffff\1\1\1\2\1\6\1\3\1\5"+
            "\1\uffff\1\4\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130\1\133"+
            "\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 35:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\22\uffff";
    static final String DFA3_eofS =
        "\1\1\21\uffff";
    static final String DFA3_minS =
        "\1\13\1\uffff\7\12\7\0\2\uffff";
    static final String DFA3_maxS =
        "\1\u00bf\1\uffff\7\12\7\0\2\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\3\16\uffff\1\1\1\2";
    static final String DFA3_specialS =
        "\11\uffff\1\6\1\0\1\3\1\2\1\5\1\4\1\1\2\uffff}>";
    static final String[] DFA3_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\25\1\1\10\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15"+
            "\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 35:43: ( adv | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_15 = input.LA(1);

                         
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_12 = input.LA(1);

                         
                        int index3_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_14 = input.LA(1);

                         
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_13 = input.LA(1);

                         
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\176\uffff";
    static final String DFA5_eofS =
        "\1\7\175\uffff";
    static final String DFA5_minS =
        "\1\13\6\0\1\uffff\163\0\3\uffff";
    static final String DFA5_maxS =
        "\1\u00bf\6\0\1\uffff\163\0\3\uffff";
    static final String DFA5_acceptS =
        "\7\uffff\1\4\163\uffff\1\1\1\2\1\3";
    static final String DFA5_specialS =
        "\1\uffff\1\67\1\155\1\103\1\3\1\24\1\0\1\uffff\1\117\1\72\1\116"+
        "\1\52\1\146\1\70\1\157\1\77\1\165\1\45\1\53\1\101\1\64\1\34\1\140"+
        "\1\42\1\134\1\31\1\66\1\154\1\26\1\110\1\75\1\156\1\4\1\151\1\133"+
        "\1\74\1\1\1\152\1\145\1\2\1\16\1\36\1\50\1\65\1\130\1\62\1\114\1"+
        "\7\1\131\1\160\1\161\1\54\1\150\1\132\1\76\1\71\1\33\1\61\1\55\1"+
        "\43\1\27\1\15\1\166\1\25\1\104\1\17\1\41\1\56\1\162\1\124\1\167"+
        "\1\102\1\111\1\137\1\51\1\120\1\12\1\57\1\60\1\122\1\147\1\127\1"+
        "\141\1\37\1\115\1\112\1\163\1\30\1\135\1\20\1\35\1\143\1\105\1\126"+
        "\1\73\1\10\1\21\1\40\1\136\1\164\1\123\1\107\1\47\1\13\1\6\1\23"+
        "\1\153\1\142\1\121\1\44\1\63\1\32\1\5\1\144\1\125\1\113\1\100\1"+
        "\46\1\14\1\11\1\22\1\170\1\106\3\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\23\1\16\1\17\1\34\1\66\2\uffff\1\105\1\106\1\104\1\112\1"+
            "\113\1\122\1\123\1\107\1\121\1\114\1\116\1\110\1\111\1\120\1"+
            "\117\1\115\1\33\1\25\1\35\2\uffff\1\47\1\41\1\42\1\56\1\37\1"+
            "\43\1\44\1\45\1\46\1\36\1\50\1\51\1\52\1\53\1\54\1\24\1\133"+
            "\1\171\1\134\1\135\1\31\1\65\1\136\1\137\1\140\1\141\1\142\1"+
            "\143\1\144\1\145\1\40\1\146\1\55\1\147\1\150\1\151\1\152\1\uffff"+
            "\1\153\1\67\1\154\1\70\1\155\1\156\1\157\1\160\1\71\1\161\1"+
            "\57\1\162\1\163\1\164\1\72\1\165\1\32\1\64\1\166\1\167\1\170"+
            "\1\7\1\10\1\uffff\1\172\1\uffff\1\7\1\uffff\2\7\1\21\1\7\15"+
            "\uffff\1\7\1\22\4\uffff\1\11\3\uffff\1\100\1\73\1\74\4\uffff"+
            "\1\103\1\12\1\13\1\14\1\15\1\124\1\uffff\1\26\1\uffff\1\27\2"+
            "\uffff\1\30\13\uffff\1\20\5\uffff\1\1\1\2\1\6\1\3\1\5\1\uffff"+
            "\1\4\1\75\1\102\1\uffff\1\125\1\126\1\130\1\127\1\132\1\131"+
            "\1\60\1\61\1\62\1\63\1\76\1\77\1\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 37:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA5_11 = input.LA(1);

                         
                        int index5_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_11);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA6_eotS =
        "\u0087\uffff";
    static final String DFA6_eofS =
        "\u0087\uffff";
    static final String DFA6_minS =
        "\1\13\1\0\1\uffff\5\0\5\uffff\1\0\4\uffff\6\0\27\uffff\1\0\5\uffff"+
        "\1\0\121\uffff";
    static final String DFA6_maxS =
        "\1\u00bf\1\0\1\uffff\5\0\5\uffff\1\0\4\uffff\6\0\27\uffff\1\0\5"+
        "\uffff\1\0\121\uffff";
    static final String DFA6_acceptS =
        "\2\uffff\1\2\67\uffff\1\3\44\uffff\1\5\5\uffff\1\6\21\uffff\1\7"+
        "\1\14\2\uffff\1\16\1\20\1\21\1\1\1\22\1\10\1\17\1\11\1\4\1\12\1"+
        "\13\1\15";
    static final String DFA6_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\5\uffff\1\6\4\uffff\1\7"+
        "\1\10\1\11\1\12\1\13\1\14\27\uffff\1\15\5\uffff\1\16\121\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\5\1\26\1\27\1\2\1\57\2\uffff\20\145\3\2\2\uffff\17\2\1\7"+
            "\4\72\2\2\10\72\1\2\1\72\1\2\4\72\1\uffff\1\72\1\2\1\72\1\2"+
            "\4\72\1\2\1\72\1\2\3\72\1\2\1\72\1\15\1\2\3\72\1\173\1\6\1\uffff"+
            "\1\175\3\uffff\2\170\1\3\1\170\16\uffff\1\4\4\uffff\1\167\3"+
            "\uffff\1\2\1\1\1\2\4\uffff\1\145\1\22\1\23\1\24\1\25\1\174\1"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\137"+
            "\1\uffff\1\137\1\65\1\145\1\uffff\6\72\7\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "44:4: ( fw | noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md | neg | number )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index6_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA6_3 = input.LA(1);

                         
                        int index6_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 120;}

                         
                        input.seek(index6_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA6_4 = input.LA(1);

                         
                        int index6_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index6_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 58;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA6_47 = input.LA(1);

                         
                        int index6_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index6_47);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA6_53 = input.LA(1);

                         
                        int index6_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index6_53);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\20\uffff";
    static final String DFA8_eofS =
        "\20\uffff";
    static final String DFA8_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA8_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA8_specialS =
        "\11\uffff\1\2\1\3\1\4\1\5\1\0\1\1\1\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\2\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:27: ( adj | adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\76\uffff";
    static final String DFA9_eofS =
        "\1\1\75\uffff";
    static final String DFA9_minS =
        "\1\13\1\uffff\71\0\3\uffff";
    static final String DFA9_maxS =
        "\1\u00bf\1\uffff\71\0\3\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\4\71\uffff\1\1\1\3\1\2";
    static final String DFA9_specialS =
        "\2\uffff\1\0\1\53\1\67\1\12\1\15\1\51\1\50\1\57\1\2\1\70\1\6\1\25"+
        "\1\66\1\23\1\62\1\63\1\40\1\13\1\33\1\44\1\65\1\36\1\45\1\7\1\35"+
        "\1\64\1\43\1\1\1\41\1\26\1\3\1\20\1\52\1\10\1\42\1\55\1\21\1\14"+
        "\1\11\1\47\1\37\1\30\1\24\1\31\1\61\1\16\1\32\1\56\1\17\1\27\1\60"+
        "\1\46\1\4\1\54\1\34\1\5\1\22\3\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\14\1\7\1\10\1\25\1\57\2\uffff\20\1\1\24\1\16\1\26\2\uffff"+
            "\1\40\1\32\1\33\1\47\1\30\1\34\1\35\1\36\1\37\1\27\1\41\1\42"+
            "\1\43\1\44\1\45\1\15\4\1\1\22\1\56\10\1\1\31\1\1\1\46\4\1\1"+
            "\uffff\1\1\1\60\1\1\1\61\4\1\1\62\1\1\1\50\3\1\1\63\1\1\1\23"+
            "\1\55\4\1\1\2\1\uffff\3\1\1\uffff\2\1\1\12\1\1\15\uffff\1\1"+
            "\1\13\4\uffff\1\1\3\uffff\1\71\1\64\1\65\4\uffff\1\1\1\3\1\4"+
            "\1\5\1\6\1\1\1\uffff\1\17\1\uffff\1\20\2\uffff\1\21\13\uffff"+
            "\1\11\5\uffff\5\1\1\uffff\1\1\1\66\1\1\1\uffff\6\1\1\51\1\52"+
            "\1\53\1\54\1\67\1\70\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()+ loopback of 49:39: ( noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_2 = input.LA(1);

                         
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_29 = input.LA(1);

                         
                        int index9_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_29);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_32 = input.LA(1);

                         
                        int index9_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_32);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_54 = input.LA(1);

                         
                        int index9_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_54);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_57 = input.LA(1);

                         
                        int index9_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_57);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_25 = input.LA(1);

                         
                        int index9_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_25);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_35 = input.LA(1);

                         
                        int index9_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_35);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_40 = input.LA(1);

                         
                        int index9_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_40);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_5 = input.LA(1);

                         
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_19 = input.LA(1);

                         
                        int index9_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_39 = input.LA(1);

                         
                        int index9_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_39);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_47 = input.LA(1);

                         
                        int index9_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_50 = input.LA(1);

                         
                        int index9_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_50);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA9_33 = input.LA(1);

                         
                        int index9_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA9_38 = input.LA(1);

                         
                        int index9_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_38);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA9_58 = input.LA(1);

                         
                        int index9_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_58);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA9_15 = input.LA(1);

                         
                        int index9_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_15);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA9_44 = input.LA(1);

                         
                        int index9_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_44);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA9_31 = input.LA(1);

                         
                        int index9_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA9_51 = input.LA(1);

                         
                        int index9_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_51);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA9_43 = input.LA(1);

                         
                        int index9_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA9_45 = input.LA(1);

                         
                        int index9_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_45);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA9_48 = input.LA(1);

                         
                        int index9_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_48);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA9_20 = input.LA(1);

                         
                        int index9_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_20);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA9_56 = input.LA(1);

                         
                        int index9_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_56);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA9_26 = input.LA(1);

                         
                        int index9_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_26);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA9_23 = input.LA(1);

                         
                        int index9_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_23);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA9_42 = input.LA(1);

                         
                        int index9_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_42);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA9_18 = input.LA(1);

                         
                        int index9_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_18);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA9_30 = input.LA(1);

                         
                        int index9_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_30);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA9_36 = input.LA(1);

                         
                        int index9_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA9_28 = input.LA(1);

                         
                        int index9_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_28);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA9_21 = input.LA(1);

                         
                        int index9_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_21);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA9_24 = input.LA(1);

                         
                        int index9_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_24);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA9_53 = input.LA(1);

                         
                        int index9_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_53);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA9_41 = input.LA(1);

                         
                        int index9_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA9_7 = input.LA(1);

                         
                        int index9_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_7);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA9_34 = input.LA(1);

                         
                        int index9_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_34);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA9_3 = input.LA(1);

                         
                        int index9_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_3);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA9_55 = input.LA(1);

                         
                        int index9_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_55);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA9_37 = input.LA(1);

                         
                        int index9_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_37);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA9_49 = input.LA(1);

                         
                        int index9_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA9_52 = input.LA(1);

                         
                        int index9_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_52);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA9_46 = input.LA(1);

                         
                        int index9_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_46);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA9_17 = input.LA(1);

                         
                        int index9_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_17);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA9_27 = input.LA(1);

                         
                        int index9_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_27);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA9_22 = input.LA(1);

                         
                        int index9_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_22);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA9_4 = input.LA(1);

                         
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\105\uffff";
    static final String DFA13_eofS =
        "\1\1\104\uffff";
    static final String DFA13_minS =
        "\1\13\1\uffff\100\0\3\uffff";
    static final String DFA13_maxS =
        "\1\u00bf\1\uffff\100\0\3\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\4\100\uffff\1\1\1\3\1\2";
    static final String DFA13_specialS =
        "\2\uffff\1\31\1\16\1\1\1\45\1\21\1\75\1\6\1\76\1\34\1\54\1\5\1\72"+
        "\1\20\1\42\1\64\1\2\1\77\1\10\1\30\1\74\1\26\1\67\1\70\1\47\1\14"+
        "\1\40\1\53\1\73\1\46\1\55\1\11\1\43\1\71\1\52\1\0\1\50\1\32\1\3"+
        "\1\23\1\60\1\12\1\51\1\62\1\24\1\15\1\13\1\57\1\44\1\35\1\27\1\36"+
        "\1\66\1\17\1\37\1\63\1\22\1\33\1\65\1\56\1\4\1\61\1\41\1\7\1\25"+
        "\3\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\23\1\16\1\17\1\34\1\66\2\uffff\20\1\1\33\1\25\1\35\2\uffff"+
            "\1\47\1\41\1\42\1\56\1\37\1\43\1\44\1\45\1\46\1\36\1\50\1\51"+
            "\1\52\1\53\1\54\1\24\4\1\1\31\1\65\10\1\1\40\1\1\1\55\4\1\1"+
            "\uffff\1\1\1\67\1\1\1\70\4\1\1\71\1\1\1\57\3\1\1\72\1\1\1\32"+
            "\1\64\4\1\1\10\1\uffff\3\1\1\uffff\2\1\1\21\1\1\15\uffff\1\11"+
            "\1\22\4\uffff\1\1\3\uffff\1\100\1\73\1\74\4\uffff\1\1\1\12\1"+
            "\13\1\14\1\15\1\1\1\uffff\1\26\1\uffff\1\27\2\uffff\1\30\13"+
            "\uffff\1\20\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\75\1\1"+
            "\1\uffff\6\1\1\60\1\61\1\62\1\63\1\76\1\77\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:63: ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_36 = input.LA(1);

                         
                        int index13_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_36);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_17 = input.LA(1);

                         
                        int index13_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_17);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_39 = input.LA(1);

                         
                        int index13_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_61 = input.LA(1);

                         
                        int index13_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_61);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_64 = input.LA(1);

                         
                        int index13_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_64);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_19 = input.LA(1);

                         
                        int index13_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_32 = input.LA(1);

                         
                        int index13_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_32);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_42 = input.LA(1);

                         
                        int index13_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_47 = input.LA(1);

                         
                        int index13_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA13_26 = input.LA(1);

                         
                        int index13_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_26);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA13_46 = input.LA(1);

                         
                        int index13_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA13_54 = input.LA(1);

                         
                        int index13_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA13_14 = input.LA(1);

                         
                        int index13_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_14);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA13_57 = input.LA(1);

                         
                        int index13_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA13_40 = input.LA(1);

                         
                        int index13_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_40);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA13_45 = input.LA(1);

                         
                        int index13_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_45);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA13_65 = input.LA(1);

                         
                        int index13_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_65);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA13_22 = input.LA(1);

                         
                        int index13_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA13_51 = input.LA(1);

                         
                        int index13_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_51);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA13_20 = input.LA(1);

                         
                        int index13_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_20);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA13_38 = input.LA(1);

                         
                        int index13_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_38);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA13_58 = input.LA(1);

                         
                        int index13_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_58);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA13_50 = input.LA(1);

                         
                        int index13_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_50);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA13_52 = input.LA(1);

                         
                        int index13_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_52);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA13_55 = input.LA(1);

                         
                        int index13_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_55);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA13_27 = input.LA(1);

                         
                        int index13_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_27);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA13_63 = input.LA(1);

                         
                        int index13_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_63);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA13_15 = input.LA(1);

                         
                        int index13_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_15);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA13_33 = input.LA(1);

                         
                        int index13_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_33);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA13_49 = input.LA(1);

                         
                        int index13_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_49);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA13_30 = input.LA(1);

                         
                        int index13_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_30);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA13_25 = input.LA(1);

                         
                        int index13_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_25);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA13_37 = input.LA(1);

                         
                        int index13_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_37);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA13_43 = input.LA(1);

                         
                        int index13_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA13_35 = input.LA(1);

                         
                        int index13_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_35);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA13_28 = input.LA(1);

                         
                        int index13_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_28);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA13_31 = input.LA(1);

                         
                        int index13_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_31);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA13_60 = input.LA(1);

                         
                        int index13_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_60);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA13_48 = input.LA(1);

                         
                        int index13_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA13_41 = input.LA(1);

                         
                        int index13_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_41);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA13_62 = input.LA(1);

                         
                        int index13_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_62);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA13_44 = input.LA(1);

                         
                        int index13_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_44);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA13_56 = input.LA(1);

                         
                        int index13_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_56);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA13_59 = input.LA(1);

                         
                        int index13_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA13_53 = input.LA(1);

                         
                        int index13_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_53);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA13_23 = input.LA(1);

                         
                        int index13_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_23);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA13_24 = input.LA(1);

                         
                        int index13_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_24);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA13_34 = input.LA(1);

                         
                        int index13_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_34);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA13_29 = input.LA(1);

                         
                        int index13_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_29);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA13_21 = input.LA(1);

                         
                        int index13_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_21);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA13_18 = input.LA(1);

                         
                        int index13_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\101\uffff";
    static final String DFA10_eofS =
        "\101\uffff";
    static final String DFA10_minS =
        "\1\13\20\uffff\1\0\57\uffff";
    static final String DFA10_maxS =
        "\1\u00bf\20\uffff\1\0\57\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA10_specialS =
        "\21\uffff\1\0\57\uffff}>";
    static final String[] DFA10_transitionS = {
            "\5\1\22\uffff\3\1\2\uffff\20\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\100\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_17 = input.LA(1);

                         
                        int index10_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA11_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA11_specialS =
        "\10\uffff\1\1\1\4\1\5\1\0\1\2\1\3\1\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\2\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:77: ( adj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_8 = input.LA(1);

                         
                        int index11_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\66\uffff";
    static final String DFA27_eofS =
        "\1\1\65\uffff";
    static final String DFA27_minS =
        "\1\13\1\uffff\63\0\1\uffff";
    static final String DFA27_maxS =
        "\1\u00bf\1\uffff\63\0\1\uffff";
    static final String DFA27_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA27_specialS =
        "\2\uffff\1\14\1\34\1\12\1\62\1\54\1\30\1\2\1\32\1\16\1\53\1\27\1"+
        "\26\1\47\1\45\1\51\1\4\1\31\1\17\1\0\1\43\1\6\1\35\1\1\1\44\1\56"+
        "\1\7\1\20\1\36\1\55\1\3\1\13\1\57\1\21\1\37\1\60\1\46\1\15\1\11"+
        "\1\42\1\25\1\10\1\50\1\22\1\61\1\41\1\24\1\33\1\5\1\23\1\40\1\52"+
        "\1\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\23\1\2\uffff\20\1\1\26\1\64\1\27"+
            "\1\30\2\1\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\1\1\41\1"+
            "\1\1\42\1\43\1\44\1\45\1\uffff\1\46\1\1\1\47\1\1\1\50\1\51\1"+
            "\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\1\1\60\1\16\1\1\1\61"+
            "\1\62\1\63\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_20 = input.LA(1);

                         
                        int index27_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_24 = input.LA(1);

                         
                        int index27_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_8 = input.LA(1);

                         
                        int index27_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_31 = input.LA(1);

                         
                        int index27_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_17 = input.LA(1);

                         
                        int index27_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_49 = input.LA(1);

                         
                        int index27_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_49);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA27_22 = input.LA(1);

                         
                        int index27_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA27_27 = input.LA(1);

                         
                        int index27_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_27);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA27_42 = input.LA(1);

                         
                        int index27_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_42);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA27_39 = input.LA(1);

                         
                        int index27_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_39);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA27_32 = input.LA(1);

                         
                        int index27_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_32);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA27_38 = input.LA(1);

                         
                        int index27_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_38);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA27_10 = input.LA(1);

                         
                        int index27_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_10);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA27_19 = input.LA(1);

                         
                        int index27_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA27_28 = input.LA(1);

                         
                        int index27_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA27_34 = input.LA(1);

                         
                        int index27_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_34);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA27_44 = input.LA(1);

                         
                        int index27_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA27_50 = input.LA(1);

                         
                        int index27_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_50);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA27_47 = input.LA(1);

                         
                        int index27_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_47);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA27_41 = input.LA(1);

                         
                        int index27_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_41);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA27_13 = input.LA(1);

                         
                        int index27_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_13);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA27_12 = input.LA(1);

                         
                        int index27_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_12);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA27_7 = input.LA(1);

                         
                        int index27_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_7);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA27_18 = input.LA(1);

                         
                        int index27_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA27_9 = input.LA(1);

                         
                        int index27_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_9);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA27_48 = input.LA(1);

                         
                        int index27_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_48);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA27_23 = input.LA(1);

                         
                        int index27_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_23);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA27_29 = input.LA(1);

                         
                        int index27_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_29);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA27_35 = input.LA(1);

                         
                        int index27_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA27_51 = input.LA(1);

                         
                        int index27_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_51);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA27_46 = input.LA(1);

                         
                        int index27_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_46);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA27_40 = input.LA(1);

                         
                        int index27_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA27_21 = input.LA(1);

                         
                        int index27_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_21);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA27_25 = input.LA(1);

                         
                        int index27_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_25);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA27_15 = input.LA(1);

                         
                        int index27_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_15);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA27_37 = input.LA(1);

                         
                        int index27_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_37);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA27_14 = input.LA(1);

                         
                        int index27_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_14);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA27_43 = input.LA(1);

                         
                        int index27_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA27_16 = input.LA(1);

                         
                        int index27_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_16);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA27_52 = input.LA(1);

                         
                        int index27_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_52);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA27_11 = input.LA(1);

                         
                        int index27_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_11);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA27_6 = input.LA(1);

                         
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA27_30 = input.LA(1);

                         
                        int index27_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_30);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA27_26 = input.LA(1);

                         
                        int index27_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_26);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA27_33 = input.LA(1);

                         
                        int index27_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_33);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA27_36 = input.LA(1);

                         
                        int index27_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_36);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA27_45 = input.LA(1);

                         
                        int index27_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_45);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA27_5 = input.LA(1);

                         
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\51\uffff";
    static final String DFA22_eofS =
        "\1\1\50\uffff";
    static final String DFA22_minS =
        "\1\13\1\uffff\46\0\1\uffff";
    static final String DFA22_maxS =
        "\1\u00bf\1\uffff\46\0\1\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\2\46\uffff\1\1";
    static final String DFA22_specialS =
        "\2\uffff\1\4\1\21\1\0\1\12\1\34\1\7\1\25\1\6\1\15\1\37\1\22\1\44"+
        "\1\26\1\11\1\31\1\1\1\32\1\5\1\10\1\3\1\20\1\43\1\30\1\33\1\42\1"+
        "\41\1\17\1\35\1\40\1\45\1\36\1\13\1\23\1\14\1\2\1\27\1\16\1\24\1"+
        "\uffff}>";
    static final String[] DFA22_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\20\1\1\11\1\47\1\12\1\13\2\1\1\14"+
            "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1"+
            "\27\1\30\1\uffff\1\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\1\1"+
            "\37\1\1\1\40\1\41\1\42\1\1\1\43\1\2\1\1\1\44\1\45\1\46\2\1\1"+
            "\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1"+
            "\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6\1"+
            "\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:59: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_4 = input.LA(1);

                         
                        int index22_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_17 = input.LA(1);

                         
                        int index22_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_36 = input.LA(1);

                         
                        int index22_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_36);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_21 = input.LA(1);

                         
                        int index22_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_19 = input.LA(1);

                         
                        int index22_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA22_9 = input.LA(1);

                         
                        int index22_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA22_7 = input.LA(1);

                         
                        int index22_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA22_20 = input.LA(1);

                         
                        int index22_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA22_15 = input.LA(1);

                         
                        int index22_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA22_5 = input.LA(1);

                         
                        int index22_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA22_33 = input.LA(1);

                         
                        int index22_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_33);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA22_35 = input.LA(1);

                         
                        int index22_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_35);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA22_10 = input.LA(1);

                         
                        int index22_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_10);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA22_38 = input.LA(1);

                         
                        int index22_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_38);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA22_28 = input.LA(1);

                         
                        int index22_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_28);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA22_22 = input.LA(1);

                         
                        int index22_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_3);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA22_12 = input.LA(1);

                         
                        int index22_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_12);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA22_34 = input.LA(1);

                         
                        int index22_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_34);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA22_39 = input.LA(1);

                         
                        int index22_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA22_14 = input.LA(1);

                         
                        int index22_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_14);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA22_37 = input.LA(1);

                         
                        int index22_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA22_24 = input.LA(1);

                         
                        int index22_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA22_16 = input.LA(1);

                         
                        int index22_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_16);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA22_18 = input.LA(1);

                         
                        int index22_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_18);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA22_25 = input.LA(1);

                         
                        int index22_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_25);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA22_6 = input.LA(1);

                         
                        int index22_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_6);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA22_29 = input.LA(1);

                         
                        int index22_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA22_32 = input.LA(1);

                         
                        int index22_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA22_11 = input.LA(1);

                         
                        int index22_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_11);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA22_30 = input.LA(1);

                         
                        int index22_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_30);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA22_27 = input.LA(1);

                         
                        int index22_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_27);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA22_26 = input.LA(1);

                         
                        int index22_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_26);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA22_23 = input.LA(1);

                         
                        int index22_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_23);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA22_13 = input.LA(1);

                         
                        int index22_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_13);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA22_31 = input.LA(1);

                         
                        int index22_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\17\uffff";
    static final String DFA24_eofS =
        "\1\1\16\uffff";
    static final String DFA24_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA24_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA24_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA24_specialS =
        "\10\uffff\1\5\1\1\1\4\1\0\1\2\1\3\1\uffff}>";
    static final String[] DFA24_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:69: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_11 = input.LA(1);

                         
                        int index24_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_12 = input.LA(1);

                         
                        int index24_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_13 = input.LA(1);

                         
                        int index24_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_10 = input.LA(1);

                         
                        int index24_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA25_eotS =
        "\u0082\uffff";
    static final String DFA25_eofS =
        "\1\7\u0081\uffff";
    static final String DFA25_minS =
        "\1\13\6\0\173\uffff";
    static final String DFA25_maxS =
        "\1\u00bf\6\0\173\uffff";
    static final String DFA25_acceptS =
        "\7\uffff\1\2\171\uffff\1\1";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\173\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\2\uffff\45\7\1\uffff\27\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\1\7\3\uffff"+
            "\3\7\4\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\2\uffff\1\7\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15"+
            "\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "56:74: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\u0082\uffff";
    static final String DFA30_eofS =
        "\1\7\u0081\uffff";
    static final String DFA30_minS =
        "\1\13\6\0\1\uffff\2\0\2\uffff\7\0\2\uffff\1\0\12\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA30_maxS =
        "\1\u00bf\6\0\1\uffff\2\0\2\uffff\7\0\2\uffff\1\0\12\uffff\1\0\5"+
        "\uffff\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA30_acceptS =
        "\7\uffff\1\2\171\uffff\1\1";
    static final String DFA30_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\2\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\2\uffff\1\17\12\uffff\1\20\5\uffff"+
        "\1\21\36\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\46\uffff\1\44\4\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\7\1\21\1\22\2\7\2\uffff\1\110\1\111\1\107\1\115\1\116\1\125"+
            "\1\126\1\112\1\124\1\117\1\121\1\113\1\114\1\123\1\122\1\120"+
            "\2\7\1\40\2\uffff\5\7\1\46\37\7\1\uffff\26\7\1\10\1\uffff\1"+
            "\175\1\uffff\1\7\1\uffff\4\7\15\uffff\1\11\1\25\4\uffff\1\14"+
            "\3\uffff\3\7\4\uffff\1\106\1\15\1\16\1\17\1\20\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\2\uffff\1\7\13\uffff\1\7\5\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\7\1\105\1\uffff\15\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:87: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_2 = input.LA(1);

                         
                        int index30_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_3 = input.LA(1);

                         
                        int index30_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_4 = input.LA(1);

                         
                        int index30_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_5 = input.LA(1);

                         
                        int index30_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_6 = input.LA(1);

                         
                        int index30_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_8 = input.LA(1);

                         
                        int index30_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA30_9 = input.LA(1);

                         
                        int index30_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA30_12 = input.LA(1);

                         
                        int index30_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA30_13 = input.LA(1);

                         
                        int index30_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA30_14 = input.LA(1);

                         
                        int index30_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA30_15 = input.LA(1);

                         
                        int index30_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA30_16 = input.LA(1);

                         
                        int index30_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA30_17 = input.LA(1);

                         
                        int index30_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA30_18 = input.LA(1);

                         
                        int index30_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA30_21 = input.LA(1);

                         
                        int index30_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA30_32 = input.LA(1);

                         
                        int index30_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA30_38 = input.LA(1);

                         
                        int index30_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_38);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA30_69 = input.LA(1);

                         
                        int index30_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_69);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA30_70 = input.LA(1);

                         
                        int index30_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_70);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA30_71 = input.LA(1);

                         
                        int index30_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_71);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA30_72 = input.LA(1);

                         
                        int index30_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_72);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA30_73 = input.LA(1);

                         
                        int index30_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_73);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA30_74 = input.LA(1);

                         
                        int index30_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_74);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA30_75 = input.LA(1);

                         
                        int index30_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_75);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA30_76 = input.LA(1);

                         
                        int index30_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_76);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA30_77 = input.LA(1);

                         
                        int index30_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_77);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA30_78 = input.LA(1);

                         
                        int index30_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_78);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA30_79 = input.LA(1);

                         
                        int index30_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_79);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA30_80 = input.LA(1);

                         
                        int index30_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_80);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA30_81 = input.LA(1);

                         
                        int index30_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_81);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA30_82 = input.LA(1);

                         
                        int index30_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_82);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA30_83 = input.LA(1);

                         
                        int index30_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_83);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA30_84 = input.LA(1);

                         
                        int index30_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_84);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA30_85 = input.LA(1);

                         
                        int index30_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_85);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA30_86 = input.LA(1);

                         
                        int index30_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_86);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA30_125 = input.LA(1);

                         
                        int index30_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index30_125);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\14\uffff";
    static final String DFA33_eofS =
        "\14\uffff";
    static final String DFA33_minS =
        "\1\u0084\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA33_maxS =
        "\1\u00bf\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA33_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "60:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\u0082\uffff";
    static final String DFA39_eofS =
        "\u0082\uffff";
    static final String DFA39_minS =
        "\1\13\1\0\41\uffff\1\0\4\uffff\1\0\1\uffff\5\0\1\uffff\1\0\12\uffff"+
        "\6\0\41\uffff\1\0\37\uffff";
    static final String DFA39_maxS =
        "\1\u00bf\1\0\41\uffff\1\0\4\uffff\1\0\1\uffff\5\0\1\uffff\1\0\12"+
        "\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA39_acceptS =
        "\2\uffff\1\2\46\uffff\1\4\5\uffff\1\11\1\uffff\1\14\61\uffff\1\16"+
        "\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\20\1\12"+
        "\1\21\1\15";
    static final String DFA39_specialS =
        "\1\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\uffff\1\10\12\uffff\1\11\1\12\1\13\1\14\1\15\1\16\41\uffff"+
        "\1\17\37\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\56\1\77\1\100\2\61\2\uffff\11\143\1\142\6\143\3\61\2\uffff"+
            "\17\61\1\53\4\2\2\61\10\2\1\61\1\2\1\61\4\2\1\uffff\1\2\1\61"+
            "\1\2\1\61\4\2\1\61\1\2\1\61\3\2\1\61\1\2\1\43\1\61\3\2\1\164"+
            "\1\55\2\uffff\1\57\1\52\3\uffff\1\54\17\uffff\1\50\10\uffff"+
            "\1\61\1\1\1\61\4\uffff\1\143\1\73\1\74\1\75\1\76\1\51\1\uffff"+
            "\1\61\1\uffff\1\61\2\uffff\1\61\13\uffff\1\61\14\uffff\1\60"+
            "\1\143\1\uffff\6\2\7\61",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "71:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 117;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_ChemicalChunker()) ) {s = 118;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 122;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_42 = input.LA(1);

                         
                        int index39_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 124;}

                         
                        input.seek(index39_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_43 = input.LA(1);

                         
                        int index39_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_44 = input.LA(1);

                         
                        int index39_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_45 = input.LA(1);

                         
                        int index39_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 126;}

                         
                        input.seek(index39_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_46 = input.LA(1);

                         
                        int index39_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_48 = input.LA(1);

                         
                        int index39_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                         
                        input.seek(index39_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_59 = input.LA(1);

                         
                        int index39_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_60 = input.LA(1);

                         
                        int index39_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_60);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_61 = input.LA(1);

                         
                        int index39_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_61);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_62 = input.LA(1);

                         
                        int index39_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_62);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_63 = input.LA(1);

                         
                        int index39_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_64 = input.LA(1);

                         
                        int index39_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index39_64);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_98 = input.LA(1);

                         
                        int index39_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 99;}

                         
                        input.seek(index39_98);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\u0083\uffff";
    static final String DFA40_eofS =
        "\u0083\uffff";
    static final String DFA40_minS =
        "\1\13\1\uffff\1\0\41\uffff\1\0\4\uffff\1\0\1\uffff\5\0\1\uffff\1"+
        "\0\12\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA40_maxS =
        "\1\u00bf\1\uffff\1\0\41\uffff\1\0\4\uffff\1\0\1\uffff\5\0\1\uffff"+
        "\1\0\12\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\24\1\uffff\1\2\46\uffff\1\4\5\uffff\1\11\1\uffff\1\14"+
        "\61\uffff\1\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23"+
        "\1\6\1\20\1\12\1\21\1\15";
    static final String DFA40_specialS =
        "\2\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\uffff\1\10\12\uffff\1\11\1\12\1\13\1\14\1\15\1\16\41\uffff"+
        "\1\17\37\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\57\1\100\1\101\2\62\2\uffff\11\144\1\143\6\144\3\62\2\uffff"+
            "\17\62\1\54\4\3\2\62\10\3\1\62\1\3\1\62\4\3\1\uffff\1\3\1\62"+
            "\1\3\1\62\4\3\1\62\1\3\1\62\3\3\1\62\1\3\1\44\1\62\3\3\1\165"+
            "\1\56\2\uffff\1\60\1\53\3\uffff\1\55\1\1\16\uffff\1\51\10\uffff"+
            "\1\62\1\2\1\62\4\uffff\1\144\1\74\1\75\1\76\1\77\1\52\1\uffff"+
            "\1\62\1\uffff\1\62\2\uffff\1\62\13\uffff\1\62\14\uffff\1\61"+
            "\1\144\1\uffff\6\3\7\62",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 71:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 118;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred185_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 123;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_43 = input.LA(1);

                         
                        int index40_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index40_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_44 = input.LA(1);

                         
                        int index40_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_45 = input.LA(1);

                         
                        int index40_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred185_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_46 = input.LA(1);

                         
                        int index40_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index40_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_47 = input.LA(1);

                         
                        int index40_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_49 = input.LA(1);

                         
                        int index40_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index40_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_60 = input.LA(1);

                         
                        int index40_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA40_61 = input.LA(1);

                         
                        int index40_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_61);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA40_62 = input.LA(1);

                         
                        int index40_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_62);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA40_63 = input.LA(1);

                         
                        int index40_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_63);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA40_64 = input.LA(1);

                         
                        int index40_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_64);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA40_65 = input.LA(1);

                         
                        int index40_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index40_65);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA40_99 = input.LA(1);

                         
                        int index40_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 100;}

                         
                        input.seek(index40_99);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\46\uffff";
    static final String DFA44_eofS =
        "\46\uffff";
    static final String DFA44_minS =
        "\1\14\40\0\5\uffff";
    static final String DFA44_maxS =
        "\1\u00b1\40\0\5\uffff";
    static final String DFA44_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\5\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\14\1\15\4\uffff\1\20\1\21\1\17\1\25\1\26\1\34\1\35\1\22\1"+
            "\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1\42\7\uffff\1"+
            "\41\116\uffff\1\40\4\uffff\1\37\12\uffff\1\16\1\10\1\11\1\12"+
            "\1\13\31\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "79:10: ( prepphraseAtmosphere | prepphraseTemp | prepphraseTime | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA44_15 = input.LA(1);

                         
                        int index44_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA44_16 = input.LA(1);

                         
                        int index44_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA44_18 = input.LA(1);

                         
                        int index44_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA44_20 = input.LA(1);

                         
                        int index44_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA44_21 = input.LA(1);

                         
                        int index44_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA44_22 = input.LA(1);

                         
                        int index44_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index44_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index44_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index44_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\34\uffff";
    static final String DFA47_eofS =
        "\34\uffff";
    static final String DFA47_minS =
        "\1\14\14\12\1\uffff\14\0\2\uffff";
    static final String DFA47_maxS =
        "\1\u00b1\14\12\1\uffff\14\0\2\uffff";
    static final String DFA47_acceptS =
        "\15\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA47_specialS =
        "\16\uffff\1\13\1\7\1\1\1\5\1\6\1\11\1\2\1\12\1\3\1\4\1\10\1\0\2"+
        "\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\13\1\14\4\uffff\20\15\2\uffff\1\15\126\uffff\1\15\4\uffff"+
            "\1\15\12\uffff\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "87:3: ( adv | adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_25 = input.LA(1);

                         
                        int index47_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_22 = input.LA(1);

                         
                        int index47_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_23 = input.LA(1);

                         
                        int index47_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_15 = input.LA(1);

                         
                        int index47_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_24 = input.LA(1);

                         
                        int index47_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_21 = input.LA(1);

                         
                        int index47_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA57_eotS =
        "\34\uffff";
    static final String DFA57_eofS =
        "\34\uffff";
    static final String DFA57_minS =
        "\1\14\14\12\1\uffff\14\0\2\uffff";
    static final String DFA57_maxS =
        "\1\u00b1\14\12\1\uffff\14\0\2\uffff";
    static final String DFA57_acceptS =
        "\15\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA57_specialS =
        "\16\uffff\1\6\1\2\1\11\1\13\1\0\1\7\1\3\1\12\1\5\1\1\1\4\1\10\2"+
        "\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\13\1\14\4\uffff\20\15\12\uffff\1\15\116\uffff\1\15\4\uffff"+
            "\1\15\12\uffff\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "97:18: ( adv | adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_18 = input.LA(1);

                         
                        int index57_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA57_23 = input.LA(1);

                         
                        int index57_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA57_15 = input.LA(1);

                         
                        int index57_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA57_20 = input.LA(1);

                         
                        int index57_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA57_24 = input.LA(1);

                         
                        int index57_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA57_22 = input.LA(1);

                         
                        int index57_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA57_14 = input.LA(1);

                         
                        int index57_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA57_19 = input.LA(1);

                         
                        int index57_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA57_25 = input.LA(1);

                         
                        int index57_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA57_16 = input.LA(1);

                         
                        int index57_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA57_21 = input.LA(1);

                         
                        int index57_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index57_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA71_eotS =
        "\21\uffff";
    static final String DFA71_eofS =
        "\3\uffff\1\10\5\uffff\1\10\7\uffff";
    static final String DFA71_minS =
        "\1\66\1\12\1\uffff\1\13\3\12\2\uffff\1\13\1\0\1\66\1\12\2\uffff"+
        "\1\0\1\uffff";
    static final String DFA71_maxS =
        "\1\153\1\12\1\uffff\1\u00bf\3\12\2\uffff\1\u00bf\1\0\1\66\1\12\2"+
        "\uffff\1\0\1\uffff";
    static final String DFA71_acceptS =
        "\2\uffff\1\5\4\uffff\1\4\1\6\4\uffff\1\2\1\3\1\uffff\1\1";
    static final String DFA71_specialS =
        "\12\uffff\1\0\1\1\3\uffff\1\2\1\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\1\64\uffff\1\2",
            "\1\3",
            "",
            "\5\10\2\uffff\23\10\2\uffff\17\10\1\5\25\10\1\uffff\27\10\1"+
            "\7\1\10\1\6\1\10\1\uffff\4\10\15\uffff\2\10\4\uffff\1\10\3\uffff"+
            "\3\10\4\uffff\1\10\1\4\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff"+
            "\1\10\13\uffff\1\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "",
            "\5\10\2\uffff\23\10\2\uffff\17\10\1\14\25\10\1\uffff\27\10"+
            "\1\uffff\3\10\1\uffff\4\10\15\uffff\2\10\4\uffff\1\10\3\uffff"+
            "\3\10\4\uffff\6\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\13"+
            "\uffff\1\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "\1\uffff",
            "\1\16",
            "\1\17",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "119:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_10 = input.LA(1);

                         
                        int index71_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index71_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_11 = input.LA(1);

                         
                        int index71_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_11==54) ) {s = 14;}

                        else if ( (synpred271_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index71_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_15 = input.LA(1);

                         
                        int index71_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index71_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA74_eotS =
        "\u0083\uffff";
    static final String DFA74_eofS =
        "\1\2\u0082\uffff";
    static final String DFA74_minS =
        "\1\13\1\0\u0081\uffff";
    static final String DFA74_maxS =
        "\1\u00bf\1\0\u0081\uffff";
    static final String DFA74_acceptS =
        "\2\uffff\1\2\177\uffff\1\1";
    static final String DFA74_specialS =
        "\1\uffff\1\0\u0081\uffff}>";
    static final String[] DFA74_transitionS = {
            "\5\2\2\uffff\23\2\2\uffff\45\2\1\uffff\27\2\1\uffff\1\2\1\1"+
            "\1\2\1\uffff\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "123:42: ( dash )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_1 = input.LA(1);

                         
                        int index74_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index74_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\u0084\uffff";
    static final String DFA79_eofS =
        "\1\1\u0083\uffff";
    static final String DFA79_minS =
        "\1\13\7\uffff\1\0\13\uffff\2\0\156\uffff";
    static final String DFA79_maxS =
        "\1\u00bf\7\uffff\1\0\13\uffff\2\0\156\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\3\u0080\uffff\1\2\1\1";
    static final String DFA79_specialS =
        "\10\uffff\1\0\13\uffff\1\1\1\2\156\uffff}>";
    static final String[] DFA79_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\26\1\1\10\1\uffff\3\1"+
            "\1\uffff\2\1\1\24\1\1\15\uffff\1\1\1\25\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 132:39: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_8 = input.LA(1);

                         
                        int index79_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_20 = input.LA(1);

                         
                        int index79_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_21 = input.LA(1);

                         
                        int index79_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\u0083\uffff";
    static final String DFA82_eofS =
        "\1\1\u0082\uffff";
    static final String DFA82_minS =
        "\1\13\23\uffff\2\0\155\uffff";
    static final String DFA82_maxS =
        "\1\u00bf\23\uffff\2\0\155\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\u0080\uffff\1\1";
    static final String DFA82_specialS =
        "\24\uffff\1\0\1\1\155\uffff}>";
    static final String[] DFA82_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\27\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\24\1\1\15\uffff\1\1\1\25\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 142:11: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_20 = input.LA(1);

                         
                        int index82_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_21 = input.LA(1);

                         
                        int index82_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\74\uffff";
    static final String DFA84_eofS =
        "\1\1\73\uffff";
    static final String DFA84_minS =
        "\1\13\1\uffff\71\0\1\uffff";
    static final String DFA84_maxS =
        "\1\u00bf\1\uffff\71\0\1\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA84_specialS =
        "\2\uffff\1\63\1\25\1\51\1\44\1\14\1\67\1\40\1\26\1\23\1\6\1\16\1"+
        "\24\1\53\1\57\1\41\1\2\1\30\1\54\1\56\1\12\1\45\1\31\1\62\1\52\1"+
        "\27\1\0\1\4\1\42\1\1\1\46\1\65\1\43\1\3\1\21\1\70\1\32\1\34\1\66"+
        "\1\61\1\7\1\13\1\5\1\47\1\36\1\50\1\33\1\55\1\11\1\10\1\64\1\35"+
        "\1\20\1\37\1\17\1\60\1\15\1\22\1\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\14\1\7\1\10\1\25\1\57\2\uffff\20\1\1\24\1\16\1\26\2\uffff"+
            "\1\40\1\32\1\33\1\47\1\30\1\34\1\35\1\36\1\37\1\27\1\41\1\42"+
            "\1\43\1\44\1\45\1\15\4\1\1\22\1\56\10\1\1\31\1\1\1\46\4\1\1"+
            "\uffff\1\1\1\60\1\1\1\61\4\1\1\62\1\1\1\50\3\1\1\63\1\1\1\23"+
            "\1\55\4\1\1\2\1\uffff\3\1\1\uffff\2\1\1\12\1\1\15\uffff\1\1"+
            "\1\13\4\uffff\1\1\3\uffff\1\71\1\64\1\65\4\uffff\1\1\1\3\1\4"+
            "\1\5\1\6\1\1\1\uffff\1\17\1\uffff\1\20\2\uffff\1\21\13\uffff"+
            "\1\11\5\uffff\5\1\1\uffff\1\1\1\66\1\1\1\uffff\6\1\1\51\1\52"+
            "\1\53\1\54\1\67\1\70\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()+ loopback of 147:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_27 = input.LA(1);

                         
                        int index84_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_30 = input.LA(1);

                         
                        int index84_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_30);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_17 = input.LA(1);

                         
                        int index84_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_17);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_34 = input.LA(1);

                         
                        int index84_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_34);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_28 = input.LA(1);

                         
                        int index84_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_28);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_43 = input.LA(1);

                         
                        int index84_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA84_41 = input.LA(1);

                         
                        int index84_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_41);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA84_50 = input.LA(1);

                         
                        int index84_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA84_49 = input.LA(1);

                         
                        int index84_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA84_21 = input.LA(1);

                         
                        int index84_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA84_42 = input.LA(1);

                         
                        int index84_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA84_6 = input.LA(1);

                         
                        int index84_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA84_57 = input.LA(1);

                         
                        int index84_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA84_12 = input.LA(1);

                         
                        int index84_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_12);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA84_55 = input.LA(1);

                         
                        int index84_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_55);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA84_53 = input.LA(1);

                         
                        int index84_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA84_35 = input.LA(1);

                         
                        int index84_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA84_58 = input.LA(1);

                         
                        int index84_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_58);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA84_13 = input.LA(1);

                         
                        int index84_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_13);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA84_3 = input.LA(1);

                         
                        int index84_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_3);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA84_26 = input.LA(1);

                         
                        int index84_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA84_18 = input.LA(1);

                         
                        int index84_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_18);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA84_23 = input.LA(1);

                         
                        int index84_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_23);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA84_37 = input.LA(1);

                         
                        int index84_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_37);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA84_47 = input.LA(1);

                         
                        int index84_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_47);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA84_38 = input.LA(1);

                         
                        int index84_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_38);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA84_52 = input.LA(1);

                         
                        int index84_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA84_45 = input.LA(1);

                         
                        int index84_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_45);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA84_54 = input.LA(1);

                         
                        int index84_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_54);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA84_16 = input.LA(1);

                         
                        int index84_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_16);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA84_29 = input.LA(1);

                         
                        int index84_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_29);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA84_33 = input.LA(1);

                         
                        int index84_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_33);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA84_5 = input.LA(1);

                         
                        int index84_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_5);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA84_22 = input.LA(1);

                         
                        int index84_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_22);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA84_31 = input.LA(1);

                         
                        int index84_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_31);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA84_44 = input.LA(1);

                         
                        int index84_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA84_46 = input.LA(1);

                         
                        int index84_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA84_4 = input.LA(1);

                         
                        int index84_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_4);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA84_25 = input.LA(1);

                         
                        int index84_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_25);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA84_14 = input.LA(1);

                         
                        int index84_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_14);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA84_19 = input.LA(1);

                         
                        int index84_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_19);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA84_48 = input.LA(1);

                         
                        int index84_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA84_20 = input.LA(1);

                         
                        int index84_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_20);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA84_15 = input.LA(1);

                         
                        int index84_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_15);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA84_56 = input.LA(1);

                         
                        int index84_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_56);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA84_40 = input.LA(1);

                         
                        int index84_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_40);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA84_24 = input.LA(1);

                         
                        int index84_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_24);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA84_2 = input.LA(1);

                         
                        int index84_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_2);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA84_51 = input.LA(1);

                         
                        int index84_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_51);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA84_32 = input.LA(1);

                         
                        int index84_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_32);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA84_39 = input.LA(1);

                         
                        int index84_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_39);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA84_7 = input.LA(1);

                         
                        int index84_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_7);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA84_36 = input.LA(1);

                         
                        int index84_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 59;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA90_eotS =
        "\u0083\uffff";
    static final String DFA90_eofS =
        "\1\1\u0082\uffff";
    static final String DFA90_minS =
        "\1\13\7\uffff\1\0\172\uffff";
    static final String DFA90_maxS =
        "\1\u00bf\7\uffff\1\0\172\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\2\u0080\uffff\1\1";
    static final String DFA90_specialS =
        "\10\uffff\1\0\172\uffff}>";
    static final String[] DFA90_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\26\1\1\10\1\uffff\3\1"+
            "\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\6"+
            "\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "()* loopback of 160:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_8 = input.LA(1);

                         
                        int index90_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index90_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA93_eotS =
        "\12\uffff";
    static final String DFA93_eofS =
        "\1\1\11\uffff";
    static final String DFA93_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA93_maxS =
        "\1\u00bf\1\uffff\4\0\4\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA93_specialS =
        "\2\uffff\1\3\1\0\1\2\1\1\4\uffff}>";
    static final String[] DFA93_transitionS = {
            "\5\1\2\uffff\23\1\2\uffff\45\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\15\uffff\2\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "()+ loopback of 165:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_3 = input.LA(1);

                         
                        int index93_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index93_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA93_5 = input.LA(1);

                         
                        int index93_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index93_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA93_4 = input.LA(1);

                         
                        int index93_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index93_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA93_2 = input.LA(1);

                         
                        int index93_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index93_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA94_eotS =
        "\101\uffff";
    static final String DFA94_eofS =
        "\101\uffff";
    static final String DFA94_minS =
        "\1\13\20\uffff\1\0\57\uffff";
    static final String DFA94_maxS =
        "\1\u00bf\20\uffff\1\0\57\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA94_specialS =
        "\21\uffff\1\0\57\uffff}>";
    static final String[] DFA94_transitionS = {
            "\5\1\22\uffff\3\1\2\uffff\20\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\100\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_17 = input.LA(1);

                         
                        int index94_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index94_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA95_eotS =
        "\17\uffff";
    static final String DFA95_eofS =
        "\17\uffff";
    static final String DFA95_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA95_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA95_specialS =
        "\10\uffff\1\2\1\0\1\5\1\4\1\3\1\1\1\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\2\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:77: ( adj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_9 = input.LA(1);

                         
                        int index95_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA95_13 = input.LA(1);

                         
                        int index95_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA95_8 = input.LA(1);

                         
                        int index95_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA95_12 = input.LA(1);

                         
                        int index95_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA95_11 = input.LA(1);

                         
                        int index95_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA95_10 = input.LA(1);

                         
                        int index95_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document207 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x08001E2FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sentence_in_sentences229 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences231 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adv_in_sentences238 = new BitSet(new long[]{0x0000000000003002L,0x0400008C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_colon_in_sentences240 = new BitSet(new long[]{0x0000000000003002L,0x0400008C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_comma_in_sentences245 = new BitSet(new long[]{0x0000000000000002L,0x0400008800000000L});
    public static final BitSet FOLLOW_cc_in_sentences247 = new BitSet(new long[]{0x0000000000000002L,0x0400008800000000L});
    public static final BitSet FOLLOW_stop_in_sentences249 = new BitSet(new long[]{0x0000000000000002L,0x0400008800000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence261 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verbphrase_in_sentence263 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_sentence265 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure365 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure369 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure371 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure377 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure379 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure381 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure389 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0C00080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure392 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure395 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure399 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure401 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure403 = new BitSet(new long[]{0x187FFF9C0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure412 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure415 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_cc_in_conjunction429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure460 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure463 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure466 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure470 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure473 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure476 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure479 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure482 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure485 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure488 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure491 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure498 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure501 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure504 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_vb_in_verb514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_noun647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_noun649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_noun653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_noun667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_noun697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_noun699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_noun719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_noun721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_noun723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_noun725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_noun727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_noun729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_noun731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_noun733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range739 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_range741 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_range743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_ratio751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio777 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_numberratio780 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio782 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_noun_in_nounratio795 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_nounratio799 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_nounratio801 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2837 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure2839 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure2841 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure2843 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure1852 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure1854 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent865 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_verb_in_mixtureContent867 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent869 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_md_in_mixtureContent871 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent873 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent875 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent877 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent879 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_dash_in_mixtureContent881 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_sym_in_mixtureContent883 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent885 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_noun_in_mixtureContent887 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inof_in_mixtureContent889 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent891 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent893 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_comma_in_mixtureContent895 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_adj_in_mixtureContent897 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_colon_in_mixtureContent899 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent901 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_fw_in_mixtureContent905 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_verb_in_mixtureContent907 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent909 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_md_in_mixtureContent911 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent913 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent915 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent917 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent919 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_dash_in_mixtureContent921 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_sym_in_mixtureContent923 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent925 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_noun_in_mixtureContent927 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inof_in_mixtureContent929 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent931 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent933 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_comma_in_mixtureContent935 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_adj_in_mixtureContent937 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_colon_in_mixtureContent939 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent941 = new BitSet(new long[]{0xFFFFFF9FFFFCF802L,0x0C0008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_jj_in_adj951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_adv979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase992 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseOther1017 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0002000000000800L});
    public static final BitSet FOLLOW_adj_in_prepphraseOther1019 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0002000000000800L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1023 = new BitSet(new long[]{0x187FFF9FFFFCF800L,0x0800080868A140A0L,0xFE03BE080094F871L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1057 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime1083 = new BitSet(new long[]{0x00000013FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime1085 = new BitSet(new long[]{0x00000013FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime1089 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime1093 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime1097 = new BitSet(new long[]{0x0000001000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime1099 = new BitSet(new long[]{0x0000001000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime1103 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime1106 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1149 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphere1175 = new BitSet(new long[]{0x0040000000003000L,0x0800080800000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphere1178 = new BitSet(new long[]{0x0040000000003000L,0x0800080800000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adv_in_prepphraseAtmosphere1182 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseAtmosphere1184 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphere1188 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphere1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1271 = new BitSet(new long[]{0x00001003FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1273 = new BitSet(new long[]{0x00001003FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp1277 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp1280 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1284 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1286 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp1290 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp1293 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1341 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1364 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1387 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_percent1389 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1416 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1439 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1463 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1465 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1468 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus1483 = new BitSet(new long[]{0x0801080800003000L,0x0800080000000020L,0x000000000004F000L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1486 = new BitSet(new long[]{0x0801080800003002L,0x0800080000000020L,0x000000000004F000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_preapparatus1515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_preapparatus1519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_measurements1534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_measurements1536 = new BitSet(new long[]{0x0000000000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements1540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dt_in_measurements1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes1555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes1559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes1563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound5_in_oscarCompound1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound51597 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound51599 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound51601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41624 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound41627 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound41629 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31656 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31659 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31661 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21693 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21695 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11718 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount11744 = new BitSet(new long[]{0x0000000008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount11746 = new BitSet(new long[]{0x0000000008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11750 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21762 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21764 = new BitSet(new long[]{0x0040000000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21768 = new BitSet(new long[]{0x0040000000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21773 = new BitSet(new long[]{0x0000000000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21775 = new BitSet(new long[]{0x0000000000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11833 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11835 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21848 = new BitSet(new long[]{0x0000000000000002L,0x0800080000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21850 = new BitSet(new long[]{0x0000000000000002L,0x0800080000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount31863 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31865 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31868 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31871 = new BitSet(new long[]{0x187FFF9C0000F802L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity11953 = new BitSet(new long[]{0x0000000000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity11955 = new BitSet(new long[]{0x0000000000000000L,0x0400108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity11958 = new BitSet(new long[]{0x0000000000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity11961 = new BitSet(new long[]{0x0000000000000000L,0x0400108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity11966 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity11968 = new BitSet(new long[]{0x0000000000000000L,0x0400108800000000L});
    public static final BitSet FOLLOW_stop_in_quantity11973 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity11975 = new BitSet(new long[]{0x0000000000000000L,0x0400108800000000L});
    public static final BitSet FOLLOW_rrb_in_quantity11980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity21991 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_quantity21994 = new BitSet(new long[]{0x0000000000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity21997 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2013 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2015 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2019 = new BitSet(new long[]{0x0000000000000802L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2046 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2048 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2050 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2052 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2060 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2067 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2074 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2081 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2089 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2103 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2112 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2119 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2126 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2133 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2140 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2147 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2154 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2161 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2168 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2175 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2182 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2189 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2196 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2203 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2210 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2217 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2226 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2233 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2240 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2247 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2255 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2263 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2270 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2277 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2284 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2291 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2298 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2305 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2312 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2319 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2327 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2334 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2341 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2348 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle2355 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle2357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes2362 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes2364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm2371 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse2380 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange2387 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge2394 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject2401 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd2410 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture2417 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd2424 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge2431 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain2438 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop2445 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill2452 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend2459 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend2461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat2466 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus2475 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus2482 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate2491 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate2498 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool2507 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool2509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass2516 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve2525 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry2534 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry2536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry2541 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract2550 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract2557 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter2566 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter2568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter2573 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat2582 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease2589 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbpartition2598 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbprecipitate2607 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnprecipitate2614 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbpurify2623 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_nnpurify2630 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbquench2639 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbrecover2648 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbremove2657 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_nnremove2664 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbstir2673 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbsynthesize2682 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_nnsynthesize2689 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbwait2698 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwash2707 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbyield2716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_colon2725 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_comma2732 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_apost2739 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_neg2746 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_dash2753 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_stop2760 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_nnpercent2767 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lsqb2774 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rsqb2781 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lrb2789 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rrb2796 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abl2807 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_abn2816 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abx2825 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ap2834 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_at2843 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_be2852 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bed2861 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bedz2870 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_beg2879 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg2881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bem2888 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ben2897 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben2899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ber2906 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_bez2915 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez2917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cc2924 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_cd2933 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cs2942 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dotok2952 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dod2961 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod2963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_doz2970 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dt2979 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dti2988 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dts2997 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtx3006 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_ex3015 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_fw3024 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_fwin3033 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hv3042 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvd3051 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_hvg3060 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hvn3069 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_in3078 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jj3087 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjr3096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_jjs3105 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jjt3114 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_md3123 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nc3132 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nn3141 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nn_poss3150 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nns3159 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nns_poss3168 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np3177 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nnp3187 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_np_poss3197 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nps3206 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nps_poss3215 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_nr3224 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_od3233 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pn3242 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pn_poss3251 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_pp_poss3260 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pp_poss_poss3269 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ppl3278 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppls3287 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_prp3297 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppo3307 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_pps3316 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ppss3325 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ql3334 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql3336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_qlp3343 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rb3352 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb3354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rbr3361 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rbconj3372 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rbt3383 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbs3392 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rn3402 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rp3411 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_sym3422 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym3424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_to3431 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to3433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_uh3440 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vb3449 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb3451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_vbp3459 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_vbd3470 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd3472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vbg3479 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg3481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbn3488 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbz3497 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz3499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wdt3506 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_wp_poss3515 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_wpo3525 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wps3534 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wql3544 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wrb3553 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_pdt3564 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred4_ChemicalChunker238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred5_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred6_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred9_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred10_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred11_ChemicalChunker265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred12_ChemicalChunker300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred13_ChemicalChunker302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred14_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred15_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred19_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred20_ChemicalChunker316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred21_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred22_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred23_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred24_ChemicalChunker324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred26_ChemicalChunker328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred30_ChemicalChunker369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred32_ChemicalChunker377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred33_ChemicalChunker379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred34_ChemicalChunker381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred35_ChemicalChunker389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred36_ChemicalChunker392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred38_ChemicalChunker389 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0C00080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adj_in_synpred38_ChemicalChunker392 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adv_in_synpred38_ChemicalChunker395 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred38_ChemicalChunker399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred39_ChemicalChunker401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred40_ChemicalChunker403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred41_ChemicalChunker412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred42_ChemicalChunker415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred44_ChemicalChunker460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred45_ChemicalChunker463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred50_ChemicalChunker479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred51_ChemicalChunker482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred52_ChemicalChunker485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred53_ChemicalChunker488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred54_ChemicalChunker491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred55_ChemicalChunker470 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_synpred55_ChemicalChunker473 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_synpred55_ChemicalChunker476 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_synpred55_ChemicalChunker479 = new BitSet(new long[]{0xE7800003FFFC3002L,0x00000023B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_synpred55_ChemicalChunker482 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000001F000L});
    public static final BitSet FOLLOW_adv_in_synpred55_ChemicalChunker485 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adj_in_synpred55_ChemicalChunker488 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_neg_in_synpred55_ChemicalChunker491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred58_ChemicalChunker498 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_synpred58_ChemicalChunker501 = new BitSet(new long[]{0xFFFFFF9FFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_synpred58_ChemicalChunker504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred99_ChemicalChunker611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred100_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred156_ChemicalChunker751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred157_ChemicalChunker780 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred157_ChemicalChunker782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred158_ChemicalChunker799 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred158_ChemicalChunker801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred160_ChemicalChunker865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred161_ChemicalChunker867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred162_ChemicalChunker869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred164_ChemicalChunker873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred165_ChemicalChunker875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred166_ChemicalChunker877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred167_ChemicalChunker879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred169_ChemicalChunker883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred170_ChemicalChunker885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred171_ChemicalChunker887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred172_ChemicalChunker889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred173_ChemicalChunker891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred174_ChemicalChunker893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred175_ChemicalChunker895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred176_ChemicalChunker897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred178_ChemicalChunker905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred179_ChemicalChunker907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred180_ChemicalChunker909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred182_ChemicalChunker913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred183_ChemicalChunker915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred184_ChemicalChunker917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred185_ChemicalChunker919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred187_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred188_ChemicalChunker925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred189_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred190_ChemicalChunker929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred191_ChemicalChunker931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred192_ChemicalChunker933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred193_ChemicalChunker935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred194_ChemicalChunker937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred196_ChemicalChunker941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred208_ChemicalChunker996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred209_ChemicalChunker998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred210_ChemicalChunker1000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred211_ChemicalChunker1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred215_ChemicalChunker1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred216_ChemicalChunker1085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred222_ChemicalChunker1106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred226_ChemicalChunker1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred244_ChemicalChunker1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred245_ChemicalChunker1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred251_ChemicalChunker1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred263_ChemicalChunker1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred268_ChemicalChunker1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred269_ChemicalChunker1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_synpred271_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred273_ChemicalChunker1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1659 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred278_ChemicalChunker1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred279_ChemicalChunker1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred280_ChemicalChunker1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred281_ChemicalChunker1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred282_ChemicalChunker1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred283_ChemicalChunker1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred284_ChemicalChunker1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred287_ChemicalChunker1850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred288_ChemicalChunker1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred289_ChemicalChunker1868 = new BitSet(new long[]{0x187FFF9C0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred289_ChemicalChunker1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred290_ChemicalChunker1882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred296_ChemicalChunker1994 = new BitSet(new long[]{0x0000000000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred296_ChemicalChunker1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred301_ChemicalChunker2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred302_ChemicalChunker2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred303_ChemicalChunker2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred304_ChemicalChunker2052 = new BitSet(new long[]{0x0000000000000002L});

}