// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-01-29 01:49:07

    package uk.ac.cam.ch.wwmm.chemicaltagger;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int WS=5;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int NEWLINE=6;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "synpred230_ChemicalChunker", "synpred147_ChemicalChunker", 
        "tmunicode", "synpred161_ChemicalChunker", "prp", "brackets", "synpred217_ChemicalChunker", 
        "synpred201_ChemicalChunker", "synpred23_ChemicalChunker", "synpred46_ChemicalChunker", 
        "synpred236_ChemicalChunker", "synpred47_ChemicalChunker", "synpred117_ChemicalChunker", 
        "vbadd", "vbextract", "quantity", "nnstate", "synpred247_ChemicalChunker", 
        "abx", "synpred127_ChemicalChunker", "ppl", "synpred55_ChemicalChunker", 
        "abl", "vbdegass", "unnamedmoleculeamount1", "synpred107_ChemicalChunker", 
        "synpred199_ChemicalChunker", "rsqb", "unmatchedTokens", "vbsynthesize", 
        "neg", "nnpurify", "synpred190_ChemicalChunker", "synpred231_ChemicalChunker", 
        "synpred2_ChemicalChunker", "dtx", "synpred113_ChemicalChunker", 
        "synpred130_ChemicalChunker", "uh", "synpred133_ChemicalChunker", 
        "synpred194_ChemicalChunker", "qlp", "synpred58_ChemicalChunker", 
        "ber", "synpred50_ChemicalChunker", "synpred212_ChemicalChunker", 
        "infor", "nntime", "synpred99_ChemicalChunker", "wp_poss", "synpred188_ChemicalChunker", 
        "synpred223_ChemicalChunker", "vbheat", "ql", "synpred156_ChemicalChunker", 
        "vbuse", "pps", "pn", "to", "nps_poss", "synpred244_ChemicalChunker", 
        "synpred209_ChemicalChunker", "synpred1_ChemicalChunker", "synpred43_ChemicalChunker", 
        "vbquench", "synpred225_ChemicalChunker", "nncolumn", "synpred90_ChemicalChunker", 
        "synpred224_ChemicalChunker", "synpred142_ChemicalChunker", "apparatus", 
        "synpred26_ChemicalChunker", "synpred229_ChemicalChunker", "vbpurify", 
        "synpred70_ChemicalChunker", "od", "synpred38_ChemicalChunker", 
        "synpred79_ChemicalChunker", "synpred101_ChemicalChunker", "nnapparatus", 
        "md", "mixtureContent", "verbphrase", "synpred150_ChemicalChunker", 
        "synpred13_ChemicalChunker", "synpred123_ChemicalChunker", "synpred132_ChemicalChunker", 
        "jj", "vb", "beg", "synpred98_ChemicalChunker", "synpred239_ChemicalChunker", 
        "inafter", "inwithout", "rn", "synpred242_ChemicalChunker", "pdt", 
        "vbapparatus", "unmatchedPhrase", "synpred153_ChemicalChunker", 
        "synpred34_ChemicalChunker", "synpred183_ChemicalChunker", "synpred65_ChemicalChunker", 
        "vbcool", "synpred17_ChemicalChunker", "nnchromatography", "wpo", 
        "synpred120_ChemicalChunker", "synpred222_ChemicalChunker", "synpred221_ChemicalChunker", 
        "ppls", "synpred60_ChemicalChunker", "synpred180_ChemicalChunker", 
        "synpred191_ChemicalChunker", "bem", "nounphraseStructure", "vbfill", 
        "synpred241_ChemicalChunker", "synpred106_ChemicalChunker", "synpred228_ChemicalChunker", 
        "synpred124_ChemicalChunker", "synpred245_ChemicalChunker", "synpred184_ChemicalChunker", 
        "synpred206_ChemicalChunker", "synpred171_ChemicalChunker", "nns", 
        "nnpressure", "pp_poss", "inbefore", "vbsuspend", "oscarcm", "vbsubject", 
        "synpred96_ChemicalChunker", "synpred36_ChemicalChunker", "cd", 
        "nndry", "synpred105_ChemicalChunker", "synpred109_ChemicalChunker", 
        "lsqb", "synpred181_ChemicalChunker", "synpred28_ChemicalChunker", 
        "oscarcj", "colon", "measurements", "synpred122_ChemicalChunker", 
        "synpred64_ChemicalChunker", "synpred112_ChemicalChunker", "synpred61_ChemicalChunker", 
        "synpred7_ChemicalChunker", "synpred59_ChemicalChunker", "synpred126_ChemicalChunker", 
        "synpred152_ChemicalChunker", "oscarCompound4", "vbtreat", "vbg", 
        "verb", "hvd", "nps", "nnextract", "synpred208_ChemicalChunker", 
        "fwin", "nnatmosphere", "synpred39_ChemicalChunker", "synpred67_ChemicalChunker", 
        "unnamedmoleculeamount", "oscarCompound", "synpred250_ChemicalChunker", 
        "synpred168_ChemicalChunker", "synpred235_ChemicalChunker", "synpred8_ChemicalChunker", 
        "amount", "noun", "nnpercent", "synpred92_ChemicalChunker", "moleculeamount2", 
        "synpred144_ChemicalChunker", "synpred246_ChemicalChunker", "vbdissolve", 
        "synpred157_ChemicalChunker", "vbstir", "synpred33_ChemicalChunker", 
        "synpred238_ChemicalChunker", "synpred179_ChemicalChunker", "synpred211_ChemicalChunker", 
        "synpred162_ChemicalChunker", "vbdry", "synpred139_ChemicalChunker", 
        "nnp", "sym", "np", "vbincrease", "synpred134_ChemicalChunker", 
        "synpred83_ChemicalChunker", "synpred62_ChemicalChunker", "oscarCompound1", 
        "apost", "synpred198_ChemicalChunker", "hv", "vbconcentrate", "clause", 
        "nnamount", "synpred207_ChemicalChunker", "nnmass", "synpred88_ChemicalChunker", 
        "synpred218_ChemicalChunker", "oscarCompound2", "np_poss", "nnchementity", 
        "synpred16_ChemicalChunker", "vbrecover", "synpred128_ChemicalChunker", 
        "oscarrn", "nngeneral", "synpred71_ChemicalChunker", "synpred158_ChemicalChunker", 
        "synpred189_ChemicalChunker", "synpred125_ChemicalChunker", "bed", 
        "synpred5_ChemicalChunker", "comma", "synpred249_ChemicalChunker", 
        "synpred37_ChemicalChunker", "hvn", "synpred115_ChemicalChunker", 
        "synpred215_ChemicalChunker", "rbconj", "molecule", "synpred25_ChemicalChunker", 
        "vbfilter", "synpred138_ChemicalChunker", "synpred32_ChemicalChunker", 
        "synpred35_ChemicalChunker", "synpred234_ChemicalChunker", "nr", 
        "synpred166_ChemicalChunker", "synpred195_ChemicalChunker", "synpred40_ChemicalChunker", 
        "synpred30_ChemicalChunker", "synpred178_ChemicalChunker", "nnvacuum", 
        "synpred49_ChemicalChunker", "oscarcpr", "oscarcd", "synpred95_ChemicalChunker", 
        "synpred27_ChemicalChunker", "synpred108_ChemicalChunker", "conjunction", 
        "jjt", "ininto", "synpred136_ChemicalChunker", "mass", "nntemp", 
        "nntimes", "inoff", "synpred29_ChemicalChunker", "nnconcentrate", 
        "inby", "jjr", "number", "ex", "synpred173_ChemicalChunker", "nn_poss", 
        "vbyield", "synpred251_ChemicalChunker", "vbremove", "inAll", "synpred163_ChemicalChunker", 
        "dash", "vbprecipitate", "synpred11_ChemicalChunker", "prepphraseOf", 
        "ppo", "synpred186_ChemicalChunker", "ben", "synpred19_ChemicalChunker", 
        "moleculeamount1", "synpred41_ChemicalChunker", "synpred220_ChemicalChunker", 
        "synpred103_ChemicalChunker", "rb", "mixtureStructure2", "sentences", 
        "oscarCompound3", "prepphraseOther", "synpred12_ChemicalChunker", 
        "mixtureStructure1", "synpred14_ChemicalChunker", "jjs", "synpred141_ChemicalChunker", 
        "synpred76_ChemicalChunker", "synpred210_ChemicalChunker", "synpred193_ChemicalChunker", 
        "synpred135_ChemicalChunker", "synpred187_ChemicalChunker", "pp_poss_poss", 
        "synpred205_ChemicalChunker", "synpred104_ChemicalChunker", "synpred177_ChemicalChunker", 
        "synpred118_ChemicalChunker", "vbwash", "synpred44_ChemicalChunker", 
        "mixture", "synpred137_ChemicalChunker", "synpred160_ChemicalChunker", 
        "vbcontain", "synpred6_ChemicalChunker", "synpred200_ChemicalChunker", 
        "synpred164_ChemicalChunker", "synpred51_ChemicalChunker", "synpred233_ChemicalChunker", 
        "inof", "synpred97_ChemicalChunker", "vbdrop", "synpred53_ChemicalChunker", 
        "cs", "synpred111_ChemicalChunker", "nnprecipitate", "synpred146_ChemicalChunker", 
        "synpred63_ChemicalChunker", "synpred73_ChemicalChunker", "unnamedmolecule", 
        "synpred203_ChemicalChunker", "inwith", "synpred110_ChemicalChunker", 
        "synpred237_ChemicalChunker", "synpred87_ChemicalChunker", "synpred145_ChemicalChunker", 
        "dts", "synpred197_ChemicalChunker", "rbs", "wql", "method", "synpred75_ChemicalChunker", 
        "synpred182_ChemicalChunker", "synpred45_ChemicalChunker", "synpred21_ChemicalChunker", 
        "synpred172_ChemicalChunker", "synpred85_ChemicalChunker", "synpred155_ChemicalChunker", 
        "synpred140_ChemicalChunker", "synpred226_ChemicalChunker", "nnfilter", 
        "dotok", "vbpartition", "synpred15_ChemicalChunker", "synpred74_ChemicalChunker", 
        "synpred148_ChemicalChunker", "synpred82_ChemicalChunker", "ap", 
        "synpred22_ChemicalChunker", "synpred3_ChemicalChunker", "synpred52_ChemicalChunker", 
        "synpred151_ChemicalChunker", "rp", "synpred159_ChemicalChunker", 
        "nn", "synpred54_ChemicalChunker", "vbz", "synpred149_ChemicalChunker", 
        "synpred154_ChemicalChunker", "be", "synpred165_ChemicalChunker", 
        "rbt", "synpred86_ChemicalChunker", "synpred81_ChemicalChunker", 
        "synpred93_ChemicalChunker", "dti", "adv", "synpred174_ChemicalChunker", 
        "synpred48_ChemicalChunker", "rrb", "vbp", "synpred227_ChemicalChunker", 
        "prepphraseIN", "rbr", "inunder", "inover", "nnremove", "synpred216_ChemicalChunker", 
        "synpred170_ChemicalChunker", "invia", "synpred78_ChemicalChunker", 
        "adj", "synpred10_ChemicalChunker", "percent", "verbphraseStructure", 
        "synpred69_ChemicalChunker", "synpred131_ChemicalChunker", "synpred232_ChemicalChunker", 
        "inon", "lrb", "synpred84_ChemicalChunker", "unnamedmoleculeamount2", 
        "document", "nneq", "synpred169_ChemicalChunker", "moleculeamount", 
        "hvg", "synpred185_ChemicalChunker", "synpred31_ChemicalChunker", 
        "synpred119_ChemicalChunker", "synpred100_ChemicalChunker", "vbn", 
        "synpred18_ChemicalChunker", "synpred116_ChemicalChunker", "synpred102_ChemicalChunker", 
        "vbd", "synpred20_ChemicalChunker", "nnsynthesize", "in", "doz", 
        "synpred94_ChemicalChunker", "synpred240_ChemicalChunker", "synpred66_ChemicalChunker", 
        "bez", "nc", "synpred175_ChemicalChunker", "nnmethod", "bedz", "synpred167_ChemicalChunker", 
        "oscaront", "prepphraseTemp", "nncycle", "inas", "vbsubmerge", "synpred143_ChemicalChunker", 
        "unnamedmoleculeamount3", "synpred80_ChemicalChunker", "nnflash", 
        "wdt", "synpred24_ChemicalChunker", "nounphrase", "synpred114_ChemicalChunker", 
        "synpred91_ChemicalChunker", "vbwait", "volume", "synpred77_ChemicalChunker", 
        "synpred176_ChemicalChunker", "nns_poss", "fw", "abn", "synpred248_ChemicalChunker", 
        "sentence", "ppss", "vbchange", "nnmixture", "cdunicode", "synpred9_ChemicalChunker", 
        "infrom", "synpred57_ChemicalChunker", "wrb", "synpred192_ChemicalChunker", 
        "nnvol", "synpred56_ChemicalChunker", "cc", "synpred42_ChemicalChunker", 
        "prepphrase", "synpred121_ChemicalChunker", "dt", "at", "synpred219_ChemicalChunker", 
        "pn_poss", "synpred196_ChemicalChunker", "nnadd", "synpred89_ChemicalChunker", 
        "synpred214_ChemicalChunker", "wps", "inin", "synpred72_ChemicalChunker", 
        "stop", "prepphraseTime", "synpred204_ChemicalChunker", "synpred202_ChemicalChunker", 
        "dod", "synpred68_ChemicalChunker", "vbcharge", "synpred213_ChemicalChunker", 
        "synpred4_ChemicalChunker", "synpred243_ChemicalChunker", "synpred129_ChemicalChunker"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public ChemicalChunkerParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public ChemicalChunkerParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try { dbg.enterRule(getGrammarFileName(), "document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(33, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            {
            dbg.location(33,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            int cnt1=0;
            try { dbg.enterSubRule(1);

            loop1:
            do {
                int alt1=2;
                try { dbg.enterDecision(1);

                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=11 && LA1_0<=15)||(LA1_0>=18 && LA1_0<=35)||(LA1_0>=37 && LA1_0<=73)||(LA1_0>=75 && LA1_0<=97)||LA1_0==99||(LA1_0>=103 && LA1_0<=106)||LA1_0==121||LA1_0==126||(LA1_0>=130 && LA1_0<=132)||(LA1_0>=137 && LA1_0<=142)||LA1_0==144||LA1_0==146||LA1_0==149||LA1_0==161||(LA1_0>=167 && LA1_0<=171)||(LA1_0>=173 && LA1_0<=175)||(LA1_0>=177 && LA1_0<=189)) ) {
                    alt1=1;
                }


                } finally {dbg.exitDecision(1);}

                switch (alt1) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    dbg.location(33,11);
            	    pushFollow(FOLLOW_sentences_in_document207);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt1++;
            } while (true);
            } finally {dbg.exitSubRule(1);}



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 33:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                dbg.location(33,24);
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    dbg.location(33,24);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(33,26);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    dbg.location(33,44);
                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(33, 57);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv | colon )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.cc_return cc5 = null;

        ChemicalChunkerParser.stop_return stop6 = null;

        ChemicalChunkerParser.adv_return adv7 = null;

        ChemicalChunkerParser.colon_return colon8 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentences");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(35, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:10: ( ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv | colon )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv | colon )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(35,13);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=3;
                try { dbg.enterDecision(2);

                try {
                    isCyclicDecision = true;
                    alt2 = dfa2.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
            	    {
            	    dbg.location(35,14);
            	    pushFollow(FOLLOW_sentence_in_sentences229);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
            	    {
            	    dbg.location(35,23);
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences231);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt2++;
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(35,43);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:43: ( comma | cc | stop | adv | colon )*
            try { dbg.enterSubRule(3);

            loop3:
            do {
                int alt3=6;
                try { dbg.enterDecision(3);

                try {
                    isCyclicDecision = true;
                    alt3 = dfa3.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(3);}

                switch (alt3) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: comma
            	    {
            	    dbg.location(35,44);
            	    pushFollow(FOLLOW_comma_in_sentences238);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:50: cc
            	    {
            	    dbg.location(35,50);
            	    pushFollow(FOLLOW_cc_in_sentences240);
            	    cc5=cc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc5.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:53: stop
            	    {
            	    dbg.location(35,53);
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop6=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop6.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: adv
            	    {
            	    dbg.location(35,58);
            	    pushFollow(FOLLOW_adv_in_sentences244);
            	    adv7=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv7.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:62: colon
            	    {
            	    dbg.location(35,62);
            	    pushFollow(FOLLOW_colon_in_sentences246);
            	    colon8=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon8.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);
            } finally {dbg.exitSubRule(3);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(35, 70);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentences");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase9 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase10 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase11 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(37, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:9: ( ( nounphrase | verbphrase | prepphrase )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(37,12);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=4;
                try { dbg.enterDecision(4);

                try {
                    isCyclicDecision = true;
                    alt4 = dfa4.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
            	    {
            	    dbg.location(37,13);
            	    pushFollow(FOLLOW_nounphrase_in_sentence258);
            	    nounphrase9=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase9.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
            	    {
            	    dbg.location(37,24);
            	    pushFollow(FOLLOW_verbphrase_in_sentence260);
            	    verbphrase10=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase10.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
            	    {
            	    dbg.location(37,35);
            	    pushFollow(FOLLOW_prepphrase_in_sentence262);
            	    prepphrase11=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase11.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt4++;
            } while (true);
            } finally {dbg.exitSubRule(4);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(37, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens12 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try { dbg.enterRule(getGrammarFileName(), "unmatchedPhrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(40, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:5: unmatchedTokens
            {
            dbg.location(41,5);
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase276);
            unmatchedTokens12=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens12.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 41:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                dbg.location(41,24);
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    dbg.location(41,24);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(41,26);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    dbg.location(41,44);
                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(41, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unmatchedPhrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:1: unmatchedTokens : ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun13 = null;

        ChemicalChunkerParser.verb_return verb14 = null;

        ChemicalChunkerParser.adj_return adj15 = null;

        ChemicalChunkerParser.adv_return adv16 = null;

        ChemicalChunkerParser.inAll_return inAll17 = null;

        ChemicalChunkerParser.dt_return dt18 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd19 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm20 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn21 = null;

        ChemicalChunkerParser.oscaront_return oscaront22 = null;

        ChemicalChunkerParser.brackets_return brackets23 = null;

        ChemicalChunkerParser.sym_return sym24 = null;

        ChemicalChunkerParser.colon_return colon25 = null;

        ChemicalChunkerParser.comma_return comma26 = null;

        ChemicalChunkerParser.md_return md27 = null;



        try { dbg.enterRule(getGrammarFileName(), "unmatchedTokens");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(43, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:2: ( ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(44,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md )
            int alt5=15;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: noun
                    {
                    dbg.location(44,5);
                    pushFollow(FOLLOW_noun_in_unmatchedTokens297);
                    noun13=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun13.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:10: verb
                    {
                    dbg.location(44,10);
                    pushFollow(FOLLOW_verb_in_unmatchedTokens299);
                    verb14=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb14.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: adj
                    {
                    dbg.location(44,15);
                    pushFollow(FOLLOW_adj_in_unmatchedTokens301);
                    adj15=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj15.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:19: adv
                    {
                    dbg.location(44,19);
                    pushFollow(FOLLOW_adv_in_unmatchedTokens303);
                    adv16=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv16.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:23: inAll
                    {
                    dbg.location(44,23);
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens305);
                    inAll17=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll17.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:29: dt
                    {
                    dbg.location(44,29);
                    pushFollow(FOLLOW_dt_in_unmatchedTokens307);
                    dt18=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt18.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: oscarcd
                    {
                    dbg.location(44,32);
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens309);
                    oscarcd19=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd19.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: oscarcm
                    {
                    dbg.location(44,40);
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens311);
                    oscarcm20=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm20.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: oscarrn
                    {
                    dbg.location(44,48);
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens313);
                    oscarrn21=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn21.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: oscaront
                    {
                    dbg.location(44,56);
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens315);
                    oscaront22=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront22.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:65: brackets
                    {
                    dbg.location(44,65);
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens317);
                    brackets23=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets23.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:74: sym
                    {
                    dbg.location(44,74);
                    pushFollow(FOLLOW_sym_in_unmatchedTokens319);
                    sym24=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym24.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:78: colon
                    {
                    dbg.location(44,78);
                    pushFollow(FOLLOW_colon_in_unmatchedTokens321);
                    colon25=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon25.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:84: comma
                    {
                    dbg.location(44,84);
                    pushFollow(FOLLOW_comma_in_unmatchedTokens323);
                    comma26=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma26.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:90: md
                    {
                    dbg.location(44,90);
                    pushFollow(FOLLOW_md_in_unmatchedTokens325);
                    md27=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md27.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(44, 93);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unmatchedTokens");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure28 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try { dbg.enterRule(getGrammarFileName(), "nounphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(47, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:4: nounphraseStructure
            {
            dbg.location(48,4);
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase337);
            nounphraseStructure28=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure28.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 48:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                dbg.location(48,28);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(48,30);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                dbg.location(48,50);
                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(48, 70);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:1: nounphraseStructure : ( dt )? ( adj | adv )* ( noun | number )+ ( ( conjunction )* ( adj )* ( adv )* noun | number )* ( prepphraseOf | prepphraseIN )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt29 = null;

        ChemicalChunkerParser.adj_return adj30 = null;

        ChemicalChunkerParser.adv_return adv31 = null;

        ChemicalChunkerParser.noun_return noun32 = null;

        ChemicalChunkerParser.number_return number33 = null;

        ChemicalChunkerParser.conjunction_return conjunction34 = null;

        ChemicalChunkerParser.adj_return adj35 = null;

        ChemicalChunkerParser.adv_return adv36 = null;

        ChemicalChunkerParser.noun_return noun37 = null;

        ChemicalChunkerParser.number_return number38 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf39 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN40 = null;



        try { dbg.enterRule(getGrammarFileName(), "nounphraseStructure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(49, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:21: ( ( dt )? ( adj | adv )* ( noun | number )+ ( ( conjunction )* ( adj )* ( adv )* noun | number )* ( prepphraseOf | prepphraseIN )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )? ( adj | adv )* ( noun | number )+ ( ( conjunction )* ( adj )* ( adv )* noun | number )* ( prepphraseOf | prepphraseIN )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(49,23);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6);

            int LA6_0 = input.LA(1);

            if ( (LA6_0==126) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(49,23);
                    pushFollow(FOLLOW_dt_in_nounphraseStructure356);
                    dt29=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt29.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(49,27);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:27: ( adj | adv )*
            try { dbg.enterSubRule(7);

            loop7:
            do {
                int alt7=3;
                try { dbg.enterDecision(7);

                try {
                    isCyclicDecision = true;
                    alt7 = dfa7.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(7);}

                switch (alt7) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
            	    {
            	    dbg.location(49,28);
            	    pushFollow(FOLLOW_adj_in_nounphraseStructure360);
            	    adj30=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj30.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:32: adv
            	    {
            	    dbg.location(49,32);
            	    pushFollow(FOLLOW_adv_in_nounphraseStructure362);
            	    adv31=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv31.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);
            } finally {dbg.exitSubRule(7);}

            dbg.location(49,39);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:39: ( noun | number )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=3;
                try { dbg.enterDecision(8);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: noun
            	    {
            	    dbg.location(49,40);
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure368);
            	    noun32=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun32.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: number
            	    {
            	    dbg.location(49,45);
            	    pushFollow(FOLLOW_number_in_nounphraseStructure370);
            	    number33=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number33.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}

            dbg.location(49,57);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:57: ( ( conjunction )* ( adj )* ( adv )* noun | number )*
            try { dbg.enterSubRule(12);

            loop12:
            do {
                int alt12=3;
                try { dbg.enterDecision(12);

                try {
                    isCyclicDecision = true;
                    alt12 = dfa12.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(12);}

                switch (alt12) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( conjunction )* ( adj )* ( adv )* noun
            	    {
            	    dbg.location(49,58);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( conjunction )*
            	    try { dbg.enterSubRule(9);

            	    loop9:
            	    do {
            	        int alt9=2;
            	        try { dbg.enterDecision(9);

            	        try {
            	            isCyclicDecision = true;
            	            alt9 = dfa9.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(9);}

            	        switch (alt9) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    dbg.location(49,58);
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure378);
            	    	    conjunction34=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction34.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop9;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(9);}

            	    dbg.location(49,71);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:71: ( adj )*
            	    try { dbg.enterSubRule(10);

            	    loop10:
            	    do {
            	        int alt10=2;
            	        try { dbg.enterDecision(10);

            	        try {
            	            isCyclicDecision = true;
            	            alt10 = dfa10.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(10);}

            	        switch (alt10) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    dbg.location(49,71);
            	    	    pushFollow(FOLLOW_adj_in_nounphraseStructure381);
            	    	    adj35=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj35.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop10;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(10);}

            	    dbg.location(49,76);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:76: ( adv )*
            	    try { dbg.enterSubRule(11);

            	    loop11:
            	    do {
            	        int alt11=2;
            	        try { dbg.enterDecision(11);

            	        int LA11_0 = input.LA(1);

            	        if ( ((LA11_0>=167 && LA11_0<=171)||LA11_0==173) ) {
            	            alt11=1;
            	        }


            	        } finally {dbg.exitDecision(11);}

            	        switch (alt11) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(49,76);
            	    	    pushFollow(FOLLOW_adv_in_nounphraseStructure384);
            	    	    adv36=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv36.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(11);}

            	    dbg.location(49,82);
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure388);
            	    noun37=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun37.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:87: number
            	    {
            	    dbg.location(49,87);
            	    pushFollow(FOLLOW_number_in_nounphraseStructure390);
            	    number38=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number38.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);
            } finally {dbg.exitSubRule(12);}

            dbg.location(49,100);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: ( prepphraseOf | prepphraseIN )*
            try { dbg.enterSubRule(13);

            loop13:
            do {
                int alt13=3;
                try { dbg.enterDecision(13);

                int LA13_0 = input.LA(1);

                if ( (LA13_0==21) ) {
                    int LA13_2 = input.LA(2);

                    if ( (synpred37_ChemicalChunker()) ) {
                        alt13=2;
                    }


                }
                else if ( (LA13_0==27) ) {
                    int LA13_3 = input.LA(2);

                    if ( (synpred36_ChemicalChunker()) ) {
                        alt13=1;
                    }


                }


                } finally {dbg.exitDecision(13);}

                switch (alt13) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:101: prepphraseOf
            	    {
            	    dbg.location(49,101);
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure399);
            	    prepphraseOf39=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf39.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:115: prepphraseIN
            	    {
            	    dbg.location(49,115);
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure402);
            	    prepphraseIN40=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN40.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);
            } finally {dbg.exitSubRule(13);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(49, 131);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphraseStructure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc41 = null;

        ChemicalChunkerParser.comma_return comma42 = null;



        try { dbg.enterRule(getGrammarFileName(), "conjunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(50, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:2: ( cc | comma )
            int alt14=2;
            try { dbg.enterDecision(14);

            int LA14_0 = input.LA(1);

            if ( (LA14_0==120) ) {
                alt14=1;
            }
            else if ( (LA14_0==97) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(51,5);
                    pushFollow(FOLLOW_cc_in_conjunction416);
                    cc41=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc41.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(51,8);
                    pushFollow(FOLLOW_comma_in_conjunction418);
                    comma42=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma42.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(51, 13);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conjunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure43 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try { dbg.enterRule(getGrammarFileName(), "verbphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(54, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:4: verbphraseStructure
            {
            dbg.location(55,4);
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase428);
            verbphraseStructure43=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure43.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 55:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                dbg.location(55,28);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(55,30);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                dbg.location(55,50);
                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(55, 70);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to44 = null;

        ChemicalChunkerParser.inAll_return inAll45 = null;

        ChemicalChunkerParser.inafter_return inafter46 = null;

        ChemicalChunkerParser.md_return md47 = null;

        ChemicalChunkerParser.adv_return adv48 = null;

        ChemicalChunkerParser.adj_return adj49 = null;

        ChemicalChunkerParser.verb_return verb50 = null;

        ChemicalChunkerParser.md_return md51 = null;

        ChemicalChunkerParser.adv_return adv52 = null;

        ChemicalChunkerParser.adj_return adj53 = null;

        ChemicalChunkerParser.neg_return neg54 = null;

        ChemicalChunkerParser.cc_return cc55 = null;

        ChemicalChunkerParser.comma_return comma56 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase57 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbphraseStructure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(56, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:21: ( ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(56,24);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )?
            int alt15=2;
            try { dbg.enterSubRule(15);
            try { dbg.enterDecision(15);

            int LA15_0 = input.LA(1);

            if ( (LA15_0==175) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==TOKEN) ) {
                    int LA15_3 = input.LA(3);

                    if ( (synpred39_ChemicalChunker()) ) {
                        alt15=1;
                    }
                }
            }
            } finally {dbg.exitDecision(15);}

            switch (alt15) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    dbg.location(56,24);
                    pushFollow(FOLLOW_to_in_verbphraseStructure447);
                    to44=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to44.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(15);}

            dbg.location(56,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: ( inAll )?
            int alt16=2;
            try { dbg.enterSubRule(16);
            try { dbg.enterDecision(16);

            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=18 && LA16_0<=19)||(LA16_0>=21 && LA16_0<=33)||LA16_0==137||LA16_0==175) ) {
                alt16=1;
            }
            else if ( (LA16_0==20) ) {
                int LA16_2 = input.LA(2);

                if ( (LA16_2==TOKEN) ) {
                    int LA16_4 = input.LA(3);

                    if ( (synpred40_ChemicalChunker()) ) {
                        alt16=1;
                    }
                }
            }
            } finally {dbg.exitDecision(16);}

            switch (alt16) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(56,28);
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure450);
                    inAll45=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll45.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(16);}

            dbg.location(56,35);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:35: ( inafter )?
            int alt17=2;
            try { dbg.enterSubRule(17);
            try { dbg.enterDecision(17);

            int LA17_0 = input.LA(1);

            if ( (LA17_0==20) ) {
                alt17=1;
            }
            } finally {dbg.exitDecision(17);}

            switch (alt17) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    dbg.location(56,35);
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure453);
                    inafter46=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter46.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(17);}

            dbg.location(56,44);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt26=0;
            try { dbg.enterSubRule(26);

            loop26:
            do {
                int alt26=2;
                try { dbg.enterDecision(26);

                try {
                    isCyclicDecision = true;
                    alt26 = dfa26.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(26);}

                switch (alt26) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    dbg.location(56,45);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )*
            	    try { dbg.enterSubRule(18);

            	    loop18:
            	    do {
            	        int alt18=2;
            	        try { dbg.enterDecision(18);

            	        int LA18_0 = input.LA(1);

            	        if ( (LA18_0==142) ) {
            	            alt18=1;
            	        }


            	        } finally {dbg.exitDecision(18);}

            	        switch (alt18) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    dbg.location(56,45);
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure457);
            	    	    md47=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md47.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop18;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(18);}

            	    dbg.location(56,49);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:49: ( adv )*
            	    try { dbg.enterSubRule(19);

            	    loop19:
            	    do {
            	        int alt19=2;
            	        try { dbg.enterDecision(19);

            	        int LA19_0 = input.LA(1);

            	        if ( ((LA19_0>=167 && LA19_0<=171)||LA19_0==173) ) {
            	            alt19=1;
            	        }


            	        } finally {dbg.exitDecision(19);}

            	        switch (alt19) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(56,49);
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure460);
            	    	    adv48=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv48.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop19;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(19);}

            	    dbg.location(56,54);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:54: ( adj )?
            	    int alt20=2;
            	    try { dbg.enterSubRule(20);
            	    try { dbg.enterDecision(20);

            	    int LA20_0 = input.LA(1);

            	    if ( ((LA20_0>=12 && LA20_0<=13)||(LA20_0>=138 && LA20_0<=141)) ) {
            	        alt20=1;
            	    }
            	    } finally {dbg.exitDecision(20);}

            	    switch (alt20) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(56,54);
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure463);
            	            adj49=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj49.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(20);}

            	    dbg.location(56,59);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )+
            	    int cnt21=0;
            	    try { dbg.enterSubRule(21);

            	    loop21:
            	    do {
            	        int alt21=2;
            	        try { dbg.enterDecision(21);

            	        try {
            	            isCyclicDecision = true;
            	            alt21 = dfa21.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(21);}

            	        switch (alt21) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    dbg.location(56,59);
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure466);
            	    	    verb50=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb50.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt21 >= 1 ) break loop21;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(21, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt21++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(21);}

            	    dbg.location(56,65);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )*
            	    try { dbg.enterSubRule(22);

            	    loop22:
            	    do {
            	        int alt22=2;
            	        try { dbg.enterDecision(22);

            	        int LA22_0 = input.LA(1);

            	        if ( (LA22_0==142) ) {
            	            int LA22_2 = input.LA(2);

            	            if ( (LA22_2==TOKEN) ) {
            	                int LA22_3 = input.LA(3);

            	                if ( (synpred46_ChemicalChunker()) ) {
            	                    alt22=1;
            	                }


            	            }


            	        }


            	        } finally {dbg.exitDecision(22);}

            	        switch (alt22) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    dbg.location(56,65);
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure469);
            	    	    md51=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md51.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop22;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(22);}

            	    dbg.location(56,69);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )*
            	    try { dbg.enterSubRule(23);

            	    loop23:
            	    do {
            	        int alt23=2;
            	        try { dbg.enterDecision(23);

            	        try {
            	            isCyclicDecision = true;
            	            alt23 = dfa23.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(23);}

            	        switch (alt23) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(56,69);
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure472);
            	    	    adv52=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv52.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop23;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(23);}

            	    dbg.location(56,74);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )?
            	    int alt24=2;
            	    try { dbg.enterSubRule(24);
            	    try { dbg.enterDecision(24);

            	    try {
            	        isCyclicDecision = true;
            	        alt24 = dfa24.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(24);}

            	    switch (alt24) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(56,74);
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure475);
            	            adj53=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj53.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(24);}

            	    dbg.location(56,79);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )?
            	    int alt25=2;
            	    try { dbg.enterSubRule(25);
            	    try { dbg.enterDecision(25);

            	    int LA25_0 = input.LA(1);

            	    if ( (LA25_0==99) ) {
            	        int LA25_1 = input.LA(2);

            	        if ( (LA25_1==TOKEN) ) {
            	            int LA25_3 = input.LA(3);

            	            if ( (synpred49_ChemicalChunker()) ) {
            	                alt25=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(25);}

            	    switch (alt25) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            dbg.location(56,79);
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure478);
            	            neg54=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg54.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(25);}


            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt26++;
            } while (true);
            } finally {dbg.exitSubRule(26);}

            dbg.location(56,87);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:87: ( ( cc )? ( comma )? prepphrase )*
            try { dbg.enterSubRule(29);

            loop29:
            do {
                int alt29=2;
                try { dbg.enterDecision(29);

                try {
                    isCyclicDecision = true;
                    alt29 = dfa29.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(29);}

                switch (alt29) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )? ( comma )? prepphrase
            	    {
            	    dbg.location(56,88);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )?
            	    int alt27=2;
            	    try { dbg.enterSubRule(27);
            	    try { dbg.enterDecision(27);

            	    int LA27_0 = input.LA(1);

            	    if ( (LA27_0==120) ) {
            	        alt27=1;
            	    }
            	    } finally {dbg.exitDecision(27);}

            	    switch (alt27) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(56,88);
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure485);
            	            cc55=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc55.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(27);}

            	    dbg.location(56,92);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:92: ( comma )?
            	    int alt28=2;
            	    try { dbg.enterSubRule(28);
            	    try { dbg.enterDecision(28);

            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==97) ) {
            	        alt28=1;
            	    }
            	    } finally {dbg.exitDecision(28);}

            	    switch (alt28) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(56,92);
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure488);
            	            comma56=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma56.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(28);}

            	    dbg.location(56,99);
            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure491);
            	    prepphrase57=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase57.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);
            } finally {dbg.exitSubRule(29);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(56, 112);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphraseStructure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb58 = null;

        ChemicalChunkerParser.vbp_return vbp59 = null;

        ChemicalChunkerParser.vbg_return vbg60 = null;

        ChemicalChunkerParser.vbd_return vbd61 = null;

        ChemicalChunkerParser.vbz_return vbz62 = null;

        ChemicalChunkerParser.vbn_return vbn63 = null;

        ChemicalChunkerParser.vbuse_return vbuse64 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge65 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject66 = null;

        ChemicalChunkerParser.vbadd_return vbadd67 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge68 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain69 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop70 = null;

        ChemicalChunkerParser.vbfill_return vbfill71 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend72 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat73 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus74 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate75 = null;

        ChemicalChunkerParser.vbcool_return vbcool76 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass77 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve78 = null;

        ChemicalChunkerParser.vbdry_return vbdry79 = null;

        ChemicalChunkerParser.vbextract_return vbextract80 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter81 = null;

        ChemicalChunkerParser.vbheat_return vbheat82 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease83 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition84 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate85 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify86 = null;

        ChemicalChunkerParser.vbquench_return vbquench87 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover88 = null;

        ChemicalChunkerParser.vbremove_return vbremove89 = null;

        ChemicalChunkerParser.vbstir_return vbstir90 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize91 = null;

        ChemicalChunkerParser.vbwait_return vbwait92 = null;

        ChemicalChunkerParser.vbwash_return vbwash93 = null;

        ChemicalChunkerParser.vbyield_return vbyield94 = null;

        ChemicalChunkerParser.vbchange_return vbchange95 = null;



        try { dbg.enterRule(getGrammarFileName(), "verb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(57, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt30=38;
            try { dbg.enterDecision(30);

            switch ( input.LA(1) ) {
            case 177:
                {
                alt30=1;
                }
                break;
            case 178:
                {
                alt30=2;
                }
                break;
            case 180:
                {
                alt30=3;
                }
                break;
            case 179:
                {
                alt30=4;
                }
                break;
            case 182:
                {
                alt30=5;
                }
                break;
            case 181:
                {
                alt30=6;
                }
                break;
            case 53:
                {
                alt30=7;
                }
                break;
            case 55:
                {
                alt30=8;
                }
                break;
            case 56:
                {
                alt30=9;
                }
                break;
            case 59:
                {
                alt30=10;
                }
                break;
            case 60:
                {
                alt30=11;
                }
                break;
            case 61:
                {
                alt30=12;
                }
                break;
            case 62:
                {
                alt30=13;
                }
                break;
            case 63:
                {
                alt30=14;
                }
                break;
            case 64:
                {
                alt30=15;
                }
                break;
            case 65:
                {
                alt30=16;
                }
                break;
            case 66:
                {
                alt30=17;
                }
                break;
            case 68:
                {
                alt30=18;
                }
                break;
            case 70:
                {
                alt30=19;
                }
                break;
            case 71:
                {
                alt30=20;
                }
                break;
            case 72:
                {
                alt30=21;
                }
                break;
            case 73:
                {
                alt30=22;
                }
                break;
            case 75:
                {
                alt30=23;
                }
                break;
            case 77:
                {
                alt30=24;
                }
                break;
            case 79:
                {
                alt30=25;
                }
                break;
            case 80:
                {
                alt30=26;
                }
                break;
            case 81:
                {
                alt30=27;
                }
                break;
            case 82:
                {
                alt30=28;
                }
                break;
            case 84:
                {
                alt30=29;
                }
                break;
            case 86:
                {
                alt30=30;
                }
                break;
            case 87:
                {
                alt30=31;
                }
                break;
            case 88:
                {
                alt30=32;
                }
                break;
            case 90:
                {
                alt30=33;
                }
                break;
            case 91:
                {
                alt30=34;
                }
                break;
            case 93:
                {
                alt30=35;
                }
                break;
            case 94:
                {
                alt30=36;
                }
                break;
            case 95:
                {
                alt30=37;
                }
                break;
            case 54:
                {
                alt30=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,8);
                    pushFollow(FOLLOW_vb_in_verb501);
                    vb58=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb58.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,11);
                    pushFollow(FOLLOW_vbp_in_verb503);
                    vbp59=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp59.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,15);
                    pushFollow(FOLLOW_vbg_in_verb505);
                    vbg60=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg60.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,19);
                    pushFollow(FOLLOW_vbd_in_verb507);
                    vbd61=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd61.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,23);
                    pushFollow(FOLLOW_vbz_in_verb509);
                    vbz62=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz62.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,27);
                    pushFollow(FOLLOW_vbn_in_verb511);
                    vbn63=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn63.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,31);
                    pushFollow(FOLLOW_vbuse_in_verb513);
                    vbuse64=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse64.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,37);
                    pushFollow(FOLLOW_vbsubmerge_in_verb515);
                    vbsubmerge65=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge65.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:48: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,48);
                    pushFollow(FOLLOW_vbsubject_in_verb517);
                    vbsubject66=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject66.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:58: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,58);
                    pushFollow(FOLLOW_vbadd_in_verb519);
                    vbadd67=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd67.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:64: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,64);
                    pushFollow(FOLLOW_vbcharge_in_verb521);
                    vbcharge68=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge68.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:73: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,73);
                    pushFollow(FOLLOW_vbcontain_in_verb523);
                    vbcontain69=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain69.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:83: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,83);
                    pushFollow(FOLLOW_vbdrop_in_verb525);
                    vbdrop70=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop70.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:90: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,90);
                    pushFollow(FOLLOW_vbfill_in_verb527);
                    vbfill71=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill71.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:97: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,97);
                    pushFollow(FOLLOW_vbsuspend_in_verb529);
                    vbsuspend72=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend72.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:107: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,107);
                    pushFollow(FOLLOW_vbtreat_in_verb531);
                    vbtreat73=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat73.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:115: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,115);
                    pushFollow(FOLLOW_vbapparatus_in_verb533);
                    vbapparatus74=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus74.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:127: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,127);
                    pushFollow(FOLLOW_vbconcentrate_in_verb535);
                    vbconcentrate75=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate75.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:141: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,141);
                    pushFollow(FOLLOW_vbcool_in_verb537);
                    vbcool76=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool76.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:148: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,148);
                    pushFollow(FOLLOW_vbdegass_in_verb539);
                    vbdegass77=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass77.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:157: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,157);
                    pushFollow(FOLLOW_vbdissolve_in_verb541);
                    vbdissolve78=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve78.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:168: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,168);
                    pushFollow(FOLLOW_vbdry_in_verb543);
                    vbdry79=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry79.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:174: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,174);
                    pushFollow(FOLLOW_vbextract_in_verb545);
                    vbextract80=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract80.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:184: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,184);
                    pushFollow(FOLLOW_vbfilter_in_verb547);
                    vbfilter81=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter81.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:194: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,194);
                    pushFollow(FOLLOW_vbheat_in_verb550);
                    vbheat82=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat82.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:201: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,201);
                    pushFollow(FOLLOW_vbincrease_in_verb552);
                    vbincrease83=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease83.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:212: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,212);
                    pushFollow(FOLLOW_vbpartition_in_verb554);
                    vbpartition84=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition84.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:224: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,224);
                    pushFollow(FOLLOW_vbprecipitate_in_verb556);
                    vbprecipitate85=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate85.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:238: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,238);
                    pushFollow(FOLLOW_vbpurify_in_verb558);
                    vbpurify86=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify86.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:247: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,247);
                    pushFollow(FOLLOW_vbquench_in_verb560);
                    vbquench87=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench87.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:256: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,256);
                    pushFollow(FOLLOW_vbrecover_in_verb562);
                    vbrecover88=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover88.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:266: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,266);
                    pushFollow(FOLLOW_vbremove_in_verb564);
                    vbremove89=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove89.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:275: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,275);
                    pushFollow(FOLLOW_vbstir_in_verb566);
                    vbstir90=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir90.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:282: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,282);
                    pushFollow(FOLLOW_vbsynthesize_in_verb568);
                    vbsynthesize91=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize91.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:295: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,295);
                    pushFollow(FOLLOW_vbwait_in_verb570);
                    vbwait92=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait92.getTree());

                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:302: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,302);
                    pushFollow(FOLLOW_vbwash_in_verb572);
                    vbwash93=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash93.getTree());

                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:309: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,309);
                    pushFollow(FOLLOW_vbyield_in_verb574);
                    vbyield94=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield94.getTree());

                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:317: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(57,317);
                    pushFollow(FOLLOW_vbchange_in_verb576);
                    vbchange95=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange95.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(57, 325);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd96 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd97 = null;



        try { dbg.enterRule(getGrammarFileName(), "number");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(61, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: ( cd | oscarcd )
            int alt31=2;
            try { dbg.enterDecision(31);

            int LA31_0 = input.LA(1);

            if ( (LA31_0==121) ) {
                alt31=1;
            }
            else if ( (LA31_0==11) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,10);
                    pushFollow(FOLLOW_cd_in_number586);
                    cd96=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd96.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,13);
                    pushFollow(FOLLOW_oscarcd_in_number588);
                    oscarcd97=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd97.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(61, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "number");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt98 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss99 = null;

        ChemicalChunkerParser.wpo_return wpo100 = null;

        ChemicalChunkerParser.wpo_return wpo101 = null;

        ChemicalChunkerParser.wps_return wps102 = null;

        ChemicalChunkerParser.wql_return wql103 = null;

        ChemicalChunkerParser.wrb_return wrb104 = null;

        ChemicalChunkerParser.ex_return ex105 = null;

        ChemicalChunkerParser.pdt_return pdt106 = null;



        try { dbg.enterRule(getGrammarFileName(), "clause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(62, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt32=9;
            try { dbg.enterDecision(32);

            try {
                isCyclicDecision = true;
                alt32 = dfa32.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,10);
                    pushFollow(FOLLOW_wdt_in_clause596);
                    wdt98=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt98.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,14);
                    pushFollow(FOLLOW_wp_poss_in_clause598);
                    wp_poss99=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss99.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,22);
                    pushFollow(FOLLOW_wpo_in_clause600);
                    wpo100=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo100.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,26);
                    pushFollow(FOLLOW_wpo_in_clause602);
                    wpo101=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo101.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,30);
                    pushFollow(FOLLOW_wps_in_clause604);
                    wps102=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps102.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,34);
                    pushFollow(FOLLOW_wql_in_clause606);
                    wql103=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql103.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,38);
                    pushFollow(FOLLOW_wrb_in_clause608);
                    wrb104=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb104.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,42);
                    pushFollow(FOLLOW_ex_in_clause610);
                    ex105=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex105.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(62,45);
                    pushFollow(FOLLOW_pdt_in_clause612);
                    pdt106=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt106.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(62, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "clause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:1: noun : ( prp | unnamedmolecule | molecule | amount | mixture | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp107 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule108 = null;

        ChemicalChunkerParser.molecule_return molecule109 = null;

        ChemicalChunkerParser.amount_return amount110 = null;

        ChemicalChunkerParser.mixture_return mixture111 = null;

        ChemicalChunkerParser.nnstate_return nnstate112 = null;

        ChemicalChunkerParser.nn_return nn113 = null;

        ChemicalChunkerParser.nns_return nns114 = null;

        ChemicalChunkerParser.nnp_return nnp115 = null;

        ChemicalChunkerParser.nnadd_return nnadd116 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr117 = null;

        ChemicalChunkerParser.nntime_return nntime118 = null;

        ChemicalChunkerParser.apparatus_return apparatus119 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere120 = null;

        ChemicalChunkerParser.nneq_return nneq121 = null;

        ChemicalChunkerParser.quantity_return quantity122 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity123 = null;

        ChemicalChunkerParser.measurements_return measurements124 = null;

        ChemicalChunkerParser.nntemp_return nntemp125 = null;

        ChemicalChunkerParser.nnflash_return nnflash126 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral127 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod128 = null;

        ChemicalChunkerParser.nnamount_return nnamount129 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure130 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn131 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography132 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum133 = null;

        ChemicalChunkerParser.nncycle_return nncycle134 = null;

        ChemicalChunkerParser.nntimes_return nntimes135 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate136 = null;

        ChemicalChunkerParser.nnvol_return nnvol137 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify138 = null;

        ChemicalChunkerParser.wdt_return wdt139 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss140 = null;

        ChemicalChunkerParser.wpo_return wpo141 = null;

        ChemicalChunkerParser.wps_return wps142 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize143 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture144 = null;

        ChemicalChunkerParser.oscaront_return oscaront145 = null;

        ChemicalChunkerParser.number_return number146 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound147 = null;

        ChemicalChunkerParser.nnextract_return nnextract148 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter149 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate150 = null;

        ChemicalChunkerParser.nnremove_return nnremove151 = null;

        ChemicalChunkerParser.fw_return fw152 = null;

        ChemicalChunkerParser.fwin_return fwin153 = null;

        ChemicalChunkerParser.sym_return sym154 = null;

        ChemicalChunkerParser.clause_return clause155 = null;



        try { dbg.enterRule(getGrammarFileName(), "noun");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(63, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:6: ( prp | unnamedmolecule | molecule | amount | mixture | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt33=49;
            try { dbg.enterDecision(33);

            try {
                isCyclicDecision = true;
                alt33 = dfa33.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:9: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,9);
                    pushFollow(FOLLOW_prp_in_noun620);
                    prp107=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp107.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:13: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,13);
                    pushFollow(FOLLOW_unnamedmolecule_in_noun622);
                    unnamedmolecule108=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule108.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:29: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,29);
                    pushFollow(FOLLOW_molecule_in_noun624);
                    molecule109=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule109.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:38: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,38);
                    pushFollow(FOLLOW_amount_in_noun626);
                    amount110=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount110.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:45: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,45);
                    pushFollow(FOLLOW_mixture_in_noun628);
                    mixture111=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture111.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:53: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,53);
                    pushFollow(FOLLOW_nnstate_in_noun630);
                    nnstate112=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate112.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:61: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,61);
                    pushFollow(FOLLOW_nn_in_noun632);
                    nn113=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn113.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:64: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,64);
                    pushFollow(FOLLOW_nns_in_noun634);
                    nns114=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns114.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:68: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,68);
                    pushFollow(FOLLOW_nnp_in_noun636);
                    nnp115=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp115.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:72: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,72);
                    pushFollow(FOLLOW_nnadd_in_noun638);
                    nnadd116=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd116.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:78: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,78);
                    pushFollow(FOLLOW_oscarcpr_in_noun640);
                    oscarcpr117=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr117.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:87: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,87);
                    pushFollow(FOLLOW_nntime_in_noun642);
                    nntime118=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime118.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:94: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,94);
                    pushFollow(FOLLOW_apparatus_in_noun644);
                    apparatus119=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus119.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:104: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,104);
                    pushFollow(FOLLOW_nnatmosphere_in_noun646);
                    nnatmosphere120=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere120.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:117: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,117);
                    pushFollow(FOLLOW_nneq_in_noun648);
                    nneq121=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq121.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:122: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,122);
                    pushFollow(FOLLOW_quantity_in_noun650);
                    quantity122=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity122.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:131: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,131);
                    pushFollow(FOLLOW_nnchementity_in_noun652);
                    nnchementity123=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity123.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:144: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,144);
                    pushFollow(FOLLOW_measurements_in_noun654);
                    measurements124=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements124.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:157: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,157);
                    pushFollow(FOLLOW_nntemp_in_noun656);
                    nntemp125=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp125.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:164: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,164);
                    pushFollow(FOLLOW_nnflash_in_noun658);
                    nnflash126=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash126.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:172: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,172);
                    pushFollow(FOLLOW_nngeneral_in_noun660);
                    nngeneral127=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral127.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:182: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,182);
                    pushFollow(FOLLOW_nnmethod_in_noun662);
                    nnmethod128=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod128.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:191: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,191);
                    pushFollow(FOLLOW_nnamount_in_noun664);
                    nnamount129=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount129.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:200: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,200);
                    pushFollow(FOLLOW_nnpressure_in_noun666);
                    nnpressure130=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure130.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:211: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,211);
                    pushFollow(FOLLOW_nncolumn_in_noun668);
                    nncolumn131=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn131.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:220: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,220);
                    pushFollow(FOLLOW_nnchromatography_in_noun670);
                    nnchromatography132=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography132.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:237: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,237);
                    pushFollow(FOLLOW_nnvacuum_in_noun672);
                    nnvacuum133=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum133.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:246: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,246);
                    pushFollow(FOLLOW_nncycle_in_noun674);
                    nncycle134=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle134.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:254: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,254);
                    pushFollow(FOLLOW_nntimes_in_noun676);
                    nntimes135=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes135.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:262: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,262);
                    pushFollow(FOLLOW_nnconcentrate_in_noun678);
                    nnconcentrate136=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate136.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:276: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,276);
                    pushFollow(FOLLOW_nnvol_in_noun680);
                    nnvol137=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol137.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:282: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,282);
                    pushFollow(FOLLOW_nnpurify_in_noun682);
                    nnpurify138=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify138.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:291: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,291);
                    pushFollow(FOLLOW_wdt_in_noun684);
                    wdt139=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt139.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:295: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,295);
                    pushFollow(FOLLOW_wp_poss_in_noun686);
                    wp_poss140=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss140.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:303: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,303);
                    pushFollow(FOLLOW_wpo_in_noun688);
                    wpo141=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo141.getTree());

                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:307: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,307);
                    pushFollow(FOLLOW_wps_in_noun690);
                    wps142=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps142.getTree());

                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:311: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,311);
                    pushFollow(FOLLOW_nnsynthesize_in_noun692);
                    nnsynthesize143=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize143.getTree());

                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:324: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,324);
                    pushFollow(FOLLOW_nnmixture_in_noun694);
                    nnmixture144=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture144.getTree());

                    }
                    break;
                case 39 :
                    dbg.enterAlt(39);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:334: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,334);
                    pushFollow(FOLLOW_oscaront_in_noun696);
                    oscaront145=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront145.getTree());

                    }
                    break;
                case 40 :
                    dbg.enterAlt(40);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:343: number
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,343);
                    pushFollow(FOLLOW_number_in_noun698);
                    number146=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number146.getTree());

                    }
                    break;
                case 41 :
                    dbg.enterAlt(41);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:350: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,350);
                    pushFollow(FOLLOW_oscarCompound_in_noun700);
                    oscarCompound147=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound147.getTree());

                    }
                    break;
                case 42 :
                    dbg.enterAlt(42);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:364: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,364);
                    pushFollow(FOLLOW_nnextract_in_noun702);
                    nnextract148=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract148.getTree());

                    }
                    break;
                case 43 :
                    dbg.enterAlt(43);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:374: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,374);
                    pushFollow(FOLLOW_nnfilter_in_noun704);
                    nnfilter149=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter149.getTree());

                    }
                    break;
                case 44 :
                    dbg.enterAlt(44);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:383: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,383);
                    pushFollow(FOLLOW_nnprecipitate_in_noun706);
                    nnprecipitate150=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate150.getTree());

                    }
                    break;
                case 45 :
                    dbg.enterAlt(45);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:397: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,397);
                    pushFollow(FOLLOW_nnremove_in_noun708);
                    nnremove151=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove151.getTree());

                    }
                    break;
                case 46 :
                    dbg.enterAlt(46);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:406: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,406);
                    pushFollow(FOLLOW_fw_in_noun710);
                    fw152=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw152.getTree());

                    }
                    break;
                case 47 :
                    dbg.enterAlt(47);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:409: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,409);
                    pushFollow(FOLLOW_fwin_in_noun712);
                    fwin153=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin153.getTree());

                    }
                    break;
                case 48 :
                    dbg.enterAlt(48);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:414: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,414);
                    pushFollow(FOLLOW_sym_in_noun714);
                    sym154=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym154.getTree());

                    }
                    break;
                case 49 :
                    dbg.enterAlt(49);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:418: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,418);
                    pushFollow(FOLLOW_clause_in_noun716);
                    clause155=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(63, 424);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "noun");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "noun"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2156 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1157 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try { dbg.enterRule(getGrammarFileName(), "mixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(66, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            dbg.location(66,10);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt34=2;
            try { dbg.enterSubRule(34);
            try { dbg.enterDecision(34);

            int LA34_0 = input.LA(1);

            if ( (LA34_0==97) ) {
                alt34=1;
            }
            else if ( (LA34_0==105) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:11: mixtureStructure2
                    {
                    dbg.location(66,11);
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture725);
                    mixtureStructure2156=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2156.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:29: mixtureStructure1
                    {
                    dbg.location(66,29);
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture727);
                    mixtureStructure1157=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1157.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(34);}



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 66:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                dbg.location(66,51);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(66,53);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                dbg.location(66,70);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    dbg.location(66,70);
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                dbg.location(66,89);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    dbg.location(66,89);
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(66, 108);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma158 = null;

        ChemicalChunkerParser.lrb_return lrb159 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent160 = null;

        ChemicalChunkerParser.rrb_return rrb161 = null;

        ChemicalChunkerParser.comma_return comma162 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixtureStructure2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(67, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:18: ( comma lrb mixtureContent rrb comma )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(67,20);
            pushFollow(FOLLOW_comma_in_mixtureStructure2748);
            comma158=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma158.getTree());
            dbg.location(67,26);
            pushFollow(FOLLOW_lrb_in_mixtureStructure2750);
            lrb159=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb159.getTree());
            dbg.location(67,30);
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure2752);
            mixtureContent160=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent160.getTree());
            dbg.location(67,45);
            pushFollow(FOLLOW_rrb_in_mixtureStructure2754);
            rrb161=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb161.getTree());
            dbg.location(67,49);
            pushFollow(FOLLOW_comma_in_mixtureStructure2756);
            comma162=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma162.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(67, 54);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixtureStructure2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb163 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent164 = null;

        ChemicalChunkerParser.rrb_return rrb165 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixtureStructure1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(68, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:18: ( lrb mixtureContent rrb )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(68,21);
            pushFollow(FOLLOW_lrb_in_mixtureStructure1763);
            lrb163=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb163.getTree());
            dbg.location(68,25);
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure1765);
            mixtureContent164=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent164.getTree());
            dbg.location(68,40);
            pushFollow(FOLLOW_rrb_in_mixtureStructure1767);
            rrb165=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb165.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(68, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixtureStructure1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: mixtureContent : ( verb | measurements | md | stop | oscarCompound | oscarcm | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb166 = null;

        ChemicalChunkerParser.measurements_return measurements167 = null;

        ChemicalChunkerParser.md_return md168 = null;

        ChemicalChunkerParser.stop_return stop169 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound170 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm171 = null;

        ChemicalChunkerParser.molecule_return molecule172 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule173 = null;

        ChemicalChunkerParser.dash_return dash174 = null;

        ChemicalChunkerParser.sym_return sym175 = null;

        ChemicalChunkerParser.cd_return cd176 = null;

        ChemicalChunkerParser.noun_return noun177 = null;

        ChemicalChunkerParser.inof_return inof178 = null;

        ChemicalChunkerParser.inAll_return inAll179 = null;

        ChemicalChunkerParser.cd_return cd180 = null;

        ChemicalChunkerParser.comma_return comma181 = null;

        ChemicalChunkerParser.adj_return adj182 = null;

        ChemicalChunkerParser.colon_return colon183 = null;

        ChemicalChunkerParser.stop_return stop184 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixtureContent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(69, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:15: ( ( verb | measurements | md | stop | oscarCompound | oscarcm | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:19: ( verb | measurements | md | stop | oscarCompound | oscarcm | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(69,19);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:19: ( verb | measurements | md | stop | oscarCompound | oscarcm | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt35=0;
            try { dbg.enterSubRule(35);

            loop35:
            do {
                int alt35=20;
                try { dbg.enterDecision(35);

                try {
                    isCyclicDecision = true;
                    alt35 = dfa35.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(35);}

                switch (alt35) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:20: verb
            	    {
            	    dbg.location(69,20);
            	    pushFollow(FOLLOW_verb_in_mixtureContent776);
            	    verb166=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb166.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:25: measurements
            	    {
            	    dbg.location(69,25);
            	    pushFollow(FOLLOW_measurements_in_mixtureContent778);
            	    measurements167=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements167.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:38: md
            	    {
            	    dbg.location(69,38);
            	    pushFollow(FOLLOW_md_in_mixtureContent780);
            	    md168=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md168.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:41: stop
            	    {
            	    dbg.location(69,41);
            	    pushFollow(FOLLOW_stop_in_mixtureContent782);
            	    stop169=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop169.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:46: oscarCompound
            	    {
            	    dbg.location(69,46);
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent784);
            	    oscarCompound170=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound170.getTree());

            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:60: oscarcm
            	    {
            	    dbg.location(69,60);
            	    pushFollow(FOLLOW_oscarcm_in_mixtureContent786);
            	    oscarcm171=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm171.getTree());

            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:68: molecule
            	    {
            	    dbg.location(69,68);
            	    pushFollow(FOLLOW_molecule_in_mixtureContent788);
            	    molecule172=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule172.getTree());

            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:77: unnamedmolecule
            	    {
            	    dbg.location(69,77);
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent790);
            	    unnamedmolecule173=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule173.getTree());

            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:93: dash
            	    {
            	    dbg.location(69,93);
            	    pushFollow(FOLLOW_dash_in_mixtureContent792);
            	    dash174=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash174.getTree());

            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:98: sym
            	    {
            	    dbg.location(69,98);
            	    pushFollow(FOLLOW_sym_in_mixtureContent794);
            	    sym175=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym175.getTree());

            	    }
            	    break;
            	case 11 :
            	    dbg.enterAlt(11);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:102: cd
            	    {
            	    dbg.location(69,102);
            	    pushFollow(FOLLOW_cd_in_mixtureContent796);
            	    cd176=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd176.getTree());

            	    }
            	    break;
            	case 12 :
            	    dbg.enterAlt(12);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:105: noun
            	    {
            	    dbg.location(69,105);
            	    pushFollow(FOLLOW_noun_in_mixtureContent798);
            	    noun177=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun177.getTree());

            	    }
            	    break;
            	case 13 :
            	    dbg.enterAlt(13);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:110: inof
            	    {
            	    dbg.location(69,110);
            	    pushFollow(FOLLOW_inof_in_mixtureContent800);
            	    inof178=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof178.getTree());

            	    }
            	    break;
            	case 14 :
            	    dbg.enterAlt(14);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:115: inAll
            	    {
            	    dbg.location(69,115);
            	    pushFollow(FOLLOW_inAll_in_mixtureContent802);
            	    inAll179=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll179.getTree());

            	    }
            	    break;
            	case 15 :
            	    dbg.enterAlt(15);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:121: cd
            	    {
            	    dbg.location(69,121);
            	    pushFollow(FOLLOW_cd_in_mixtureContent804);
            	    cd180=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd180.getTree());

            	    }
            	    break;
            	case 16 :
            	    dbg.enterAlt(16);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:124: comma
            	    {
            	    dbg.location(69,124);
            	    pushFollow(FOLLOW_comma_in_mixtureContent806);
            	    comma181=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma181.getTree());

            	    }
            	    break;
            	case 17 :
            	    dbg.enterAlt(17);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:130: adj
            	    {
            	    dbg.location(69,130);
            	    pushFollow(FOLLOW_adj_in_mixtureContent808);
            	    adj182=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj182.getTree());

            	    }
            	    break;
            	case 18 :
            	    dbg.enterAlt(18);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:134: colon
            	    {
            	    dbg.location(69,134);
            	    pushFollow(FOLLOW_colon_in_mixtureContent810);
            	    colon183=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon183.getTree());

            	    }
            	    break;
            	case 19 :
            	    dbg.enterAlt(19);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:140: stop
            	    {
            	    dbg.location(69,140);
            	    pushFollow(FOLLOW_stop_in_mixtureContent812);
            	    stop184=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop184.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt35 >= 1 ) break loop35;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(35, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt35++;
            } while (true);
            } finally {dbg.exitSubRule(35);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(69, 147);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixtureContent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj185 = null;

        ChemicalChunkerParser.jjr_return jjr186 = null;

        ChemicalChunkerParser.jjs_return jjs187 = null;

        ChemicalChunkerParser.jjt_return jjt188 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj189 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn190 = null;



        try { dbg.enterRule(getGrammarFileName(), "adj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(70, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt36=6;
            try { dbg.enterDecision(36);

            switch ( input.LA(1) ) {
            case 138:
                {
                alt36=1;
                }
                break;
            case 139:
                {
                alt36=2;
                }
                break;
            case 140:
                {
                alt36=3;
                }
                break;
            case 141:
                {
                alt36=4;
                }
                break;
            case 12:
                {
                alt36=5;
                }
                break;
            case 13:
                {
                alt36=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,7);
                    pushFollow(FOLLOW_jj_in_adj822);
                    jj185=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj185.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,10);
                    pushFollow(FOLLOW_jjr_in_adj824);
                    jjr186=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr186.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,14);
                    pushFollow(FOLLOW_jjs_in_adj826);
                    jjs187=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs187.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,18);
                    pushFollow(FOLLOW_jjt_in_adj828);
                    jjt188=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt188.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,22);
                    pushFollow(FOLLOW_oscarcj_in_adj830);
                    oscarcj189=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj189.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(70,30);
                    pushFollow(FOLLOW_oscarrn_in_adj832);
                    oscarrn190=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn190.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(70, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: adv : ( rb | rbr | rbt | rp | rbs | rbconj );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb191 = null;

        ChemicalChunkerParser.rbr_return rbr192 = null;

        ChemicalChunkerParser.rbt_return rbt193 = null;

        ChemicalChunkerParser.rp_return rp194 = null;

        ChemicalChunkerParser.rbs_return rbs195 = null;

        ChemicalChunkerParser.rbconj_return rbconj196 = null;



        try { dbg.enterRule(getGrammarFileName(), "adv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(72, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:5: ( rb | rbr | rbt | rp | rbs | rbconj )
            int alt37=6;
            try { dbg.enterDecision(37);

            switch ( input.LA(1) ) {
            case 167:
                {
                alt37=1;
                }
                break;
            case 168:
                {
                alt37=2;
                }
                break;
            case 170:
                {
                alt37=3;
                }
                break;
            case 173:
                {
                alt37=4;
                }
                break;
            case 171:
                {
                alt37=5;
                }
                break;
            case 169:
                {
                alt37=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,7);
                    pushFollow(FOLLOW_rb_in_adv840);
                    rb191=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb191.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,10);
                    pushFollow(FOLLOW_rbr_in_adv842);
                    rbr192=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr192.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,14);
                    pushFollow(FOLLOW_rbt_in_adv844);
                    rbt193=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt193.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,18);
                    pushFollow(FOLLOW_rp_in_adv846);
                    rp194=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp194.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,21);
                    pushFollow(FOLLOW_rbs_in_adv848);
                    rbs195=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs195.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:25: rbconj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,25);
                    pushFollow(FOLLOW_rbconj_in_adv850);
                    rbconj196=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj196.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(72, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: prepphrase : ( ( neg )? prepphraseOther | prepphraseTemp | prepphraseTime );
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg197 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther198 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp199 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime200 = null;



        try { dbg.enterRule(getGrammarFileName(), "prepphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(76, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:2: ( ( neg )? prepphraseOther | prepphraseTemp | prepphraseTime )
            int alt39=3;
            try { dbg.enterDecision(39);

            try {
                isCyclicDecision = true;
                alt39 = dfa39.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(39);}

            switch (alt39) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( neg )? prepphraseOther
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(77,5);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( neg )?
                    int alt38=2;
                    try { dbg.enterSubRule(38);
                    try { dbg.enterDecision(38);

                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==99) ) {
                        alt38=1;
                    }
                    } finally {dbg.exitDecision(38);}

                    switch (alt38) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                            {
                            dbg.location(77,5);
                            pushFollow(FOLLOW_neg_in_prepphrase863);
                            neg197=neg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg197.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(38);}

                    dbg.location(77,10);
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase866);
                    prepphraseOther198=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther198.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:26: prepphraseTemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(77,26);
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase868);
                    prepphraseTemp199=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp199.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:41: prepphraseTime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(77,41);
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase870);
                    prepphraseTime200=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime200.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(77, 57);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:1: prepphraseOther : ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv201 = null;

        ChemicalChunkerParser.adj_return adj202 = null;

        ChemicalChunkerParser.inAll_return inAll203 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase204 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOther");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(79, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:2: ( ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:4: ( adv | adj )? ( inAll )+ nounphrase
            {
            dbg.location(80,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:4: ( adv | adj )?
            int alt40=3;
            try { dbg.enterSubRule(40);
            try { dbg.enterDecision(40);

            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=167 && LA40_0<=171)||LA40_0==173) ) {
                alt40=1;
            }
            else if ( ((LA40_0>=12 && LA40_0<=13)||(LA40_0>=138 && LA40_0<=141)) ) {
                alt40=2;
            }
            } finally {dbg.exitDecision(40);}

            switch (alt40) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:5: adv
                    {
                    dbg.location(80,5);
                    pushFollow(FOLLOW_adv_in_prepphraseOther882);
                    adv201=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv201.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:9: adj
                    {
                    dbg.location(80,9);
                    pushFollow(FOLLOW_adj_in_prepphraseOther884);
                    adj202=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj202.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(40);}

            dbg.location(80,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:15: ( inAll )+
            int cnt41=0;
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=2;
                try { dbg.enterDecision(41);

                int LA41_0 = input.LA(1);

                if ( ((LA41_0>=18 && LA41_0<=33)||LA41_0==137||LA41_0==175) ) {
                    alt41=1;
                }


                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    dbg.location(80,15);
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther888);
            	    inAll203=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll203.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt41++;
            } while (true);
            } finally {dbg.exitSubRule(41);}

            dbg.location(80,23);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOther892);
            nounphrase204=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase204.getTree());


            // AST REWRITE
            // elements: nounphrase, inAll, adv, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:34: -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
            {
                dbg.location(80,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:38: ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(80,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(80,60);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:60: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(80,60);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(80,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:65: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(80,65);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(80,70);
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    dbg.location(80,70);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(80,78);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(80, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOther");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof205 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase206 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOf");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(81, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:4: inof nounphrase
            {
            dbg.location(82,4);
            pushFollow(FOLLOW_inof_in_prepphraseOf922);
            inof205=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof205.getTree());
            dbg.location(82,10);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf925);
            nounphrase206=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase206.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 82:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                dbg.location(82,24);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(82,26);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(82,46);
                adaptor.addChild(root_1, stream_inof.nextTree());
                dbg.location(82,52);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(82, 63);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOf");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: prepphraseTime : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv207 = null;

        ChemicalChunkerParser.adj_return adj208 = null;

        ChemicalChunkerParser.inAll_return inAll209 = null;

        ChemicalChunkerParser.dt_return dt210 = null;

        ChemicalChunkerParser.adv_return adv211 = null;

        ChemicalChunkerParser.adj_return adj212 = null;

        ChemicalChunkerParser.cd_return cd213 = null;

        ChemicalChunkerParser.nntime_return nntime214 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(84, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:2: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:3: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime
            {
            dbg.location(85,3);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:3: ( adv | adj )?
            int alt42=3;
            try { dbg.enterSubRule(42);
            try { dbg.enterDecision(42);

            try {
                isCyclicDecision = true;
                alt42 = dfa42.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:4: adv
                    {
                    dbg.location(85,4);
                    pushFollow(FOLLOW_adv_in_prepphraseTime948);
                    adv207=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv207.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:8: adj
                    {
                    dbg.location(85,8);
                    pushFollow(FOLLOW_adj_in_prepphraseTime950);
                    adj208=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj208.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(42);}

            dbg.location(85,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:14: ( inAll )?
            int alt43=2;
            try { dbg.enterSubRule(43);
            try { dbg.enterDecision(43);

            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=18 && LA43_0<=33)||LA43_0==137||LA43_0==175) ) {
                alt43=1;
            }
            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(85,14);
                    pushFollow(FOLLOW_inAll_in_prepphraseTime954);
                    inAll209=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll209.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(43);}

            dbg.location(85,22);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:22: ( dt )?
            int alt44=2;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            int LA44_0 = input.LA(1);

            if ( (LA44_0==126) ) {
                alt44=1;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(85,22);
                    pushFollow(FOLLOW_dt_in_prepphraseTime958);
                    dt210=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt210.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}

            dbg.location(85,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:26: ( adv | adj )?
            int alt45=3;
            try { dbg.enterSubRule(45);
            try { dbg.enterDecision(45);

            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=167 && LA45_0<=171)||LA45_0==173) ) {
                alt45=1;
            }
            else if ( ((LA45_0>=12 && LA45_0<=13)||(LA45_0>=138 && LA45_0<=141)) ) {
                alt45=2;
            }
            } finally {dbg.exitDecision(45);}

            switch (alt45) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:27: adv
                    {
                    dbg.location(85,27);
                    pushFollow(FOLLOW_adv_in_prepphraseTime962);
                    adv211=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv211.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:31: adj
                    {
                    dbg.location(85,31);
                    pushFollow(FOLLOW_adj_in_prepphraseTime964);
                    adj212=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj212.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(45);}

            dbg.location(85,37);
            pushFollow(FOLLOW_cd_in_prepphraseTime968);
            cd213=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd213.getTree());
            dbg.location(85,40);
            pushFollow(FOLLOW_nntime_in_prepphraseTime970);
            nntime214=nntime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntime.add(nntime214.getTree());


            // AST REWRITE
            // elements: adv, adv, cd, dt, adj, inAll, adj, nntime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 85:47: -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
            {
                dbg.location(85,51);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:51: ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(85,53);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                dbg.location(85,73);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:73: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(85,73);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(85,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:78: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(85,78);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(85,83);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:83: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(85,83);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(85,90);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:90: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(85,90);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(85,94);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:94: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(85,94);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(85,99);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:99: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(85,99);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(85,104);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(85,107);
                adaptor.addChild(root_1, stream_nntime.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(85, 114);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: prepphraseIN : inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin215 = null;

        ChemicalChunkerParser.molecule_return molecule216 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseIN");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(86, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:2: ( inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:3: inin molecule
            {
            dbg.location(87,3);
            pushFollow(FOLLOW_inin_in_prepphraseIN1009);
            inin215=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin215.getTree());
            dbg.location(87,8);
            pushFollow(FOLLOW_molecule_in_prepphraseIN1011);
            molecule216=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule216.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:17: -> ^( NODE[\"INMolecule\"] inin molecule )
            {
                dbg.location(87,21);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:21: ^( NODE[\"INMolecule\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(87,23);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "INMolecule"), root_1);

                dbg.location(87,43);
                adaptor.addChild(root_1, stream_inin.nextTree());
                dbg.location(87,49);
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(87, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseIN");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in217 = null;

        ChemicalChunkerParser.inafter_return inafter218 = null;

        ChemicalChunkerParser.inas_return inas219 = null;

        ChemicalChunkerParser.inbefore_return inbefore220 = null;

        ChemicalChunkerParser.inby_return inby221 = null;

        ChemicalChunkerParser.infor_return infor222 = null;

        ChemicalChunkerParser.infrom_return infrom223 = null;

        ChemicalChunkerParser.inin_return inin224 = null;

        ChemicalChunkerParser.ininto_return ininto225 = null;

        ChemicalChunkerParser.inof_return inof226 = null;

        ChemicalChunkerParser.inoff_return inoff227 = null;

        ChemicalChunkerParser.inon_return inon228 = null;

        ChemicalChunkerParser.inover_return inover229 = null;

        ChemicalChunkerParser.inunder_return inunder230 = null;

        ChemicalChunkerParser.invia_return invia231 = null;

        ChemicalChunkerParser.inwith_return inwith232 = null;

        ChemicalChunkerParser.inwithout_return inwithout233 = null;

        ChemicalChunkerParser.to_return to234 = null;



        try { dbg.enterRule(getGrammarFileName(), "inAll");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(90, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt46=18;
            try { dbg.enterDecision(46);

            switch ( input.LA(1) ) {
            case 137:
                {
                alt46=1;
                }
                break;
            case 20:
                {
                alt46=2;
                }
                break;
            case 18:
                {
                alt46=3;
                }
                break;
            case 19:
                {
                alt46=4;
                }
                break;
            case 25:
                {
                alt46=5;
                }
                break;
            case 29:
                {
                alt46=6;
                }
                break;
            case 30:
                {
                alt46=7;
                }
                break;
            case 21:
                {
                alt46=8;
                }
                break;
            case 22:
                {
                alt46=9;
                }
                break;
            case 27:
                {
                alt46=10;
                }
                break;
            case 33:
                {
                alt46=11;
                }
                break;
            case 28:
                {
                alt46=12;
                }
                break;
            case 32:
                {
                alt46=13;
                }
                break;
            case 31:
                {
                alt46=14;
                }
                break;
            case 26:
                {
                alt46=15;
                }
                break;
            case 23:
                {
                alt46=16;
                }
                break;
            case 24:
                {
                alt46=17;
                }
                break;
            case 175:
                {
                alt46=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,9);
                    pushFollow(FOLLOW_in_in_inAll1034);
                    in217=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in217.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,12);
                    pushFollow(FOLLOW_inafter_in_inAll1036);
                    inafter218=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter218.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,20);
                    pushFollow(FOLLOW_inas_in_inAll1038);
                    inas219=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas219.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,25);
                    pushFollow(FOLLOW_inbefore_in_inAll1040);
                    inbefore220=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore220.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,34);
                    pushFollow(FOLLOW_inby_in_inAll1042);
                    inby221=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby221.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,39);
                    pushFollow(FOLLOW_infor_in_inAll1044);
                    infor222=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor222.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,45);
                    pushFollow(FOLLOW_infrom_in_inAll1046);
                    infrom223=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom223.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,52);
                    pushFollow(FOLLOW_inin_in_inAll1048);
                    inin224=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin224.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,57);
                    pushFollow(FOLLOW_ininto_in_inAll1050);
                    ininto225=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto225.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,64);
                    pushFollow(FOLLOW_inof_in_inAll1052);
                    inof226=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof226.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,69);
                    pushFollow(FOLLOW_inoff_in_inAll1054);
                    inoff227=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff227.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,75);
                    pushFollow(FOLLOW_inon_in_inAll1056);
                    inon228=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon228.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,80);
                    pushFollow(FOLLOW_inover_in_inAll1058);
                    inover229=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover229.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,87);
                    pushFollow(FOLLOW_inunder_in_inAll1060);
                    inunder230=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder230.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,95);
                    pushFollow(FOLLOW_invia_in_inAll1062);
                    invia231=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia231.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,101);
                    pushFollow(FOLLOW_inwith_in_inAll1064);
                    inwith232=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith232.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,108);
                    pushFollow(FOLLOW_inwithout_in_inAll1066);
                    inwithout233=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout233.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(90,118);
                    pushFollow(FOLLOW_to_in_inAll1068);
                    to234=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to234.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(90, 120);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inAll");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv235 = null;

        ChemicalChunkerParser.adj_return adj236 = null;

        ChemicalChunkerParser.inAll_return inAll237 = null;

        ChemicalChunkerParser.dt_return dt238 = null;

        ChemicalChunkerParser.adv_return adv239 = null;

        ChemicalChunkerParser.adj_return adj240 = null;

        ChemicalChunkerParser.cd_return cd241 = null;

        ChemicalChunkerParser.nntemp_return nntemp242 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(91, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp
            {
            dbg.location(91,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:18: ( adv | adj )?
            int alt47=3;
            try { dbg.enterSubRule(47);
            try { dbg.enterDecision(47);

            try {
                isCyclicDecision = true;
                alt47 = dfa47.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:19: adv
                    {
                    dbg.location(91,19);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1076);
                    adv235=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv235.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:23: adj
                    {
                    dbg.location(91,23);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1078);
                    adj236=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj236.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(47);}

            dbg.location(91,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:29: ( inAll )?
            int alt48=2;
            try { dbg.enterSubRule(48);
            try { dbg.enterDecision(48);

            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=18 && LA48_0<=33)||LA48_0==137||LA48_0==175) ) {
                alt48=1;
            }
            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(91,29);
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp1082);
                    inAll237=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll237.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(48);}

            dbg.location(91,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:36: ( dt )?
            int alt49=2;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==126) ) {
                alt49=1;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(91,36);
                    pushFollow(FOLLOW_dt_in_prepphraseTemp1085);
                    dt238=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt238.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}

            dbg.location(91,40);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:40: ( adv | adj )?
            int alt50=3;
            try { dbg.enterSubRule(50);
            try { dbg.enterDecision(50);

            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=167 && LA50_0<=171)||LA50_0==173) ) {
                alt50=1;
            }
            else if ( ((LA50_0>=12 && LA50_0<=13)||(LA50_0>=138 && LA50_0<=141)) ) {
                alt50=2;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:41: adv
                    {
                    dbg.location(91,41);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1089);
                    adv239=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv239.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:45: adj
                    {
                    dbg.location(91,45);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1091);
                    adj240=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj240.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(50);}

            dbg.location(91,51);
            pushFollow(FOLLOW_cd_in_prepphraseTemp1095);
            cd241=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd241.getTree());
            dbg.location(91,54);
            pushFollow(FOLLOW_nntemp_in_prepphraseTemp1097);
            nntemp242=nntemp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntemp.add(nntemp242.getTree());


            // AST REWRITE
            // elements: nntemp, inAll, cd, dt, adj, adj, adv, adv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 91:61: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
            {
                dbg.location(91,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:65: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(91,67);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                dbg.location(91,87);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:87: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(91,87);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(91,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(91,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(91,98);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:98: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(91,98);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(91,106);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:106: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(91,106);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(91,110);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:110: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(91,110);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(91,115);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:115: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(91,115);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(91,120);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(91,123);
                adaptor.addChild(root_1, stream_nntemp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(91, 130);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: amount : cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd243 = null;

        ChemicalChunkerParser.nnamount_return nnamount244 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try { dbg.enterRule(getGrammarFileName(), "amount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(94, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:8: ( cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:10: cd nnamount
            {
            dbg.location(94,10);
            pushFollow(FOLLOW_cd_in_amount1142);
            cd243=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd243.getTree());
            dbg.location(94,13);
            pushFollow(FOLLOW_nnamount_in_amount1144);
            nnamount244=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount244.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 94:22: -> ^( NODE[\"AMOUNT\"] cd nnamount )
            {
                dbg.location(94,25);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:25: ^( NODE[\"AMOUNT\"] cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(94,27);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                dbg.location(94,44);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(94,47);
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(94, 57);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "amount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:1: mass : cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd245 = null;

        ChemicalChunkerParser.nnmass_return nnmass246 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "mass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(95, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:6: ( cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:8: cd nnmass
            {
            dbg.location(95,8);
            pushFollow(FOLLOW_cd_in_mass1165);
            cd245=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd245.getTree());
            dbg.location(95,11);
            pushFollow(FOLLOW_nnmass_in_mass1167);
            nnmass246=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass246.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:17: -> ^( NODE[\"MASS\"] cd nnmass )
            {
                dbg.location(95,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:20: ^( NODE[\"MASS\"] cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(95,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                dbg.location(95,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(95,40);
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(95, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: percent : cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd247 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent248 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "percent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(96, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:9: ( cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:11: cd nnpercent
            {
            dbg.location(96,11);
            pushFollow(FOLLOW_cd_in_percent1188);
            cd247=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd247.getTree());
            dbg.location(96,14);
            pushFollow(FOLLOW_nnpercent_in_percent1190);
            nnpercent248=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent248.getTree());


            // AST REWRITE
            // elements: cd, nnpercent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:24: -> ^( NODE[\"PERCENT\"] cd nnpercent )
            {
                dbg.location(96,27);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:27: ^( NODE[\"PERCENT\"] cd nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(96,29);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                dbg.location(96,47);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(96,50);
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(96, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "percent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd249 = null;

        ChemicalChunkerParser.nnvol_return nnvol250 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "volume");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(97, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:10: cd nnvol
            {
            dbg.location(97,10);
            pushFollow(FOLLOW_cd_in_volume1211);
            cd249=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd249.getTree());
            dbg.location(97,13);
            pushFollow(FOLLOW_nnvol_in_volume1213);
            nnvol250=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol250.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 97:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                dbg.location(97,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(97,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                dbg.location(97,41);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(97,44);
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(97, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "volume");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "volume"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: apparatus : ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements251 = null;

        ChemicalChunkerParser.adj_return adj252 = null;

        ChemicalChunkerParser.jj_return jj253 = null;

        ChemicalChunkerParser.nn_return nn254 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure255 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus256 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_nnpressure=new RewriteRuleSubtreeStream(adaptor,"rule nnpressure");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try { dbg.enterRule(getGrammarFileName(), "apparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(99, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:2: ( ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:4: ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+
            {
            dbg.location(100,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:4: ( measurements | adj | jj | nn | nnpressure )*
            try { dbg.enterSubRule(51);

            loop51:
            do {
                int alt51=6;
                try { dbg.enterDecision(51);

                switch ( input.LA(1) ) {
                case 121:
                    {
                    alt51=1;
                    }
                    break;
                case 138:
                    {
                    int LA51_3 = input.LA(2);

                    if ( (LA51_3==TOKEN) ) {
                        int LA51_7 = input.LA(3);

                        if ( (synpred214_ChemicalChunker()) ) {
                            alt51=2;
                        }
                        else if ( (synpred215_ChemicalChunker()) ) {
                            alt51=3;
                        }


                    }


                    }
                    break;
                case 12:
                case 13:
                case 139:
                case 140:
                case 141:
                    {
                    alt51=2;
                    }
                    break;
                case 144:
                    {
                    alt51=4;
                    }
                    break;
                case 46:
                    {
                    alt51=5;
                    }
                    break;

                }

                } finally {dbg.exitDecision(51);}

                switch (alt51) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:5: measurements
            	    {
            	    dbg.location(100,5);
            	    pushFollow(FOLLOW_measurements_in_apparatus1237);
            	    measurements251=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements251.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:18: adj
            	    {
            	    dbg.location(100,18);
            	    pushFollow(FOLLOW_adj_in_apparatus1239);
            	    adj252=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_adj.add(adj252.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:22: jj
            	    {
            	    dbg.location(100,22);
            	    pushFollow(FOLLOW_jj_in_apparatus1241);
            	    jj253=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_jj.add(jj253.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:25: nn
            	    {
            	    dbg.location(100,25);
            	    pushFollow(FOLLOW_nn_in_apparatus1243);
            	    nn254=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nn.add(nn254.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:28: nnpressure
            	    {
            	    dbg.location(100,28);
            	    pushFollow(FOLLOW_nnpressure_in_apparatus1245);
            	    nnpressure255=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnpressure.add(nnpressure255.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);
            } finally {dbg.exitSubRule(51);}

            dbg.location(100,41);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:41: ( nnapparatus )+
            int cnt52=0;
            try { dbg.enterSubRule(52);

            loop52:
            do {
                int alt52=2;
                try { dbg.enterDecision(52);

                int LA52_0 = input.LA(1);

                if ( (LA52_0==67) ) {
                    int LA52_2 = input.LA(2);

                    if ( (synpred218_ChemicalChunker()) ) {
                        alt52=1;
                    }


                }


                } finally {dbg.exitDecision(52);}

                switch (alt52) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    dbg.location(100,41);
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1249);
            	    nnapparatus256=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus256.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt52++;
            } while (true);
            } finally {dbg.exitSubRule(52);}



            // AST REWRITE
            // elements: nn, adj, nnapparatus, measurements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:53: -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
            {
                dbg.location(100,56);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:56: ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(100,58);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                dbg.location(100,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:78: ( measurements )?
                if ( stream_measurements.hasNext() ) {
                    dbg.location(100,78);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                dbg.location(100,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(100,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(100,97);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:97: ( nn )?
                if ( stream_nn.hasNext() ) {
                    dbg.location(100,97);
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                dbg.location(100,101);
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    dbg.location(100,101);
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(100, 115);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: measurements : ( amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.amount_return amount257 = null;

        ChemicalChunkerParser.mass_return mass258 = null;

        ChemicalChunkerParser.percent_return percent259 = null;

        ChemicalChunkerParser.volume_return volume260 = null;



        try { dbg.enterRule(getGrammarFileName(), "measurements");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(101, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:2: ( amount | mass | percent | volume )
            int alt53=4;
            try { dbg.enterDecision(53);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==121) ) {
                int LA53_1 = input.LA(2);

                if ( (LA53_1==TOKEN) ) {
                    switch ( input.LA(3) ) {
                    case 102:
                        {
                        alt53=3;
                        }
                        break;
                    case 37:
                        {
                        alt53=1;
                        }
                        break;
                    case 40:
                        {
                        alt53=4;
                        }
                        break;
                    case 36:
                        {
                        alt53=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:3: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(102,3);
                    pushFollow(FOLLOW_amount_in_measurements1278);
                    amount257=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount257.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:10: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(102,10);
                    pushFollow(FOLLOW_mass_in_measurements1280);
                    mass258=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass258.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:15: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(102,15);
                    pushFollow(FOLLOW_percent_in_measurements1282);
                    percent259=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent259.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:23: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(102,23);
                    pushFollow(FOLLOW_volume_in_measurements1284);
                    volume260=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(102, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "measurements");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "measurements"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( rrb )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1261 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2262 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3263 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4264 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm265 = null;

        ChemicalChunkerParser.rrb_return rrb266 = null;



        try { dbg.enterRule(getGrammarFileName(), "oscarCompound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(105, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( rrb )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( rrb )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(105,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt54=5;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54);

            try {
                isCyclicDecision = true;
                alt54 = dfa54.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:19: oscarCompound1
                    {
                    dbg.location(105,19);
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1296);
                    oscarCompound1261=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1261.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:34: oscarCompound2
                    {
                    dbg.location(105,34);
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1298);
                    oscarCompound2262=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2262.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:49: oscarCompound3
                    {
                    dbg.location(105,49);
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1300);
                    oscarCompound3263=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3263.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:64: oscarCompound4
                    {
                    dbg.location(105,64);
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1302);
                    oscarCompound4264=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4264.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:79: oscarcm
                    {
                    dbg.location(105,79);
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1304);
                    oscarcm265=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm265.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(105,88);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:88: ( rrb )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55);

            int LA55_0 = input.LA(1);

            if ( (LA55_0==106) ) {
                int LA55_1 = input.LA(2);

                if ( (LA55_1==TOKEN) ) {
                    int LA55_3 = input.LA(3);

                    if ( (synpred226_ChemicalChunker()) ) {
                        alt55=1;
                    }
                }
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rrb
                    {
                    dbg.location(105,88);
                    pushFollow(FOLLOW_rrb_in_oscarCompound1307);
                    rrb266=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb266.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(105, 92);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: oscarCompound4 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm267 = null;

        ChemicalChunkerParser.dash_return dash268 = null;

        ChemicalChunkerParser.apost_return apost269 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound4");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(107, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:18: oscarcm ( dash | apost )+
            {
            dbg.location(107,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41316);
            oscarcm267=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm267.getTree());
            dbg.location(107,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:26: ( dash | apost )+
            int cnt56=0;
            try { dbg.enterSubRule(56);

            loop56:
            do {
                int alt56=3;
                try { dbg.enterDecision(56);

                int LA56_0 = input.LA(1);

                if ( (LA56_0==100) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==TOKEN) ) {
                        int LA56_4 = input.LA(3);

                        if ( (synpred227_ChemicalChunker()) ) {
                            alt56=1;
                        }


                    }


                }
                else if ( (LA56_0==98) ) {
                    alt56=2;
                }


                } finally {dbg.exitDecision(56);}

                switch (alt56) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:27: dash
            	    {
            	    dbg.location(107,27);
            	    pushFollow(FOLLOW_dash_in_oscarCompound41319);
            	    dash268=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash268.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:32: apost
            	    {
            	    dbg.location(107,32);
            	    pushFollow(FOLLOW_apost_in_oscarCompound41321);
            	    apost269=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost269.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt56++;
            } while (true);
            } finally {dbg.exitSubRule(56);}



            // AST REWRITE
            // elements: dash, apost, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                dbg.location(107,43);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(107,45);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(107,62);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(107,71);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:71: ( dash )*
                while ( stream_dash.hasNext() ) {
                    dbg.location(107,71);
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                dbg.location(107,77);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:77: ( apost )*
                while ( stream_apost.hasNext() ) {
                    dbg.location(107,77);
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(107, 85);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound4");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: oscarCompound3 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm270 = null;

        ChemicalChunkerParser.dash_return dash271 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm272 = null;

        ChemicalChunkerParser.dash_return dash273 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(108, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            dbg.location(108,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31348);
            oscarcm270=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm270.getTree());
            dbg.location(108,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:26: ( dash oscarcm )+
            int cnt57=0;
            try { dbg.enterSubRule(57);

            loop57:
            do {
                int alt57=2;
                try { dbg.enterDecision(57);

                int LA57_0 = input.LA(1);

                if ( (LA57_0==100) ) {
                    int LA57_1 = input.LA(2);

                    if ( (LA57_1==TOKEN) ) {
                        int LA57_3 = input.LA(3);

                        if ( (LA57_3==52) ) {
                            int LA57_4 = input.LA(4);

                            if ( (LA57_4==TOKEN) ) {
                                int LA57_5 = input.LA(5);

                                if ( (synpred229_ChemicalChunker()) ) {
                                    alt57=1;
                                }


                            }


                        }


                    }


                }


                } finally {dbg.exitDecision(57);}

                switch (alt57) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:27: dash oscarcm
            	    {
            	    dbg.location(108,27);
            	    pushFollow(FOLLOW_dash_in_oscarCompound31351);
            	    dash271=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash271.getTree());
            	    dbg.location(108,32);
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound31353);
            	    oscarcm272=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm272.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt57++;
            } while (true);
            } finally {dbg.exitSubRule(57);}

            dbg.location(108,42);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:42: ( dash )?
            int alt58=2;
            try { dbg.enterSubRule(58);
            try { dbg.enterDecision(58);

            int LA58_0 = input.LA(1);

            if ( (LA58_0==100) ) {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==TOKEN) ) {
                    int LA58_3 = input.LA(3);

                    if ( (synpred230_ChemicalChunker()) ) {
                        alt58=1;
                    }
                }
            }
            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    dbg.location(108,42);
                    pushFollow(FOLLOW_dash_in_oscarCompound31357);
                    dash273=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash273.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(58);}



            // AST REWRITE
            // elements: oscarcm, dash, oscarcm, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                dbg.location(108,50);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(108,52);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(108,69);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(108,77);
                if ( !(stream_oscarcm.hasNext()||stream_dash.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext()||stream_dash.hasNext() ) {
                    dbg.location(108,78);
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    dbg.location(108,83);
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                stream_dash.reset();
                dbg.location(108,93);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:93: ( dash )?
                if ( stream_dash.hasNext() ) {
                    dbg.location(108,93);
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(108, 100);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm274 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm275 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(109, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:18: oscarcm ( oscarcm )+
            {
            dbg.location(109,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21385);
            oscarcm274=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm274.getTree());
            dbg.location(109,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:26: ( oscarcm )+
            int cnt59=0;
            try { dbg.enterSubRule(59);

            loop59:
            do {
                int alt59=2;
                try { dbg.enterDecision(59);

                int LA59_0 = input.LA(1);

                if ( (LA59_0==52) ) {
                    int LA59_2 = input.LA(2);

                    if ( (LA59_2==TOKEN) ) {
                        int LA59_3 = input.LA(3);

                        if ( (synpred231_ChemicalChunker()) ) {
                            alt59=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(59);}

                switch (alt59) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    dbg.location(109,26);
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21387);
            	    oscarcm275=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm275.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt59 >= 1 ) break loop59;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(59, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt59++;
            } while (true);
            } finally {dbg.exitSubRule(59);}



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 109:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                dbg.location(109,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(109,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(109,57);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(109,65);
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    dbg.location(109,65);
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(109, 74);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm276 = null;

        ChemicalChunkerParser.jj_return jj277 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm278 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(110, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:18: oscarcm jj oscarcm
            {
            dbg.location(110,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11408);
            oscarcm276=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm276.getTree());
            dbg.location(110,26);
            pushFollow(FOLLOW_jj_in_oscarCompound11410);
            jj277=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj277.getTree());
            dbg.location(110,29);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11412);
            oscarcm278=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm278.getTree());


            // AST REWRITE
            // elements: jj, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 110:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                dbg.location(110,40);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(110,42);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(110,59);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(110,67);
                adaptor.addChild(root_1, stream_jj.nextTree());
                dbg.location(110,70);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(110, 78);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: moleculeamount1 : measurements ( quantity )? inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements279 = null;

        ChemicalChunkerParser.quantity_return quantity280 = null;

        ChemicalChunkerParser.inof_return inof281 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound282 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(111, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( measurements ( quantity )? inof oscarCompound )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:3: measurements ( quantity )? inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(112,3);
            pushFollow(FOLLOW_measurements_in_moleculeamount11433);
            measurements279=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements279.getTree());
            dbg.location(112,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:16: ( quantity )?
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60);

            int LA60_0 = input.LA(1);

            if ( (LA60_0==105) ) {
                alt60=1;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
                    {
                    dbg.location(112,16);
                    pushFollow(FOLLOW_quantity_in_moleculeamount11435);
                    quantity280=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity280.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}

            dbg.location(112,26);
            pushFollow(FOLLOW_inof_in_moleculeamount11438);
            inof281=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof281.getTree());
            dbg.location(112,31);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11440);
            oscarCompound282=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound282.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(112, 44);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:1: moleculeamount2 : oscarCompound ( quantity )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound283 = null;

        ChemicalChunkerParser.quantity_return quantity284 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(113, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:2: ( oscarCompound ( quantity )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:3: oscarCompound ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(114,3);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount21448);
            oscarCompound283=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound283.getTree());
            dbg.location(114,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: ( quantity )*
            try { dbg.enterSubRule(61);

            loop61:
            do {
                int alt61=2;
                try { dbg.enterDecision(61);

                try {
                    isCyclicDecision = true;
                    alt61 = dfa61.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(61);}

                switch (alt61) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
            	    {
            	    dbg.location(114,18);
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21451);
            	    quantity284=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity284.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);
            } finally {dbg.exitSubRule(61);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(114, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1285 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2286 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(115, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:16: ( moleculeamount1 | moleculeamount2 )
            int alt62=2;
            try { dbg.enterDecision(62);

            int LA62_0 = input.LA(1);

            if ( (LA62_0==121) ) {
                alt62=1;
            }
            else if ( (LA62_0==52) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(115,18);
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1461);
                    moleculeamount1285=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1285.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(115,36);
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1465);
                    moleculeamount2286=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(115, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount287 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "molecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(116, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:5: moleculeamount
            {
            dbg.location(117,5);
            pushFollow(FOLLOW_moleculeamount_in_molecule1486);
            moleculeamount287=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount287.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                dbg.location(117,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(117,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                dbg.location(117,42);
                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(117, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "molecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:1: unnamedmoleculeamount1 : measurements ( quantity )? inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements288 = null;

        ChemicalChunkerParser.quantity_return quantity289 = null;

        ChemicalChunkerParser.inof_return inof290 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd291 = null;

        ChemicalChunkerParser.cd_return cd292 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(119, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:2: ( measurements ( quantity )? inof ( oscarcd | cd ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:3: measurements ( quantity )? inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(120,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount11505);
            measurements288=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements288.getTree());
            dbg.location(120,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:16: ( quantity )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==105) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
                    {
                    dbg.location(120,16);
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11507);
                    quantity289=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity289.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(120,26);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11510);
            inof290=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof290.getTree());
            dbg.location(120,31);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:31: ( oscarcd | cd )
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64);

            int LA64_0 = input.LA(1);

            if ( (LA64_0==11) ) {
                alt64=1;
            }
            else if ( (LA64_0==121) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:32: oscarcd
                    {
                    dbg.location(120,32);
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11513);
                    oscarcd291=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd291.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:40: cd
                    {
                    dbg.location(120,40);
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11515);
                    cd292=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd292.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(120, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: unnamedmoleculeamount2 : oscarcd ( quantity )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd293 = null;

        ChemicalChunkerParser.quantity_return quantity294 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(121, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:2: ( oscarcd ( quantity )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:3: oscarcd ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(122,3);
            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21524);
            oscarcd293=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd293.getTree());
            dbg.location(122,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:11: ( quantity )*
            try { dbg.enterSubRule(65);

            loop65:
            do {
                int alt65=2;
                try { dbg.enterDecision(65);

                try {
                    isCyclicDecision = true;
                    alt65 = dfa65.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(65);}

                switch (alt65) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
            	    {
            	    dbg.location(122,11);
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21526);
            	    quantity294=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity294.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);
            } finally {dbg.exitSubRule(65);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(122, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: unnamedmoleculeamount3 : measurements ( quantity )? inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements295 = null;

        ChemicalChunkerParser.quantity_return quantity296 = null;

        ChemicalChunkerParser.inof_return inof297 = null;

        ChemicalChunkerParser.jj_return jj298 = null;

        ChemicalChunkerParser.noun_return noun299 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(123, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:2: ( measurements ( quantity )? inof ( ( jj )? noun )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:3: measurements ( quantity )? inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(124,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount31536);
            measurements295=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements295.getTree());
            dbg.location(124,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:16: ( quantity )?
            int alt66=2;
            try { dbg.enterSubRule(66);
            try { dbg.enterDecision(66);

            int LA66_0 = input.LA(1);

            if ( (LA66_0==105) ) {
                alt66=1;
            }
            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
                    {
                    dbg.location(124,16);
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount31538);
                    quantity296=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity296.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(66);}

            dbg.location(124,26);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31541);
            inof297=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof297.getTree());
            dbg.location(124,31);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:31: ( ( jj )? noun )+
            int cnt68=0;
            try { dbg.enterSubRule(68);

            loop68:
            do {
                int alt68=2;
                try { dbg.enterDecision(68);

                try {
                    isCyclicDecision = true;
                    alt68 = dfa68.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(68);}

                switch (alt68) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( jj )? noun
            	    {
            	    dbg.location(124,32);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( jj )?
            	    int alt67=2;
            	    try { dbg.enterSubRule(67);
            	    try { dbg.enterDecision(67);

            	    int LA67_0 = input.LA(1);

            	    if ( (LA67_0==138) ) {
            	        int LA67_1 = input.LA(2);

            	        if ( (LA67_1==TOKEN) ) {
            	            int LA67_3 = input.LA(3);

            	            if ( (synpred239_ChemicalChunker()) ) {
            	                alt67=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(67);}

            	    switch (alt67) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            dbg.location(124,32);
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31544);
            	            jj298=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj298.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(67);}

            	    dbg.location(124,36);
            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31547);
            	    noun299=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun299.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt68++;
            } while (true);
            } finally {dbg.exitSubRule(68);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(124, 42);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1300 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2301 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3302 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(126, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt69=3;
            try { dbg.enterDecision(69);

            try {
                isCyclicDecision = true;
                alt69 = dfa69.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(127,3);
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1558);
                    unnamedmoleculeamount1300=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1300.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(127,28);
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1562);
                    unnamedmoleculeamount2301=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2301.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(127,53);
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1566);
                    unnamedmoleculeamount3302=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3302.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(127, 76);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount303 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "unnamedmolecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(130, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:4: unnamedmoleculeamount
            {
            dbg.location(131,4);
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1579);
            unnamedmoleculeamount303=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount303.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                dbg.location(131,29);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(131,31);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                dbg.location(131,55);
                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(131, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmolecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: quantity : lrb measurements ( comma measurements )* rrb -> ^( NODE[\"QUANTITY\"] lrb measurements ( comma measurements )* rrb ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb304 = null;

        ChemicalChunkerParser.measurements_return measurements305 = null;

        ChemicalChunkerParser.comma_return comma306 = null;

        ChemicalChunkerParser.measurements_return measurements307 = null;

        ChemicalChunkerParser.rrb_return rrb308 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try { dbg.enterRule(getGrammarFileName(), "quantity");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(133, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:11: ( lrb measurements ( comma measurements )* rrb -> ^( NODE[\"QUANTITY\"] lrb measurements ( comma measurements )* rrb ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:13: lrb measurements ( comma measurements )* rrb
            {
            dbg.location(133,13);
            pushFollow(FOLLOW_lrb_in_quantity1600);
            lrb304=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb304.getTree());
            dbg.location(133,17);
            pushFollow(FOLLOW_measurements_in_quantity1602);
            measurements305=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measurements.add(measurements305.getTree());
            dbg.location(133,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:30: ( comma measurements )*
            try { dbg.enterSubRule(70);

            loop70:
            do {
                int alt70=2;
                try { dbg.enterDecision(70);

                int LA70_0 = input.LA(1);

                if ( (LA70_0==97) ) {
                    alt70=1;
                }


                } finally {dbg.exitDecision(70);}

                switch (alt70) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:31: comma measurements
            	    {
            	    dbg.location(133,31);
            	    pushFollow(FOLLOW_comma_in_quantity1605);
            	    comma306=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma306.getTree());
            	    dbg.location(133,38);
            	    pushFollow(FOLLOW_measurements_in_quantity1608);
            	    measurements307=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements307.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);
            } finally {dbg.exitSubRule(70);}

            dbg.location(133,54);
            pushFollow(FOLLOW_rrb_in_quantity1613);
            rrb308=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb308.getTree());


            // AST REWRITE
            // elements: rrb, measurements, comma, measurements, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 133:58: -> ^( NODE[\"QUANTITY\"] lrb measurements ( comma measurements )* rrb )
            {
                dbg.location(133,63);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:63: ^( NODE[\"QUANTITY\"] lrb measurements ( comma measurements )* rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(133,65);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                dbg.location(133,83);
                adaptor.addChild(root_1, stream_lrb.nextTree());
                dbg.location(133,87);
                adaptor.addChild(root_1, stream_measurements.nextTree());
                dbg.location(133,100);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:100: ( comma measurements )*
                while ( stream_measurements.hasNext()||stream_comma.hasNext() ) {
                    dbg.location(133,101);
                    adaptor.addChild(root_1, stream_comma.nextTree());
                    dbg.location(133,108);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                stream_comma.reset();
                dbg.location(133,124);
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(133, 128);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "quantity");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "quantity"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral309 = null;

        ChemicalChunkerParser.nn_return nn310 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod311 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd312 = null;

        ChemicalChunkerParser.cd_return cd313 = null;



        try { dbg.enterRule(getGrammarFileName(), "method");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(135, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(136,5);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:5: ( nngeneral | nn )?
            int alt71=3;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71);

            int LA71_0 = input.LA(1);

            if ( (LA71_0==44) ) {
                alt71=1;
            }
            else if ( (LA71_0==144) ) {
                alt71=2;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:6: nngeneral
                    {
                    dbg.location(136,6);
                    pushFollow(FOLLOW_nngeneral_in_method1650);
                    nngeneral309=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral309.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:16: nn
                    {
                    dbg.location(136,16);
                    pushFollow(FOLLOW_nn_in_method1652);
                    nn310=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn310.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}

            dbg.location(136,21);
            pushFollow(FOLLOW_nnmethod_in_method1656);
            nnmethod311=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod311.getTree());
            dbg.location(136,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:30: ( oscarcd | cd )?
            int alt72=3;
            try { dbg.enterSubRule(72);
            try { dbg.enterDecision(72);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==11) ) {
                alt72=1;
            }
            else if ( (LA72_0==121) ) {
                alt72=2;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:31: oscarcd
                    {
                    dbg.location(136,31);
                    pushFollow(FOLLOW_oscarcd_in_method1659);
                    oscarcd312=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd312.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:39: cd
                    {
                    dbg.location(136,39);
                    pushFollow(FOLLOW_cd_in_method1661);
                    cd313=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd313.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(72);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(136, 45);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "method");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb314 = null;

        ChemicalChunkerParser.rrb_return rrb315 = null;

        ChemicalChunkerParser.lsqb_return lsqb316 = null;

        ChemicalChunkerParser.rsqb_return rsqb317 = null;



        try { dbg.enterRule(getGrammarFileName(), "brackets");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(137, 5);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(138,8);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt73=0;
            try { dbg.enterSubRule(73);

            loop73:
            do {
                int alt73=5;
                try { dbg.enterDecision(73);

                try {
                    isCyclicDecision = true;
                    alt73 = dfa73.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(73);}

                switch (alt73) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:9: lrb
            	    {
            	    dbg.location(138,9);
            	    pushFollow(FOLLOW_lrb_in_brackets1683);
            	    lrb314=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb314.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:13: rrb
            	    {
            	    dbg.location(138,13);
            	    pushFollow(FOLLOW_rrb_in_brackets1685);
            	    rrb315=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb315.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:17: lsqb
            	    {
            	    dbg.location(138,17);
            	    pushFollow(FOLLOW_lsqb_in_brackets1687);
            	    lsqb316=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb316.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:22: rsqb
            	    {
            	    dbg.location(138,22);
            	    pushFollow(FOLLOW_rsqb_in_brackets1689);
            	    rsqb317=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb317.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt73++;
            } while (true);
            } finally {dbg.exitSubRule(73);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(138, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "brackets");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal318=null;
        Token TOKEN319=null;

        Object string_literal318_tree=null;
        Object TOKEN319_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(140, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:8: ( 'OSCAR-CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(140,9);
            string_literal318=(Token)match(input,11,FOLLOW_11_in_oscarcd1697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal318_tree = (Object)adaptor.create(string_literal318);
            adaptor.addChild(root_0, string_literal318_tree);
            }
            dbg.location(140,20);
            TOKEN319=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd1699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN319_tree = (Object)adaptor.create(TOKEN319);
            adaptor.addChild(root_0, TOKEN319_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(140, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal320=null;
        Token TOKEN321=null;

        Object string_literal320_tree=null;
        Object TOKEN321_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(141, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:8: ( 'OSCAR-CJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(141,9);
            string_literal320=(Token)match(input,12,FOLLOW_12_in_oscarcj1704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal320_tree = (Object)adaptor.create(string_literal320);
            adaptor.addChild(root_0, string_literal320_tree);
            }
            dbg.location(141,20);
            TOKEN321=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj1706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN321_tree = (Object)adaptor.create(TOKEN321);
            adaptor.addChild(root_0, TOKEN321_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(141, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal322=null;
        Token TOKEN323=null;

        Object string_literal322_tree=null;
        Object TOKEN323_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarrn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(142, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:8: ( 'OSCAR-RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(142,9);
            string_literal322=(Token)match(input,13,FOLLOW_13_in_oscarrn1711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal322_tree = (Object)adaptor.create(string_literal322);
            adaptor.addChild(root_0, string_literal322_tree);
            }
            dbg.location(142,20);
            TOKEN323=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn1713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN323_tree = (Object)adaptor.create(TOKEN323);
            adaptor.addChild(root_0, TOKEN323_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(142, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarrn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal324=null;
        Token TOKEN325=null;

        Object string_literal324_tree=null;
        Object TOKEN325_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcpr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(143, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:9: ( 'OSCAR-CPR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(143,10);
            string_literal324=(Token)match(input,14,FOLLOW_14_in_oscarcpr1718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal324_tree = (Object)adaptor.create(string_literal324);
            adaptor.addChild(root_0, string_literal324_tree);
            }
            dbg.location(143,22);
            TOKEN325=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr1720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN325_tree = (Object)adaptor.create(TOKEN325);
            adaptor.addChild(root_0, TOKEN325_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(143, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcpr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal326=null;
        Token TOKEN327=null;

        Object string_literal326_tree=null;
        Object TOKEN327_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscaront");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(144, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:9: ( 'OSCAR-ONT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(144,11);
            string_literal326=(Token)match(input,15,FOLLOW_15_in_oscaront1726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal326_tree = (Object)adaptor.create(string_literal326);
            adaptor.addChild(root_0, string_literal326_tree);
            }
            dbg.location(144,23);
            TOKEN327=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront1728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN327_tree = (Object)adaptor.create(TOKEN327);
            adaptor.addChild(root_0, TOKEN327_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(144, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscaront");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal328=null;
        Token TOKEN329=null;

        Object string_literal328_tree=null;
        Object TOKEN329_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "tmunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(145, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:10: ( 'TM-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(145,11);
            string_literal328=(Token)match(input,16,FOLLOW_16_in_tmunicode1733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal328_tree = (Object)adaptor.create(string_literal328);
            adaptor.addChild(root_0, string_literal328_tree);
            }
            dbg.location(145,24);
            TOKEN329=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode1735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN329_tree = (Object)adaptor.create(TOKEN329);
            adaptor.addChild(root_0, TOKEN329_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(145, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "tmunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal330=null;
        Token TOKEN331=null;

        Object string_literal330_tree=null;
        Object TOKEN331_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cdunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(146, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:10: ( 'CD-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(146,11);
            string_literal330=(Token)match(input,17,FOLLOW_17_in_cdunicode1740); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal330_tree = (Object)adaptor.create(string_literal330);
            adaptor.addChild(root_0, string_literal330_tree);
            }
            dbg.location(146,24);
            TOKEN331=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode1742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN331_tree = (Object)adaptor.create(TOKEN331);
            adaptor.addChild(root_0, TOKEN331_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(146, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cdunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal332=null;
        Token TOKEN333=null;

        Object string_literal332_tree=null;
        Object TOKEN333_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inas");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(149, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:5: ( 'IN-AS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(149,6);
            string_literal332=(Token)match(input,18,FOLLOW_18_in_inas1749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal332_tree = (Object)adaptor.create(string_literal332);
            adaptor.addChild(root_0, string_literal332_tree);
            }
            dbg.location(149,14);
            TOKEN333=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas1751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN333_tree = (Object)adaptor.create(TOKEN333);
            adaptor.addChild(root_0, TOKEN333_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(149, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inas");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal334=null;
        Token TOKEN335=null;

        Object string_literal334_tree=null;
        Object TOKEN335_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inbefore");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(150, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:9: ( 'IN-BEFORE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(150,10);
            string_literal334=(Token)match(input,19,FOLLOW_19_in_inbefore1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal334_tree = (Object)adaptor.create(string_literal334);
            adaptor.addChild(root_0, string_literal334_tree);
            }
            dbg.location(150,22);
            TOKEN335=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore1758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN335_tree = (Object)adaptor.create(TOKEN335);
            adaptor.addChild(root_0, TOKEN335_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(150, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inbefore");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal336=null;
        Token TOKEN337=null;

        Object string_literal336_tree=null;
        Object TOKEN337_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inafter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(151, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:8: ( 'IN-AFTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(151,9);
            string_literal336=(Token)match(input,20,FOLLOW_20_in_inafter1763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal336_tree = (Object)adaptor.create(string_literal336);
            adaptor.addChild(root_0, string_literal336_tree);
            }
            dbg.location(151,20);
            TOKEN337=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter1765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN337_tree = (Object)adaptor.create(TOKEN337);
            adaptor.addChild(root_0, TOKEN337_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(151, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inafter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal338=null;
        Token TOKEN339=null;

        Object string_literal338_tree=null;
        Object TOKEN339_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(152, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:5: ( 'IN-IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(152,6);
            string_literal338=(Token)match(input,21,FOLLOW_21_in_inin1770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal338_tree = (Object)adaptor.create(string_literal338);
            adaptor.addChild(root_0, string_literal338_tree);
            }
            dbg.location(152,14);
            TOKEN339=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin1772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN339_tree = (Object)adaptor.create(TOKEN339);
            adaptor.addChild(root_0, TOKEN339_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(152, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal340=null;
        Token TOKEN341=null;

        Object string_literal340_tree=null;
        Object TOKEN341_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ininto");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(153, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:7: ( 'IN-INTO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(153,8);
            string_literal340=(Token)match(input,22,FOLLOW_22_in_ininto1777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal340_tree = (Object)adaptor.create(string_literal340);
            adaptor.addChild(root_0, string_literal340_tree);
            }
            dbg.location(153,18);
            TOKEN341=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto1779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN341_tree = (Object)adaptor.create(TOKEN341);
            adaptor.addChild(root_0, TOKEN341_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(153, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ininto");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal342=null;
        Token TOKEN343=null;

        Object string_literal342_tree=null;
        Object TOKEN343_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwith");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(154, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:7: ( 'IN-WITH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(154,8);
            string_literal342=(Token)match(input,23,FOLLOW_23_in_inwith1784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal342_tree = (Object)adaptor.create(string_literal342);
            adaptor.addChild(root_0, string_literal342_tree);
            }
            dbg.location(154,18);
            TOKEN343=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith1786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN343_tree = (Object)adaptor.create(TOKEN343);
            adaptor.addChild(root_0, TOKEN343_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(154, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwith");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal344=null;
        Token TOKEN345=null;

        Object string_literal344_tree=null;
        Object TOKEN345_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwithout");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(155, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:10: ( 'IN-WITHOUT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(155,11);
            string_literal344=(Token)match(input,24,FOLLOW_24_in_inwithout1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal344_tree = (Object)adaptor.create(string_literal344);
            adaptor.addChild(root_0, string_literal344_tree);
            }
            dbg.location(155,24);
            TOKEN345=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout1793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN345_tree = (Object)adaptor.create(TOKEN345);
            adaptor.addChild(root_0, TOKEN345_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(155, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwithout");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal346=null;
        Token TOKEN347=null;

        Object string_literal346_tree=null;
        Object TOKEN347_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inby");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(156, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:5: ( 'IN-BY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(156,6);
            string_literal346=(Token)match(input,25,FOLLOW_25_in_inby1798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal346_tree = (Object)adaptor.create(string_literal346);
            adaptor.addChild(root_0, string_literal346_tree);
            }
            dbg.location(156,14);
            TOKEN347=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby1800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN347_tree = (Object)adaptor.create(TOKEN347);
            adaptor.addChild(root_0, TOKEN347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(156, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inby");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal348=null;
        Token TOKEN349=null;

        Object string_literal348_tree=null;
        Object TOKEN349_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "invia");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(157, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:6: ( 'IN-VIA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(157,7);
            string_literal348=(Token)match(input,26,FOLLOW_26_in_invia1805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal348_tree = (Object)adaptor.create(string_literal348);
            adaptor.addChild(root_0, string_literal348_tree);
            }
            dbg.location(157,16);
            TOKEN349=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia1807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN349_tree = (Object)adaptor.create(TOKEN349);
            adaptor.addChild(root_0, TOKEN349_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(157, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "invia");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal350=null;
        Token TOKEN351=null;

        Object string_literal350_tree=null;
        Object TOKEN351_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inof");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(158, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:5: ( 'IN-OF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(158,6);
            string_literal350=(Token)match(input,27,FOLLOW_27_in_inof1812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal350_tree = (Object)adaptor.create(string_literal350);
            adaptor.addChild(root_0, string_literal350_tree);
            }
            dbg.location(158,14);
            TOKEN351=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof1814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN351_tree = (Object)adaptor.create(TOKEN351);
            adaptor.addChild(root_0, TOKEN351_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(158, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inof");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal352=null;
        Token TOKEN353=null;

        Object string_literal352_tree=null;
        Object TOKEN353_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(159, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:5: ( 'IN-ON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(159,6);
            string_literal352=(Token)match(input,28,FOLLOW_28_in_inon1819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal352_tree = (Object)adaptor.create(string_literal352);
            adaptor.addChild(root_0, string_literal352_tree);
            }
            dbg.location(159,14);
            TOKEN353=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon1821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN353_tree = (Object)adaptor.create(TOKEN353);
            adaptor.addChild(root_0, TOKEN353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(159, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal354=null;
        Token TOKEN355=null;

        Object string_literal354_tree=null;
        Object TOKEN355_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(160, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:6: ( 'IN-FOR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(160,7);
            string_literal354=(Token)match(input,29,FOLLOW_29_in_infor1826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal354_tree = (Object)adaptor.create(string_literal354);
            adaptor.addChild(root_0, string_literal354_tree);
            }
            dbg.location(160,16);
            TOKEN355=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor1828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN355_tree = (Object)adaptor.create(TOKEN355);
            adaptor.addChild(root_0, TOKEN355_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(160, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal356=null;
        Token TOKEN357=null;

        Object string_literal356_tree=null;
        Object TOKEN357_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infrom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(161, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:7: ( 'IN-FROM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(161,8);
            string_literal356=(Token)match(input,30,FOLLOW_30_in_infrom1833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal356_tree = (Object)adaptor.create(string_literal356);
            adaptor.addChild(root_0, string_literal356_tree);
            }
            dbg.location(161,18);
            TOKEN357=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom1835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN357_tree = (Object)adaptor.create(TOKEN357);
            adaptor.addChild(root_0, TOKEN357_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(161, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infrom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal358=null;
        Token TOKEN359=null;

        Object string_literal358_tree=null;
        Object TOKEN359_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inunder");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(162, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:8: ( 'IN-UNDER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(162,9);
            string_literal358=(Token)match(input,31,FOLLOW_31_in_inunder1840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal358_tree = (Object)adaptor.create(string_literal358);
            adaptor.addChild(root_0, string_literal358_tree);
            }
            dbg.location(162,20);
            TOKEN359=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder1842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN359_tree = (Object)adaptor.create(TOKEN359);
            adaptor.addChild(root_0, TOKEN359_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(162, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inunder");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal360=null;
        Token TOKEN361=null;

        Object string_literal360_tree=null;
        Object TOKEN361_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(163, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:7: ( 'IN-OVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(163,8);
            string_literal360=(Token)match(input,32,FOLLOW_32_in_inover1847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal360_tree = (Object)adaptor.create(string_literal360);
            adaptor.addChild(root_0, string_literal360_tree);
            }
            dbg.location(163,18);
            TOKEN361=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover1849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN361_tree = (Object)adaptor.create(TOKEN361);
            adaptor.addChild(root_0, TOKEN361_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(163, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal362=null;
        Token TOKEN363=null;

        Object string_literal362_tree=null;
        Object TOKEN363_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inoff");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(164, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:6: ( 'IN-OFF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(164,7);
            string_literal362=(Token)match(input,33,FOLLOW_33_in_inoff1854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal362_tree = (Object)adaptor.create(string_literal362);
            adaptor.addChild(root_0, string_literal362_tree);
            }
            dbg.location(164,16);
            TOKEN363=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff1856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN363_tree = (Object)adaptor.create(TOKEN363);
            adaptor.addChild(root_0, TOKEN363_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(164, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inoff");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal364=null;
        Token TOKEN365=null;

        Object string_literal364_tree=null;
        Object TOKEN365_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnstate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(167, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:8: ( 'NN-STATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(167,9);
            string_literal364=(Token)match(input,34,FOLLOW_34_in_nnstate1863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal364_tree = (Object)adaptor.create(string_literal364);
            adaptor.addChild(root_0, string_literal364_tree);
            }
            dbg.location(167,20);
            TOKEN365=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate1865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN365_tree = (Object)adaptor.create(TOKEN365);
            adaptor.addChild(root_0, TOKEN365_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(167, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnstate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal366=null;
        Token TOKEN367=null;

        Object string_literal366_tree=null;
        Object TOKEN367_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(168, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:7: ( 'NN-TIME' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(168,8);
            string_literal366=(Token)match(input,35,FOLLOW_35_in_nntime1870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal366_tree = (Object)adaptor.create(string_literal366);
            adaptor.addChild(root_0, string_literal366_tree);
            }
            dbg.location(168,18);
            TOKEN367=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime1872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN367_tree = (Object)adaptor.create(TOKEN367);
            adaptor.addChild(root_0, TOKEN367_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(168, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal368=null;
        Token TOKEN369=null;

        Object string_literal368_tree=null;
        Object TOKEN369_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(169, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:7: ( 'NN-MASS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(169,8);
            string_literal368=(Token)match(input,36,FOLLOW_36_in_nnmass1877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal368_tree = (Object)adaptor.create(string_literal368);
            adaptor.addChild(root_0, string_literal368_tree);
            }
            dbg.location(169,18);
            TOKEN369=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass1879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN369_tree = (Object)adaptor.create(TOKEN369);
            adaptor.addChild(root_0, TOKEN369_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(169, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal370=null;
        Token TOKEN371=null;

        Object string_literal370_tree=null;
        Object TOKEN371_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(170, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:9: ( 'NN-AMOUNT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(170,10);
            string_literal370=(Token)match(input,37,FOLLOW_37_in_nnamount1884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal370_tree = (Object)adaptor.create(string_literal370);
            adaptor.addChild(root_0, string_literal370_tree);
            }
            dbg.location(170,22);
            TOKEN371=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount1886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN371_tree = (Object)adaptor.create(TOKEN371);
            adaptor.addChild(root_0, TOKEN371_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(170, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal372=null;
        Token TOKEN373=null;

        Object string_literal372_tree=null;
        Object TOKEN373_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnatmosphere");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(171, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:13: ( 'NN-ATMOSPHERE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(171,14);
            string_literal372=(Token)match(input,38,FOLLOW_38_in_nnatmosphere1891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal372_tree = (Object)adaptor.create(string_literal372);
            adaptor.addChild(root_0, string_literal372_tree);
            }
            dbg.location(171,30);
            TOKEN373=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere1893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN373_tree = (Object)adaptor.create(TOKEN373);
            adaptor.addChild(root_0, TOKEN373_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(171, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnatmosphere");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal374=null;
        Token TOKEN375=null;

        Object string_literal374_tree=null;
        Object TOKEN375_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nneq");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(172, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:5: ( 'NN-EQ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(172,6);
            string_literal374=(Token)match(input,39,FOLLOW_39_in_nneq1898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal374_tree = (Object)adaptor.create(string_literal374);
            adaptor.addChild(root_0, string_literal374_tree);
            }
            dbg.location(172,14);
            TOKEN375=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq1900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN375_tree = (Object)adaptor.create(TOKEN375);
            adaptor.addChild(root_0, TOKEN375_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(172, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nneq");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal376=null;
        Token TOKEN377=null;

        Object string_literal376_tree=null;
        Object TOKEN377_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(173, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:6: ( 'NN-VOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(173,7);
            string_literal376=(Token)match(input,40,FOLLOW_40_in_nnvol1905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal376_tree = (Object)adaptor.create(string_literal376);
            adaptor.addChild(root_0, string_literal376_tree);
            }
            dbg.location(173,16);
            TOKEN377=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol1907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN377_tree = (Object)adaptor.create(TOKEN377);
            adaptor.addChild(root_0, TOKEN377_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(173, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal378=null;
        Token TOKEN379=null;

        Object string_literal378_tree=null;
        Object TOKEN379_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchementity");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(174, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:13: ( 'NN-CHEMENTITY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(174,14);
            string_literal378=(Token)match(input,41,FOLLOW_41_in_nnchementity1912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal378_tree = (Object)adaptor.create(string_literal378);
            adaptor.addChild(root_0, string_literal378_tree);
            }
            dbg.location(174,30);
            TOKEN379=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity1914); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN379_tree = (Object)adaptor.create(TOKEN379);
            adaptor.addChild(root_0, TOKEN379_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(174, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchementity");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal380=null;
        Token TOKEN381=null;

        Object string_literal380_tree=null;
        Object TOKEN381_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(175, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:7: ( 'NN-TEMP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(175,8);
            string_literal380=(Token)match(input,42,FOLLOW_42_in_nntemp1919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal380_tree = (Object)adaptor.create(string_literal380);
            adaptor.addChild(root_0, string_literal380_tree);
            }
            dbg.location(175,18);
            TOKEN381=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp1921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN381_tree = (Object)adaptor.create(TOKEN381);
            adaptor.addChild(root_0, TOKEN381_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(175, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal382=null;
        Token TOKEN383=null;

        Object string_literal382_tree=null;
        Object TOKEN383_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnflash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(176, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:8: ( 'NN-FLASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(176,9);
            string_literal382=(Token)match(input,43,FOLLOW_43_in_nnflash1926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal382_tree = (Object)adaptor.create(string_literal382);
            adaptor.addChild(root_0, string_literal382_tree);
            }
            dbg.location(176,20);
            TOKEN383=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash1928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN383_tree = (Object)adaptor.create(TOKEN383);
            adaptor.addChild(root_0, TOKEN383_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(176, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnflash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal384=null;
        Token TOKEN385=null;

        Object string_literal384_tree=null;
        Object TOKEN385_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngeneral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(177, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:10: ( 'NN-GENERAL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(177,11);
            string_literal384=(Token)match(input,44,FOLLOW_44_in_nngeneral1933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal384_tree = (Object)adaptor.create(string_literal384);
            adaptor.addChild(root_0, string_literal384_tree);
            }
            dbg.location(177,24);
            TOKEN385=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral1935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN385_tree = (Object)adaptor.create(TOKEN385);
            adaptor.addChild(root_0, TOKEN385_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(177, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngeneral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal386=null;
        Token TOKEN387=null;

        Object string_literal386_tree=null;
        Object TOKEN387_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmethod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(178, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:9: ( 'NN-METHOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(178,10);
            string_literal386=(Token)match(input,45,FOLLOW_45_in_nnmethod1940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = (Object)adaptor.create(string_literal386);
            adaptor.addChild(root_0, string_literal386_tree);
            }
            dbg.location(178,22);
            TOKEN387=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod1942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN387_tree = (Object)adaptor.create(TOKEN387);
            adaptor.addChild(root_0, TOKEN387_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(178, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmethod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal388=null;
        Token TOKEN389=null;

        Object string_literal388_tree=null;
        Object TOKEN389_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpressure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(180, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:11: ( 'NN-PRESSURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(180,12);
            string_literal388=(Token)match(input,46,FOLLOW_46_in_nnpressure1948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal388_tree = (Object)adaptor.create(string_literal388);
            adaptor.addChild(root_0, string_literal388_tree);
            }
            dbg.location(180,26);
            TOKEN389=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure1950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN389_tree = (Object)adaptor.create(TOKEN389);
            adaptor.addChild(root_0, TOKEN389_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(180, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpressure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal390=null;
        Token TOKEN391=null;

        Object string_literal390_tree=null;
        Object TOKEN391_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncolumn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(181, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:9: ( 'NN-COLUMN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(181,10);
            string_literal390=(Token)match(input,47,FOLLOW_47_in_nncolumn1955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal390_tree = (Object)adaptor.create(string_literal390);
            adaptor.addChild(root_0, string_literal390_tree);
            }
            dbg.location(181,22);
            TOKEN391=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn1957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN391_tree = (Object)adaptor.create(TOKEN391);
            adaptor.addChild(root_0, TOKEN391_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(181, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncolumn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal392=null;
        Token TOKEN393=null;

        Object string_literal392_tree=null;
        Object TOKEN393_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchromatography");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(182, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(182,18);
            string_literal392=(Token)match(input,48,FOLLOW_48_in_nnchromatography1962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal392_tree = (Object)adaptor.create(string_literal392);
            adaptor.addChild(root_0, string_literal392_tree);
            }
            dbg.location(182,38);
            TOKEN393=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography1964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN393_tree = (Object)adaptor.create(TOKEN393);
            adaptor.addChild(root_0, TOKEN393_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(182, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchromatography");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal394=null;
        Token TOKEN395=null;

        Object string_literal394_tree=null;
        Object TOKEN395_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvacuum");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(183, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:9: ( 'NN-VACUUM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(183,10);
            string_literal394=(Token)match(input,49,FOLLOW_49_in_nnvacuum1969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal394_tree = (Object)adaptor.create(string_literal394);
            adaptor.addChild(root_0, string_literal394_tree);
            }
            dbg.location(183,22);
            TOKEN395=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum1971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN395_tree = (Object)adaptor.create(TOKEN395);
            adaptor.addChild(root_0, TOKEN395_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(183, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvacuum");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal396=null;
        Token TOKEN397=null;

        Object string_literal396_tree=null;
        Object TOKEN397_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncycle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(184, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:8: ( 'NN-CYCLE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(184,9);
            string_literal396=(Token)match(input,50,FOLLOW_50_in_nncycle1976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal396_tree = (Object)adaptor.create(string_literal396);
            adaptor.addChild(root_0, string_literal396_tree);
            }
            dbg.location(184,20);
            TOKEN397=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle1978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN397_tree = (Object)adaptor.create(TOKEN397);
            adaptor.addChild(root_0, TOKEN397_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(184, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncycle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal398=null;
        Token TOKEN399=null;

        Object string_literal398_tree=null;
        Object TOKEN399_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntimes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(185, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:8: ( 'NN-TIMES' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(185,9);
            string_literal398=(Token)match(input,51,FOLLOW_51_in_nntimes1983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal398_tree = (Object)adaptor.create(string_literal398);
            adaptor.addChild(root_0, string_literal398_tree);
            }
            dbg.location(185,20);
            TOKEN399=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes1985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN399_tree = (Object)adaptor.create(TOKEN399);
            adaptor.addChild(root_0, TOKEN399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(185, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntimes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal400=null;
        Token TOKEN401=null;

        Object string_literal400_tree=null;
        Object TOKEN401_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(188, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:8: ( 'OSCAR-CM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(188,9);
            string_literal400=(Token)match(input,52,FOLLOW_52_in_oscarcm1992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal400_tree = (Object)adaptor.create(string_literal400);
            adaptor.addChild(root_0, string_literal400_tree);
            }
            dbg.location(188,20);
            TOKEN401=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm1994); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN401_tree = (Object)adaptor.create(TOKEN401);
            adaptor.addChild(root_0, TOKEN401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(188, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal402=null;
        Token TOKEN403=null;

        Object string_literal402_tree=null;
        Object TOKEN403_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbuse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(191, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:6: ( 'VB-USE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(191,7);
            string_literal402=(Token)match(input,53,FOLLOW_53_in_vbuse2001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal402_tree = (Object)adaptor.create(string_literal402);
            adaptor.addChild(root_0, string_literal402_tree);
            }
            dbg.location(191,16);
            TOKEN403=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN403_tree = (Object)adaptor.create(TOKEN403);
            adaptor.addChild(root_0, TOKEN403_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(191, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbuse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal404=null;
        Token TOKEN405=null;

        Object string_literal404_tree=null;
        Object TOKEN405_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbchange");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(192, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:9: ( 'VB-CHANGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(192,10);
            string_literal404=(Token)match(input,54,FOLLOW_54_in_vbchange2008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal404_tree = (Object)adaptor.create(string_literal404);
            adaptor.addChild(root_0, string_literal404_tree);
            }
            dbg.location(192,22);
            TOKEN405=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN405_tree = (Object)adaptor.create(TOKEN405);
            adaptor.addChild(root_0, TOKEN405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(192, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbchange");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal406=null;
        Token TOKEN407=null;

        Object string_literal406_tree=null;
        Object TOKEN407_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubmerge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(193, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:11: ( 'VB-SUBMERGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(193,12);
            string_literal406=(Token)match(input,55,FOLLOW_55_in_vbsubmerge2015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = (Object)adaptor.create(string_literal406);
            adaptor.addChild(root_0, string_literal406_tree);
            }
            dbg.location(193,26);
            TOKEN407=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN407_tree = (Object)adaptor.create(TOKEN407);
            adaptor.addChild(root_0, TOKEN407_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(193, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubmerge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal408=null;
        Token TOKEN409=null;

        Object string_literal408_tree=null;
        Object TOKEN409_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubject");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(194, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:10: ( 'VB-SUBJECT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(194,11);
            string_literal408=(Token)match(input,56,FOLLOW_56_in_vbsubject2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal408_tree = (Object)adaptor.create(string_literal408);
            adaptor.addChild(root_0, string_literal408_tree);
            }
            dbg.location(194,24);
            TOKEN409=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN409_tree = (Object)adaptor.create(TOKEN409);
            adaptor.addChild(root_0, TOKEN409_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(194, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubject");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal410=null;
        Token TOKEN411=null;

        Object string_literal410_tree=null;
        Object TOKEN411_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(197, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:6: ( 'NN-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(197,7);
            string_literal410=(Token)match(input,57,FOLLOW_57_in_nnadd2031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal410_tree = (Object)adaptor.create(string_literal410);
            adaptor.addChild(root_0, string_literal410_tree);
            }
            dbg.location(197,16);
            TOKEN411=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN411_tree = (Object)adaptor.create(TOKEN411);
            adaptor.addChild(root_0, TOKEN411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(197, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal412=null;
        Token TOKEN413=null;

        Object string_literal412_tree=null;
        Object TOKEN413_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(198, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:10: ( 'NN-MIXTURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(198,11);
            string_literal412=(Token)match(input,58,FOLLOW_58_in_nnmixture2038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = (Object)adaptor.create(string_literal412);
            adaptor.addChild(root_0, string_literal412_tree);
            }
            dbg.location(198,24);
            TOKEN413=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN413_tree = (Object)adaptor.create(TOKEN413);
            adaptor.addChild(root_0, TOKEN413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(198, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal414=null;
        Token TOKEN415=null;

        Object string_literal414_tree=null;
        Object TOKEN415_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(199, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:6: ( 'VB-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(199,7);
            string_literal414=(Token)match(input,59,FOLLOW_59_in_vbadd2045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal414_tree = (Object)adaptor.create(string_literal414);
            adaptor.addChild(root_0, string_literal414_tree);
            }
            dbg.location(199,16);
            TOKEN415=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN415_tree = (Object)adaptor.create(TOKEN415);
            adaptor.addChild(root_0, TOKEN415_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(199, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal416=null;
        Token TOKEN417=null;

        Object string_literal416_tree=null;
        Object TOKEN417_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcharge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(200, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:9: ( 'VB-CHARGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(200,10);
            string_literal416=(Token)match(input,60,FOLLOW_60_in_vbcharge2052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal416_tree = (Object)adaptor.create(string_literal416);
            adaptor.addChild(root_0, string_literal416_tree);
            }
            dbg.location(200,22);
            TOKEN417=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN417_tree = (Object)adaptor.create(TOKEN417);
            adaptor.addChild(root_0, TOKEN417_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(200, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcharge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal418=null;
        Token TOKEN419=null;

        Object string_literal418_tree=null;
        Object TOKEN419_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcontain");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(201, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:10: ( 'VB-CONTAIN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(201,11);
            string_literal418=(Token)match(input,61,FOLLOW_61_in_vbcontain2059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal418_tree = (Object)adaptor.create(string_literal418);
            adaptor.addChild(root_0, string_literal418_tree);
            }
            dbg.location(201,24);
            TOKEN419=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN419_tree = (Object)adaptor.create(TOKEN419);
            adaptor.addChild(root_0, TOKEN419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(201, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcontain");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal420=null;
        Token TOKEN421=null;

        Object string_literal420_tree=null;
        Object TOKEN421_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdrop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(202, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:7: ( 'VB-DROP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(202,8);
            string_literal420=(Token)match(input,62,FOLLOW_62_in_vbdrop2066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal420_tree = (Object)adaptor.create(string_literal420);
            adaptor.addChild(root_0, string_literal420_tree);
            }
            dbg.location(202,18);
            TOKEN421=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop2068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN421_tree = (Object)adaptor.create(TOKEN421);
            adaptor.addChild(root_0, TOKEN421_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(202, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdrop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal422=null;
        Token TOKEN423=null;

        Object string_literal422_tree=null;
        Object TOKEN423_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfill");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(203, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:7: ( 'VB-FILL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(203,8);
            string_literal422=(Token)match(input,63,FOLLOW_63_in_vbfill2073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal422_tree = (Object)adaptor.create(string_literal422);
            adaptor.addChild(root_0, string_literal422_tree);
            }
            dbg.location(203,18);
            TOKEN423=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill2075); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN423_tree = (Object)adaptor.create(TOKEN423);
            adaptor.addChild(root_0, TOKEN423_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(203, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfill");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal424=null;
        Token TOKEN425=null;

        Object string_literal424_tree=null;
        Object TOKEN425_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsuspend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(204, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:10: ( 'VB-SUSPEND' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(204,11);
            string_literal424=(Token)match(input,64,FOLLOW_64_in_vbsuspend2080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal424_tree = (Object)adaptor.create(string_literal424);
            adaptor.addChild(root_0, string_literal424_tree);
            }
            dbg.location(204,24);
            TOKEN425=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend2082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN425_tree = (Object)adaptor.create(TOKEN425);
            adaptor.addChild(root_0, TOKEN425_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(204, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsuspend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal426=null;
        Token TOKEN427=null;

        Object string_literal426_tree=null;
        Object TOKEN427_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbtreat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(205, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:8: ( 'VB-TREAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(205,9);
            string_literal426=(Token)match(input,65,FOLLOW_65_in_vbtreat2087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = (Object)adaptor.create(string_literal426);
            adaptor.addChild(root_0, string_literal426_tree);
            }
            dbg.location(205,20);
            TOKEN427=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat2089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN427_tree = (Object)adaptor.create(TOKEN427);
            adaptor.addChild(root_0, TOKEN427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(205, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbtreat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal428=null;
        Token TOKEN429=null;

        Object string_literal428_tree=null;
        Object TOKEN429_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(208, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:12: ( 'VB-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(208,13);
            string_literal428=(Token)match(input,66,FOLLOW_66_in_vbapparatus2096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal428_tree = (Object)adaptor.create(string_literal428);
            adaptor.addChild(root_0, string_literal428_tree);
            }
            dbg.location(208,28);
            TOKEN429=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus2098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN429_tree = (Object)adaptor.create(TOKEN429);
            adaptor.addChild(root_0, TOKEN429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(208, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal430=null;
        Token TOKEN431=null;

        Object string_literal430_tree=null;
        Object TOKEN431_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(209, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:12: ( 'NN-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(209,13);
            string_literal430=(Token)match(input,67,FOLLOW_67_in_nnapparatus2103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal430_tree = (Object)adaptor.create(string_literal430);
            adaptor.addChild(root_0, string_literal430_tree);
            }
            dbg.location(209,28);
            TOKEN431=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus2105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN431_tree = (Object)adaptor.create(TOKEN431);
            adaptor.addChild(root_0, TOKEN431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(209, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal432=null;
        Token TOKEN433=null;

        Object string_literal432_tree=null;
        Object TOKEN433_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(212, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:14: ( 'VB-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(212,15);
            string_literal432=(Token)match(input,68,FOLLOW_68_in_vbconcentrate2112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal432_tree = (Object)adaptor.create(string_literal432);
            adaptor.addChild(root_0, string_literal432_tree);
            }
            dbg.location(212,32);
            TOKEN433=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate2114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN433_tree = (Object)adaptor.create(TOKEN433);
            adaptor.addChild(root_0, TOKEN433_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(212, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal434=null;
        Token TOKEN435=null;

        Object string_literal434_tree=null;
        Object TOKEN435_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(213, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:14: ( 'NN-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(213,15);
            string_literal434=(Token)match(input,69,FOLLOW_69_in_nnconcentrate2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = (Object)adaptor.create(string_literal434);
            adaptor.addChild(root_0, string_literal434_tree);
            }
            dbg.location(213,32);
            TOKEN435=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate2121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN435_tree = (Object)adaptor.create(TOKEN435);
            adaptor.addChild(root_0, TOKEN435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(213, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal436=null;
        Token TOKEN437=null;

        Object string_literal436_tree=null;
        Object TOKEN437_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcool");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(216, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:7: ( 'VB-COOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(216,8);
            string_literal436=(Token)match(input,70,FOLLOW_70_in_vbcool2128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal436_tree = (Object)adaptor.create(string_literal436);
            adaptor.addChild(root_0, string_literal436_tree);
            }
            dbg.location(216,18);
            TOKEN437=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool2130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN437_tree = (Object)adaptor.create(TOKEN437);
            adaptor.addChild(root_0, TOKEN437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(216, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcool");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal438=null;
        Token TOKEN439=null;

        Object string_literal438_tree=null;
        Object TOKEN439_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdegass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(219, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:9: ( 'VB-DEGASS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(219,10);
            string_literal438=(Token)match(input,71,FOLLOW_71_in_vbdegass2137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = (Object)adaptor.create(string_literal438);
            adaptor.addChild(root_0, string_literal438_tree);
            }
            dbg.location(219,22);
            TOKEN439=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass2139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN439_tree = (Object)adaptor.create(TOKEN439);
            adaptor.addChild(root_0, TOKEN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(219, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdegass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal440=null;
        Token TOKEN441=null;

        Object string_literal440_tree=null;
        Object TOKEN441_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdissolve");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(222, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:11: ( 'VB-DISSOLVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(222,12);
            string_literal440=(Token)match(input,72,FOLLOW_72_in_vbdissolve2146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = (Object)adaptor.create(string_literal440);
            adaptor.addChild(root_0, string_literal440_tree);
            }
            dbg.location(222,26);
            TOKEN441=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve2148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN441_tree = (Object)adaptor.create(TOKEN441);
            adaptor.addChild(root_0, TOKEN441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(222, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdissolve");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal442=null;
        Token TOKEN443=null;

        Object string_literal442_tree=null;
        Object TOKEN443_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(225, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:6: ( 'VB-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(225,7);
            string_literal442=(Token)match(input,73,FOLLOW_73_in_vbdry2155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = (Object)adaptor.create(string_literal442);
            adaptor.addChild(root_0, string_literal442_tree);
            }
            dbg.location(225,16);
            TOKEN443=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry2157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN443_tree = (Object)adaptor.create(TOKEN443);
            adaptor.addChild(root_0, TOKEN443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(225, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal444=null;
        Token TOKEN445=null;

        Object string_literal444_tree=null;
        Object TOKEN445_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nndry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(226, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:6: ( 'NN-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(226,7);
            string_literal444=(Token)match(input,74,FOLLOW_74_in_nndry2162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (Object)adaptor.create(string_literal444);
            adaptor.addChild(root_0, string_literal444_tree);
            }
            dbg.location(226,16);
            TOKEN445=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry2164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN445_tree = (Object)adaptor.create(TOKEN445);
            adaptor.addChild(root_0, TOKEN445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(226, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nndry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal446=null;
        Token TOKEN447=null;

        Object string_literal446_tree=null;
        Object TOKEN447_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(229, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:10: ( 'VB-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(229,11);
            string_literal446=(Token)match(input,75,FOLLOW_75_in_vbextract2171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (Object)adaptor.create(string_literal446);
            adaptor.addChild(root_0, string_literal446_tree);
            }
            dbg.location(229,24);
            TOKEN447=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract2173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN447_tree = (Object)adaptor.create(TOKEN447);
            adaptor.addChild(root_0, TOKEN447_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(229, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal448=null;
        Token TOKEN449=null;

        Object string_literal448_tree=null;
        Object TOKEN449_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(230, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:10: ( 'NN-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(230,11);
            string_literal448=(Token)match(input,76,FOLLOW_76_in_nnextract2178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (Object)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            dbg.location(230,24);
            TOKEN449=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract2180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN449_tree = (Object)adaptor.create(TOKEN449);
            adaptor.addChild(root_0, TOKEN449_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(230, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal450=null;
        Token TOKEN451=null;

        Object string_literal450_tree=null;
        Object TOKEN451_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:9: ( 'VB-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(233,10);
            string_literal450=(Token)match(input,77,FOLLOW_77_in_vbfilter2187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = (Object)adaptor.create(string_literal450);
            adaptor.addChild(root_0, string_literal450_tree);
            }
            dbg.location(233,22);
            TOKEN451=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter2189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN451_tree = (Object)adaptor.create(TOKEN451);
            adaptor.addChild(root_0, TOKEN451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(233, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal452=null;
        Token TOKEN453=null;

        Object string_literal452_tree=null;
        Object TOKEN453_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(234, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: ( 'NN-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(234,10);
            string_literal452=(Token)match(input,78,FOLLOW_78_in_nnfilter2194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = (Object)adaptor.create(string_literal452);
            adaptor.addChild(root_0, string_literal452_tree);
            }
            dbg.location(234,22);
            TOKEN453=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN453_tree = (Object)adaptor.create(TOKEN453);
            adaptor.addChild(root_0, TOKEN453_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(234, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal454=null;
        Token TOKEN455=null;

        Object string_literal454_tree=null;
        Object TOKEN455_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbheat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(237, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:7: ( 'VB-HEAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(237,8);
            string_literal454=(Token)match(input,79,FOLLOW_79_in_vbheat2203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal454_tree = (Object)adaptor.create(string_literal454);
            adaptor.addChild(root_0, string_literal454_tree);
            }
            dbg.location(237,18);
            TOKEN455=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN455_tree = (Object)adaptor.create(TOKEN455);
            adaptor.addChild(root_0, TOKEN455_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(237, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbheat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal456=null;
        Token TOKEN457=null;

        Object string_literal456_tree=null;
        Object TOKEN457_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbincrease");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(238, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:11: ( 'VB-INCREASE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(238,12);
            string_literal456=(Token)match(input,80,FOLLOW_80_in_vbincrease2210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (Object)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            dbg.location(238,26);
            TOKEN457=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN457_tree = (Object)adaptor.create(TOKEN457);
            adaptor.addChild(root_0, TOKEN457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(238, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbincrease");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal458=null;
        Token TOKEN459=null;

        Object string_literal458_tree=null;
        Object TOKEN459_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpartition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(241, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:12: ( 'VB-PARTITION' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(241,13);
            string_literal458=(Token)match(input,81,FOLLOW_81_in_vbpartition2219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (Object)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            dbg.location(241,28);
            TOKEN459=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN459_tree = (Object)adaptor.create(TOKEN459);
            adaptor.addChild(root_0, TOKEN459_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(241, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpartition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal460=null;
        Token TOKEN461=null;

        Object string_literal460_tree=null;
        Object TOKEN461_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(244, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:14: ( 'VB-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(244,15);
            string_literal460=(Token)match(input,82,FOLLOW_82_in_vbprecipitate2228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (Object)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            dbg.location(244,32);
            TOKEN461=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN461_tree = (Object)adaptor.create(TOKEN461);
            adaptor.addChild(root_0, TOKEN461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(244, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal462=null;
        Token TOKEN463=null;

        Object string_literal462_tree=null;
        Object TOKEN463_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(245, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:14: ( 'NN-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(245,15);
            string_literal462=(Token)match(input,83,FOLLOW_83_in_nnprecipitate2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = (Object)adaptor.create(string_literal462);
            adaptor.addChild(root_0, string_literal462_tree);
            }
            dbg.location(245,32);
            TOKEN463=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN463_tree = (Object)adaptor.create(TOKEN463);
            adaptor.addChild(root_0, TOKEN463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(245, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal464=null;
        Token TOKEN465=null;

        Object string_literal464_tree=null;
        Object TOKEN465_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(248, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:9: ( 'VB-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(248,10);
            string_literal464=(Token)match(input,84,FOLLOW_84_in_vbpurify2244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (Object)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            dbg.location(248,22);
            TOKEN465=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN465_tree = (Object)adaptor.create(TOKEN465);
            adaptor.addChild(root_0, TOKEN465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(248, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal466=null;
        Token TOKEN467=null;

        Object string_literal466_tree=null;
        Object TOKEN467_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(249, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:9: ( 'NN-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(249,10);
            string_literal466=(Token)match(input,85,FOLLOW_85_in_nnpurify2251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = (Object)adaptor.create(string_literal466);
            adaptor.addChild(root_0, string_literal466_tree);
            }
            dbg.location(249,22);
            TOKEN467=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN467_tree = (Object)adaptor.create(TOKEN467);
            adaptor.addChild(root_0, TOKEN467_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(249, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal468=null;
        Token TOKEN469=null;

        Object string_literal468_tree=null;
        Object TOKEN469_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbquench");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(252, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:9: ( 'VB-QUENCH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(252,10);
            string_literal468=(Token)match(input,86,FOLLOW_86_in_vbquench2260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (Object)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            dbg.location(252,22);
            TOKEN469=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN469_tree = (Object)adaptor.create(TOKEN469);
            adaptor.addChild(root_0, TOKEN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(252, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbquench");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal470=null;
        Token TOKEN471=null;

        Object string_literal470_tree=null;
        Object TOKEN471_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbrecover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(255, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:10: ( 'VB-RECOVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(255,11);
            string_literal470=(Token)match(input,87,FOLLOW_87_in_vbrecover2269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = (Object)adaptor.create(string_literal470);
            adaptor.addChild(root_0, string_literal470_tree);
            }
            dbg.location(255,24);
            TOKEN471=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN471_tree = (Object)adaptor.create(TOKEN471);
            adaptor.addChild(root_0, TOKEN471_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(255, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbrecover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal472=null;
        Token TOKEN473=null;

        Object string_literal472_tree=null;
        Object TOKEN473_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(258, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:9: ( 'VB-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(258,10);
            string_literal472=(Token)match(input,88,FOLLOW_88_in_vbremove2278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = (Object)adaptor.create(string_literal472);
            adaptor.addChild(root_0, string_literal472_tree);
            }
            dbg.location(258,22);
            TOKEN473=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN473_tree = (Object)adaptor.create(TOKEN473);
            adaptor.addChild(root_0, TOKEN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(258, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal474=null;
        Token TOKEN475=null;

        Object string_literal474_tree=null;
        Object TOKEN475_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(259, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:9: ( 'NN-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(259,10);
            string_literal474=(Token)match(input,89,FOLLOW_89_in_nnremove2285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (Object)adaptor.create(string_literal474);
            adaptor.addChild(root_0, string_literal474_tree);
            }
            dbg.location(259,22);
            TOKEN475=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN475_tree = (Object)adaptor.create(TOKEN475);
            adaptor.addChild(root_0, TOKEN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(259, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal476=null;
        Token TOKEN477=null;

        Object string_literal476_tree=null;
        Object TOKEN477_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbstir");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(262, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:7: ( 'VB-STIR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(262,8);
            string_literal476=(Token)match(input,90,FOLLOW_90_in_vbstir2294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal476_tree = (Object)adaptor.create(string_literal476);
            adaptor.addChild(root_0, string_literal476_tree);
            }
            dbg.location(262,18);
            TOKEN477=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN477_tree = (Object)adaptor.create(TOKEN477);
            adaptor.addChild(root_0, TOKEN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(262, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbstir");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal478=null;
        Token TOKEN479=null;

        Object string_literal478_tree=null;
        Object TOKEN479_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(265, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:13: ( 'VB-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(265,14);
            string_literal478=(Token)match(input,91,FOLLOW_91_in_vbsynthesize2303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (Object)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            dbg.location(265,30);
            TOKEN479=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN479_tree = (Object)adaptor.create(TOKEN479);
            adaptor.addChild(root_0, TOKEN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(265, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal480=null;
        Token TOKEN481=null;

        Object string_literal480_tree=null;
        Object TOKEN481_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(266, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:13: ( 'NN-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(266,14);
            string_literal480=(Token)match(input,92,FOLLOW_92_in_nnsynthesize2310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (Object)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            dbg.location(266,30);
            TOKEN481=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN481_tree = (Object)adaptor.create(TOKEN481);
            adaptor.addChild(root_0, TOKEN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(266, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal482=null;
        Token TOKEN483=null;

        Object string_literal482_tree=null;
        Object TOKEN483_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwait");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(269, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:7: ( 'VB-WAIT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(269,8);
            string_literal482=(Token)match(input,93,FOLLOW_93_in_vbwait2319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (Object)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            dbg.location(269,18);
            TOKEN483=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN483_tree = (Object)adaptor.create(TOKEN483);
            adaptor.addChild(root_0, TOKEN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(269, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwait");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal484=null;
        Token TOKEN485=null;

        Object string_literal484_tree=null;
        Object TOKEN485_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(272, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:7: ( 'VB-WASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(272,8);
            string_literal484=(Token)match(input,94,FOLLOW_94_in_vbwash2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (Object)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            dbg.location(272,18);
            TOKEN485=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN485_tree = (Object)adaptor.create(TOKEN485);
            adaptor.addChild(root_0, TOKEN485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(272, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal486=null;
        Token TOKEN487=null;

        Object string_literal486_tree=null;
        Object TOKEN487_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbyield");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(275, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:8: ( 'VB-YIELD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(275,9);
            string_literal486=(Token)match(input,95,FOLLOW_95_in_vbyield2337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = (Object)adaptor.create(string_literal486);
            adaptor.addChild(root_0, string_literal486_tree);
            }
            dbg.location(275,20);
            TOKEN487=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN487_tree = (Object)adaptor.create(TOKEN487);
            adaptor.addChild(root_0, TOKEN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(275, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbyield");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal488=null;
        Token TOKEN489=null;

        Object string_literal488_tree=null;
        Object TOKEN489_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "colon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(278, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:6: ( 'COLON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(278,7);
            string_literal488=(Token)match(input,96,FOLLOW_96_in_colon2346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal488_tree = (Object)adaptor.create(string_literal488);
            adaptor.addChild(root_0, string_literal488_tree);
            }
            dbg.location(278,15);
            TOKEN489=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN489_tree = (Object)adaptor.create(TOKEN489);
            adaptor.addChild(root_0, TOKEN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(278, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "colon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal490=null;
        Token TOKEN491=null;

        Object string_literal490_tree=null;
        Object TOKEN491_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "comma");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(279, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:6: ( 'COMMA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(279,7);
            string_literal490=(Token)match(input,97,FOLLOW_97_in_comma2353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = (Object)adaptor.create(string_literal490);
            adaptor.addChild(root_0, string_literal490_tree);
            }
            dbg.location(279,15);
            TOKEN491=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN491_tree = (Object)adaptor.create(TOKEN491);
            adaptor.addChild(root_0, TOKEN491_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(279, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comma");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal492=null;
        Token TOKEN493=null;

        Object string_literal492_tree=null;
        Object TOKEN493_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "apost");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(280, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:6: ( 'APOST' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(280,7);
            string_literal492=(Token)match(input,98,FOLLOW_98_in_apost2360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal492_tree = (Object)adaptor.create(string_literal492);
            adaptor.addChild(root_0, string_literal492_tree);
            }
            dbg.location(280,15);
            TOKEN493=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN493_tree = (Object)adaptor.create(TOKEN493);
            adaptor.addChild(root_0, TOKEN493_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(280, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apost");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal494=null;
        Token TOKEN495=null;

        Object string_literal494_tree=null;
        Object TOKEN495_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "neg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(281, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:4: ( 'NEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(281,5);
            string_literal494=(Token)match(input,99,FOLLOW_99_in_neg2367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal494_tree = (Object)adaptor.create(string_literal494);
            adaptor.addChild(root_0, string_literal494_tree);
            }
            dbg.location(281,11);
            TOKEN495=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN495_tree = (Object)adaptor.create(TOKEN495);
            adaptor.addChild(root_0, TOKEN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(281, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "neg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;
        Token TOKEN497=null;

        Object string_literal496_tree=null;
        Object TOKEN497_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(282, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:5: ( 'DASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(282,6);
            string_literal496=(Token)match(input,100,FOLLOW_100_in_dash2374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (Object)adaptor.create(string_literal496);
            adaptor.addChild(root_0, string_literal496_tree);
            }
            dbg.location(282,13);
            TOKEN497=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN497_tree = (Object)adaptor.create(TOKEN497);
            adaptor.addChild(root_0, TOKEN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(282, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal498=null;
        Token TOKEN499=null;

        Object string_literal498_tree=null;
        Object TOKEN499_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "stop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(283, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:5: ( 'STOP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(283,6);
            string_literal498=(Token)match(input,101,FOLLOW_101_in_stop2381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal498_tree = (Object)adaptor.create(string_literal498);
            adaptor.addChild(root_0, string_literal498_tree);
            }
            dbg.location(283,13);
            TOKEN499=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN499_tree = (Object)adaptor.create(TOKEN499);
            adaptor.addChild(root_0, TOKEN499_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(283, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "stop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal500=null;
        Token TOKEN501=null;

        Object string_literal500_tree=null;
        Object TOKEN501_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpercent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(284, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:10: ( 'NN-PERCENT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(284,11);
            string_literal500=(Token)match(input,102,FOLLOW_102_in_nnpercent2388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (Object)adaptor.create(string_literal500);
            adaptor.addChild(root_0, string_literal500_tree);
            }
            dbg.location(284,24);
            TOKEN501=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2390); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN501_tree = (Object)adaptor.create(TOKEN501);
            adaptor.addChild(root_0, TOKEN501_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(284, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpercent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal502=null;
        Token TOKEN503=null;

        Object string_literal502_tree=null;
        Object TOKEN503_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(285, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:5: ( 'LSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(285,6);
            string_literal502=(Token)match(input,103,FOLLOW_103_in_lsqb2395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = (Object)adaptor.create(string_literal502);
            adaptor.addChild(root_0, string_literal502_tree);
            }
            dbg.location(285,13);
            TOKEN503=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN503_tree = (Object)adaptor.create(TOKEN503);
            adaptor.addChild(root_0, TOKEN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(285, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal504=null;
        Token TOKEN505=null;

        Object string_literal504_tree=null;
        Object TOKEN505_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(286, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:5: ( 'RSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(286,6);
            string_literal504=(Token)match(input,104,FOLLOW_104_in_rsqb2402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = (Object)adaptor.create(string_literal504);
            adaptor.addChild(root_0, string_literal504_tree);
            }
            dbg.location(286,13);
            TOKEN505=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN505_tree = (Object)adaptor.create(TOKEN505);
            adaptor.addChild(root_0, TOKEN505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(286, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal506=null;
        Token TOKEN507=null;

        Object string_literal506_tree=null;
        Object TOKEN507_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(287, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:4: ( '-LRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(287,5);
            string_literal506=(Token)match(input,105,FOLLOW_105_in_lrb2409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal506_tree = (Object)adaptor.create(string_literal506);
            adaptor.addChild(root_0, string_literal506_tree);
            }
            dbg.location(287,13);
            TOKEN507=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN507_tree = (Object)adaptor.create(TOKEN507);
            adaptor.addChild(root_0, TOKEN507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(287, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal508=null;
        Token TOKEN509=null;

        Object string_literal508_tree=null;
        Object TOKEN509_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(288, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:4: ( '-RRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(288,5);
            string_literal508=(Token)match(input,106,FOLLOW_106_in_rrb2416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal508_tree = (Object)adaptor.create(string_literal508);
            adaptor.addChild(root_0, string_literal508_tree);
            }
            dbg.location(288,13);
            TOKEN509=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN509_tree = (Object)adaptor.create(TOKEN509);
            adaptor.addChild(root_0, TOKEN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(288, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal510=null;
        Token TOKEN511=null;

        Object string_literal510_tree=null;
        Object TOKEN511_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(293, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:4: ( 'ABL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(293,5);
            string_literal510=(Token)match(input,107,FOLLOW_107_in_abl2427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal510_tree = (Object)adaptor.create(string_literal510);
            adaptor.addChild(root_0, string_literal510_tree);
            }
            dbg.location(293,11);
            TOKEN511=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN511_tree = (Object)adaptor.create(TOKEN511);
            adaptor.addChild(root_0, TOKEN511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(293, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal512=null;
        Token TOKEN513=null;

        Object string_literal512_tree=null;
        Object TOKEN513_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(296, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:4: ( 'ABN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(296,5);
            string_literal512=(Token)match(input,108,FOLLOW_108_in_abn2436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal512_tree = (Object)adaptor.create(string_literal512);
            adaptor.addChild(root_0, string_literal512_tree);
            }
            dbg.location(296,11);
            TOKEN513=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN513_tree = (Object)adaptor.create(TOKEN513);
            adaptor.addChild(root_0, TOKEN513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(296, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal514=null;
        Token TOKEN515=null;

        Object string_literal514_tree=null;
        Object TOKEN515_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(299, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:4: ( 'ABX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(299,5);
            string_literal514=(Token)match(input,109,FOLLOW_109_in_abx2445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal514_tree = (Object)adaptor.create(string_literal514);
            adaptor.addChild(root_0, string_literal514_tree);
            }
            dbg.location(299,11);
            TOKEN515=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN515_tree = (Object)adaptor.create(TOKEN515);
            adaptor.addChild(root_0, TOKEN515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(299, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal516=null;
        Token TOKEN517=null;

        Object string_literal516_tree=null;
        Object TOKEN517_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ap");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(302, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:3: ( 'AP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(302,4);
            string_literal516=(Token)match(input,110,FOLLOW_110_in_ap2454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal516_tree = (Object)adaptor.create(string_literal516);
            adaptor.addChild(root_0, string_literal516_tree);
            }
            dbg.location(302,9);
            TOKEN517=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN517_tree = (Object)adaptor.create(TOKEN517);
            adaptor.addChild(root_0, TOKEN517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(302, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ap");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal518=null;
        Token TOKEN519=null;

        Object string_literal518_tree=null;
        Object TOKEN519_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "at");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(305, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:3: ( 'AT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(305,4);
            string_literal518=(Token)match(input,111,FOLLOW_111_in_at2463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (Object)adaptor.create(string_literal518);
            adaptor.addChild(root_0, string_literal518_tree);
            }
            dbg.location(305,9);
            TOKEN519=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN519_tree = (Object)adaptor.create(TOKEN519);
            adaptor.addChild(root_0, TOKEN519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(305, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal520=null;
        Token TOKEN521=null;

        Object string_literal520_tree=null;
        Object TOKEN521_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "be");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(308, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:3: ( 'BE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(308,4);
            string_literal520=(Token)match(input,112,FOLLOW_112_in_be2472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = (Object)adaptor.create(string_literal520);
            adaptor.addChild(root_0, string_literal520_tree);
            }
            dbg.location(308,9);
            TOKEN521=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN521_tree = (Object)adaptor.create(TOKEN521);
            adaptor.addChild(root_0, TOKEN521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(308, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "be");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal522=null;
        Token TOKEN523=null;

        Object string_literal522_tree=null;
        Object TOKEN523_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bed");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(311, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:4: ( 'BED' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(311,5);
            string_literal522=(Token)match(input,113,FOLLOW_113_in_bed2481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (Object)adaptor.create(string_literal522);
            adaptor.addChild(root_0, string_literal522_tree);
            }
            dbg.location(311,11);
            TOKEN523=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN523_tree = (Object)adaptor.create(TOKEN523);
            adaptor.addChild(root_0, TOKEN523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(311, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bed");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal524=null;
        Token TOKEN525=null;

        Object string_literal524_tree=null;
        Object TOKEN525_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bedz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(314, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:5: ( 'BEDZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(314,6);
            string_literal524=(Token)match(input,114,FOLLOW_114_in_bedz2490); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal524_tree = (Object)adaptor.create(string_literal524);
            adaptor.addChild(root_0, string_literal524_tree);
            }
            dbg.location(314,13);
            TOKEN525=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN525_tree = (Object)adaptor.create(TOKEN525);
            adaptor.addChild(root_0, TOKEN525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(314, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bedz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal526=null;
        Token TOKEN527=null;

        Object string_literal526_tree=null;
        Object TOKEN527_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "beg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(317, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:4: ( 'BEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(317,5);
            string_literal526=(Token)match(input,115,FOLLOW_115_in_beg2499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal526_tree = (Object)adaptor.create(string_literal526);
            adaptor.addChild(root_0, string_literal526_tree);
            }
            dbg.location(317,11);
            TOKEN527=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN527_tree = (Object)adaptor.create(TOKEN527);
            adaptor.addChild(root_0, TOKEN527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(317, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "beg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal528=null;
        Token TOKEN529=null;

        Object string_literal528_tree=null;
        Object TOKEN529_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(320, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:4: ( 'BEM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(320,5);
            string_literal528=(Token)match(input,116,FOLLOW_116_in_bem2508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = (Object)adaptor.create(string_literal528);
            adaptor.addChild(root_0, string_literal528_tree);
            }
            dbg.location(320,11);
            TOKEN529=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN529_tree = (Object)adaptor.create(TOKEN529);
            adaptor.addChild(root_0, TOKEN529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(320, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal530=null;
        Token TOKEN531=null;

        Object string_literal530_tree=null;
        Object TOKEN531_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ben");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(323, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:4: ( 'BEN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(323,5);
            string_literal530=(Token)match(input,117,FOLLOW_117_in_ben2517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal530_tree = (Object)adaptor.create(string_literal530);
            adaptor.addChild(root_0, string_literal530_tree);
            }
            dbg.location(323,11);
            TOKEN531=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN531_tree = (Object)adaptor.create(TOKEN531);
            adaptor.addChild(root_0, TOKEN531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(323, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ben");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ber");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(326, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:4: ( 'BER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(326,5);
            string_literal532=(Token)match(input,118,FOLLOW_118_in_ber2526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            dbg.location(326,11);
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(326, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ber");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bez");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(329, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:4: ( 'BEZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(329,5);
            string_literal534=(Token)match(input,119,FOLLOW_119_in_bez2535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            dbg.location(329,11);
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(329, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bez");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(332, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:3: ( 'CC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(332,4);
            string_literal536=(Token)match(input,120,FOLLOW_120_in_cc2544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            dbg.location(332,9);
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(332, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(335, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:3: ( 'CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(335,4);
            string_literal538=(Token)match(input,121,FOLLOW_121_in_cd2553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            dbg.location(335,9);
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(335, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(338, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:3: ( 'CS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(338,4);
            string_literal540=(Token)match(input,122,FOLLOW_122_in_cs2562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            dbg.location(338,9);
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(338, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dotok");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(341, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:7: ( 'DO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(341,8);
            string_literal542=(Token)match(input,123,FOLLOW_123_in_dotok2572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            dbg.location(341,13);
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(341, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dotok");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:4: ( 'DOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(344,5);
            string_literal544=(Token)match(input,124,FOLLOW_124_in_dod2581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            dbg.location(344,11);
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(344, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "doz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(347, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:4: ( 'DOZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(347,5);
            string_literal546=(Token)match(input,125,FOLLOW_125_in_doz2590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            dbg.location(347,11);
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(347, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "doz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:3: ( 'DT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(350,4);
            string_literal548=(Token)match(input,126,FOLLOW_126_in_dt2599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            dbg.location(350,9);
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt2601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(350, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dti");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(353, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:4: ( 'DTI' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(353,5);
            string_literal550=(Token)match(input,127,FOLLOW_127_in_dti2608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            dbg.location(353,11);
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(353, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dti");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dts");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:4: ( 'DTS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(356,5);
            string_literal552=(Token)match(input,128,FOLLOW_128_in_dts2617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            dbg.location(356,11);
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts2619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(356, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dts");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dtx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(359, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:4: ( 'DTX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(359,5);
            string_literal554=(Token)match(input,129,FOLLOW_129_in_dtx2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            dbg.location(359,11);
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx2628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(359, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dtx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ex");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(362, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:3: ( 'EX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(362,4);
            string_literal556=(Token)match(input,130,FOLLOW_130_in_ex2635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            dbg.location(362,9);
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex2637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(362, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ex");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fw");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(365, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:3: ( 'FW' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(365,4);
            string_literal558=(Token)match(input,131,FOLLOW_131_in_fw2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            dbg.location(365,9);
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw2646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(365, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fw");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fwin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:5: ( 'FW-IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(368,6);
            string_literal560=(Token)match(input,132,FOLLOW_132_in_fwin2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            dbg.location(368,14);
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin2655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(368, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fwin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(371, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:3: ( 'HV' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(371,4);
            string_literal562=(Token)match(input,133,FOLLOW_133_in_hv2662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            dbg.location(371,9);
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv2664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(371, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(374, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:4: ( 'HVD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(374,5);
            string_literal564=(Token)match(input,134,FOLLOW_134_in_hvd2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            dbg.location(374,11);
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd2673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(374, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(377, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:4: ( 'HVG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(377,5);
            string_literal566=(Token)match(input,135,FOLLOW_135_in_hvg2680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            dbg.location(377,11);
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(377, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:4: ( 'HVN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(380,5);
            string_literal568=(Token)match(input,136,FOLLOW_136_in_hvn2689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            dbg.location(380,11);
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn2691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(380, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "in");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(383, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:3: ( 'IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(383,4);
            string_literal570=(Token)match(input,137,FOLLOW_137_in_in2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            dbg.location(383,9);
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(383, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "in");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(386, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:3: ( 'JJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(386,4);
            string_literal572=(Token)match(input,138,FOLLOW_138_in_jj2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            dbg.location(386,9);
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj2709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(386, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(389, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:4: ( 'JJR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(389,5);
            string_literal574=(Token)match(input,139,FOLLOW_139_in_jjr2716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            dbg.location(389,11);
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr2718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(389, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(392, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:4: ( 'JJS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(392,5);
            string_literal576=(Token)match(input,140,FOLLOW_140_in_jjs2725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            dbg.location(392,11);
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs2727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(392, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(395, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:4: ( 'JJT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(395,5);
            string_literal578=(Token)match(input,141,FOLLOW_141_in_jjt2734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            dbg.location(395,11);
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt2736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(395, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "md");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(398, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:3: ( 'MD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(398,4);
            string_literal580=(Token)match(input,142,FOLLOW_142_in_md2743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            dbg.location(398,9);
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md2745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(398, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "md");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(401, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:3: ( 'NC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(401,4);
            string_literal582=(Token)match(input,143,FOLLOW_143_in_nc2752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            dbg.location(401,9);
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc2754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(401, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(404, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:3: ( 'NN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:404:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(404,4);
            string_literal584=(Token)match(input,144,FOLLOW_144_in_nn2761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            dbg.location(404,9);
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn2763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(404, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(407, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:8: ( 'NN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:407:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(407,9);
            string_literal586=(Token)match(input,145,FOLLOW_145_in_nn_poss2770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            dbg.location(407,15);
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss2772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(407, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(410, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:4: ( 'NNS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:410:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(410,5);
            string_literal588=(Token)match(input,146,FOLLOW_146_in_nns2779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            dbg.location(410,11);
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(410, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(413, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:9: ( 'NNS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:413:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(413,10);
            string_literal590=(Token)match(input,147,FOLLOW_147_in_nns_poss2788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            dbg.location(413,17);
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss2790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(413, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(416, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:3: ( 'NP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:416:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(416,4);
            string_literal592=(Token)match(input,148,FOLLOW_148_in_np2797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            dbg.location(416,9);
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np2799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(416, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(420, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:4: ( 'NNP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(420,5);
            string_literal594=(Token)match(input,149,FOLLOW_149_in_nnp2807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            dbg.location(420,11);
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp2809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(420, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(424, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:8: ( 'NP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(424,9);
            string_literal596=(Token)match(input,150,FOLLOW_150_in_np_poss2817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            dbg.location(424,15);
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss2819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(424, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(427, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:4: ( 'NPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(427,5);
            string_literal598=(Token)match(input,151,FOLLOW_151_in_nps2826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            dbg.location(427,11);
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps2828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(427, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(430, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:9: ( 'NPS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(430,10);
            string_literal600=(Token)match(input,152,FOLLOW_152_in_nps_poss2835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            dbg.location(430,17);
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss2837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(430, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(433, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:3: ( 'NR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(433,4);
            string_literal602=(Token)match(input,153,FOLLOW_153_in_nr2844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            dbg.location(433,9);
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(433, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "od");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(436, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:3: ( 'OD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(436,4);
            string_literal604=(Token)match(input,154,FOLLOW_154_in_od2853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            dbg.location(436,9);
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od2855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(436, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "od");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(439, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:3: ( 'PN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(439,4);
            string_literal606=(Token)match(input,155,FOLLOW_155_in_pn2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            dbg.location(439,9);
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn2864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(439, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(442, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:8: ( 'PN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(442,9);
            string_literal608=(Token)match(input,156,FOLLOW_156_in_pn_poss2871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            dbg.location(442,15);
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss2873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(442, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(445, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:8: ( 'PP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(445,9);
            string_literal610=(Token)match(input,157,FOLLOW_157_in_pp_poss2880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            dbg.location(445,15);
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss2882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(445, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(448, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:13: ( 'PP$$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(448,14);
            string_literal612=(Token)match(input,158,FOLLOW_158_in_pp_poss_poss2889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            dbg.location(448,21);
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss2891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(448, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(451, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: ( 'PPL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(451,5);
            string_literal614=(Token)match(input,159,FOLLOW_159_in_ppl2898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            dbg.location(451,11);
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl2900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(451, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppls");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(454, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:5: ( 'PPLS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(454,6);
            string_literal616=(Token)match(input,160,FOLLOW_160_in_ppls2907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            dbg.location(454,13);
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls2909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(454, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppls");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "prp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(456, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:5: ( 'PRP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(456,7);
            string_literal618=(Token)match(input,161,FOLLOW_161_in_prp2917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            dbg.location(456,14);
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(456, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(459, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:4: ( 'PPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(459,5);
            string_literal620=(Token)match(input,162,FOLLOW_162_in_ppo2927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            dbg.location(459,11);
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo2929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(459, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(462, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:4: ( 'PPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(462,5);
            string_literal622=(Token)match(input,163,FOLLOW_163_in_pps2936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            dbg.location(462,11);
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps2938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(462, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(465, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:5: ( 'PPSS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(465,6);
            string_literal624=(Token)match(input,164,FOLLOW_164_in_ppss2945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            dbg.location(465,13);
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss2947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(465, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(468, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:3: ( 'QL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(468,4);
            string_literal626=(Token)match(input,165,FOLLOW_165_in_ql2954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            dbg.location(468,9);
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql2956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(468, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "qlp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(471, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:4: ( 'QLP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(471,5);
            string_literal628=(Token)match(input,166,FOLLOW_166_in_qlp2963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            dbg.location(471,11);
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp2965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(471, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qlp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(474, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:3: ( 'RB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(474,4);
            string_literal630=(Token)match(input,167,FOLLOW_167_in_rb2972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            dbg.location(474,9);
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb2974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(474, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:4: ( 'RBR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(477,5);
            string_literal632=(Token)match(input,168,FOLLOW_168_in_rbr2981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            dbg.location(477,11);
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr2983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(477, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbconj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(480, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:8: ( 'RB-CONJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(480,10);
            string_literal634=(Token)match(input,169,FOLLOW_169_in_rbconj2992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            dbg.location(480,21);
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(481, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbconj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(483, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:4: ( 'RBT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(483,5);
            string_literal636=(Token)match(input,170,FOLLOW_170_in_rbt3003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            dbg.location(483,11);
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(483, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:4: ( 'RBS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(486,5);
            string_literal638=(Token)match(input,171,FOLLOW_171_in_rbs3012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            dbg.location(486,11);
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(486, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(490, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:3: ( 'RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(490,4);
            string_literal640=(Token)match(input,172,FOLLOW_172_in_rn3022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            dbg.location(490,9);
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(490, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(493, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:3: ( 'RP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(493,4);
            string_literal642=(Token)match(input,173,FOLLOW_173_in_rp3031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            dbg.location(493,9);
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(493, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:5: ( 'SYM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(496,7);
            string_literal644=(Token)match(input,174,FOLLOW_174_in_sym3042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            dbg.location(496,13);
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym3044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(496, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "to");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(499, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:3: ( 'TO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(499,4);
            string_literal646=(Token)match(input,175,FOLLOW_175_in_to3051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            dbg.location(499,9);
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to3053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(499, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "to");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "uh");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(502, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:3: ( 'UH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(502,4);
            string_literal648=(Token)match(input,176,FOLLOW_176_in_uh3060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            dbg.location(502,9);
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh3062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(502, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "uh");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(505, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:3: ( 'VB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(505,4);
            string_literal650=(Token)match(input,177,FOLLOW_177_in_vb3069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            dbg.location(505,9);
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb3071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(505, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(507, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:5: ( 'VBP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(507,7);
            string_literal652=(Token)match(input,178,FOLLOW_178_in_vbp3079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            dbg.location(507,13);
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp3081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(508, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(511, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:4: ( 'VBD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(511,5);
            string_literal654=(Token)match(input,179,FOLLOW_179_in_vbd3090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            dbg.location(511,11);
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd3092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(511, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:4: ( 'VBG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(514,5);
            string_literal656=(Token)match(input,180,FOLLOW_180_in_vbg3099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            dbg.location(514,11);
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg3101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(514, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(517, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:4: ( 'VBN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(517,5);
            string_literal658=(Token)match(input,181,FOLLOW_181_in_vbn3108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            dbg.location(517,11);
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn3110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(517, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(520, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:4: ( 'VBZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(520,5);
            string_literal660=(Token)match(input,182,FOLLOW_182_in_vbz3117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            dbg.location(520,11);
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz3119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(520, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wdt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(523, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:4: ( 'WDT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(523,5);
            string_literal662=(Token)match(input,183,FOLLOW_183_in_wdt3126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            dbg.location(523,11);
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt3128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(523, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wdt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(526, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:8: ( 'WP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(526,9);
            string_literal664=(Token)match(input,184,FOLLOW_184_in_wp_poss3135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            dbg.location(526,15);
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss3137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(526, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wpo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(530, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:4: ( 'WPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(530,5);
            string_literal666=(Token)match(input,185,FOLLOW_185_in_wpo3145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            dbg.location(530,11);
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo3147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(530, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wpo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(533, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:4: ( 'WPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(533,5);
            string_literal668=(Token)match(input,186,FOLLOW_186_in_wps3154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            dbg.location(533,11);
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps3156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(533, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(537, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:4: ( 'WQL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(537,5);
            string_literal670=(Token)match(input,187,FOLLOW_187_in_wql3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            dbg.location(537,11);
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql3166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(537, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(540, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:4: ( 'WRB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(540,5);
            string_literal672=(Token)match(input,188,FOLLOW_188_in_wrb3173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            dbg.location(540,11);
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb3175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(540, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pdt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(542, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:6: ( 'PDT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(542,8);
            string_literal674=(Token)match(input,189,FOLLOW_189_in_pdt3184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            dbg.location(542,14);
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt3186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(542, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pdt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: ( sentence )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
        {
        dbg.location(35,14);
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker229);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: ( unmatchedPhrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
        {
        dbg.location(35,23);
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker231);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: ( comma )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: comma
        {
        dbg.location(35,44);
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker238);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: adv
        {
        dbg.location(35,58);
        pushFollow(FOLLOW_adv_in_synpred7_ChemicalChunker244);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:62: ( colon )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:62: colon
        {
        dbg.location(35,62);
        pushFollow(FOLLOW_colon_in_synpred8_ChemicalChunker246);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
        {
        dbg.location(37,13);
        pushFollow(FOLLOW_nounphrase_in_synpred9_ChemicalChunker258);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
        {
        dbg.location(37,24);
        pushFollow(FOLLOW_verbphrase_in_synpred10_ChemicalChunker260);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
        {
        dbg.location(37,35);
        pushFollow(FOLLOW_prepphrase_in_synpred11_ChemicalChunker262);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: noun
        {
        dbg.location(44,5);
        pushFollow(FOLLOW_noun_in_synpred12_ChemicalChunker297);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: adj
        {
        dbg.location(44,15);
        pushFollow(FOLLOW_adj_in_synpred14_ChemicalChunker301);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: ( oscarcd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: oscarcd
        {
        dbg.location(44,32);
        pushFollow(FOLLOW_oscarcd_in_synpred18_ChemicalChunker309);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: oscarcm
        {
        dbg.location(44,40);
        pushFollow(FOLLOW_oscarcm_in_synpred19_ChemicalChunker311);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: ( oscarrn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: oscarrn
        {
        dbg.location(44,48);
        pushFollow(FOLLOW_oscarrn_in_synpred20_ChemicalChunker313);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: ( oscaront )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: oscaront
        {
        dbg.location(44,56);
        pushFollow(FOLLOW_oscaront_in_synpred21_ChemicalChunker315);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:65: ( brackets )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:65: brackets
        {
        dbg.location(44,65);
        pushFollow(FOLLOW_brackets_in_synpred22_ChemicalChunker317);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:74: ( sym )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:74: sym
        {
        dbg.location(44,74);
        pushFollow(FOLLOW_sym_in_synpred23_ChemicalChunker319);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred25_ChemicalChunker
    public final void synpred25_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:84: ( comma )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:84: comma
        {
        dbg.location(44,84);
        pushFollow(FOLLOW_comma_in_synpred25_ChemicalChunker323);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
        {
        dbg.location(49,28);
        pushFollow(FOLLOW_adj_in_synpred27_ChemicalChunker360);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:40: noun
        {
        dbg.location(49,40);
        pushFollow(FOLLOW_noun_in_synpred29_ChemicalChunker368);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: ( number )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: number
        {
        dbg.location(49,45);
        pushFollow(FOLLOW_number_in_synpred30_ChemicalChunker370);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( conjunction )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: conjunction
        {
        dbg.location(49,58);
        pushFollow(FOLLOW_conjunction_in_synpred31_ChemicalChunker378);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:71: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:71: adj
        {
        dbg.location(49,71);
        pushFollow(FOLLOW_adj_in_synpred32_ChemicalChunker381);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( ( conjunction )* ( adj )* ( adv )* noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( conjunction )* ( adj )* ( adv )* noun
        {
        dbg.location(49,58);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:58: ( conjunction )*
        try { dbg.enterSubRule(74);

        loop74:
        do {
            int alt74=2;
            try { dbg.enterDecision(74);

            try {
                isCyclicDecision = true;
                alt74 = dfa74.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(74);}

            switch (alt74) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    dbg.location(49,58);
        	    pushFollow(FOLLOW_conjunction_in_synpred34_ChemicalChunker378);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop74;
            }
        } while (true);
        } finally {dbg.exitSubRule(74);}

        dbg.location(49,71);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:71: ( adj )*
        try { dbg.enterSubRule(75);

        loop75:
        do {
            int alt75=2;
            try { dbg.enterDecision(75);

            try {
                isCyclicDecision = true;
                alt75 = dfa75.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(75);}

            switch (alt75) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    dbg.location(49,71);
        	    pushFollow(FOLLOW_adj_in_synpred34_ChemicalChunker381);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop75;
            }
        } while (true);
        } finally {dbg.exitSubRule(75);}

        dbg.location(49,76);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:76: ( adv )*
        try { dbg.enterSubRule(76);

        loop76:
        do {
            int alt76=2;
            try { dbg.enterDecision(76);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=167 && LA76_0<=171)||LA76_0==173) ) {
                alt76=1;
            }


            } finally {dbg.exitDecision(76);}

            switch (alt76) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(49,76);
        	    pushFollow(FOLLOW_adv_in_synpred34_ChemicalChunker384);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop76;
            }
        } while (true);
        } finally {dbg.exitSubRule(76);}

        dbg.location(49,82);
        pushFollow(FOLLOW_noun_in_synpred34_ChemicalChunker388);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:87: ( number )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:87: number
        {
        dbg.location(49,87);
        pushFollow(FOLLOW_number_in_synpred35_ChemicalChunker390);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:101: ( prepphraseOf )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:101: prepphraseOf
        {
        dbg.location(49,101);
        pushFollow(FOLLOW_prepphraseOf_in_synpred36_ChemicalChunker399);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:115: ( prepphraseIN )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:115: prepphraseIN
        {
        dbg.location(49,115);
        pushFollow(FOLLOW_prepphraseIN_in_synpred37_ChemicalChunker402);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( to )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: to
        {
        dbg.location(56,24);
        pushFollow(FOLLOW_to_in_synpred39_ChemicalChunker447);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: ( inAll )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:28: inAll
        {
        dbg.location(56,28);
        pushFollow(FOLLOW_inAll_in_synpred40_ChemicalChunker450);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: verb
        {
        dbg.location(56,59);
        pushFollow(FOLLOW_verb_in_synpred45_ChemicalChunker466);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: md
        {
        dbg.location(56,65);
        pushFollow(FOLLOW_md_in_synpred46_ChemicalChunker469);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: adv
        {
        dbg.location(56,69);
        pushFollow(FOLLOW_adv_in_synpred47_ChemicalChunker472);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred48_ChemicalChunker
    public final void synpred48_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: adj
        {
        dbg.location(56,74);
        pushFollow(FOLLOW_adj_in_synpred48_ChemicalChunker475);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_ChemicalChunker

    // $ANTLR start synpred49_ChemicalChunker
    public final void synpred49_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: neg
        {
        dbg.location(56,79);
        pushFollow(FOLLOW_neg_in_synpred49_ChemicalChunker478);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_ChemicalChunker

    // $ANTLR start synpred50_ChemicalChunker
    public final void synpred50_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        dbg.location(56,45);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( md )*
        try { dbg.enterSubRule(77);

        loop77:
        do {
            int alt77=2;
            try { dbg.enterDecision(77);

            int LA77_0 = input.LA(1);

            if ( (LA77_0==142) ) {
                alt77=1;
            }


            } finally {dbg.exitDecision(77);}

            switch (alt77) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    dbg.location(56,45);
        	    pushFollow(FOLLOW_md_in_synpred50_ChemicalChunker457);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop77;
            }
        } while (true);
        } finally {dbg.exitSubRule(77);}

        dbg.location(56,49);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:49: ( adv )*
        try { dbg.enterSubRule(78);

        loop78:
        do {
            int alt78=2;
            try { dbg.enterDecision(78);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=167 && LA78_0<=171)||LA78_0==173) ) {
                alt78=1;
            }


            } finally {dbg.exitDecision(78);}

            switch (alt78) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(56,49);
        	    pushFollow(FOLLOW_adv_in_synpred50_ChemicalChunker460);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop78;
            }
        } while (true);
        } finally {dbg.exitSubRule(78);}

        dbg.location(56,54);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:54: ( adj )?
        int alt79=2;
        try { dbg.enterSubRule(79);
        try { dbg.enterDecision(79);

        int LA79_0 = input.LA(1);

        if ( ((LA79_0>=12 && LA79_0<=13)||(LA79_0>=138 && LA79_0<=141)) ) {
            alt79=1;
        }
        } finally {dbg.exitDecision(79);}

        switch (alt79) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(56,54);
                pushFollow(FOLLOW_adj_in_synpred50_ChemicalChunker463);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(79);}

        dbg.location(56,59);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:59: ( verb )+
        int cnt80=0;
        try { dbg.enterSubRule(80);

        loop80:
        do {
            int alt80=2;
            try { dbg.enterDecision(80);

            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=53 && LA80_0<=56)||(LA80_0>=59 && LA80_0<=66)||LA80_0==68||(LA80_0>=70 && LA80_0<=73)||LA80_0==75||LA80_0==77||(LA80_0>=79 && LA80_0<=82)||LA80_0==84||(LA80_0>=86 && LA80_0<=88)||(LA80_0>=90 && LA80_0<=91)||(LA80_0>=93 && LA80_0<=95)||(LA80_0>=177 && LA80_0<=182)) ) {
                alt80=1;
            }


            } finally {dbg.exitDecision(80);}

            switch (alt80) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    dbg.location(56,59);
        	    pushFollow(FOLLOW_verb_in_synpred50_ChemicalChunker466);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt80 >= 1 ) break loop80;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(80, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt80++;
        } while (true);
        } finally {dbg.exitSubRule(80);}

        dbg.location(56,65);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:65: ( md )*
        try { dbg.enterSubRule(81);

        loop81:
        do {
            int alt81=2;
            try { dbg.enterDecision(81);

            int LA81_0 = input.LA(1);

            if ( (LA81_0==142) ) {
                alt81=1;
            }


            } finally {dbg.exitDecision(81);}

            switch (alt81) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    dbg.location(56,65);
        	    pushFollow(FOLLOW_md_in_synpred50_ChemicalChunker469);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop81;
            }
        } while (true);
        } finally {dbg.exitSubRule(81);}

        dbg.location(56,69);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:69: ( adv )*
        try { dbg.enterSubRule(82);

        loop82:
        do {
            int alt82=2;
            try { dbg.enterDecision(82);

            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=167 && LA82_0<=171)||LA82_0==173) ) {
                alt82=1;
            }


            } finally {dbg.exitDecision(82);}

            switch (alt82) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(56,69);
        	    pushFollow(FOLLOW_adv_in_synpred50_ChemicalChunker472);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop82;
            }
        } while (true);
        } finally {dbg.exitSubRule(82);}

        dbg.location(56,74);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:74: ( adj )?
        int alt83=2;
        try { dbg.enterSubRule(83);
        try { dbg.enterDecision(83);

        int LA83_0 = input.LA(1);

        if ( ((LA83_0>=12 && LA83_0<=13)||(LA83_0>=138 && LA83_0<=141)) ) {
            alt83=1;
        }
        } finally {dbg.exitDecision(83);}

        switch (alt83) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(56,74);
                pushFollow(FOLLOW_adj_in_synpred50_ChemicalChunker475);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(83);}

        dbg.location(56,79);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:79: ( neg )?
        int alt84=2;
        try { dbg.enterSubRule(84);
        try { dbg.enterDecision(84);

        int LA84_0 = input.LA(1);

        if ( (LA84_0==99) ) {
            alt84=1;
        }
        } finally {dbg.exitDecision(84);}

        switch (alt84) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                dbg.location(56,79);
                pushFollow(FOLLOW_neg_in_synpred50_ChemicalChunker478);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(84);}


        }
    }
    // $ANTLR end synpred50_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( ( cc )? ( comma )? prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )? ( comma )? prepphrase
        {
        dbg.location(56,88);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:88: ( cc )?
        int alt85=2;
        try { dbg.enterSubRule(85);
        try { dbg.enterDecision(85);

        int LA85_0 = input.LA(1);

        if ( (LA85_0==120) ) {
            alt85=1;
        }
        } finally {dbg.exitDecision(85);}

        switch (alt85) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(56,88);
                pushFollow(FOLLOW_cc_in_synpred53_ChemicalChunker485);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(85);}

        dbg.location(56,92);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:92: ( comma )?
        int alt86=2;
        try { dbg.enterSubRule(86);
        try { dbg.enterDecision(86);

        int LA86_0 = input.LA(1);

        if ( (LA86_0==97) ) {
            alt86=1;
        }
        } finally {dbg.exitDecision(86);}

        switch (alt86) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(56,92);
                pushFollow(FOLLOW_comma_in_synpred53_ChemicalChunker488);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(86);}

        dbg.location(56,99);
        pushFollow(FOLLOW_prepphrase_in_synpred53_ChemicalChunker491);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:22: ( wpo )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:22: wpo
        {
        dbg.location(62,22);
        pushFollow(FOLLOW_wpo_in_synpred94_ChemicalChunker600);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:26: ( wpo )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:26: wpo
        {
        dbg.location(62,26);
        pushFollow(FOLLOW_wpo_in_synpred95_ChemicalChunker602);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:13: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:13: unnamedmolecule
        {
        dbg.location(63,13);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred101_ChemicalChunker622);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:29: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:29: molecule
        {
        dbg.location(63,29);
        pushFollow(FOLLOW_molecule_in_synpred102_ChemicalChunker624);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:38: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:38: amount
        {
        dbg.location(63,38);
        pushFollow(FOLLOW_amount_in_synpred103_ChemicalChunker626);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:45: ( mixture )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:45: mixture
        {
        dbg.location(63,45);
        pushFollow(FOLLOW_mixture_in_synpred104_ChemicalChunker628);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:61: ( nn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:61: nn
        {
        dbg.location(63,61);
        pushFollow(FOLLOW_nn_in_synpred106_ChemicalChunker632);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:94: ( apparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:94: apparatus
        {
        dbg.location(63,94);
        pushFollow(FOLLOW_apparatus_in_synpred112_ChemicalChunker644);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:122: ( quantity )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:122: quantity
        {
        dbg.location(63,122);
        pushFollow(FOLLOW_quantity_in_synpred115_ChemicalChunker650);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:144: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:144: measurements
        {
        dbg.location(63,144);
        pushFollow(FOLLOW_measurements_in_synpred117_ChemicalChunker654);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:200: ( nnpressure )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:200: nnpressure
        {
        dbg.location(63,200);
        pushFollow(FOLLOW_nnpressure_in_synpred123_ChemicalChunker666);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:291: ( wdt )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:291: wdt
        {
        dbg.location(63,291);
        pushFollow(FOLLOW_wdt_in_synpred132_ChemicalChunker684);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:295: ( wp_poss )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:295: wp_poss
        {
        dbg.location(63,295);
        pushFollow(FOLLOW_wp_poss_in_synpred133_ChemicalChunker686);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred134_ChemicalChunker
    public final void synpred134_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:303: ( wpo )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:303: wpo
        {
        dbg.location(63,303);
        pushFollow(FOLLOW_wpo_in_synpred134_ChemicalChunker688);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_ChemicalChunker

    // $ANTLR start synpred135_ChemicalChunker
    public final void synpred135_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:307: ( wps )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:307: wps
        {
        dbg.location(63,307);
        pushFollow(FOLLOW_wps_in_synpred135_ChemicalChunker690);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:343: ( number )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:343: number
        {
        dbg.location(63,343);
        pushFollow(FOLLOW_number_in_synpred139_ChemicalChunker698);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred140_ChemicalChunker
    public final void synpred140_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:350: ( oscarCompound )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:350: oscarCompound
        {
        dbg.location(63,350);
        pushFollow(FOLLOW_oscarCompound_in_synpred140_ChemicalChunker700);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_ChemicalChunker

    // $ANTLR start synpred150_ChemicalChunker
    public final void synpred150_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:25: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:25: measurements
        {
        dbg.location(69,25);
        pushFollow(FOLLOW_measurements_in_synpred150_ChemicalChunker778);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:41: ( stop )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:41: stop
        {
        dbg.location(69,41);
        pushFollow(FOLLOW_stop_in_synpred152_ChemicalChunker782);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:46: ( oscarCompound )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:46: oscarCompound
        {
        dbg.location(69,46);
        pushFollow(FOLLOW_oscarCompound_in_synpred153_ChemicalChunker784);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:60: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:60: oscarcm
        {
        dbg.location(69,60);
        pushFollow(FOLLOW_oscarcm_in_synpred154_ChemicalChunker786);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:68: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:68: molecule
        {
        dbg.location(69,68);
        pushFollow(FOLLOW_molecule_in_synpred155_ChemicalChunker788);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred156_ChemicalChunker
    public final void synpred156_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:77: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:77: unnamedmolecule
        {
        dbg.location(69,77);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred156_ChemicalChunker790);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:98: ( sym )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:98: sym
        {
        dbg.location(69,98);
        pushFollow(FOLLOW_sym_in_synpred158_ChemicalChunker794);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:102: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:102: cd
        {
        dbg.location(69,102);
        pushFollow(FOLLOW_cd_in_synpred159_ChemicalChunker796);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:105: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:105: noun
        {
        dbg.location(69,105);
        pushFollow(FOLLOW_noun_in_synpred160_ChemicalChunker798);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred161_ChemicalChunker
    public final void synpred161_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:110: ( inof )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:110: inof
        {
        dbg.location(69,110);
        pushFollow(FOLLOW_inof_in_synpred161_ChemicalChunker800);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:115: ( inAll )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:115: inAll
        {
        dbg.location(69,115);
        pushFollow(FOLLOW_inAll_in_synpred162_ChemicalChunker802);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred163_ChemicalChunker
    public final void synpred163_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:121: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:121: cd
        {
        dbg.location(69,121);
        pushFollow(FOLLOW_cd_in_synpred163_ChemicalChunker804);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:124: ( comma )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:124: comma
        {
        dbg.location(69,124);
        pushFollow(FOLLOW_comma_in_synpred164_ChemicalChunker806);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:130: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:130: adj
        {
        dbg.location(69,130);
        pushFollow(FOLLOW_adj_in_synpred165_ChemicalChunker808);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:140: ( stop )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:140: stop
        {
        dbg.location(69,140);
        pushFollow(FOLLOW_stop_in_synpred167_ChemicalChunker812);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( ( neg )? prepphraseOther )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( neg )? prepphraseOther
        {
        dbg.location(77,5);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( neg )?
        int alt87=2;
        try { dbg.enterSubRule(87);
        try { dbg.enterDecision(87);

        int LA87_0 = input.LA(1);

        if ( (LA87_0==99) ) {
            alt87=1;
        }
        } finally {dbg.exitDecision(87);}

        switch (alt87) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                dbg.location(77,5);
                pushFollow(FOLLOW_neg_in_synpred179_ChemicalChunker863);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(87);}

        dbg.location(77,10);
        pushFollow(FOLLOW_prepphraseOther_in_synpred179_ChemicalChunker866);
        prepphraseOther();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:26: ( prepphraseTemp )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:26: prepphraseTemp
        {
        dbg.location(77,26);
        pushFollow(FOLLOW_prepphraseTemp_in_synpred180_ChemicalChunker868);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:4: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:4: adv
        {
        dbg.location(85,4);
        pushFollow(FOLLOW_adv_in_synpred184_ChemicalChunker948);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:8: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:8: adj
        {
        dbg.location(85,8);
        pushFollow(FOLLOW_adj_in_synpred185_ChemicalChunker950);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:19: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:19: adv
        {
        dbg.location(91,19);
        pushFollow(FOLLOW_adv_in_synpred207_ChemicalChunker1076);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:23: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:23: adj
        {
        dbg.location(91,23);
        pushFollow(FOLLOW_adj_in_synpred208_ChemicalChunker1078);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:18: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:18: adj
        {
        dbg.location(100,18);
        pushFollow(FOLLOW_adj_in_synpred214_ChemicalChunker1239);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:22: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:22: jj
        {
        dbg.location(100,22);
        pushFollow(FOLLOW_jj_in_synpred215_ChemicalChunker1241);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred218_ChemicalChunker
    public final void synpred218_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:41: ( nnapparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:41: nnapparatus
        {
        dbg.location(100,41);
        pushFollow(FOLLOW_nnapparatus_in_synpred218_ChemicalChunker1249);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:19: ( oscarCompound1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:19: oscarCompound1
        {
        dbg.location(105,19);
        pushFollow(FOLLOW_oscarCompound1_in_synpred222_ChemicalChunker1296);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:34: ( oscarCompound2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:34: oscarCompound2
        {
        dbg.location(105,34);
        pushFollow(FOLLOW_oscarCompound2_in_synpred223_ChemicalChunker1298);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:64: ( oscarCompound4 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:64: oscarCompound4
        {
        dbg.location(105,64);
        pushFollow(FOLLOW_oscarCompound4_in_synpred225_ChemicalChunker1302);
        oscarCompound4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:88: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:88: rrb
        {
        dbg.location(105,88);
        pushFollow(FOLLOW_rrb_in_synpred226_ChemicalChunker1307);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:27: ( dash )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:27: dash
        {
        dbg.location(107,27);
        pushFollow(FOLLOW_dash_in_synpred227_ChemicalChunker1319);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:27: ( dash oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:27: dash oscarcm
        {
        dbg.location(108,27);
        pushFollow(FOLLOW_dash_in_synpred229_ChemicalChunker1351);
        dash();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(108,32);
        pushFollow(FOLLOW_oscarcm_in_synpred229_ChemicalChunker1353);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:42: ( dash )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:42: dash
        {
        dbg.location(108,42);
        pushFollow(FOLLOW_dash_in_synpred230_ChemicalChunker1357);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:26: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:26: oscarcm
        {
        dbg.location(109,26);
        pushFollow(FOLLOW_oscarcm_in_synpred231_ChemicalChunker1387);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: ( quantity )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: quantity
        {
        dbg.location(114,18);
        pushFollow(FOLLOW_quantity_in_synpred233_ChemicalChunker1451);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:11: ( quantity )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:11: quantity
        {
        dbg.location(122,11);
        pushFollow(FOLLOW_quantity_in_synpred237_ChemicalChunker1526);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: jj
        {
        dbg.location(124,32);
        pushFollow(FOLLOW_jj_in_synpred239_ChemicalChunker1544);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( ( jj )? noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( jj )? noun
        {
        dbg.location(124,32);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( jj )?
        int alt88=2;
        try { dbg.enterSubRule(88);
        try { dbg.enterDecision(88);

        int LA88_0 = input.LA(1);

        if ( (LA88_0==138) ) {
            int LA88_1 = input.LA(2);

            if ( (LA88_1==TOKEN) ) {
                int LA88_3 = input.LA(3);

                if ( (synpred239_ChemicalChunker()) ) {
                    alt88=1;
                }
            }
        }
        } finally {dbg.exitDecision(88);}

        switch (alt88) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                dbg.location(124,32);
                pushFollow(FOLLOW_jj_in_synpred240_ChemicalChunker1544);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(88);}

        dbg.location(124,36);
        pushFollow(FOLLOW_noun_in_synpred240_ChemicalChunker1547);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:3: ( unnamedmoleculeamount1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:3: unnamedmoleculeamount1
        {
        dbg.location(127,3);
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred241_ChemicalChunker1558);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:9: ( lrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:9: lrb
        {
        dbg.location(138,9);
        pushFollow(FOLLOW_lrb_in_synpred248_ChemicalChunker1683);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:13: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:13: rrb
        {
        dbg.location(138,13);
        pushFollow(FOLLOW_rrb_in_synpred249_ChemicalChunker1685);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:17: ( lsqb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:17: lsqb
        {
        dbg.location(138,17);
        pushFollow(FOLLOW_lsqb_in_synpred250_ChemicalChunker1687);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:22: ( rsqb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:22: rsqb
        {
        dbg.location(138,22);
        pushFollow(FOLLOW_rsqb_in_synpred251_ChemicalChunker1689);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred49_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred218_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred50_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred140_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred161_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred134_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred48_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred150_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred156_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred135_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred163_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA75 dfa75 = new DFA75(this);
    static final String DFA2_eotS =
        "\u0080\uffff";
    static final String DFA2_eofS =
        "\1\2\177\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\173\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00bd\1\0\1\uffff\173\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\173\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\51\1\uffff\1\112\1\34\1\101\1\66\1\21\1\71\1\122\1\141"+
        "\1\25\1\45\1\23\1\104\1\167\1\126\1\151\1\47\1\105\1\123\1\127\1"+
        "\115\1\77\1\160\1\147\1\40\1\102\1\110\1\137\1\17\1\142\1\171\1"+
        "\14\1\26\1\20\1\57\1\44\1\121\1\107\1\111\1\124\1\140\1\146\1\3"+
        "\1\156\1\60\1\64\1\55\1\52\1\161\1\155\1\65\1\41\1\153\1\150\1\100"+
        "\1\24\1\136\1\170\1\162\1\157\1\172\1\152\1\163\1\13\1\30\1\133"+
        "\1\116\1\73\1\16\1\5\1\33\1\6\1\134\1\130\1\143\1\135\1\113\1\62"+
        "\1\70\1\131\1\11\1\56\1\31\1\53\1\74\1\46\1\103\1\67\1\164\1\22"+
        "\1\35\1\76\1\132\1\120\1\106\1\173\1\154\1\144\1\32\1\12\1\63\1"+
        "\50\1\42\1\117\1\114\1\165\1\15\1\36\1\4\1\61\1\43\1\75\1\37\1\54"+
        "\1\0\1\10\1\166\1\145\1\125\1\7\1\27\1\72\1\2\1\1\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\23\1\17\1\20\1\33\1\65\2\uffff\1\104\1\105\1\103\1\111\1"+
            "\112\1\121\1\122\1\106\1\120\1\113\1\115\1\107\1\110\1\117\1"+
            "\116\1\114\1\26\1\34\1\uffff\1\46\1\37\1\40\1\55\1\41\1\42\1"+
            "\43\1\44\1\45\1\35\1\47\1\50\1\51\1\52\1\53\1\24\1\132\1\171"+
            "\1\133\1\134\1\32\1\64\1\135\1\136\1\137\1\140\1\141\1\142\1"+
            "\143\1\144\1\36\1\145\1\54\1\146\1\147\1\150\1\151\1\uffff\1"+
            "\152\1\66\1\153\1\67\1\154\1\155\1\156\1\157\1\70\1\160\1\56"+
            "\1\161\1\162\1\163\1\71\1\164\1\165\1\63\1\166\1\167\1\170\1"+
            "\11\1\1\1\uffff\1\172\1\uffff\1\2\1\uffff\1\174\1\175\1\25\1"+
            "\173\15\uffff\1\2\1\22\4\uffff\1\12\3\uffff\1\77\1\72\1\73\4"+
            "\uffff\1\102\1\13\1\14\1\15\1\16\1\123\1\uffff\1\27\1\uffff"+
            "\1\30\2\uffff\1\31\13\uffff\1\21\5\uffff\1\3\1\4\1\10\1\5\1"+
            "\7\1\uffff\1\6\1\74\1\101\1\uffff\1\124\1\125\1\127\1\126\1"+
            "\131\1\130\1\57\1\60\1\61\1\62\1\75\1\76\1\100",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 35:13: ( sentence | unmatchedPhrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 127;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\27\uffff";
    static final String DFA3_eofS =
        "\1\1\26\uffff";
    static final String DFA3_minS =
        "\1\13\1\uffff\10\12\2\uffff\10\0\3\uffff";
    static final String DFA3_maxS =
        "\1\u00bd\1\uffff\10\12\2\uffff\10\0\3\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\6\10\uffff\1\2\1\3\10\uffff\1\4\1\1\1\5";
    static final String DFA3_specialS =
        "\14\uffff\1\1\1\4\1\5\1\2\1\7\1\3\1\0\1\6\3\uffff}>";
    static final String[] DFA3_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\25\1\1\11\1\10\1\uffff"+
            "\1\1\1\uffff\1\13\1\uffff\4\1\15\uffff\1\12\1\1\4\uffff\1\1"+
            "\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1"+
            "\uffff\15\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 35:43: ( comma | cc | stop | adv | colon )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_18 = input.LA(1);

                         
                        int index3_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_12 = input.LA(1);

                         
                        int index3_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_15 = input.LA(1);

                         
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_17 = input.LA(1);

                         
                        int index3_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_13 = input.LA(1);

                         
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_14 = input.LA(1);

                         
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_19 = input.LA(1);

                         
                        int index3_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_16 = input.LA(1);

                         
                        int index3_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\175\uffff";
    static final String DFA4_eofS =
        "\1\2\174\uffff";
    static final String DFA4_minS =
        "\1\13\1\0\1\uffff\167\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00bd\1\0\1\uffff\167\0\3\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\4\167\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\33\1\uffff\1\66\1\2\1\3\1\52\1\53\1\71\1\4\1\111\1\70"+
        "\1\6\1\102\1\146\1\51\1\142\1\31\1\77\1\130\1\144\1\16\1\126\1\56"+
        "\1\150\1\115\1\26\1\34\1\73\1\106\1\57\1\104\1\113\1\145\1\164\1"+
        "\161\1\153\1\45\1\123\1\103\1\100\1\55\1\43\1\114\1\76\1\122\1\72"+
        "\1\160\1\152\1\17\1\0\1\124\1\40\1\151\1\107\1\15\1\143\1\12\1\13"+
        "\1\155\1\22\1\163\1\147\1\131\1\121\1\36\1\60\1\137\1\67\1\167\1"+
        "\7\1\42\1\132\1\74\1\110\1\61\1\135\1\24\1\154\1\127\1\37\1\5\1"+
        "\10\1\32\1\133\1\105\1\156\1\116\1\125\1\20\1\162\1\136\1\112\1"+
        "\64\1\35\1\23\1\27\1\14\1\141\1\166\1\75\1\50\1\63\1\54\1\11\1\134"+
        "\1\165\1\120\1\44\1\47\1\62\1\21\1\117\1\101\1\157\1\30\1\25\1\65"+
        "\1\46\1\41\1\1\1\140\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\22\1\16\1\17\1\32\1\64\2\uffff\1\103\1\104\1\102\1\110\1"+
            "\111\1\120\1\121\1\105\1\117\1\112\1\114\1\106\1\107\1\116\1"+
            "\115\1\113\1\25\1\33\1\uffff\1\45\1\36\1\37\1\54\1\40\1\41\1"+
            "\42\1\43\1\44\1\34\1\46\1\47\1\50\1\51\1\52\1\23\1\131\1\170"+
            "\1\132\1\133\1\31\1\63\1\134\1\135\1\136\1\137\1\140\1\141\1"+
            "\142\1\143\1\35\1\144\1\53\1\145\1\146\1\147\1\150\1\uffff\1"+
            "\151\1\65\1\152\1\66\1\153\1\154\1\155\1\156\1\67\1\157\1\55"+
            "\1\160\1\161\1\162\1\70\1\163\1\164\1\62\1\165\1\166\1\167\1"+
            "\2\1\1\1\uffff\1\171\1\uffff\1\2\1\uffff\2\2\1\24\1\2\15\uffff"+
            "\1\2\1\21\4\uffff\1\11\3\uffff\1\76\1\71\1\72\4\uffff\1\101"+
            "\1\12\1\13\1\14\1\15\1\122\1\uffff\1\26\1\uffff\1\27\2\uffff"+
            "\1\30\13\uffff\1\20\5\uffff\1\3\1\4\1\10\1\5\1\7\1\uffff\1\6"+
            "\1\73\1\100\1\uffff\1\123\1\124\1\126\1\125\1\130\1\127\1\56"+
            "\1\57\1\60\1\61\1\74\1\75\1\77",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 37:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred11_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\u0083\uffff";
    static final String DFA5_eofS =
        "\u0083\uffff";
    static final String DFA5_minS =
        "\1\13\2\uffff\4\0\7\uffff\6\0\30\uffff\1\0\6\uffff\1\0\117\uffff";
    static final String DFA5_maxS =
        "\1\u00bd\2\uffff\4\0\7\uffff\6\0\30\uffff\1\0\6\uffff\1\0\117\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\66\uffff\1\2\45\uffff\1\4\5\uffff\1\5\21\uffff\1\6"+
        "\1\13\2\uffff\1\15\1\17\1\7\1\10\1\16\1\3\1\11\1\12\1\14";
    static final String DFA5_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\7\uffff\1\4\1\5\1\6\1\7\1\10\1\11\30\uffff"+
        "\1\12\6\uffff\1\13\117\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\3\1\22\1\23\1\1\1\54\2\uffff\20\144\2\1\1\uffff\17\1\1\4"+
            "\4\70\2\1\10\70\1\1\1\70\1\1\4\70\1\uffff\1\70\1\1\1\70\1\1"+
            "\4\70\1\1\1\70\1\1\3\70\1\1\2\70\1\1\3\70\1\172\1\5\5\uffff"+
            "\2\167\1\6\1\167\16\uffff\1\1\4\uffff\1\166\3\uffff\3\1\4\uffff"+
            "\1\144\1\16\1\17\1\20\1\21\1\173\1\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\5\136\1\uffff\1\136\1\63\1\144\1\uffff"+
            "\6\70\7\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | comma | md )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 124;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred25_ChemicalChunker()) ) {s = 126;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 119;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\20\uffff";
    static final String DFA7_eofS =
        "\20\uffff";
    static final String DFA7_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA7_maxS =
        "\1\u00bd\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA7_specialS =
        "\11\uffff\1\0\1\3\1\1\1\4\1\5\1\2\1\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\1\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:27: ( adj | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\73\uffff";
    static final String DFA8_eofS =
        "\1\1\72\uffff";
    static final String DFA8_minS =
        "\1\13\1\uffff\67\0\2\uffff";
    static final String DFA8_maxS =
        "\1\u00bd\1\uffff\67\0\2\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\3\67\uffff\1\1\1\2";
    static final String DFA8_specialS =
        "\2\uffff\1\35\1\25\1\11\1\60\1\5\1\1\1\7\1\31\1\17\1\34\1\36\1\44"+
        "\1\33\1\47\1\16\1\32\1\0\1\66\1\46\1\20\1\23\1\41\1\57\1\27\1\50"+
        "\1\30\1\10\1\63\1\13\1\26\1\4\1\64\1\42\1\24\1\62\1\3\1\45\1\54"+
        "\1\21\1\52\1\14\1\2\1\53\1\61\1\37\1\6\1\12\1\55\1\43\1\65\1\51"+
        "\1\15\1\56\1\22\1\40\2\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\13\1\7\1\10\1\23\1\55\2\uffff\20\1\1\16\1\24\1\uffff\1\36"+
            "\1\27\1\30\1\45\1\31\1\32\1\33\1\34\1\35\1\25\1\37\1\40\1\41"+
            "\1\42\1\43\1\14\4\1\1\22\1\54\10\1\1\26\1\1\1\44\4\1\1\uffff"+
            "\1\1\1\56\1\1\1\57\4\1\1\60\1\1\1\46\3\1\1\61\2\1\1\53\4\1\1"+
            "\2\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\15\1\1\15\uffff\1\1"+
            "\1\12\4\uffff\1\1\3\uffff\1\67\1\62\1\63\4\uffff\1\1\1\3\1\4"+
            "\1\5\1\6\1\1\1\uffff\1\17\1\uffff\1\20\2\uffff\1\21\13\uffff"+
            "\1\11\5\uffff\5\1\1\uffff\1\1\1\64\1\1\1\uffff\6\1\1\47\1\50"+
            "\1\51\1\52\1\65\1\66\1\70",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 49:39: ( noun | number )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_43 = input.LA(1);

                         
                        int index8_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_37 = input.LA(1);

                         
                        int index8_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_32 = input.LA(1);

                         
                        int index8_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_32);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_47 = input.LA(1);

                         
                        int index8_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_28 = input.LA(1);

                         
                        int index8_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_28);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_48 = input.LA(1);

                         
                        int index8_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_30 = input.LA(1);

                         
                        int index8_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_30);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_42 = input.LA(1);

                         
                        int index8_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_42);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_53 = input.LA(1);

                         
                        int index8_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 58;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_21 = input.LA(1);

                         
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_40 = input.LA(1);

                         
                        int index8_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_40);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_55 = input.LA(1);

                         
                        int index8_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_22 = input.LA(1);

                         
                        int index8_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_35 = input.LA(1);

                         
                        int index8_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_35);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA8_31 = input.LA(1);

                         
                        int index8_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA8_25 = input.LA(1);

                         
                        int index8_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA8_27 = input.LA(1);

                         
                        int index8_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 58;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA8_46 = input.LA(1);

                         
                        int index8_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_46);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA8_56 = input.LA(1);

                         
                        int index8_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_56);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA8_23 = input.LA(1);

                         
                        int index8_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_23);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA8_34 = input.LA(1);

                         
                        int index8_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA8_50 = input.LA(1);

                         
                        int index8_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_50);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA8_38 = input.LA(1);

                         
                        int index8_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA8_26 = input.LA(1);

                         
                        int index8_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_26);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA8_52 = input.LA(1);

                         
                        int index8_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_52);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA8_41 = input.LA(1);

                         
                        int index8_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_41);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA8_44 = input.LA(1);

                         
                        int index8_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA8_39 = input.LA(1);

                         
                        int index8_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_39);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA8_49 = input.LA(1);

                         
                        int index8_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_49);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA8_54 = input.LA(1);

                         
                        int index8_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_54);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA8_24 = input.LA(1);

                         
                        int index8_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_24);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA8_45 = input.LA(1);

                         
                        int index8_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_45);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA8_36 = input.LA(1);

                         
                        int index8_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_36);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA8_29 = input.LA(1);

                         
                        int index8_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_29);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA8_33 = input.LA(1);

                         
                        int index8_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_33);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA8_51 = input.LA(1);

                         
                        int index8_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_51);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\u0082\uffff";
    static final String DFA12_eofS =
        "\1\1\u0081\uffff";
    static final String DFA12_minS =
        "\1\13\2\uffff\2\0\1\uffff\6\0\3\uffff\66\0\75\uffff";
    static final String DFA12_maxS =
        "\1\u00bd\2\uffff\2\0\1\uffff\6\0\3\uffff\66\0\75\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\3\176\uffff\1\1\1\2";
    static final String DFA12_specialS =
        "\3\uffff\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
        "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
        "\1\75\75\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\27\1\23\1\24\1\37\1\71\2\uffff\20\1\1\32\1\40\1\uffff\1\52"+
            "\1\43\1\44\1\61\1\45\1\46\1\47\1\50\1\51\1\41\1\53\1\54\1\55"+
            "\1\56\1\57\1\30\4\1\1\36\1\70\10\1\1\42\1\1\1\60\4\1\1\uffff"+
            "\1\1\1\72\1\1\1\73\4\1\1\74\1\1\1\62\3\1\1\75\2\1\1\67\4\1\1"+
            "\3\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\31\1\1\15\uffff\1\4"+
            "\1\26\4\uffff\1\1\3\uffff\1\103\1\76\1\77\4\uffff\1\1\1\17\1"+
            "\20\1\21\1\22\1\1\1\uffff\1\33\1\uffff\1\34\2\uffff\1\35\13"+
            "\uffff\1\25\5\uffff\1\6\1\7\1\13\1\10\1\12\1\uffff\1\11\1\100"+
            "\1\1\1\uffff\6\1\1\63\1\64\1\65\1\66\1\101\1\102\1\104",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:57: ( ( conjunction )* ( adj )* ( adv )* noun | number )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred35_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred35_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\77\uffff";
    static final String DFA9_eofS =
        "\77\uffff";
    static final String DFA9_minS =
        "\1\13\20\uffff\1\0\55\uffff";
    static final String DFA9_maxS =
        "\1\u00bd\20\uffff\1\0\55\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\74\uffff\1\1";
    static final String DFA9_specialS =
        "\21\uffff\1\0\55\uffff}>";
    static final String[] DFA9_transitionS = {
            "\5\1\22\uffff\2\1\1\uffff\20\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\76\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:58: ( conjunction )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_17 = input.LA(1);

                         
                        int index9_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\17\uffff";
    static final String DFA10_eofS =
        "\17\uffff";
    static final String DFA10_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA10_maxS =
        "\1\u00bd\1\uffff\6\12\6\0\1\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA10_specialS =
        "\10\uffff\1\0\1\3\1\4\1\1\1\2\1\5\1\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\1\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:71: ( adj )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_8 = input.LA(1);

                         
                        int index10_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_11 = input.LA(1);

                         
                        int index10_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA10_12 = input.LA(1);

                         
                        int index10_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA10_9 = input.LA(1);

                         
                        int index10_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA10_10 = input.LA(1);

                         
                        int index10_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA10_13 = input.LA(1);

                         
                        int index10_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\66\uffff";
    static final String DFA26_eofS =
        "\1\1\65\uffff";
    static final String DFA26_minS =
        "\1\13\1\uffff\63\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u00bd\1\uffff\63\0\1\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA26_specialS =
        "\2\uffff\1\17\1\14\1\11\1\47\1\40\1\15\1\4\1\52\1\35\1\30\1\36\1"+
        "\2\1\42\1\37\1\41\1\3\1\55\1\33\1\21\1\62\1\32\1\45\1\24\1\44\1"+
        "\61\1\7\1\31\1\43\1\60\1\50\1\22\1\46\1\26\1\6\1\53\1\20\1\57\1"+
        "\27\1\12\1\56\1\51\1\23\1\1\1\16\1\34\1\5\1\25\1\54\1\0\1\13\1\10"+
        "\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\22\1\1\uffff\20\1\1\25\1\64\1\26"+
            "\1\27\2\1\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\1\1\40\1"+
            "\1\1\41\1\42\1\43\1\44\1\uffff\1\45\1\1\1\46\1\1\1\47\1\50\1"+
            "\51\1\52\1\1\1\53\1\1\1\54\1\55\1\56\1\1\1\57\1\60\1\1\1\61"+
            "\1\62\1\63\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13"+
            "\1\16\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\17\1\20\1\22"+
            "\1\21\1\24\1\23\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_50 = input.LA(1);

                         
                        int index26_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_44);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_47 = input.LA(1);

                         
                        int index26_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_47);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_52 = input.LA(1);

                         
                        int index26_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_52);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_40 = input.LA(1);

                         
                        int index26_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_40);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_51 = input.LA(1);

                         
                        int index26_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_45 = input.LA(1);

                         
                        int index26_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_45);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_43);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_48 = input.LA(1);

                         
                        int index26_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_48);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA26_46 = input.LA(1);

                         
                        int index26_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_46);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA26_15 = input.LA(1);

                         
                        int index26_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_15);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA26_25 = input.LA(1);

                         
                        int index26_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_25);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA26_42 = input.LA(1);

                         
                        int index26_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA26_49 = input.LA(1);

                         
                        int index26_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_49);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA26_41 = input.LA(1);

                         
                        int index26_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_41);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA26_26 = input.LA(1);

                         
                        int index26_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_26);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\51\uffff";
    static final String DFA21_eofS =
        "\1\1\50\uffff";
    static final String DFA21_minS =
        "\1\13\1\uffff\46\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u00bd\1\uffff\46\0\1\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\2\46\uffff\1\1";
    static final String DFA21_specialS =
        "\2\uffff\1\1\1\25\1\45\1\16\1\31\1\6\1\43\1\41\1\26\1\3\1\24\1\23"+
        "\1\44\1\21\1\35\1\2\1\32\1\17\1\13\1\10\1\36\1\12\1\14\1\34\1\40"+
        "\1\22\1\42\1\15\1\5\1\37\1\11\1\4\1\0\1\27\1\33\1\7\1\30\1\20\1"+
        "\uffff}>";
    static final String[] DFA21_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\20\1\1\10\1\47\1\11\1\12\2\1\1\13"+
            "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\1\1\24\1\25\1"+
            "\26\1\27\1\uffff\1\30\1\1\1\31\1\1\1\32\1\33\1\34\1\35\1\1\1"+
            "\36\1\1\1\37\1\40\1\41\1\1\1\42\1\43\1\1\1\44\1\45\1\46\2\1"+
            "\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1"+
            "\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\2\1\3\1\5"+
            "\1\4\1\7\1\6\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:59: ( verb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\u0081\uffff";
    static final String DFA23_eofS =
        "\1\1\u0080\uffff";
    static final String DFA23_minS =
        "\1\13\11\uffff\6\0\161\uffff";
    static final String DFA23_maxS =
        "\1\u00bd\11\uffff\6\0\161\uffff";
    static final String DFA23_acceptS =
        "\1\uffff\1\2\176\uffff\1\1";
    static final String DFA23_specialS =
        "\12\uffff\1\0\1\1\1\2\1\3\1\4\1\5\161\uffff}>";
    static final String[] DFA23_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\12\1\13\1\17\1\14\1\16\1\uffff\1\15\2\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:69: ( adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_14 = input.LA(1);

                         
                        int index23_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_15 = input.LA(1);

                         
                        int index23_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\17\uffff";
    static final String DFA24_eofS =
        "\1\7\16\uffff";
    static final String DFA24_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA24_maxS =
        "\1\u00bd\6\12\1\uffff\6\0\1\uffff";
    static final String DFA24_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA24_specialS =
        "\10\uffff\1\4\1\0\1\2\1\3\1\5\1\1\1\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\22\7\1\uffff\45\7\1\uffff\27\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\1\7\3\uffff"+
            "\3\7\4\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\2\uffff\1\7\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "56:74: ( adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_13 = input.LA(1);

                         
                        int index24_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_10 = input.LA(1);

                         
                        int index24_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_11 = input.LA(1);

                         
                        int index24_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_12 = input.LA(1);

                         
                        int index24_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\u0081\uffff";
    static final String DFA29_eofS =
        "\1\3\u0080\uffff";
    static final String DFA29_minS =
        "\1\13\2\0\1\uffff\6\0\2\uffff\7\0\1\uffff\1\0\56\uffff\22\0\47\uffff"+
        "\1\0\4\uffff";
    static final String DFA29_maxS =
        "\1\u00bd\2\0\1\uffff\6\0\2\uffff\7\0\1\uffff\1\0\56\uffff\22\0\47"+
        "\uffff\1\0\4\uffff";
    static final String DFA29_acceptS =
        "\3\uffff\1\2\174\uffff\1\1";
    static final String DFA29_specialS =
        "\1\uffff\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\56\uffff\1\20\1\21\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
        "\1\40\1\41\47\uffff\1\42\4\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\3\1\21\1\22\2\3\2\uffff\1\106\1\107\1\105\1\113\1\114\1\123"+
            "\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1\120\1\116"+
            "\2\3\1\uffff\45\3\1\uffff\26\3\1\1\1\uffff\1\174\1\uffff\1\3"+
            "\1\uffff\4\3\15\uffff\1\2\1\24\4\uffff\1\14\3\uffff\3\3\4\uffff"+
            "\1\104\1\15\1\16\1\17\1\20\1\3\1\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\13\uffff\1\3\5\uffff\1\4\1\5\1\11\1\6\1\10\1\uffff\1\7"+
            "\1\3\1\103\1\uffff\15\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:87: ( ( cc )? ( comma )? prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_15 = input.LA(1);

                         
                        int index29_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_17 = input.LA(1);

                         
                        int index29_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA29_20 = input.LA(1);

                         
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA29_67 = input.LA(1);

                         
                        int index29_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_67);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA29_68 = input.LA(1);

                         
                        int index29_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_68);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA29_69 = input.LA(1);

                         
                        int index29_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_69);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA29_70 = input.LA(1);

                         
                        int index29_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_70);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA29_71 = input.LA(1);

                         
                        int index29_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_71);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA29_72 = input.LA(1);

                         
                        int index29_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_72);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA29_73 = input.LA(1);

                         
                        int index29_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_73);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA29_74 = input.LA(1);

                         
                        int index29_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_74);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA29_75 = input.LA(1);

                         
                        int index29_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_75);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA29_76 = input.LA(1);

                         
                        int index29_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_76);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA29_77 = input.LA(1);

                         
                        int index29_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_77);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA29_78 = input.LA(1);

                         
                        int index29_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_78);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA29_79 = input.LA(1);

                         
                        int index29_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_79);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA29_80 = input.LA(1);

                         
                        int index29_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_80);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA29_81 = input.LA(1);

                         
                        int index29_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_81);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA29_82 = input.LA(1);

                         
                        int index29_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_82);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA29_83 = input.LA(1);

                         
                        int index29_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_83);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA29_84 = input.LA(1);

                         
                        int index29_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_84);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA29_124 = input.LA(1);

                         
                        int index29_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_124);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\14\uffff";
    static final String DFA32_eofS =
        "\14\uffff";
    static final String DFA32_minS =
        "\1\u0082\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA32_maxS =
        "\1\u00bd\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA32_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "62:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_9 = input.LA(1);

                         
                        int index32_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index32_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\105\uffff";
    static final String DFA33_eofS =
        "\105\uffff";
    static final String DFA33_minS =
        "\1\13\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\13\uffff\1\0\21\uffff"+
        "\4\0\33\uffff";
    static final String DFA33_maxS =
        "\1\u00bd\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\13\uffff\1\0\21\uffff"+
        "\4\0\33\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\3\uffff\1\5\1\uffff\1\6\1\uffff\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\7\uffff\1\16\1\17\1\21\1\23\1\24\1\25\1\26\1\27\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\4\uffff\1\45\1\46\1\47\1\52"+
        "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\3\uffff\1\2\1\3\1\4\1\22\1\50"+
        "\1\51\1\20\1\7\1\30\1\41\1\42\1\43\1\44";
    static final String DFA33_specialS =
        "\2\uffff\1\0\1\1\1\2\1\uffff\1\3\1\uffff\1\4\13\uffff\1\5\21\uffff"+
        "\1\6\1\7\1\10\1\11\33\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\3\2\16\1\14\1\54\22\uffff\1\7\1\15\1\uffff\1\35\1\26\1\27"+
            "\1\44\1\30\1\31\1\32\1\33\1\34\1\24\1\36\1\37\1\40\1\41\1\42"+
            "\1\4\4\uffff\1\13\1\53\10\uffff\1\16\1\uffff\1\43\6\uffff\1"+
            "\55\1\uffff\1\56\4\uffff\1\57\1\uffff\1\45\3\uffff\1\60\2\uffff"+
            "\1\52\4\uffff\1\5\7\uffff\1\6\17\uffff\1\2\10\uffff\1\64\1\61"+
            "\1\62\5\uffff\4\16\2\uffff\1\10\1\uffff\1\11\2\uffff\1\12\13"+
            "\uffff\1\1\14\uffff\1\63\10\uffff\1\46\1\47\1\50\1\51\3\64",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "63:1: noun : ( prp | unnamedmolecule | molecule | amount | mixture | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 56;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 58;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred117_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred139_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 56;}

                        else if ( (synpred139_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_4 = input.LA(1);

                         
                        int index33_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred140_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index33_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_6 = input.LA(1);

                         
                        int index33_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred115_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index33_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred123_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_38 = input.LA(1);

                         
                        int index33_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index33_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_39 = input.LA(1);

                         
                        int index33_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index33_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_40 = input.LA(1);

                         
                        int index33_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index33_40);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_41 = input.LA(1);

                         
                        int index33_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index33_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\u0082\uffff";
    static final String DFA35_eofS =
        "\u0082\uffff";
    static final String DFA35_minS =
        "\1\13\47\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\10\uffff"+
        "\6\0\43\uffff\1\0\37\uffff";
    static final String DFA35_maxS =
        "\1\u00bd\47\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\10\uffff"+
        "\6\0\43\uffff\1\0\37\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\24\1\1\46\uffff\1\3\3\uffff\1\11\1\uffff\1\14\63\uffff"+
        "\1\16\20\uffff\1\22\1\2\1\7\1\10\1\13\1\17\1\4\1\23\1\5\1\6\1\12"+
        "\1\20\1\21\1\15";
    static final String DFA35_specialS =
        "\50\uffff\1\0\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\uffff\1\5\10\uffff"+
        "\1\6\1\7\1\10\1\11\1\12\1\13\43\uffff\1\14\37\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\54\1\75\1\76\2\57\2\uffff\11\143\1\142\6\143\2\57\1\uffff"+
            "\17\57\1\53\4\2\2\57\10\2\1\57\1\2\1\57\4\2\1\uffff\1\2\1\57"+
            "\1\2\1\57\4\2\1\57\1\2\1\57\3\2\1\57\2\2\1\57\3\2\1\164\1\60"+
            "\2\uffff\1\55\1\52\3\uffff\1\57\1\1\16\uffff\1\50\10\uffff\3"+
            "\57\4\uffff\1\143\1\71\1\72\1\73\1\74\1\51\1\uffff\1\57\1\uffff"+
            "\1\57\2\uffff\1\57\13\uffff\1\57\14\uffff\1\56\1\143\1\uffff"+
            "\6\2\7\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()+ loopback of 69:19: ( verb | measurements | md | stop | oscarCompound | oscarcm | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_40 = input.LA(1);

                         
                        int index35_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 117;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 118;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred159_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred163_ChemicalChunker()) ) {s = 121;}

                         
                        input.seek(index35_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_42 = input.LA(1);

                         
                        int index35_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 123;}

                         
                        input.seek(index35_42);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_43 = input.LA(1);

                         
                        int index35_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 118;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                         
                        input.seek(index35_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_44 = input.LA(1);

                         
                        int index35_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                         
                        input.seek(index35_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_46 = input.LA(1);

                         
                        int index35_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                         
                        input.seek(index35_46);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_48 = input.LA(1);

                         
                        int index35_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred164_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index35_48);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_57 = input.LA(1);

                         
                        int index35_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_57);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_58 = input.LA(1);

                         
                        int index35_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_58);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_59 = input.LA(1);

                         
                        int index35_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_59);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_60 = input.LA(1);

                         
                        int index35_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_61 = input.LA(1);

                         
                        int index35_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_61);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_62 = input.LA(1);

                         
                        int index35_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index35_62);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA35_98 = input.LA(1);

                         
                        int index35_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 99;}

                         
                        input.seek(index35_98);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\44\uffff";
    static final String DFA39_eofS =
        "\44\uffff";
    static final String DFA39_minS =
        "\1\14\1\uffff\40\0\2\uffff";
    static final String DFA39_maxS =
        "\1\u00af\1\uffff\40\0\2\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\40\uffff\1\2\1\3";
    static final String DFA39_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\2\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\14\1\15\4\uffff\1\20\1\21\1\17\1\25\1\26\1\35\1\36\1\22\1"+
            "\34\1\27\1\31\1\23\1\24\1\33\1\32\1\30\101\uffff\1\1\25\uffff"+
            "\1\41\4\uffff\1\40\12\uffff\1\16\1\10\1\11\1\12\1\13\31\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\uffff\1\37",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "76:1: prepphrase : ( ( neg )? prepphraseOther | prepphraseTemp | prepphraseTime );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\34\uffff";
    static final String DFA42_eofS =
        "\34\uffff";
    static final String DFA42_minS =
        "\1\14\14\12\1\uffff\14\0\2\uffff";
    static final String DFA42_maxS =
        "\1\u00af\14\12\1\uffff\14\0\2\uffff";
    static final String DFA42_acceptS =
        "\15\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA42_specialS =
        "\16\uffff\1\7\1\2\1\10\1\11\1\0\1\6\1\12\1\3\1\5\1\13\1\1\1\4\2"+
        "\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\13\1\14\4\uffff\20\15\127\uffff\1\15\4\uffff\1\15\12\uffff"+
            "\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6\1\3\1\5\1\uffff"+
            "\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "85:3: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_18 = input.LA(1);

                         
                        int index42_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_24 = input.LA(1);

                         
                        int index42_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_21 = input.LA(1);

                         
                        int index42_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_25 = input.LA(1);

                         
                        int index42_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_22 = input.LA(1);

                         
                        int index42_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_19 = input.LA(1);

                         
                        int index42_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_16 = input.LA(1);

                         
                        int index42_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_17 = input.LA(1);

                         
                        int index42_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_20 = input.LA(1);

                         
                        int index42_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_23 = input.LA(1);

                         
                        int index42_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index42_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\34\uffff";
    static final String DFA47_eofS =
        "\34\uffff";
    static final String DFA47_minS =
        "\1\14\14\12\1\uffff\14\0\2\uffff";
    static final String DFA47_maxS =
        "\1\u00af\14\12\1\uffff\14\0\2\uffff";
    static final String DFA47_acceptS =
        "\15\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA47_specialS =
        "\16\uffff\1\10\1\1\1\6\1\12\1\0\1\5\1\3\1\13\1\2\1\7\1\4\1\11\2"+
        "\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\13\1\14\4\uffff\20\15\127\uffff\1\15\4\uffff\1\15\12\uffff"+
            "\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6\1\3\1\5\1\uffff"+
            "\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "91:18: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_15 = input.LA(1);

                         
                        int index47_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_22 = input.LA(1);

                         
                        int index47_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_24 = input.LA(1);

                         
                        int index47_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_23 = input.LA(1);

                         
                        int index47_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_25 = input.LA(1);

                         
                        int index47_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_21 = input.LA(1);

                         
                        int index47_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index47_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\20\uffff";
    static final String DFA54_eofS =
        "\2\uffff\1\4\6\uffff\1\4\6\uffff";
    static final String DFA54_minS =
        "\1\64\1\12\1\13\1\12\1\uffff\2\12\1\uffff\1\64\1\13\1\0\1\uffff"+
        "\1\12\1\uffff\1\0\1\uffff";
    static final String DFA54_maxS =
        "\1\64\1\12\1\u00bd\1\12\1\uffff\2\12\1\uffff\1\64\1\u00bd\1\0\1"+
        "\uffff\1\12\1\uffff\1\0\1\uffff";
    static final String DFA54_acceptS =
        "\4\uffff\1\5\2\uffff\1\4\3\uffff\1\3\1\uffff\1\2\1\uffff\1\1";
    static final String DFA54_specialS =
        "\10\uffff\1\1\1\uffff\1\0\3\uffff\1\2\1\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\1",
            "\1\2",
            "\5\4\2\uffff\22\4\1\uffff\17\4\1\6\25\4\1\uffff\27\4\1\7\1"+
            "\4\1\3\1\4\1\uffff\4\4\15\uffff\2\4\4\uffff\1\4\3\uffff\3\4"+
            "\4\uffff\1\4\1\5\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\13"+
            "\uffff\1\4\5\uffff\5\4\1\uffff\3\4\1\uffff\15\4",
            "\1\10",
            "",
            "\1\11",
            "\1\12",
            "",
            "\1\13",
            "\5\4\2\uffff\22\4\1\uffff\17\4\1\14\25\4\1\uffff\27\4\1\uffff"+
            "\3\4\1\uffff\4\4\15\uffff\2\4\4\uffff\1\4\3\uffff\3\4\4\uffff"+
            "\6\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\13\uffff\1\4\5\uffff"+
            "\5\4\1\uffff\3\4\1\uffff\15\4",
            "\1\uffff",
            "",
            "\1\16",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "105:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA54_8==52) ) {s = 11;}

                        else if ( (synpred225_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\u0082\uffff";
    static final String DFA61_eofS =
        "\1\1\u0081\uffff";
    static final String DFA61_minS =
        "\1\13\26\uffff\1\0\152\uffff";
    static final String DFA61_maxS =
        "\1\u00bd\26\uffff\1\0\152\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\177\uffff\1\1";
    static final String DFA61_specialS =
        "\27\uffff\1\0\152\uffff}>";
    static final String[] DFA61_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\27\1\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\6"+
            "\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()* loopback of 114:18: ( quantity )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\35\uffff";
    static final String DFA65_eofS =
        "\1\1\2\uffff\1\1\1\uffff\1\1\4\uffff\4\1\3\uffff\1\1\2\uffff\1\1"+
        "\4\uffff\4\1";
    static final String DFA65_minS =
        "\1\13\1\uffff\1\12\1\13\1\12\1\13\4\12\4\13\2\12\1\0\1\13\1\uffff"+
        "\1\12\1\13\4\12\4\13";
    static final String DFA65_maxS =
        "\1\u00bd\1\uffff\1\12\1\u00bd\1\12\1\u00bd\4\12\4\u00bd\2\12\1\0"+
        "\1\u00bd\1\uffff\1\12\1\u00bd\4\12\4\u00bd";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\20\uffff\1\1\12\uffff";
    static final String DFA65_specialS =
        "\20\uffff\1\0\14\uffff}>";
    static final String[] DFA65_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\2\1\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\6"+
            "\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\3",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\3\1\1\uffff"+
            "\4\1\15\uffff\1\1\1\4\4\uffff\1\1\3\uffff\3\1\4\uffff\6\1\1"+
            "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1"+
            "\1\uffff\3\1\1\uffff\15\1",
            "\1\5",
            "\5\1\2\uffff\22\1\1\10\1\7\2\1\1\6\41\1\1\uffff\27\1\1\uffff"+
            "\3\1\1\11\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\6"+
            "\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\1\20",
            "\1\21",
            "\1\uffff",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\3\1\1\uffff"+
            "\4\1\15\uffff\1\1\1\23\4\uffff\1\1\3\uffff\3\1\4\uffff\6\1\1"+
            "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1"+
            "\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\24",
            "\5\1\2\uffff\22\1\1\27\1\26\2\1\1\30\41\1\1\uffff\27\1\1\uffff"+
            "\3\1\1\25\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\6"+
            "\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\26\1\1\17\1\uffff\3"+
            "\1\1\uffff\3\1\1\16\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1"
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 122:11: ( quantity )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_16 = input.LA(1);

                         
                        int index65_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index65_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\72\uffff";
    static final String DFA68_eofS =
        "\1\2\71\uffff";
    static final String DFA68_minS =
        "\1\13\1\0\1\uffff\66\0\1\uffff";
    static final String DFA68_maxS =
        "\1\u00bd\1\0\1\uffff\66\0\1\uffff";
    static final String DFA68_acceptS =
        "\2\uffff\1\2\66\uffff\1\1";
    static final String DFA68_specialS =
        "\1\uffff\1\14\1\uffff\1\17\1\10\1\42\1\13\1\63\1\53\1\16\1\62\1"+
        "\34\1\37\1\25\1\66\1\2\1\56\1\22\1\24\1\47\1\4\1\54\1\45\1\60\1"+
        "\41\1\61\1\21\1\50\1\43\1\33\1\20\1\51\1\44\1\3\1\55\1\15\1\64\1"+
        "\1\1\46\1\57\1\36\1\6\1\12\1\23\1\52\1\5\1\27\1\11\1\0\1\32\1\65"+
        "\1\26\1\40\1\31\1\35\1\30\1\7\1\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\13\1\7\1\10\1\23\1\55\2\uffff\20\2\1\16\1\24\1\uffff\1\36"+
            "\1\27\1\30\1\45\1\31\1\32\1\33\1\34\1\35\1\25\1\37\1\40\1\41"+
            "\1\42\1\43\1\14\4\2\1\22\1\54\10\2\1\26\1\2\1\44\4\2\1\uffff"+
            "\1\2\1\56\1\2\1\57\4\2\1\60\1\2\1\46\3\2\1\61\2\2\1\53\4\2\1"+
            "\1\1\uffff\3\2\1\uffff\2\2\1\15\1\2\15\uffff\1\2\1\12\4\uffff"+
            "\1\2\3\uffff\1\67\1\62\1\63\4\uffff\1\2\1\3\1\4\1\5\1\6\1\2"+
            "\1\uffff\1\17\1\uffff\1\20\2\uffff\1\21\13\uffff\1\11\5\uffff"+
            "\5\2\1\uffff\1\2\1\64\1\2\1\uffff\6\2\1\47\1\50\1\51\1\52\1"+
            "\65\1\66\1\70",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()+ loopback of 124:31: ( ( jj )? noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_48 = input.LA(1);

                         
                        int index68_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_48);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA68_37 = input.LA(1);

                         
                        int index68_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA68_15 = input.LA(1);

                         
                        int index68_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA68_33 = input.LA(1);

                         
                        int index68_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA68_20 = input.LA(1);

                         
                        int index68_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA68_45 = input.LA(1);

                         
                        int index68_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA68_41 = input.LA(1);

                         
                        int index68_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_41);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA68_56 = input.LA(1);

                         
                        int index68_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_56);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA68_4 = input.LA(1);

                         
                        int index68_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA68_47 = input.LA(1);

                         
                        int index68_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_47);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA68_42 = input.LA(1);

                         
                        int index68_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA68_6 = input.LA(1);

                         
                        int index68_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_6);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA68_1 = input.LA(1);

                         
                        int index68_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_1);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA68_35 = input.LA(1);

                         
                        int index68_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_35);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA68_3 = input.LA(1);

                         
                        int index68_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_3);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA68_30 = input.LA(1);

                         
                        int index68_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_30);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA68_26 = input.LA(1);

                         
                        int index68_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_26);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA68_17 = input.LA(1);

                         
                        int index68_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA68_43 = input.LA(1);

                         
                        int index68_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_43);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA68_18 = input.LA(1);

                         
                        int index68_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_18);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA68_13 = input.LA(1);

                         
                        int index68_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_13);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA68_51 = input.LA(1);

                         
                        int index68_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_51);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA68_46 = input.LA(1);

                         
                        int index68_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_46);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA68_55 = input.LA(1);

                         
                        int index68_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_55);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA68_53 = input.LA(1);

                         
                        int index68_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_53);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA68_49 = input.LA(1);

                         
                        int index68_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_49);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA68_29 = input.LA(1);

                         
                        int index68_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA68_11 = input.LA(1);

                         
                        int index68_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA68_54 = input.LA(1);

                         
                        int index68_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_54);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA68_40 = input.LA(1);

                         
                        int index68_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_40);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA68_12 = input.LA(1);

                         
                        int index68_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_12);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA68_52 = input.LA(1);

                         
                        int index68_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_52);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA68_24 = input.LA(1);

                         
                        int index68_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_24);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA68_5 = input.LA(1);

                         
                        int index68_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_5);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA68_28 = input.LA(1);

                         
                        int index68_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_28);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA68_32 = input.LA(1);

                         
                        int index68_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_32);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA68_22 = input.LA(1);

                         
                        int index68_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_22);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA68_38 = input.LA(1);

                         
                        int index68_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA68_19 = input.LA(1);

                         
                        int index68_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_19);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA68_27 = input.LA(1);

                         
                        int index68_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_27);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA68_31 = input.LA(1);

                         
                        int index68_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_31);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA68_44 = input.LA(1);

                         
                        int index68_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA68_8 = input.LA(1);

                         
                        int index68_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_8);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA68_21 = input.LA(1);

                         
                        int index68_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_21);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA68_34 = input.LA(1);

                         
                        int index68_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_34);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA68_16 = input.LA(1);

                         
                        int index68_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_16);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA68_39 = input.LA(1);

                         
                        int index68_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_39);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA68_23 = input.LA(1);

                         
                        int index68_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_23);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA68_25 = input.LA(1);

                         
                        int index68_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_25);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA68_10 = input.LA(1);

                         
                        int index68_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_10);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA68_7 = input.LA(1);

                         
                        int index68_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_7);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA68_36 = input.LA(1);

                         
                        int index68_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_36);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA68_50 = input.LA(1);

                         
                        int index68_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_50);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA68_14 = input.LA(1);

                         
                        int index68_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index68_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\56\uffff";
    static final String DFA69_eofS =
        "\56\uffff";
    static final String DFA69_minS =
        "\1\13\1\12\1\uffff\1\44\4\12\4\33\2\12\1\171\1\13\3\12\1\uffff\1"+
        "\44\2\0\4\12\1\uffff\4\141\2\12\1\171\1\33\1\12\1\44\4\12\4\141";
    static final String DFA69_maxS =
        "\1\171\1\12\1\uffff\1\146\4\12\4\151\2\12\1\171\1\u00bd\3\12\1\uffff"+
        "\1\146\2\0\4\12\1\uffff\4\152\2\12\1\171\1\33\1\12\1\146\4\12\4"+
        "\152";
    static final String DFA69_acceptS =
        "\2\uffff\1\2\20\uffff\1\3\7\uffff\1\1\22\uffff";
    static final String DFA69_specialS =
        "\25\uffff\1\0\1\1\27\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\2\155\uffff\1\1",
            "\1\3",
            "",
            "\1\4\1\5\2\uffff\1\6\75\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\15\115\uffff\1\14",
            "\1\15\115\uffff\1\14",
            "\1\15\115\uffff\1\14",
            "\1\15\115\uffff\1\14",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21\4\23\22\uffff\2\23\1\uffff\20\23\4\uffff\2\23\10\uffff"+
            "\1\23\1\uffff\1\23\6\uffff\1\23\1\uffff\1\23\4\uffff\1\23\1"+
            "\uffff\1\23\3\uffff\1\23\2\uffff\1\23\4\uffff\1\23\7\uffff\1"+
            "\23\17\uffff\1\22\10\uffff\3\23\5\uffff\4\23\2\uffff\1\23\1"+
            "\uffff\1\23\2\uffff\1\23\13\uffff\1\23\14\uffff\1\23\10\uffff"+
            "\7\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\1\27\1\32\2\uffff\1\30\75\uffff\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\15",
            "\1\45",
            "\1\51\1\47\2\uffff\1\50\75\uffff\1\46",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41"
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "126:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_21 = input.LA(1);

                         
                        int index69_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index69_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_22 = input.LA(1);

                         
                        int index69_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index69_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\12\uffff";
    static final String DFA73_eofS =
        "\1\1\11\uffff";
    static final String DFA73_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA73_maxS =
        "\1\u00bd\1\uffff\4\0\4\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA73_specialS =
        "\2\uffff\1\0\1\1\1\3\1\2\4\uffff}>";
    static final String[] DFA73_transitionS = {
            "\5\1\2\uffff\22\1\1\uffff\45\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\15\uffff\2\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "()+ loopback of 138:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_3 = input.LA(1);

                         
                        int index73_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_5 = input.LA(1);

                         
                        int index73_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_4 = input.LA(1);

                         
                        int index73_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA74_eotS =
        "\77\uffff";
    static final String DFA74_eofS =
        "\77\uffff";
    static final String DFA74_minS =
        "\1\13\20\uffff\1\0\55\uffff";
    static final String DFA74_maxS =
        "\1\u00bd\20\uffff\1\0\55\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\2\74\uffff\1\1";
    static final String DFA74_specialS =
        "\21\uffff\1\0\55\uffff}>";
    static final String[] DFA74_transitionS = {
            "\5\1\22\uffff\2\1\1\uffff\20\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\76\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:58: ( conjunction )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_17 = input.LA(1);

                         
                        int index74_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index74_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\17\uffff";
    static final String DFA75_eofS =
        "\17\uffff";
    static final String DFA75_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA75_maxS =
        "\1\u00bd\1\uffff\6\12\6\0\1\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA75_specialS =
        "\10\uffff\1\3\1\0\1\2\1\5\1\4\1\1\1\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\1\uffff\20\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:71: ( adj )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA75_11 = input.LA(1);

                         
                        int index75_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document207 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4200078BFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_sentence_in_sentences229 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x430007ABFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences231 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x430007ABFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_comma_in_sentences238 = new BitSet(new long[]{0x0000000000003002L,0x0100002300000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_cc_in_sentences240 = new BitSet(new long[]{0x0000000000003002L,0x0100002300000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000003002L,0x0100002300000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_adv_in_sentences244 = new BitSet(new long[]{0x0000000000003002L,0x0100002300000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_colon_in_sentences246 = new BitSet(new long[]{0x0000000000003002L,0x0100002300000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence258 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_verbphrase_in_sentence260 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_prepphrase_in_sentence262 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_unmatchedTokens301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_unmatchedTokens303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure356 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure360 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure362 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure368 = new BitSet(new long[]{0x061FFFEC0820F802L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure370 = new BitSet(new long[]{0x061FFFEC0820F802L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure378 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure381 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure384 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure388 = new BitSet(new long[]{0x061FFFEC0820F802L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure390 = new BitSet(new long[]{0x061FFFEC0820F802L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure399 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure402 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_cc_in_conjunction416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure447 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure450 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure453 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure457 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure460 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure463 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure466 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_md_in_verbphraseStructure469 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure472 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure475 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure478 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure485 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure488 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure491 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x4300020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_vb_in_verb501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_noun650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_noun680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_noun682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_noun702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_noun704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_noun706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_noun708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_noun710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_noun712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_noun714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_noun716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2748 = new BitSet(new long[]{0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure2750 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure2752 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure2754 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure1763 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure1765 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_mixtureContent776 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_measurements_in_mixtureContent778 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_md_in_mixtureContent780 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent782 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent784 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_oscarcm_in_mixtureContent786 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_molecule_in_mixtureContent788 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent790 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_dash_in_mixtureContent792 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_sym_in_mixtureContent794 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent796 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_noun_in_mixtureContent798 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_inof_in_mixtureContent800 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_inAll_in_mixtureContent802 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent804 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_comma_in_mixtureContent806 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_adj_in_mixtureContent808 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_colon_in_mixtureContent810 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent812 = new BitSet(new long[]{0xFFFFFFEFFFFCF802L,0x02000233FFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_jj_in_adj822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_adv850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase863 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000800000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseOther882 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0000800000000200L});
    public static final BitSet FOLLOW_adj_in_prepphraseOther884 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0000800000000200L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther888 = new BitSet(new long[]{0x061FFFEFFFFCF800L,0x4200020212285028L,0x3F80EF8200253E1CL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf922 = new BitSet(new long[]{0x061FFFEC0000F800L,0x4200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime948 = new BitSet(new long[]{0x00000003FFFC3000L,0x4200000000000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime950 = new BitSet(new long[]{0x00000003FFFC3000L,0x4200000000000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime954 = new BitSet(new long[]{0x0000000000003000L,0x4200000000000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime958 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime962 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime964 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime968 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1009 = new BitSet(new long[]{0x0010000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1076 = new BitSet(new long[]{0x00000003FFFC3000L,0x4200000000000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1078 = new BitSet(new long[]{0x00000003FFFC3000L,0x4200000000000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp1082 = new BitSet(new long[]{0x0000000000003000L,0x4200000000000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp1085 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1089 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1091 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp1095 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp1097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_amount1142 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1165 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1188 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1211 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_apparatus1237 = new BitSet(new long[]{0x0000400000003000L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_adj_in_apparatus1239 = new BitSet(new long[]{0x0000400000003000L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_jj_in_apparatus1241 = new BitSet(new long[]{0x0000400000003000L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nn_in_apparatus1243 = new BitSet(new long[]{0x0000400000003000L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nnpressure_in_apparatus1245 = new BitSet(new long[]{0x0000400000003000L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1249 = new BitSet(new long[]{0x0000400000003002L,0x0200000000000008L,0x0000000000013C00L});
    public static final BitSet FOLLOW_amount_in_measurements1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurements1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurements1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurements1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1296 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1298 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1300 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1302 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1304 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41316 = new BitSet(new long[]{0x0000000000000000L,0x0000001400000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound41319 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound41321 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31348 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31351 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31353 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21385 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21387 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11410 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_moleculeamount11433 = new BitSet(new long[]{0x0000000008000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount11435 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11438 = new BitSet(new long[]{0x0010000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21448 = new BitSet(new long[]{0x0000000000000002L,0x0000020200000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21451 = new BitSet(new long[]{0x0000000000000002L,0x0000020200000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount11505 = new BitSet(new long[]{0x0000000008000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11507 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11510 = new BitSet(new long[]{0x0000000000000800L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21524 = new BitSet(new long[]{0x0000000000000002L,0x0000020200000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21526 = new BitSet(new long[]{0x0000000000000002L,0x0000020200000000L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount31536 = new BitSet(new long[]{0x0000000008000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount31538 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31541 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F80400200253C1CL});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31544 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F80400200253C1CL});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31547 = new BitSet(new long[]{0x061FFFEC0000F802L,0x0200020212285028L,0x3F80400200253C1CL});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity1600 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity1602 = new BitSet(new long[]{0x0000000000000000L,0x0000040200000000L});
    public static final BitSet FOLLOW_comma_in_quantity1605 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity1608 = new BitSet(new long[]{0x0000000000000000L,0x0000040200000000L});
    public static final BitSet FOLLOW_rrb_in_quantity1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_method1650 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_nn_in_method1652 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method1656 = new BitSet(new long[]{0x0000000000000802L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method1659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets1683 = new BitSet(new long[]{0x0000000000000002L,0x0000078200000000L});
    public static final BitSet FOLLOW_rrb_in_brackets1685 = new BitSet(new long[]{0x0000000000000002L,0x0000078200000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets1687 = new BitSet(new long[]{0x0000000000000002L,0x0000078200000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets1689 = new BitSet(new long[]{0x0000000000000002L,0x0000078200000000L});
    public static final BitSet FOLLOW_11_in_oscarcd1697 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj1704 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn1711 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr1718 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront1726 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront1728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode1733 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode1740 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode1742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas1749 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore1756 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter1763 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin1770 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto1777 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith1784 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout1791 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby1798 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia1805 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof1812 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon1819 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor1826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom1833 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder1840 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder1842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover1847 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff1854 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnstate1863 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate1865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nntime1870 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nnmass1877 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass1879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnamount1884 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnatmosphere1891 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nneq1898 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnvol1905 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nnchementity1912 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nntemp1919 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp1921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnflash1926 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nngeneral1933 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnmethod1940 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nnpressure1948 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nncolumn1955 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnchromatography1962 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nnvacuum1969 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nncycle1976 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nntimes1983 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_oscarcm1992 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm1994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_vbuse2001 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_vbchange2008 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbsubmerge2015 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbsubject2022 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_nnadd2031 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_nnmixture2038 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_vbadd2045 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_vbcharge2052 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbcontain2059 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbdrop2066 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbfill2073 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbsuspend2080 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbtreat2087 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbapparatus2096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_nnapparatus2103 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbconcentrate2112 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnconcentrate2119 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate2121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbcool2128 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_vbdegass2137 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbdissolve2146 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve2148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdry2155 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_nndry2162 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbextract2171 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nnextract2178 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbfilter2187 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnfilter2194 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbheat2203 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_vbincrease2210 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbpartition2219 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbprecipitate2228 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_nnprecipitate2235 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbpurify2244 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnpurify2251 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbquench2260 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbrecover2269 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbremove2278 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_nnremove2285 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbstir2294 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbsynthesize2303 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_nnsynthesize2310 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbwait2319 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbwash2328 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbyield2337 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_colon2346 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_comma2353 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_apost2360 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_neg2367 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_dash2374 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_stop2381 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_nnpercent2388 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_lsqb2395 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_rsqb2402 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lrb2409 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rrb2416 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_abl2427 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_abn2436 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abx2445 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_ap2454 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_at2463 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_be2472 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_bed2481 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_bedz2490 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_beg2499 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bem2508 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_ben2517 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_ber2526 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber2528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_bez2535 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_cc2544 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc2546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_cd2553 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cs2562 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_dotok2572 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_dod2581 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_doz2590 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz2592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dt2599 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt2601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dti2608 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dts2617 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts2619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dtx2626 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_ex2635 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_fw2644 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_fwin2653 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_hv2662 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_hvd2671 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hvg2680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvn2689 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_in2698 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_jj2707 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_jjr2716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jjs2725 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjt2734 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_md2743 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_nc2752 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_nn2761 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nn_poss2770 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nns2779 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nns_poss2788 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_np2797 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nnp2807 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np_poss2817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nps2826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nps_poss2835 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nr2844 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr2846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_od2853 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_pn2862 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_pn_poss2871 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pp_poss2880 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pp_poss_poss2889 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ppl2898 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ppls2907 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_prp2917 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppo2927 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_pps2936 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppss2945 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss2947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ql2954 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql2956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_qlp2963 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_rb2972 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_rbr2981 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rbconj2992 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rbt3003 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rbs3012 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rn3022 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rp3031 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_sym3042 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_to3051 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_uh3060 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_vb3069 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_vbp3079 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vbd3090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_vbg3099 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_vbn3108 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vbz3117 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_wdt3126 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt3128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_wp_poss3135 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wpo3145 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_wps3154 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps3156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_wql3164 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wrb3173 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_pdt3184 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt3186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred7_ChemicalChunker244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred8_ChemicalChunker246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred9_ChemicalChunker258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred10_ChemicalChunker260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred11_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred12_ChemicalChunker297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred14_ChemicalChunker301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred18_ChemicalChunker309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred19_ChemicalChunker311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred20_ChemicalChunker313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred21_ChemicalChunker315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred22_ChemicalChunker317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred23_ChemicalChunker319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred25_ChemicalChunker323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred27_ChemicalChunker360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred29_ChemicalChunker368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred30_ChemicalChunker370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred31_ChemicalChunker378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred32_ChemicalChunker381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred34_ChemicalChunker378 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0300020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adj_in_synpred34_ChemicalChunker381 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_adv_in_synpred34_ChemicalChunker384 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F806F8200253C1CL});
    public static final BitSet FOLLOW_noun_in_synpred34_ChemicalChunker388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred35_ChemicalChunker390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred36_ChemicalChunker399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred37_ChemicalChunker402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred39_ChemicalChunker447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred40_ChemicalChunker450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred45_ChemicalChunker466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred46_ChemicalChunker469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred47_ChemicalChunker472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred48_ChemicalChunker475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred49_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred50_ChemicalChunker457 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_adv_in_synpred50_ChemicalChunker460 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_adj_in_synpred50_ChemicalChunker463 = new BitSet(new long[]{0xF9E00003FFFC3000L,0x00000000EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_verb_in_synpred50_ChemicalChunker466 = new BitSet(new long[]{0xF9E00003FFFC3002L,0x00000008EDD7ABD7L,0x007EAF8000007E00L});
    public static final BitSet FOLLOW_md_in_synpred50_ChemicalChunker469 = new BitSet(new long[]{0x0000000000003002L,0x0000000800000000L,0x00002F8000007C00L});
    public static final BitSet FOLLOW_adv_in_synpred50_ChemicalChunker472 = new BitSet(new long[]{0x0000000000003002L,0x0000000800000000L,0x00002F8000003C00L});
    public static final BitSet FOLLOW_adj_in_synpred50_ChemicalChunker475 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_neg_in_synpred50_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred53_ChemicalChunker485 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_comma_in_synpred53_ChemicalChunker488 = new BitSet(new long[]{0xFFFFFFEFFFFCF800L,0x4200020AFFFFFBFFL,0x3FFEEF8200257E1CL});
    public static final BitSet FOLLOW_prepphrase_in_synpred53_ChemicalChunker491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred94_ChemicalChunker600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred95_ChemicalChunker602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred101_ChemicalChunker622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred102_ChemicalChunker624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred103_ChemicalChunker626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred104_ChemicalChunker628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred106_ChemicalChunker632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred112_ChemicalChunker644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred115_ChemicalChunker650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred117_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred123_ChemicalChunker666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred132_ChemicalChunker684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred133_ChemicalChunker686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred134_ChemicalChunker688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred135_ChemicalChunker690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred139_ChemicalChunker698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred140_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred150_ChemicalChunker778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred152_ChemicalChunker782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred153_ChemicalChunker784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred154_ChemicalChunker786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred155_ChemicalChunker788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred156_ChemicalChunker790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred158_ChemicalChunker794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred159_ChemicalChunker796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred160_ChemicalChunker798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred161_ChemicalChunker800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred162_ChemicalChunker802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred163_ChemicalChunker804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred164_ChemicalChunker806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred165_ChemicalChunker808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred167_ChemicalChunker812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred179_ChemicalChunker863 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000800000000L,0x0000AF8000003E00L});
    public static final BitSet FOLLOW_prepphraseOther_in_synpred179_ChemicalChunker866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred180_ChemicalChunker868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred184_ChemicalChunker948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred185_ChemicalChunker950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred207_ChemicalChunker1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred208_ChemicalChunker1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred214_ChemicalChunker1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred215_ChemicalChunker1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred218_ChemicalChunker1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred222_ChemicalChunker1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred223_ChemicalChunker1298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_synpred225_ChemicalChunker1302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred226_ChemicalChunker1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred227_ChemicalChunker1319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred229_ChemicalChunker1351 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred229_ChemicalChunker1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred230_ChemicalChunker1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred231_ChemicalChunker1387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred233_ChemicalChunker1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred237_ChemicalChunker1526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred239_ChemicalChunker1544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred240_ChemicalChunker1544 = new BitSet(new long[]{0x061FFFEC0000F800L,0x0200020212285028L,0x3F80400200253C1CL});
    public static final BitSet FOLLOW_noun_in_synpred240_ChemicalChunker1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred241_ChemicalChunker1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred248_ChemicalChunker1683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred249_ChemicalChunker1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred250_ChemicalChunker1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred251_ChemicalChunker1689 = new BitSet(new long[]{0x0000000000000002L});

}