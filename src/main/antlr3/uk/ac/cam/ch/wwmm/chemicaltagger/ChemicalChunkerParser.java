// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-01-17 23:44:12

    package uk.ac.cam.ch.wwmm.chemicaltagger;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-GRAM'", "'NN-MOL'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-AMOUNT'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RBT'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__159=159;
    public static final int T__27=27;
    public static final int T__158=158;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__19=19;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__16=16;
    public static final int T__147=147;
    public static final int T__15=15;
    public static final int T__90=90;
    public static final int T__18=18;
    public static final int T__149=149;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int NODE=4;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__59=59;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__184=184;
    public static final int T__42=42;
    public static final int T__183=183;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__185=185;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__30=30;
    public static final int T__173=173;
    public static final int T__31=31;
    public static final int T__172=172;
    public static final int T__32=32;
    public static final int T__179=179;
    public static final int T__33=33;
    public static final int ACHAR=7;
    public static final int T__178=178;
    public static final int T__34=34;
    public static final int NEWLINE=6;
    public static final int T__177=177;
    public static final int T__35=35;
    public static final int T__176=176;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "ppo", "dti", "rbt", "synpred157_ChemicalChunker", 
        "oscarcj", "vbremove", "synpred90_ChemicalChunker", "rn", "synpred39_ChemicalChunker", 
        "synpred1_ChemicalChunker", "oscarCompound2", "synpred119_ChemicalChunker", 
        "synpred202_ChemicalChunker", "ben", "inin", "synpred155_ChemicalChunker", 
        "hvn", "dod", "synpred49_ChemicalChunker", "dash", "nnmol", "synpred8_ChemicalChunker", 
        "unnamedmoleculeamount1", "amount", "inbefore", "synpred142_ChemicalChunker", 
        "synpred17_ChemicalChunker", "gram", "measurements", "synpred167_ChemicalChunker", 
        "synpred107_ChemicalChunker", "nns_poss", "vbsubmerge", "synpred183_ChemicalChunker", 
        "synpred151_ChemicalChunker", "ber", "synpred50_ChemicalChunker", 
        "synpred71_ChemicalChunker", "synpred191_ChemicalChunker", "synpred53_ChemicalChunker", 
        "nnprecipitate", "oscarcd", "oscarcm", "synpred102_ChemicalChunker", 
        "synpred129_ChemicalChunker", "vbconcentrate", "synpred28_ChemicalChunker", 
        "synpred32_ChemicalChunker", "synpred101_ChemicalChunker", "synpred42_ChemicalChunker", 
        "inAll", "pn_poss", "nnchementity", "synpred46_ChemicalChunker", 
        "nr", "synpred128_ChemicalChunker", "synpred145_ChemicalChunker", 
        "unnamedmoleculeamount2", "synpred184_ChemicalChunker", "synpred153_ChemicalChunker", 
        "ex", "nntemp", "synpred130_ChemicalChunker", "nnfilter", "wps", 
        "synpred89_ChemicalChunker", "noun", "synpred95_ChemicalChunker", 
        "vbdegass", "at", "synpred112_ChemicalChunker", "vbprecipitate", 
        "nnmethod", "synpred52_ChemicalChunker", "synpred135_ChemicalChunker", 
        "synpred47_ChemicalChunker", "synpred96_ChemicalChunker", "dotok", 
        "invia", "synpred57_ChemicalChunker", "synpred158_ChemicalChunker", 
        "rrb", "synpred139_ChemicalChunker", "vbdissolve", "synpred4_ChemicalChunker", 
        "adj", "mixture", "synpred7_ChemicalChunker", "infor", "synpred111_ChemicalChunker", 
        "synpred141_ChemicalChunker", "prepphraseTemp", "moleculeamount", 
        "synpred186_ChemicalChunker", "synpred11_ChemicalChunker", "nnapparatus", 
        "vbpurify", "to", "synpred121_ChemicalChunker", "oscarCompound1", 
        "vbcontain", "synpred99_ChemicalChunker", "sentences", "synpred26_ChemicalChunker", 
        "synpred72_ChemicalChunker", "synpred74_ChemicalChunker", "unmatchedTokens", 
        "synpred58_ChemicalChunker", "synpred66_ChemicalChunker", "vbchange", 
        "abl", "nnp", "synpred179_ChemicalChunker", "synpred33_ChemicalChunker", 
        "rb", "synpred125_ChemicalChunker", "synpred59_ChemicalChunker", 
        "cdunicode", "inon", "prp", "sentence", "oscarrn", "nnstate", "synpred189_ChemicalChunker", 
        "nps_poss", "vbrecover", "synpred92_ChemicalChunker", "synpred82_ChemicalChunker", 
        "nncycle", "synpred77_ChemicalChunker", "verb", "beg", "synpred204_ChemicalChunker", 
        "hvd", "fw", "synpred109_ChemicalChunker", "synpred196_ChemicalChunker", 
        "lsqb", "inwithout", "synpred152_ChemicalChunker", "synpred55_ChemicalChunker", 
        "synpred173_ChemicalChunker", "nnconcentrate", "verbphraseStructure", 
        "synpred16_ChemicalChunker", "jj", "synpred93_ChemicalChunker", 
        "nounphraseStructure", "nntimes", "synpred100_ChemicalChunker", 
        "synpred106_ChemicalChunker", "ppl", "synpred51_ChemicalChunker", 
        "sym", "synpred156_ChemicalChunker", "synpred190_ChemicalChunker", 
        "pn", "synpred25_ChemicalChunker", "synpred29_ChemicalChunker", 
        "synpred163_ChemicalChunker", "synpred56_ChemicalChunker", "inover", 
        "synpred146_ChemicalChunker", "nc", "synpred37_ChemicalChunker", 
        "unnamedmoleculeamount3", "inunder", "synpred48_ChemicalChunker", 
        "nnpressure", "colon", "wp_poss", "cd", "rsqb", "vbpartition", "vbn", 
        "jjs", "synpred91_ChemicalChunker", "vbsubject", "md", "synpred18_ChemicalChunker", 
        "synpred103_ChemicalChunker", "vbuse", "synpred170_ChemicalChunker", 
        "bed", "synpred84_ChemicalChunker", "synpred23_ChemicalChunker", 
        "synpred80_ChemicalChunker", "synpred187_ChemicalChunker", "method", 
        "abn", "inby", "synpred171_ChemicalChunker", "synpred148_ChemicalChunker", 
        "synpred31_ChemicalChunker", "synpred200_ChemicalChunker", "verbphrase", 
        "vbsynthesize", "synpred185_ChemicalChunker", "brackets", "synpred5_ChemicalChunker", 
        "prepphrase", "nnremove", "synpred136_ChemicalChunker", "synpred162_ChemicalChunker", 
        "synpred21_ChemicalChunker", "vbg", "synpred94_ChemicalChunker", 
        "synpred177_ChemicalChunker", "ppls", "nnflash", "vbsuspend", "nnextract", 
        "synpred43_ChemicalChunker", "synpred14_ChemicalChunker", "moleculeamount2", 
        "synpred44_ChemicalChunker", "synpred61_ChemicalChunker", "synpred192_ChemicalChunker", 
        "synpred166_ChemicalChunker", "moleculeamount1", "synpred97_ChemicalChunker", 
        "synpred188_ChemicalChunker", "synpred75_ChemicalChunker", "cc", 
        "inafter", "nnvacuum", "synpred138_ChemicalChunker", "synpred178_ChemicalChunker", 
        "synpred118_ChemicalChunker", "vbheat", "synpred169_ChemicalChunker", 
        "jjt", "wql", "pp_poss_poss", "oscaront", "doz", "vbtreat", "synpred154_ChemicalChunker", 
        "vbstir", "nns", "rp", "bem", "synpred67_ChemicalChunker", "qlp", 
        "synpred15_ChemicalChunker", "nnpurify", "synpred199_ChemicalChunker", 
        "synpred159_ChemicalChunker", "prepphraseTime", "synpred41_ChemicalChunker", 
        "synpred65_ChemicalChunker", "synpred161_ChemicalChunker", "synpred62_ChemicalChunker", 
        "synpred147_ChemicalChunker", "ap", "synpred30_ChemicalChunker", 
        "synpred63_ChemicalChunker", "synpred68_ChemicalChunker", "ql", 
        "synpred164_ChemicalChunker", "nngram", "vbextract", "nngeneral", 
        "inof", "nncolumn", "dtx", "synpred60_ChemicalChunker", "vbwait", 
        "synpred110_ChemicalChunker", "vbapparatus", "synpred87_ChemicalChunker", 
        "synpred194_ChemicalChunker", "synpred70_ChemicalChunker", "synpred116_ChemicalChunker", 
        "synpred140_ChemicalChunker", "oscarCompound3", "od", "unnamedmoleculeamount", 
        "synpred86_ChemicalChunker", "synpred69_ChemicalChunker", "synpred73_ChemicalChunker", 
        "oscarcpr", "vbincrease", "mmol", "vbcharge", "synpred108_ChemicalChunker", 
        "wdt", "vbd", "synpred160_ChemicalChunker", "synpred85_ChemicalChunker", 
        "synpred203_ChemicalChunker", "synpred182_ChemicalChunker", "neg", 
        "synpred117_ChemicalChunker", "synpred137_ChemicalChunker", "synpred38_ChemicalChunker", 
        "rbr", "dts", "synpred198_ChemicalChunker", "synpred172_ChemicalChunker", 
        "uh", "synpred79_ChemicalChunker", "prepphraseIN", "synpred13_ChemicalChunker", 
        "synpred127_ChemicalChunker", "nnamount", "synpred45_ChemicalChunker", 
        "synpred193_ChemicalChunker", "synpred144_ChemicalChunker", "nnpercent", 
        "vbz", "jjr", "synpred22_ChemicalChunker", "synpred201_ChemicalChunker", 
        "lrb", "synpred81_ChemicalChunker", "inwith", "hvg", "vbadd", "synpred76_ChemicalChunker", 
        "percent", "hv", "pps", "prepphraseOther", "synpred34_ChemicalChunker", 
        "cs", "vbdrop", "inas", "synpred115_ChemicalChunker", "ppss", "synpred20_ChemicalChunker", 
        "infrom", "wpo", "synpred195_ChemicalChunker", "nndry", "synpred6_ChemicalChunker", 
        "synpred132_ChemicalChunker", "synpred149_ChemicalChunker", "nn_poss", 
        "synpred175_ChemicalChunker", "synpred124_ChemicalChunker", "np", 
        "vbfilter", "wrb", "synpred133_ChemicalChunker", "synpred180_ChemicalChunker", 
        "stop", "synpred10_ChemicalChunker", "synpred113_ChemicalChunker", 
        "synpred150_ChemicalChunker", "molecule", "synpred19_ChemicalChunker", 
        "synpred2_ChemicalChunker", "inoff", "apost", "nps", "synpred143_ChemicalChunker", 
        "synpred181_ChemicalChunker", "unmatchedPhrase", "synpred12_ChemicalChunker", 
        "abx", "synpred9_ChemicalChunker", "synpred105_ChemicalChunker", 
        "bez", "synpred104_ChemicalChunker", "synpred35_ChemicalChunker", 
        "synpred165_ChemicalChunker", "pp_poss", "nnchromatography", "synpred197_ChemicalChunker", 
        "vbyield", "synpred40_ChemicalChunker", "synpred78_ChemicalChunker", 
        "vbwash", "nn", "synpred168_ChemicalChunker", "synpred64_ChemicalChunker", 
        "nnsynthesize", "synpred131_ChemicalChunker", "nnadd", "bedz", "nntime", 
        "vbfill", "synpred123_ChemicalChunker", "nnmixture", "number", "synpred120_ChemicalChunker", 
        "vbdry", "document", "tmunicode", "nounphrase", "synpred88_ChemicalChunker", 
        "np_poss", "nnvol", "synpred27_ChemicalChunker", "synpred122_ChemicalChunker", 
        "synpred126_ChemicalChunker", "unnamedmolecule", "synpred174_ChemicalChunker", 
        "ininto", "synpred36_ChemicalChunker", "in", "be", "comma", "nnatmosphere", 
        "oscarCompound", "volume", "nneq", "synpred83_ChemicalChunker", 
        "vbquench", "adv", "synpred24_ChemicalChunker", "synpred176_ChemicalChunker", 
        "synpred134_ChemicalChunker", "vbcool", "vb", "apparatus", "prepphraseOf", 
        "synpred98_ChemicalChunker", "synpred114_ChemicalChunker", "dt", 
        "synpred3_ChemicalChunker", "synpred54_ChemicalChunker"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public ChemicalChunkerParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public ChemicalChunkerParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try { dbg.enterRule(getGrammarFileName(), "document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(33, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            {
            dbg.location(33,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:11: ( sentences )+
            int cnt1=0;
            try { dbg.enterSubRule(1);

            loop1:
            do {
                int alt1=2;
                try { dbg.enterDecision(1);

                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=11 && LA1_0<=15)||(LA1_0>=18 && LA1_0<=35)||(LA1_0>=38 && LA1_0<=39)||(LA1_0>=41 && LA1_0<=54)||(LA1_0>=56 && LA1_0<=74)||LA1_0==76||LA1_0==78||(LA1_0>=80 && LA1_0<=83)||LA1_0==85||(LA1_0>=87 && LA1_0<=89)||(LA1_0>=91 && LA1_0<=96)||(LA1_0>=104 && LA1_0<=107)||LA1_0==122||LA1_0==127||(LA1_0>=137 && LA1_0<=141)||LA1_0==144||LA1_0==146||LA1_0==149||LA1_0==161||(LA1_0>=167 && LA1_0<=169)||LA1_0==173||(LA1_0>=176 && LA1_0<=183)) ) {
                    alt1=1;
                }


                } finally {dbg.exitDecision(1);}

                switch (alt1) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    dbg.location(33,11);
            	    pushFollow(FOLLOW_sentences_in_document161);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt1++;
            } while (true);
            } finally {dbg.exitSubRule(1);}



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 33:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                dbg.location(33,24);
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    dbg.location(33,24);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(33,26);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    dbg.location(33,44);
                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(33, 57);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.cc_return cc5 = null;

        ChemicalChunkerParser.stop_return stop6 = null;

        ChemicalChunkerParser.adv_return adv7 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentences");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(35, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:10: ( ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+ ( comma | cc | stop | adv )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(35,13);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=3;
                try { dbg.enterDecision(2);

                try {
                    isCyclicDecision = true;
                    alt2 = dfa2.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
            	    {
            	    dbg.location(35,14);
            	    pushFollow(FOLLOW_sentence_in_sentences183);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
            	    {
            	    dbg.location(35,23);
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences185);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt2++;
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(35,43);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:43: ( comma | cc | stop | adv )*
            try { dbg.enterSubRule(3);

            loop3:
            do {
                int alt3=5;
                try { dbg.enterDecision(3);

                try {
                    isCyclicDecision = true;
                    alt3 = dfa3.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(3);}

                switch (alt3) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:44: comma
            	    {
            	    dbg.location(35,44);
            	    pushFollow(FOLLOW_comma_in_sentences192);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:50: cc
            	    {
            	    dbg.location(35,50);
            	    pushFollow(FOLLOW_cc_in_sentences194);
            	    cc5=cc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc5.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:53: stop
            	    {
            	    dbg.location(35,53);
            	    pushFollow(FOLLOW_stop_in_sentences196);
            	    stop6=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop6.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: adv
            	    {
            	    dbg.location(35,58);
            	    pushFollow(FOLLOW_adv_in_sentences198);
            	    adv7=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv7.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);
            } finally {dbg.exitSubRule(3);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(35, 64);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentences");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase8 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase9 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase10 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(37, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:9: ( ( nounphrase | verbphrase | prepphrase )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(37,12);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=4;
                try { dbg.enterDecision(4);

                try {
                    isCyclicDecision = true;
                    alt4 = dfa4.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
            	    {
            	    dbg.location(37,13);
            	    pushFollow(FOLLOW_nounphrase_in_sentence210);
            	    nounphrase8=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase8.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
            	    {
            	    dbg.location(37,24);
            	    pushFollow(FOLLOW_verbphrase_in_sentence212);
            	    verbphrase9=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase9.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
            	    {
            	    dbg.location(37,35);
            	    pushFollow(FOLLOW_prepphrase_in_sentence214);
            	    prepphrase10=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase10.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt4++;
            } while (true);
            } finally {dbg.exitSubRule(4);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(37, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens11 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try { dbg.enterRule(getGrammarFileName(), "unmatchedPhrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(40, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:5: unmatchedTokens
            {
            dbg.location(41,5);
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase228);
            unmatchedTokens11=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens11.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 41:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                dbg.location(41,24);
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    dbg.location(41,24);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(41,26);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    dbg.location(41,44);
                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(41, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unmatchedPhrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:1: unmatchedTokens : ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun12 = null;

        ChemicalChunkerParser.verb_return verb13 = null;

        ChemicalChunkerParser.adj_return adj14 = null;

        ChemicalChunkerParser.adv_return adv15 = null;

        ChemicalChunkerParser.inAll_return inAll16 = null;

        ChemicalChunkerParser.dt_return dt17 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd18 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm19 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn20 = null;

        ChemicalChunkerParser.oscaront_return oscaront21 = null;

        ChemicalChunkerParser.brackets_return brackets22 = null;



        try { dbg.enterRule(getGrammarFileName(), "unmatchedTokens");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(43, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:2: ( ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(44,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets )
            int alt5=11;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: noun
                    {
                    dbg.location(44,5);
                    pushFollow(FOLLOW_noun_in_unmatchedTokens249);
                    noun12=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun12.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:10: verb
                    {
                    dbg.location(44,10);
                    pushFollow(FOLLOW_verb_in_unmatchedTokens251);
                    verb13=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb13.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: adj
                    {
                    dbg.location(44,15);
                    pushFollow(FOLLOW_adj_in_unmatchedTokens253);
                    adj14=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj14.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:19: adv
                    {
                    dbg.location(44,19);
                    pushFollow(FOLLOW_adv_in_unmatchedTokens255);
                    adv15=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv15.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:23: inAll
                    {
                    dbg.location(44,23);
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens257);
                    inAll16=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll16.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:29: dt
                    {
                    dbg.location(44,29);
                    pushFollow(FOLLOW_dt_in_unmatchedTokens259);
                    dt17=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt17.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: oscarcd
                    {
                    dbg.location(44,32);
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens261);
                    oscarcd18=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd18.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: oscarcm
                    {
                    dbg.location(44,40);
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens263);
                    oscarcm19=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm19.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: oscarrn
                    {
                    dbg.location(44,48);
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens265);
                    oscarrn20=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn20.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: oscaront
                    {
                    dbg.location(44,56);
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens267);
                    oscaront21=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront21.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:65: brackets
                    {
                    dbg.location(44,65);
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens269);
                    brackets22=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets22.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(44, 74);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unmatchedTokens");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure23 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try { dbg.enterRule(getGrammarFileName(), "nounphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(47, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:4: nounphraseStructure
            {
            dbg.location(48,4);
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase281);
            nounphraseStructure23=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure23.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 48:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                dbg.location(48,28);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(48,30);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                dbg.location(48,50);
                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(48, 70);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:1: nounphraseStructure : ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt24 = null;

        ChemicalChunkerParser.adj_return adj25 = null;

        ChemicalChunkerParser.adv_return adv26 = null;

        ChemicalChunkerParser.noun_return noun27 = null;

        ChemicalChunkerParser.cc_return cc28 = null;

        ChemicalChunkerParser.comma_return comma29 = null;

        ChemicalChunkerParser.cc_return cc30 = null;

        ChemicalChunkerParser.adj_return adj31 = null;

        ChemicalChunkerParser.noun_return noun32 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf33 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN34 = null;



        try { dbg.enterRule(getGrammarFileName(), "nounphraseStructure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(49, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:21: ( ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(49,23);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:23: ( dt )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6);

            int LA6_0 = input.LA(1);

            if ( (LA6_0==127) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(49,23);
                    pushFollow(FOLLOW_dt_in_nounphraseStructure300);
                    dt24=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt24.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(49,27);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:27: ( adj | adv )*
            try { dbg.enterSubRule(7);

            loop7:
            do {
                int alt7=3;
                try { dbg.enterDecision(7);

                try {
                    isCyclicDecision = true;
                    alt7 = dfa7.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(7);}

                switch (alt7) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
            	    {
            	    dbg.location(49,28);
            	    pushFollow(FOLLOW_adj_in_nounphraseStructure304);
            	    adj25=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj25.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:32: adv
            	    {
            	    dbg.location(49,32);
            	    pushFollow(FOLLOW_adv_in_nounphraseStructure306);
            	    adv26=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv26.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);
            } finally {dbg.exitSubRule(7);}

            dbg.location(49,39);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:39: ( noun )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: noun
            	    {
            	    dbg.location(49,39);
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure311);
            	    noun27=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun27.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}

            dbg.location(49,45);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*
            try { dbg.enterSubRule(13);

            loop13:
            do {
                int alt13=2;
                try { dbg.enterDecision(13);

                try {
                    isCyclicDecision = true;
                    alt13 = dfa13.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(13);}

                switch (alt13) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( cc )? ( comma )? ( cc )? ( adj )+ noun
            	    {
            	    dbg.location(49,46);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( cc )?
            	    int alt9=2;
            	    try { dbg.enterSubRule(9);
            	    try { dbg.enterDecision(9);

            	    int LA9_0 = input.LA(1);

            	    if ( (LA9_0==121) ) {
            	        int LA9_1 = input.LA(2);

            	        if ( (LA9_1==TOKEN) ) {
            	            int LA9_3 = input.LA(3);

            	            if ( (synpred25_ChemicalChunker()) ) {
            	                alt9=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(9);}

            	    switch (alt9) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(49,46);
            	            pushFollow(FOLLOW_cc_in_nounphraseStructure315);
            	            cc28=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc28.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(9);}

            	    dbg.location(49,50);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:50: ( comma )?
            	    int alt10=2;
            	    try { dbg.enterSubRule(10);
            	    try { dbg.enterDecision(10);

            	    int LA10_0 = input.LA(1);

            	    if ( (LA10_0==98) ) {
            	        alt10=1;
            	    }
            	    } finally {dbg.exitDecision(10);}

            	    switch (alt10) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(49,50);
            	            pushFollow(FOLLOW_comma_in_nounphraseStructure318);
            	            comma29=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma29.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(10);}

            	    dbg.location(49,57);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:57: ( cc )?
            	    int alt11=2;
            	    try { dbg.enterSubRule(11);
            	    try { dbg.enterDecision(11);

            	    int LA11_0 = input.LA(1);

            	    if ( (LA11_0==121) ) {
            	        alt11=1;
            	    }
            	    } finally {dbg.exitDecision(11);}

            	    switch (alt11) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(49,57);
            	            pushFollow(FOLLOW_cc_in_nounphraseStructure321);
            	            cc30=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc30.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(11);}

            	    dbg.location(49,62);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:62: ( adj )+
            	    int cnt12=0;
            	    try { dbg.enterSubRule(12);

            	    loop12:
            	    do {
            	        int alt12=2;
            	        try { dbg.enterDecision(12);

            	        try {
            	            isCyclicDecision = true;
            	            alt12 = dfa12.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(12);}

            	        switch (alt12) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    dbg.location(49,62);
            	    	    pushFollow(FOLLOW_adj_in_nounphraseStructure325);
            	    	    adj31=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj31.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt12 >= 1 ) break loop12;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(12, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt12++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(12);}

            	    dbg.location(49,67);
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure328);
            	    noun32=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun32.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);
            } finally {dbg.exitSubRule(13);}

            dbg.location(49,77);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:77: ( prepphraseOf | prepphraseIN )*
            try { dbg.enterSubRule(14);

            loop14:
            do {
                int alt14=3;
                try { dbg.enterDecision(14);

                int LA14_0 = input.LA(1);

                if ( (LA14_0==21) ) {
                    int LA14_2 = input.LA(2);

                    if ( (synpred31_ChemicalChunker()) ) {
                        alt14=2;
                    }


                }
                else if ( (LA14_0==27) ) {
                    int LA14_3 = input.LA(2);

                    if ( (synpred30_ChemicalChunker()) ) {
                        alt14=1;
                    }


                }


                } finally {dbg.exitDecision(14);}

                switch (alt14) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:78: prepphraseOf
            	    {
            	    dbg.location(49,78);
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure336);
            	    prepphraseOf33=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf33.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:92: prepphraseIN
            	    {
            	    dbg.location(49,92);
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure339);
            	    prepphraseIN34=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN34.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);
            } finally {dbg.exitSubRule(14);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(49, 108);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphraseStructure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure35 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try { dbg.enterRule(getGrammarFileName(), "verbphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(52, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:53:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:53:4: verbphraseStructure
            {
            dbg.location(53,4);
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase353);
            verbphraseStructure35=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure35.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 53:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                dbg.location(53,28);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:53:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(53,30);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                dbg.location(53,50);
                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(53, 70);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to36 = null;

        ChemicalChunkerParser.inAll_return inAll37 = null;

        ChemicalChunkerParser.inafter_return inafter38 = null;

        ChemicalChunkerParser.adv_return adv39 = null;

        ChemicalChunkerParser.adj_return adj40 = null;

        ChemicalChunkerParser.verb_return verb41 = null;

        ChemicalChunkerParser.adv_return adv42 = null;

        ChemicalChunkerParser.adj_return adj43 = null;

        ChemicalChunkerParser.cc_return cc44 = null;

        ChemicalChunkerParser.comma_return comma45 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase46 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbphraseStructure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(54, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:21: ( ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(54,24);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: ( to )?
            int alt15=2;
            try { dbg.enterSubRule(15);
            try { dbg.enterDecision(15);

            int LA15_0 = input.LA(1);

            if ( (LA15_0==173) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==TOKEN) ) {
                    int LA15_3 = input.LA(3);

                    if ( (synpred32_ChemicalChunker()) ) {
                        alt15=1;
                    }
                }
            }
            } finally {dbg.exitDecision(15);}

            switch (alt15) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    dbg.location(54,24);
                    pushFollow(FOLLOW_to_in_verbphraseStructure372);
                    to36=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to36.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(15);}

            dbg.location(54,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:28: ( inAll )?
            int alt16=2;
            try { dbg.enterSubRule(16);
            try { dbg.enterDecision(16);

            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=18 && LA16_0<=19)||(LA16_0>=21 && LA16_0<=33)||LA16_0==137||LA16_0==173) ) {
                alt16=1;
            }
            else if ( (LA16_0==20) ) {
                int LA16_2 = input.LA(2);

                if ( (LA16_2==TOKEN) ) {
                    int LA16_4 = input.LA(3);

                    if ( (synpred33_ChemicalChunker()) ) {
                        alt16=1;
                    }
                }
            }
            } finally {dbg.exitDecision(16);}

            switch (alt16) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(54,28);
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure375);
                    inAll37=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll37.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(16);}

            dbg.location(54,35);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:35: ( inafter )?
            int alt17=2;
            try { dbg.enterSubRule(17);
            try { dbg.enterDecision(17);

            int LA17_0 = input.LA(1);

            if ( (LA17_0==20) ) {
                alt17=1;
            }
            } finally {dbg.exitDecision(17);}

            switch (alt17) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    dbg.location(54,35);
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure378);
                    inafter38=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter38.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(17);}

            dbg.location(54,44);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:44: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+
            int cnt23=0;
            try { dbg.enterSubRule(23);

            loop23:
            do {
                int alt23=2;
                try { dbg.enterDecision(23);

                try {
                    isCyclicDecision = true;
                    alt23 = dfa23.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(23);}

                switch (alt23) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:45: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
            	    {
            	    dbg.location(54,45);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:45: ( adv )*
            	    try { dbg.enterSubRule(18);

            	    loop18:
            	    do {
            	        int alt18=2;
            	        try { dbg.enterDecision(18);

            	        int LA18_0 = input.LA(1);

            	        if ( ((LA18_0>=167 && LA18_0<=169)) ) {
            	            alt18=1;
            	        }


            	        } finally {dbg.exitDecision(18);}

            	        switch (alt18) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(54,45);
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure382);
            	    	    adv39=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv39.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop18;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(18);}

            	    dbg.location(54,50);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:50: ( adj )?
            	    int alt19=2;
            	    try { dbg.enterSubRule(19);
            	    try { dbg.enterDecision(19);

            	    int LA19_0 = input.LA(1);

            	    if ( ((LA19_0>=12 && LA19_0<=13)||(LA19_0>=138 && LA19_0<=141)) ) {
            	        alt19=1;
            	    }
            	    } finally {dbg.exitDecision(19);}

            	    switch (alt19) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(54,50);
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure385);
            	            adj40=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj40.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(19);}

            	    dbg.location(54,55);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:55: ( verb )+
            	    int cnt20=0;
            	    try { dbg.enterSubRule(20);

            	    loop20:
            	    do {
            	        int alt20=2;
            	        try { dbg.enterDecision(20);

            	        try {
            	            isCyclicDecision = true;
            	            alt20 = dfa20.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(20);}

            	        switch (alt20) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    dbg.location(54,55);
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure388);
            	    	    verb41=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb41.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt20 >= 1 ) break loop20;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(20, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt20++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(20);}

            	    dbg.location(54,61);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:61: ( adv )*
            	    try { dbg.enterSubRule(21);

            	    loop21:
            	    do {
            	        int alt21=2;
            	        try { dbg.enterDecision(21);

            	        switch ( input.LA(1) ) {
            	        case 167:
            	            {
            	            int LA21_2 = input.LA(2);

            	            if ( (LA21_2==TOKEN) ) {
            	                int LA21_5 = input.LA(3);

            	                if ( (synpred38_ChemicalChunker()) ) {
            	                    alt21=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 168:
            	            {
            	            int LA21_3 = input.LA(2);

            	            if ( (LA21_3==TOKEN) ) {
            	                int LA21_6 = input.LA(3);

            	                if ( (synpred38_ChemicalChunker()) ) {
            	                    alt21=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 169:
            	            {
            	            int LA21_4 = input.LA(2);

            	            if ( (LA21_4==TOKEN) ) {
            	                int LA21_7 = input.LA(3);

            	                if ( (synpred38_ChemicalChunker()) ) {
            	                    alt21=1;
            	                }


            	            }


            	            }
            	            break;

            	        }

            	        } finally {dbg.exitDecision(21);}

            	        switch (alt21) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(54,61);
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure391);
            	    	    adv42=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv42.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop21;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(21);}

            	    dbg.location(54,66);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:66: ( adj )?
            	    int alt22=2;
            	    try { dbg.enterSubRule(22);
            	    try { dbg.enterDecision(22);

            	    try {
            	        isCyclicDecision = true;
            	        alt22 = dfa22.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(22);}

            	    switch (alt22) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(54,66);
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure394);
            	            adj43=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj43.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(22);}


            	    }
            	    break;

            	default :
            	    if ( cnt23 >= 1 ) break loop23;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(23, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt23++;
            } while (true);
            } finally {dbg.exitSubRule(23);}

            dbg.location(54,73);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:73: ( ( cc )? ( comma )? prepphrase )*
            try { dbg.enterSubRule(26);

            loop26:
            do {
                int alt26=2;
                try { dbg.enterDecision(26);

                try {
                    isCyclicDecision = true;
                    alt26 = dfa26.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(26);}

                switch (alt26) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:74: ( cc )? ( comma )? prepphrase
            	    {
            	    dbg.location(54,74);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:74: ( cc )?
            	    int alt24=2;
            	    try { dbg.enterSubRule(24);
            	    try { dbg.enterDecision(24);

            	    int LA24_0 = input.LA(1);

            	    if ( (LA24_0==121) ) {
            	        alt24=1;
            	    }
            	    } finally {dbg.exitDecision(24);}

            	    switch (alt24) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(54,74);
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure400);
            	            cc44=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc44.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(24);}

            	    dbg.location(54,78);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:78: ( comma )?
            	    int alt25=2;
            	    try { dbg.enterSubRule(25);
            	    try { dbg.enterDecision(25);

            	    int LA25_0 = input.LA(1);

            	    if ( (LA25_0==98) ) {
            	        alt25=1;
            	    }
            	    } finally {dbg.exitDecision(25);}

            	    switch (alt25) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(54,78);
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure403);
            	            comma45=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma45.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(25);}

            	    dbg.location(54,85);
            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure406);
            	    prepphrase46=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase46.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);
            } finally {dbg.exitSubRule(26);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(54, 98);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphraseStructure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:1: verb : ( vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbg_return vbg47 = null;

        ChemicalChunkerParser.vbd_return vbd48 = null;

        ChemicalChunkerParser.vbz_return vbz49 = null;

        ChemicalChunkerParser.vbn_return vbn50 = null;

        ChemicalChunkerParser.vbuse_return vbuse51 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge52 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject53 = null;

        ChemicalChunkerParser.vbadd_return vbadd54 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge55 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain56 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop57 = null;

        ChemicalChunkerParser.vbfill_return vbfill58 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend59 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat60 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus61 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate62 = null;

        ChemicalChunkerParser.vbcool_return vbcool63 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass64 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve65 = null;

        ChemicalChunkerParser.vbdry_return vbdry66 = null;

        ChemicalChunkerParser.vbextract_return vbextract67 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter68 = null;

        ChemicalChunkerParser.vbheat_return vbheat69 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease70 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition71 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate72 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify73 = null;

        ChemicalChunkerParser.vbquench_return vbquench74 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover75 = null;

        ChemicalChunkerParser.vbremove_return vbremove76 = null;

        ChemicalChunkerParser.vbstir_return vbstir77 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize78 = null;

        ChemicalChunkerParser.vbwait_return vbwait79 = null;

        ChemicalChunkerParser.vbwash_return vbwash80 = null;

        ChemicalChunkerParser.vbyield_return vbyield81 = null;



        try { dbg.enterRule(getGrammarFileName(), "verb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(55, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:6: ( vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield )
            int alt27=35;
            try { dbg.enterDecision(27);

            switch ( input.LA(1) ) {
            case 177:
                {
                alt27=1;
                }
                break;
            case 176:
                {
                alt27=2;
                }
                break;
            case 179:
                {
                alt27=3;
                }
                break;
            case 178:
                {
                alt27=4;
                }
                break;
            case 54:
                {
                alt27=5;
                }
                break;
            case 56:
                {
                alt27=6;
                }
                break;
            case 57:
                {
                alt27=7;
                }
                break;
            case 60:
                {
                alt27=8;
                }
                break;
            case 61:
                {
                alt27=9;
                }
                break;
            case 62:
                {
                alt27=10;
                }
                break;
            case 63:
                {
                alt27=11;
                }
                break;
            case 64:
                {
                alt27=12;
                }
                break;
            case 65:
                {
                alt27=13;
                }
                break;
            case 66:
                {
                alt27=14;
                }
                break;
            case 67:
                {
                alt27=15;
                }
                break;
            case 69:
                {
                alt27=16;
                }
                break;
            case 71:
                {
                alt27=17;
                }
                break;
            case 72:
                {
                alt27=18;
                }
                break;
            case 73:
                {
                alt27=19;
                }
                break;
            case 74:
                {
                alt27=20;
                }
                break;
            case 76:
                {
                alt27=21;
                }
                break;
            case 78:
                {
                alt27=22;
                }
                break;
            case 80:
                {
                alt27=23;
                }
                break;
            case 81:
                {
                alt27=24;
                }
                break;
            case 82:
                {
                alt27=25;
                }
                break;
            case 83:
                {
                alt27=26;
                }
                break;
            case 85:
                {
                alt27=27;
                }
                break;
            case 87:
                {
                alt27=28;
                }
                break;
            case 88:
                {
                alt27=29;
                }
                break;
            case 89:
                {
                alt27=30;
                }
                break;
            case 91:
                {
                alt27=31;
                }
                break;
            case 92:
                {
                alt27=32;
                }
                break;
            case 94:
                {
                alt27=33;
                }
                break;
            case 95:
                {
                alt27=34;
                }
                break;
            case 96:
                {
                alt27=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:8: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,8);
                    pushFollow(FOLLOW_vbg_in_verb416);
                    vbg47=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg47.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:12: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,12);
                    pushFollow(FOLLOW_vbd_in_verb418);
                    vbd48=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd48.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:16: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,16);
                    pushFollow(FOLLOW_vbz_in_verb420);
                    vbz49=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz49.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:20: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,20);
                    pushFollow(FOLLOW_vbn_in_verb422);
                    vbn50=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn50.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:24: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,24);
                    pushFollow(FOLLOW_vbuse_in_verb424);
                    vbuse51=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse51.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:30: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,30);
                    pushFollow(FOLLOW_vbsubmerge_in_verb426);
                    vbsubmerge52=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge52.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:41: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,41);
                    pushFollow(FOLLOW_vbsubject_in_verb428);
                    vbsubject53=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject53.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:51: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,51);
                    pushFollow(FOLLOW_vbadd_in_verb430);
                    vbadd54=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd54.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:57: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,57);
                    pushFollow(FOLLOW_vbcharge_in_verb432);
                    vbcharge55=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge55.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:66: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,66);
                    pushFollow(FOLLOW_vbcontain_in_verb434);
                    vbcontain56=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain56.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:76: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,76);
                    pushFollow(FOLLOW_vbdrop_in_verb436);
                    vbdrop57=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop57.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:83: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,83);
                    pushFollow(FOLLOW_vbfill_in_verb438);
                    vbfill58=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill58.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:90: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,90);
                    pushFollow(FOLLOW_vbsuspend_in_verb440);
                    vbsuspend59=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend59.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:100: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,100);
                    pushFollow(FOLLOW_vbtreat_in_verb442);
                    vbtreat60=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat60.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:108: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,108);
                    pushFollow(FOLLOW_vbapparatus_in_verb444);
                    vbapparatus61=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus61.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:120: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,120);
                    pushFollow(FOLLOW_vbconcentrate_in_verb446);
                    vbconcentrate62=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate62.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:134: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,134);
                    pushFollow(FOLLOW_vbcool_in_verb448);
                    vbcool63=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool63.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:141: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,141);
                    pushFollow(FOLLOW_vbdegass_in_verb450);
                    vbdegass64=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass64.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:150: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,150);
                    pushFollow(FOLLOW_vbdissolve_in_verb452);
                    vbdissolve65=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve65.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:161: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,161);
                    pushFollow(FOLLOW_vbdry_in_verb454);
                    vbdry66=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry66.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:167: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,167);
                    pushFollow(FOLLOW_vbextract_in_verb456);
                    vbextract67=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract67.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:177: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,177);
                    pushFollow(FOLLOW_vbfilter_in_verb458);
                    vbfilter68=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter68.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:187: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,187);
                    pushFollow(FOLLOW_vbheat_in_verb461);
                    vbheat69=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat69.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:194: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,194);
                    pushFollow(FOLLOW_vbincrease_in_verb463);
                    vbincrease70=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease70.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:205: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,205);
                    pushFollow(FOLLOW_vbpartition_in_verb465);
                    vbpartition71=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition71.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:217: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,217);
                    pushFollow(FOLLOW_vbprecipitate_in_verb467);
                    vbprecipitate72=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate72.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:231: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,231);
                    pushFollow(FOLLOW_vbpurify_in_verb469);
                    vbpurify73=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify73.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:240: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,240);
                    pushFollow(FOLLOW_vbquench_in_verb471);
                    vbquench74=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench74.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:249: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,249);
                    pushFollow(FOLLOW_vbrecover_in_verb473);
                    vbrecover75=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover75.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:259: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,259);
                    pushFollow(FOLLOW_vbremove_in_verb475);
                    vbremove76=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove76.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:268: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,268);
                    pushFollow(FOLLOW_vbstir_in_verb477);
                    vbstir77=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir77.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:275: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,275);
                    pushFollow(FOLLOW_vbsynthesize_in_verb479);
                    vbsynthesize78=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize78.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:288: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,288);
                    pushFollow(FOLLOW_vbwait_in_verb481);
                    vbwait79=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait79.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:295: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,295);
                    pushFollow(FOLLOW_vbwash_in_verb483);
                    vbwash80=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash80.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:302: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(55,302);
                    pushFollow(FOLLOW_vbyield_in_verb485);
                    vbyield81=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield81.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(55, 309);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd82 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd83 = null;



        try { dbg.enterRule(getGrammarFileName(), "number");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(56, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:8: ( cd | oscarcd )
            int alt28=2;
            try { dbg.enterDecision(28);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==122) ) {
                alt28=1;
            }
            else if ( (LA28_0==11) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(56,10);
                    pushFollow(FOLLOW_cd_in_number492);
                    cd82=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd82.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(56,13);
                    pushFollow(FOLLOW_oscarcd_in_number494);
                    oscarcd83=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd83.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(56, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "number");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "number"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:1: noun : ( prp | unnamedmolecule | molecule | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | amount | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | mixture | oscarCompound );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp84 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule85 = null;

        ChemicalChunkerParser.molecule_return molecule86 = null;

        ChemicalChunkerParser.nnstate_return nnstate87 = null;

        ChemicalChunkerParser.nn_return nn88 = null;

        ChemicalChunkerParser.nns_return nns89 = null;

        ChemicalChunkerParser.nnp_return nnp90 = null;

        ChemicalChunkerParser.nnadd_return nnadd91 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr92 = null;

        ChemicalChunkerParser.nntime_return nntime93 = null;

        ChemicalChunkerParser.apparatus_return apparatus94 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere95 = null;

        ChemicalChunkerParser.nneq_return nneq96 = null;

        ChemicalChunkerParser.amount_return amount97 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity98 = null;

        ChemicalChunkerParser.measurements_return measurements99 = null;

        ChemicalChunkerParser.nntemp_return nntemp100 = null;

        ChemicalChunkerParser.nnflash_return nnflash101 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral102 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod103 = null;

        ChemicalChunkerParser.nnamount_return nnamount104 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure105 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn106 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography107 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum108 = null;

        ChemicalChunkerParser.nncycle_return nncycle109 = null;

        ChemicalChunkerParser.nntimes_return nntimes110 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate111 = null;

        ChemicalChunkerParser.wdt_return wdt112 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss113 = null;

        ChemicalChunkerParser.wpo_return wpo114 = null;

        ChemicalChunkerParser.wps_return wps115 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize116 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture117 = null;

        ChemicalChunkerParser.oscaront_return oscaront118 = null;

        ChemicalChunkerParser.number_return number119 = null;

        ChemicalChunkerParser.mixture_return mixture120 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound121 = null;



        try { dbg.enterRule(getGrammarFileName(), "noun");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(58, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:6: ( prp | unnamedmolecule | molecule | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | amount | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | mixture | oscarCompound )
            int alt29=38;
            try { dbg.enterDecision(29);

            try {
                isCyclicDecision = true;
                alt29 = dfa29.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:9: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,9);
                    pushFollow(FOLLOW_prp_in_noun504);
                    prp84=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp84.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:13: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,13);
                    pushFollow(FOLLOW_unnamedmolecule_in_noun506);
                    unnamedmolecule85=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule85.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:29: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,29);
                    pushFollow(FOLLOW_molecule_in_noun508);
                    molecule86=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule86.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:38: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,38);
                    pushFollow(FOLLOW_nnstate_in_noun510);
                    nnstate87=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate87.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:46: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,46);
                    pushFollow(FOLLOW_nn_in_noun512);
                    nn88=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn88.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:49: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,49);
                    pushFollow(FOLLOW_nns_in_noun514);
                    nns89=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns89.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:53: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,53);
                    pushFollow(FOLLOW_nnp_in_noun516);
                    nnp90=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp90.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:57: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,57);
                    pushFollow(FOLLOW_nnadd_in_noun518);
                    nnadd91=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd91.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:63: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,63);
                    pushFollow(FOLLOW_oscarcpr_in_noun520);
                    oscarcpr92=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr92.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:72: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,72);
                    pushFollow(FOLLOW_nntime_in_noun522);
                    nntime93=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime93.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:79: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,79);
                    pushFollow(FOLLOW_apparatus_in_noun524);
                    apparatus94=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus94.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:89: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,89);
                    pushFollow(FOLLOW_nnatmosphere_in_noun526);
                    nnatmosphere95=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere95.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:102: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,102);
                    pushFollow(FOLLOW_nneq_in_noun528);
                    nneq96=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq96.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:107: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,107);
                    pushFollow(FOLLOW_amount_in_noun530);
                    amount97=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount97.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:114: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,114);
                    pushFollow(FOLLOW_nnchementity_in_noun532);
                    nnchementity98=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity98.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:127: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,127);
                    pushFollow(FOLLOW_measurements_in_noun534);
                    measurements99=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements99.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:140: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,140);
                    pushFollow(FOLLOW_nntemp_in_noun536);
                    nntemp100=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp100.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:147: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,147);
                    pushFollow(FOLLOW_nnflash_in_noun538);
                    nnflash101=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash101.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:155: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,155);
                    pushFollow(FOLLOW_nngeneral_in_noun540);
                    nngeneral102=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral102.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:165: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,165);
                    pushFollow(FOLLOW_nnmethod_in_noun542);
                    nnmethod103=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod103.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:174: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,174);
                    pushFollow(FOLLOW_nnamount_in_noun544);
                    nnamount104=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount104.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:183: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,183);
                    pushFollow(FOLLOW_nnpressure_in_noun546);
                    nnpressure105=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure105.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:194: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,194);
                    pushFollow(FOLLOW_nncolumn_in_noun548);
                    nncolumn106=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn106.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:203: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,203);
                    pushFollow(FOLLOW_nnchromatography_in_noun550);
                    nnchromatography107=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography107.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:220: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,220);
                    pushFollow(FOLLOW_nnvacuum_in_noun552);
                    nnvacuum108=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum108.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:229: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,229);
                    pushFollow(FOLLOW_nncycle_in_noun554);
                    nncycle109=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle109.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:237: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,237);
                    pushFollow(FOLLOW_nntimes_in_noun556);
                    nntimes110=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes110.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:245: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,245);
                    pushFollow(FOLLOW_nnconcentrate_in_noun558);
                    nnconcentrate111=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate111.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:259: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,259);
                    pushFollow(FOLLOW_wdt_in_noun560);
                    wdt112=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt112.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:263: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,263);
                    pushFollow(FOLLOW_wp_poss_in_noun562);
                    wp_poss113=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss113.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:271: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,271);
                    pushFollow(FOLLOW_wpo_in_noun564);
                    wpo114=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo114.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:275: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,275);
                    pushFollow(FOLLOW_wps_in_noun566);
                    wps115=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps115.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:279: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,279);
                    pushFollow(FOLLOW_nnsynthesize_in_noun568);
                    nnsynthesize116=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize116.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:292: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,292);
                    pushFollow(FOLLOW_nnmixture_in_noun570);
                    nnmixture117=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture117.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:302: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,302);
                    pushFollow(FOLLOW_oscaront_in_noun572);
                    oscaront118=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront118.getTree());

                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:311: number
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,311);
                    pushFollow(FOLLOW_number_in_noun574);
                    number119=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number119.getTree());

                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:318: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,318);
                    pushFollow(FOLLOW_mixture_in_noun576);
                    mixture120=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture120.getTree());

                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:326: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(58,326);
                    pushFollow(FOLLOW_oscarCompound_in_noun578);
                    oscarCompound121=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound121.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(58, 339);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "noun");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "noun"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:1: mixture : lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb122 = null;

        ChemicalChunkerParser.measurements_return measurements123 = null;

        ChemicalChunkerParser.md_return md124 = null;

        ChemicalChunkerParser.stop_return stop125 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound126 = null;

        ChemicalChunkerParser.molecule_return molecule127 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule128 = null;

        ChemicalChunkerParser.dash_return dash129 = null;

        ChemicalChunkerParser.sym_return sym130 = null;

        ChemicalChunkerParser.cd_return cd131 = null;

        ChemicalChunkerParser.noun_return noun132 = null;

        ChemicalChunkerParser.inof_return inof133 = null;

        ChemicalChunkerParser.cd_return cd134 = null;

        ChemicalChunkerParser.comma_return comma135 = null;

        ChemicalChunkerParser.adj_return adj136 = null;

        ChemicalChunkerParser.rrb_return rrb137 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(59, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:8: ( lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:11: lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(59,11);
            pushFollow(FOLLOW_lrb_in_mixture585);
            lrb122=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb122.getTree());
            dbg.location(59,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+
            int cnt30=0;
            try { dbg.enterSubRule(30);

            loop30:
            do {
                int alt30=15;
                try { dbg.enterDecision(30);

                try {
                    isCyclicDecision = true;
                    alt30 = dfa30.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(30);}

                switch (alt30) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:16: measurements
            	    {
            	    dbg.location(59,16);
            	    pushFollow(FOLLOW_measurements_in_mixture588);
            	    measurements123=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements123.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:29: md
            	    {
            	    dbg.location(59,29);
            	    pushFollow(FOLLOW_md_in_mixture590);
            	    md124=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md124.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:32: stop
            	    {
            	    dbg.location(59,32);
            	    pushFollow(FOLLOW_stop_in_mixture592);
            	    stop125=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop125.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:37: oscarCompound
            	    {
            	    dbg.location(59,37);
            	    pushFollow(FOLLOW_oscarCompound_in_mixture594);
            	    oscarCompound126=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound126.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:51: molecule
            	    {
            	    dbg.location(59,51);
            	    pushFollow(FOLLOW_molecule_in_mixture596);
            	    molecule127=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule127.getTree());

            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:60: unnamedmolecule
            	    {
            	    dbg.location(59,60);
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixture598);
            	    unnamedmolecule128=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule128.getTree());

            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:76: dash
            	    {
            	    dbg.location(59,76);
            	    pushFollow(FOLLOW_dash_in_mixture600);
            	    dash129=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash129.getTree());

            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:81: sym
            	    {
            	    dbg.location(59,81);
            	    pushFollow(FOLLOW_sym_in_mixture602);
            	    sym130=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym130.getTree());

            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:85: cd
            	    {
            	    dbg.location(59,85);
            	    pushFollow(FOLLOW_cd_in_mixture604);
            	    cd131=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd131.getTree());

            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:88: noun
            	    {
            	    dbg.location(59,88);
            	    pushFollow(FOLLOW_noun_in_mixture606);
            	    noun132=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun132.getTree());

            	    }
            	    break;
            	case 11 :
            	    dbg.enterAlt(11);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:93: inof
            	    {
            	    dbg.location(59,93);
            	    pushFollow(FOLLOW_inof_in_mixture608);
            	    inof133=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof133.getTree());

            	    }
            	    break;
            	case 12 :
            	    dbg.enterAlt(12);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:98: cd
            	    {
            	    dbg.location(59,98);
            	    pushFollow(FOLLOW_cd_in_mixture610);
            	    cd134=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd134.getTree());

            	    }
            	    break;
            	case 13 :
            	    dbg.enterAlt(13);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:101: comma
            	    {
            	    dbg.location(59,101);
            	    pushFollow(FOLLOW_comma_in_mixture612);
            	    comma135=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma135.getTree());

            	    }
            	    break;
            	case 14 :
            	    dbg.enterAlt(14);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:107: adj
            	    {
            	    dbg.location(59,107);
            	    pushFollow(FOLLOW_adj_in_mixture614);
            	    adj136=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj136.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt30++;
            } while (true);
            } finally {dbg.exitSubRule(30);}

            dbg.location(59,113);
            pushFollow(FOLLOW_rrb_in_mixture618);
            rrb137=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb137.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(59, 116);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixture"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj138 = null;

        ChemicalChunkerParser.jjr_return jjr139 = null;

        ChemicalChunkerParser.jjs_return jjs140 = null;

        ChemicalChunkerParser.jjt_return jjt141 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj142 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn143 = null;



        try { dbg.enterRule(getGrammarFileName(), "adj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(61, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt31=6;
            try { dbg.enterDecision(31);

            switch ( input.LA(1) ) {
            case 138:
                {
                alt31=1;
                }
                break;
            case 139:
                {
                alt31=2;
                }
                break;
            case 140:
                {
                alt31=3;
                }
                break;
            case 141:
                {
                alt31=4;
                }
                break;
            case 12:
                {
                alt31=5;
                }
                break;
            case 13:
                {
                alt31=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,7);
                    pushFollow(FOLLOW_jj_in_adj626);
                    jj138=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj138.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,10);
                    pushFollow(FOLLOW_jjr_in_adj628);
                    jjr139=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr139.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,14);
                    pushFollow(FOLLOW_jjs_in_adj630);
                    jjs140=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs140.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,18);
                    pushFollow(FOLLOW_jjt_in_adj632);
                    jjt141=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt141.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,22);
                    pushFollow(FOLLOW_oscarcj_in_adj634);
                    oscarcj142=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj142.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(61,30);
                    pushFollow(FOLLOW_oscarrn_in_adj636);
                    oscarrn143=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn143.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(61, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:1: adv : ( rb | rbr | rbt );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb144 = null;

        ChemicalChunkerParser.rbr_return rbr145 = null;

        ChemicalChunkerParser.rbt_return rbt146 = null;



        try { dbg.enterRule(getGrammarFileName(), "adv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(63, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:5: ( rb | rbr | rbt )
            int alt32=3;
            try { dbg.enterDecision(32);

            switch ( input.LA(1) ) {
            case 167:
                {
                alt32=1;
                }
                break;
            case 168:
                {
                alt32=2;
                }
                break;
            case 169:
                {
                alt32=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,7);
                    pushFollow(FOLLOW_rb_in_adv644);
                    rb144=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb144.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,10);
                    pushFollow(FOLLOW_rbr_in_adv646);
                    rbr145=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr145.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(63,14);
                    pushFollow(FOLLOW_rbt_in_adv648);
                    rbt146=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt146.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(63, 17);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther147 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp148 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime149 = null;



        try { dbg.enterRule(getGrammarFileName(), "prepphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(65, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:2: ( prepphraseOther | prepphraseTemp | prepphraseTime )
            int alt33=3;
            try { dbg.enterDecision(33);

            try {
                isCyclicDecision = true;
                alt33 = dfa33.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:5: prepphraseOther
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(66,5);
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase659);
                    prepphraseOther147=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther147.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:21: prepphraseTemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(66,21);
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase661);
                    prepphraseTemp148=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp148.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:36: prepphraseTime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(66,36);
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase663);
                    prepphraseTime149=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime149.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(66, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:1: prepphraseOther : ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv150 = null;

        ChemicalChunkerParser.adj_return adj151 = null;

        ChemicalChunkerParser.inAll_return inAll152 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase153 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOther");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(68, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:2: ( ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:4: ( adv | adj )? ( inAll )+ nounphrase
            {
            dbg.location(69,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:4: ( adv | adj )?
            int alt34=3;
            try { dbg.enterSubRule(34);
            try { dbg.enterDecision(34);

            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=167 && LA34_0<=169)) ) {
                alt34=1;
            }
            else if ( ((LA34_0>=12 && LA34_0<=13)||(LA34_0>=138 && LA34_0<=141)) ) {
                alt34=2;
            }
            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:5: adv
                    {
                    dbg.location(69,5);
                    pushFollow(FOLLOW_adv_in_prepphraseOther675);
                    adv150=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv150.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:9: adj
                    {
                    dbg.location(69,9);
                    pushFollow(FOLLOW_adj_in_prepphraseOther677);
                    adj151=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj151.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(34);}

            dbg.location(69,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:15: ( inAll )+
            int cnt35=0;
            try { dbg.enterSubRule(35);

            loop35:
            do {
                int alt35=2;
                try { dbg.enterDecision(35);

                int LA35_0 = input.LA(1);

                if ( ((LA35_0>=18 && LA35_0<=33)||LA35_0==137||LA35_0==173) ) {
                    alt35=1;
                }


                } finally {dbg.exitDecision(35);}

                switch (alt35) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    dbg.location(69,15);
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther681);
            	    inAll152=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll152.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt35 >= 1 ) break loop35;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(35, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt35++;
            } while (true);
            } finally {dbg.exitSubRule(35);}

            dbg.location(69,23);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOther685);
            nounphrase153=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase153.getTree());


            // AST REWRITE
            // elements: adj, nounphrase, adv, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 69:34: -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
            {
                dbg.location(69,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:38: ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(69,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(69,60);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:60: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(69,60);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(69,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:65: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(69,65);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(69,70);
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    dbg.location(69,70);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(69,78);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(69, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOther");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof154 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase155 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOf");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(70, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:4: inof nounphrase
            {
            dbg.location(71,4);
            pushFollow(FOLLOW_inof_in_prepphraseOf715);
            inof154=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof154.getTree());
            dbg.location(71,10);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf718);
            nounphrase155=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase155.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 71:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                dbg.location(71,24);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(71,26);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(71,46);
                adaptor.addChild(root_1, stream_inof.nextTree());
                dbg.location(71,52);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(71, 63);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOf");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:1: prepphraseTime : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv156 = null;

        ChemicalChunkerParser.adj_return adj157 = null;

        ChemicalChunkerParser.inAll_return inAll158 = null;

        ChemicalChunkerParser.dt_return dt159 = null;

        ChemicalChunkerParser.adv_return adv160 = null;

        ChemicalChunkerParser.adj_return adj161 = null;

        ChemicalChunkerParser.cd_return cd162 = null;

        ChemicalChunkerParser.nntime_return nntime163 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(73, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:2: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:3: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime
            {
            dbg.location(74,3);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:3: ( adv | adj )?
            int alt36=3;
            try { dbg.enterSubRule(36);
            try { dbg.enterDecision(36);

            try {
                isCyclicDecision = true;
                alt36 = dfa36.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:4: adv
                    {
                    dbg.location(74,4);
                    pushFollow(FOLLOW_adv_in_prepphraseTime741);
                    adv156=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv156.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:8: adj
                    {
                    dbg.location(74,8);
                    pushFollow(FOLLOW_adj_in_prepphraseTime743);
                    adj157=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj157.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(36);}

            dbg.location(74,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:14: ( inAll )?
            int alt37=2;
            try { dbg.enterSubRule(37);
            try { dbg.enterDecision(37);

            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=18 && LA37_0<=33)||LA37_0==137||LA37_0==173) ) {
                alt37=1;
            }
            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(74,14);
                    pushFollow(FOLLOW_inAll_in_prepphraseTime747);
                    inAll158=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll158.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(37);}

            dbg.location(74,22);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:22: ( dt )?
            int alt38=2;
            try { dbg.enterSubRule(38);
            try { dbg.enterDecision(38);

            int LA38_0 = input.LA(1);

            if ( (LA38_0==127) ) {
                alt38=1;
            }
            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(74,22);
                    pushFollow(FOLLOW_dt_in_prepphraseTime751);
                    dt159=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt159.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(38);}

            dbg.location(74,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:26: ( adv | adj )?
            int alt39=3;
            try { dbg.enterSubRule(39);
            try { dbg.enterDecision(39);

            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=167 && LA39_0<=169)) ) {
                alt39=1;
            }
            else if ( ((LA39_0>=12 && LA39_0<=13)||(LA39_0>=138 && LA39_0<=141)) ) {
                alt39=2;
            }
            } finally {dbg.exitDecision(39);}

            switch (alt39) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:27: adv
                    {
                    dbg.location(74,27);
                    pushFollow(FOLLOW_adv_in_prepphraseTime755);
                    adv160=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv160.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:31: adj
                    {
                    dbg.location(74,31);
                    pushFollow(FOLLOW_adj_in_prepphraseTime757);
                    adj161=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj161.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(39);}

            dbg.location(74,37);
            pushFollow(FOLLOW_cd_in_prepphraseTime761);
            cd162=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd162.getTree());
            dbg.location(74,40);
            pushFollow(FOLLOW_nntime_in_prepphraseTime763);
            nntime163=nntime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntime.add(nntime163.getTree());


            // AST REWRITE
            // elements: cd, inAll, nntime, dt, adv, adv, adj, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:47: -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
            {
                dbg.location(74,51);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:51: ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(74,53);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                dbg.location(74,73);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:73: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(74,73);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(74,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:78: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(74,78);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(74,83);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:83: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(74,83);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(74,90);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:90: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(74,90);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(74,94);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:94: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(74,94);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(74,99);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:99: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(74,99);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(74,104);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(74,107);
                adaptor.addChild(root_1, stream_nntime.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(74, 114);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: prepphraseIN : inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin164 = null;

        ChemicalChunkerParser.molecule_return molecule165 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseIN");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(75, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:2: ( inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:3: inin molecule
            {
            dbg.location(76,3);
            pushFollow(FOLLOW_inin_in_prepphraseIN802);
            inin164=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin164.getTree());
            dbg.location(76,8);
            pushFollow(FOLLOW_molecule_in_prepphraseIN804);
            molecule165=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule165.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 76:17: -> ^( NODE[\"INMolecule\"] inin molecule )
            {
                dbg.location(76,21);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:21: ^( NODE[\"INMolecule\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(76,23);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "INMolecule"), root_1);

                dbg.location(76,43);
                adaptor.addChild(root_1, stream_inin.nextTree());
                dbg.location(76,49);
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(76, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseIN");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in166 = null;

        ChemicalChunkerParser.inafter_return inafter167 = null;

        ChemicalChunkerParser.inas_return inas168 = null;

        ChemicalChunkerParser.inbefore_return inbefore169 = null;

        ChemicalChunkerParser.inby_return inby170 = null;

        ChemicalChunkerParser.infor_return infor171 = null;

        ChemicalChunkerParser.infrom_return infrom172 = null;

        ChemicalChunkerParser.inin_return inin173 = null;

        ChemicalChunkerParser.ininto_return ininto174 = null;

        ChemicalChunkerParser.inof_return inof175 = null;

        ChemicalChunkerParser.inoff_return inoff176 = null;

        ChemicalChunkerParser.inon_return inon177 = null;

        ChemicalChunkerParser.inover_return inover178 = null;

        ChemicalChunkerParser.inunder_return inunder179 = null;

        ChemicalChunkerParser.invia_return invia180 = null;

        ChemicalChunkerParser.inwith_return inwith181 = null;

        ChemicalChunkerParser.inwithout_return inwithout182 = null;

        ChemicalChunkerParser.to_return to183 = null;



        try { dbg.enterRule(getGrammarFileName(), "inAll");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(79, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt40=18;
            try { dbg.enterDecision(40);

            switch ( input.LA(1) ) {
            case 137:
                {
                alt40=1;
                }
                break;
            case 20:
                {
                alt40=2;
                }
                break;
            case 18:
                {
                alt40=3;
                }
                break;
            case 19:
                {
                alt40=4;
                }
                break;
            case 25:
                {
                alt40=5;
                }
                break;
            case 29:
                {
                alt40=6;
                }
                break;
            case 30:
                {
                alt40=7;
                }
                break;
            case 21:
                {
                alt40=8;
                }
                break;
            case 22:
                {
                alt40=9;
                }
                break;
            case 27:
                {
                alt40=10;
                }
                break;
            case 33:
                {
                alt40=11;
                }
                break;
            case 28:
                {
                alt40=12;
                }
                break;
            case 32:
                {
                alt40=13;
                }
                break;
            case 31:
                {
                alt40=14;
                }
                break;
            case 26:
                {
                alt40=15;
                }
                break;
            case 23:
                {
                alt40=16;
                }
                break;
            case 24:
                {
                alt40=17;
                }
                break;
            case 173:
                {
                alt40=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(40);}

            switch (alt40) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,9);
                    pushFollow(FOLLOW_in_in_inAll827);
                    in166=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in166.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,12);
                    pushFollow(FOLLOW_inafter_in_inAll829);
                    inafter167=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter167.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,20);
                    pushFollow(FOLLOW_inas_in_inAll831);
                    inas168=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas168.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,25);
                    pushFollow(FOLLOW_inbefore_in_inAll833);
                    inbefore169=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore169.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,34);
                    pushFollow(FOLLOW_inby_in_inAll835);
                    inby170=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby170.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,39);
                    pushFollow(FOLLOW_infor_in_inAll837);
                    infor171=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor171.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,45);
                    pushFollow(FOLLOW_infrom_in_inAll839);
                    infrom172=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom172.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,52);
                    pushFollow(FOLLOW_inin_in_inAll841);
                    inin173=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin173.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,57);
                    pushFollow(FOLLOW_ininto_in_inAll843);
                    ininto174=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto174.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,64);
                    pushFollow(FOLLOW_inof_in_inAll845);
                    inof175=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof175.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,69);
                    pushFollow(FOLLOW_inoff_in_inAll847);
                    inoff176=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff176.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,75);
                    pushFollow(FOLLOW_inon_in_inAll849);
                    inon177=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon177.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,80);
                    pushFollow(FOLLOW_inover_in_inAll851);
                    inover178=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover178.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,87);
                    pushFollow(FOLLOW_inunder_in_inAll853);
                    inunder179=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder179.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,95);
                    pushFollow(FOLLOW_invia_in_inAll855);
                    invia180=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia180.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,101);
                    pushFollow(FOLLOW_inwith_in_inAll857);
                    inwith181=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith181.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,108);
                    pushFollow(FOLLOW_inwithout_in_inAll859);
                    inwithout182=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout182.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,118);
                    pushFollow(FOLLOW_to_in_inAll861);
                    to183=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to183.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(79, 120);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inAll");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv184 = null;

        ChemicalChunkerParser.adj_return adj185 = null;

        ChemicalChunkerParser.inAll_return inAll186 = null;

        ChemicalChunkerParser.dt_return dt187 = null;

        ChemicalChunkerParser.adv_return adv188 = null;

        ChemicalChunkerParser.adj_return adj189 = null;

        ChemicalChunkerParser.cd_return cd190 = null;

        ChemicalChunkerParser.nntemp_return nntemp191 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(80, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp
            {
            dbg.location(80,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:18: ( adv | adj )?
            int alt41=3;
            try { dbg.enterSubRule(41);
            try { dbg.enterDecision(41);

            try {
                isCyclicDecision = true;
                alt41 = dfa41.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:19: adv
                    {
                    dbg.location(80,19);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp869);
                    adv184=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv184.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:23: adj
                    {
                    dbg.location(80,23);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp871);
                    adj185=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj185.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(41);}

            dbg.location(80,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:29: ( inAll )?
            int alt42=2;
            try { dbg.enterSubRule(42);
            try { dbg.enterDecision(42);

            int LA42_0 = input.LA(1);

            if ( ((LA42_0>=18 && LA42_0<=33)||LA42_0==137||LA42_0==173) ) {
                alt42=1;
            }
            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(80,29);
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp875);
                    inAll186=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll186.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(42);}

            dbg.location(80,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:36: ( dt )?
            int alt43=2;
            try { dbg.enterSubRule(43);
            try { dbg.enterDecision(43);

            int LA43_0 = input.LA(1);

            if ( (LA43_0==127) ) {
                alt43=1;
            }
            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(80,36);
                    pushFollow(FOLLOW_dt_in_prepphraseTemp878);
                    dt187=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt187.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(43);}

            dbg.location(80,40);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:40: ( adv | adj )?
            int alt44=3;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=167 && LA44_0<=169)) ) {
                alt44=1;
            }
            else if ( ((LA44_0>=12 && LA44_0<=13)||(LA44_0>=138 && LA44_0<=141)) ) {
                alt44=2;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:41: adv
                    {
                    dbg.location(80,41);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp882);
                    adv188=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv188.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:45: adj
                    {
                    dbg.location(80,45);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp884);
                    adj189=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj189.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}

            dbg.location(80,51);
            pushFollow(FOLLOW_cd_in_prepphraseTemp888);
            cd190=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd190.getTree());
            dbg.location(80,54);
            pushFollow(FOLLOW_nntemp_in_prepphraseTemp890);
            nntemp191=nntemp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntemp.add(nntemp191.getTree());


            // AST REWRITE
            // elements: dt, adj, cd, inAll, adv, adj, nntemp, adv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:61: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
            {
                dbg.location(80,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:65: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(80,67);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                dbg.location(80,87);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:87: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(80,87);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(80,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(80,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(80,98);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:98: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(80,98);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(80,106);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:106: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(80,106);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(80,110);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:110: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(80,110);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(80,115);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:115: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(80,115);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(80,120);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(80,123);
                adaptor.addChild(root_1, stream_nntemp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(80, 130);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class mmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: mmol : cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) ;
    public final ChemicalChunkerParser.mmol_return mmol() throws RecognitionException {
        ChemicalChunkerParser.mmol_return retval = new ChemicalChunkerParser.mmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd192 = null;

        ChemicalChunkerParser.nnmol_return nnmol193 = null;


        RewriteRuleSubtreeStream stream_nnmol=new RewriteRuleSubtreeStream(adaptor,"rule nnmol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "mmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(83, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:6: ( cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:8: cd nnmol
            {
            dbg.location(83,8);
            pushFollow(FOLLOW_cd_in_mmol935);
            cd192=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd192.getTree());
            dbg.location(83,11);
            pushFollow(FOLLOW_nnmol_in_mmol937);
            nnmol193=nnmol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmol.add(nnmol193.getTree());


            // AST REWRITE
            // elements: cd, nnmol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 83:17: -> ^( NODE[\"MMOL\"] cd nnmol )
            {
                dbg.location(83,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:20: ^( NODE[\"MMOL\"] cd nnmol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(83,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MMOL"), root_1);

                dbg.location(83,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(83,40);
                adaptor.addChild(root_1, stream_nnmol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(83, 47);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mmol"

    public static class gram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: gram : cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) ;
    public final ChemicalChunkerParser.gram_return gram() throws RecognitionException {
        ChemicalChunkerParser.gram_return retval = new ChemicalChunkerParser.gram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd194 = null;

        ChemicalChunkerParser.nngram_return nngram195 = null;


        RewriteRuleSubtreeStream stream_nngram=new RewriteRuleSubtreeStream(adaptor,"rule nngram");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "gram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(84, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:6: ( cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:8: cd nngram
            {
            dbg.location(84,8);
            pushFollow(FOLLOW_cd_in_gram958);
            cd194=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd194.getTree());
            dbg.location(84,11);
            pushFollow(FOLLOW_nngram_in_gram960);
            nngram195=nngram();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nngram.add(nngram195.getTree());


            // AST REWRITE
            // elements: cd, nngram
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 84:17: -> ^( NODE[\"GRAM\"] cd nngram )
            {
                dbg.location(84,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:20: ^( NODE[\"GRAM\"] cd nngram )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(84,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "GRAM"), root_1);

                dbg.location(84,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(84,40);
                adaptor.addChild(root_1, stream_nngram.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(84, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "gram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "gram"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:1: percent : cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd196 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent197 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "percent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(85, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:9: ( cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:11: cd nnpercent
            {
            dbg.location(85,11);
            pushFollow(FOLLOW_cd_in_percent981);
            cd196=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd196.getTree());
            dbg.location(85,14);
            pushFollow(FOLLOW_nnpercent_in_percent983);
            nnpercent197=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent197.getTree());


            // AST REWRITE
            // elements: nnpercent, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 85:24: -> ^( NODE[\"PERCENT\"] cd nnpercent )
            {
                dbg.location(85,27);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:27: ^( NODE[\"PERCENT\"] cd nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(85,29);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                dbg.location(85,47);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(85,50);
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(85, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "percent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd198 = null;

        ChemicalChunkerParser.nnvol_return nnvol199 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "volume");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(86, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: cd nnvol
            {
            dbg.location(86,10);
            pushFollow(FOLLOW_cd_in_volume1004);
            cd198=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd198.getTree());
            dbg.location(86,13);
            pushFollow(FOLLOW_nnvol_in_volume1006);
            nnvol199=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol199.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                dbg.location(86,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(86,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                dbg.location(86,41);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(86,44);
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(86, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "volume");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "volume"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:1: apparatus : ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements200 = null;

        ChemicalChunkerParser.adj_return adj201 = null;

        ChemicalChunkerParser.jj_return jj202 = null;

        ChemicalChunkerParser.nn_return nn203 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure204 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus205 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_nnpressure=new RewriteRuleSubtreeStream(adaptor,"rule nnpressure");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try { dbg.enterRule(getGrammarFileName(), "apparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(88, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:2: ( ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:4: ( measurements | adj | jj | nn | nnpressure )* ( nnapparatus )+
            {
            dbg.location(89,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:4: ( measurements | adj | jj | nn | nnpressure )*
            try { dbg.enterSubRule(45);

            loop45:
            do {
                int alt45=6;
                try { dbg.enterDecision(45);

                switch ( input.LA(1) ) {
                case 122:
                    {
                    alt45=1;
                    }
                    break;
                case 138:
                    {
                    int LA45_3 = input.LA(2);

                    if ( (LA45_3==TOKEN) ) {
                        int LA45_7 = input.LA(3);

                        if ( (synpred172_ChemicalChunker()) ) {
                            alt45=2;
                        }
                        else if ( (synpred173_ChemicalChunker()) ) {
                            alt45=3;
                        }


                    }


                    }
                    break;
                case 12:
                case 13:
                case 139:
                case 140:
                case 141:
                    {
                    alt45=2;
                    }
                    break;
                case 144:
                    {
                    alt45=4;
                    }
                    break;
                case 47:
                    {
                    alt45=5;
                    }
                    break;

                }

                } finally {dbg.exitDecision(45);}

                switch (alt45) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:5: measurements
            	    {
            	    dbg.location(89,5);
            	    pushFollow(FOLLOW_measurements_in_apparatus1030);
            	    measurements200=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements200.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:18: adj
            	    {
            	    dbg.location(89,18);
            	    pushFollow(FOLLOW_adj_in_apparatus1032);
            	    adj201=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_adj.add(adj201.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:22: jj
            	    {
            	    dbg.location(89,22);
            	    pushFollow(FOLLOW_jj_in_apparatus1034);
            	    jj202=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_jj.add(jj202.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:25: nn
            	    {
            	    dbg.location(89,25);
            	    pushFollow(FOLLOW_nn_in_apparatus1036);
            	    nn203=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nn.add(nn203.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: nnpressure
            	    {
            	    dbg.location(89,28);
            	    pushFollow(FOLLOW_nnpressure_in_apparatus1038);
            	    nnpressure204=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnpressure.add(nnpressure204.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);
            } finally {dbg.exitSubRule(45);}

            dbg.location(89,41);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:41: ( nnapparatus )+
            int cnt46=0;
            try { dbg.enterSubRule(46);

            loop46:
            do {
                int alt46=2;
                try { dbg.enterDecision(46);

                int LA46_0 = input.LA(1);

                if ( (LA46_0==68) ) {
                    int LA46_2 = input.LA(2);

                    if ( (synpred176_ChemicalChunker()) ) {
                        alt46=1;
                    }


                }


                } finally {dbg.exitDecision(46);}

                switch (alt46) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    dbg.location(89,41);
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1042);
            	    nnapparatus205=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus205.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt46++;
            } while (true);
            } finally {dbg.exitSubRule(46);}



            // AST REWRITE
            // elements: nnapparatus, nn, measurements, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 89:53: -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
            {
                dbg.location(89,56);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:56: ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(89,58);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                dbg.location(89,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:78: ( measurements )?
                if ( stream_measurements.hasNext() ) {
                    dbg.location(89,78);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                dbg.location(89,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(89,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(89,97);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: ( nn )?
                if ( stream_nn.hasNext() ) {
                    dbg.location(89,97);
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                dbg.location(89,101);
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    dbg.location(89,101);
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(89, 115);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:1: measurements : ( mmol | gram | percent | volume );
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mmol_return mmol206 = null;

        ChemicalChunkerParser.gram_return gram207 = null;

        ChemicalChunkerParser.percent_return percent208 = null;

        ChemicalChunkerParser.volume_return volume209 = null;



        try { dbg.enterRule(getGrammarFileName(), "measurements");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(90, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:2: ( mmol | gram | percent | volume )
            int alt47=4;
            try { dbg.enterDecision(47);

            int LA47_0 = input.LA(1);

            if ( (LA47_0==122) ) {
                int LA47_1 = input.LA(2);

                if ( (LA47_1==TOKEN) ) {
                    switch ( input.LA(3) ) {
                    case 37:
                        {
                        alt47=1;
                        }
                        break;
                    case 40:
                        {
                        alt47=4;
                        }
                        break;
                    case 103:
                        {
                        alt47=3;
                        }
                        break;
                    case 36:
                        {
                        alt47=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 47, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:3: mmol
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(91,3);
                    pushFollow(FOLLOW_mmol_in_measurements1071);
                    mmol206=mmol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mmol206.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:8: gram
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(91,8);
                    pushFollow(FOLLOW_gram_in_measurements1073);
                    gram207=gram();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gram207.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:13: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(91,13);
                    pushFollow(FOLLOW_percent_in_measurements1075);
                    percent208=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent208.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:21: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(91,21);
                    pushFollow(FOLLOW_volume_in_measurements1077);
                    volume209=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume209.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(91, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "measurements");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "measurements"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1210 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2211 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3212 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm213 = null;

        ChemicalChunkerParser.rrb_return rrb214 = null;



        try { dbg.enterRule(getGrammarFileName(), "oscarCompound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(94, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(94,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )
            int alt48=4;
            try { dbg.enterSubRule(48);
            try { dbg.enterDecision(48);

            try {
                isCyclicDecision = true;
                alt48 = dfa48.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:19: oscarCompound1
                    {
                    dbg.location(94,19);
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1089);
                    oscarCompound1210=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1210.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:34: oscarCompound2
                    {
                    dbg.location(94,34);
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1091);
                    oscarCompound2211=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2211.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:49: oscarCompound3
                    {
                    dbg.location(94,49);
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1093);
                    oscarCompound3212=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3212.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:64: oscarcm
                    {
                    dbg.location(94,64);
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1095);
                    oscarcm213=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm213.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(48);}

            dbg.location(94,73);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:73: ( rrb )?
            int alt49=2;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==107) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==TOKEN) ) {
                    int LA49_3 = input.LA(3);

                    if ( (synpred183_ChemicalChunker()) ) {
                        alt49=1;
                    }
                }
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rrb
                    {
                    dbg.location(94,73);
                    pushFollow(FOLLOW_rrb_in_oscarCompound1098);
                    rrb214=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb214.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(94, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: oscarCompound3 : oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm215 = null;

        ChemicalChunkerParser.dash_return dash216 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm217 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(96, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:16: ( oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:18: oscarcm dash oscarcm
            {
            dbg.location(96,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31107);
            oscarcm215=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm215.getTree());
            dbg.location(96,26);
            pushFollow(FOLLOW_dash_in_oscarCompound31109);
            dash216=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dash.add(dash216.getTree());
            dbg.location(96,31);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31111);
            oscarcm217=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm217.getTree());


            // AST REWRITE
            // elements: dash, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:39: -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
            {
                dbg.location(96,42);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:42: ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(96,44);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(96,61);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(96,69);
                adaptor.addChild(root_1, stream_dash.nextTree());
                dbg.location(96,74);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(96, 82);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm218 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm219 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(97, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:18: oscarcm ( oscarcm )+
            {
            dbg.location(97,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21132);
            oscarcm218=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm218.getTree());
            dbg.location(97,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:26: ( oscarcm )+
            int cnt50=0;
            try { dbg.enterSubRule(50);

            loop50:
            do {
                int alt50=2;
                try { dbg.enterDecision(50);

                int LA50_0 = input.LA(1);

                if ( (LA50_0==53) ) {
                    int LA50_2 = input.LA(2);

                    if ( (LA50_2==TOKEN) ) {
                        int LA50_3 = input.LA(3);

                        if ( (synpred184_ChemicalChunker()) ) {
                            alt50=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(50);}

                switch (alt50) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    dbg.location(97,26);
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21134);
            	    oscarcm219=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm219.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt50++;
            } while (true);
            } finally {dbg.exitSubRule(50);}



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 97:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                dbg.location(97,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(97,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(97,57);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(97,65);
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    dbg.location(97,65);
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(97, 74);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm220 = null;

        ChemicalChunkerParser.jj_return jj221 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm222 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(98, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:18: oscarcm jj oscarcm
            {
            dbg.location(98,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11155);
            oscarcm220=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm220.getTree());
            dbg.location(98,26);
            pushFollow(FOLLOW_jj_in_oscarCompound11157);
            jj221=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj221.getTree());
            dbg.location(98,29);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11159);
            oscarcm222=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm222.getTree());


            // AST REWRITE
            // elements: oscarcm, jj, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 98:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                dbg.location(98,40);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(98,42);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(98,59);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(98,67);
                adaptor.addChild(root_1, stream_jj.nextTree());
                dbg.location(98,70);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(98, 78);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: moleculeamount1 : measurements ( amount )? inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements223 = null;

        ChemicalChunkerParser.amount_return amount224 = null;

        ChemicalChunkerParser.inof_return inof225 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound226 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(99, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:2: ( measurements ( amount )? inof oscarCompound )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:3: measurements ( amount )? inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(100,3);
            pushFollow(FOLLOW_measurements_in_moleculeamount11180);
            measurements223=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements223.getTree());
            dbg.location(100,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:16: ( amount )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51);

            int LA51_0 = input.LA(1);

            if ( (LA51_0==106) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(100,16);
                    pushFollow(FOLLOW_amount_in_moleculeamount11182);
                    amount224=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount224.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(100,24);
            pushFollow(FOLLOW_inof_in_moleculeamount11185);
            inof225=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof225.getTree());
            dbg.location(100,29);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11187);
            oscarCompound226=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound226.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(100, 42);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: moleculeamount2 : oscarCompound ( amount )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound227 = null;

        ChemicalChunkerParser.amount_return amount228 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(101, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:2: ( oscarCompound ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:3: oscarCompound ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(102,3);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount21195);
            oscarCompound227=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound227.getTree());
            dbg.location(102,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:18: ( amount )*
            try { dbg.enterSubRule(52);

            loop52:
            do {
                int alt52=2;
                try { dbg.enterDecision(52);

                try {
                    isCyclicDecision = true;
                    alt52 = dfa52.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(52);}

                switch (alt52) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(102,18);
            	    pushFollow(FOLLOW_amount_in_moleculeamount21198);
            	    amount228=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount228.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);
            } finally {dbg.exitSubRule(52);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(102, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1229 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2230 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(103, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:16: ( moleculeamount1 | moleculeamount2 )
            int alt53=2;
            try { dbg.enterDecision(53);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==122) ) {
                alt53=1;
            }
            else if ( (LA53_0==53) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(103,18);
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1208);
                    moleculeamount1229=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1229.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(103,36);
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1212);
                    moleculeamount2230=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2230.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(103, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount231 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "molecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(104, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:5: moleculeamount
            {
            dbg.location(105,5);
            pushFollow(FOLLOW_moleculeamount_in_molecule1233);
            moleculeamount231=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount231.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 105:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                dbg.location(105,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(105,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                dbg.location(105,42);
                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(105, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "molecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: unnamedmoleculeamount1 : measurements ( amount )? inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements232 = null;

        ChemicalChunkerParser.amount_return amount233 = null;

        ChemicalChunkerParser.inof_return inof234 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd235 = null;

        ChemicalChunkerParser.cd_return cd236 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(107, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:2: ( measurements ( amount )? inof ( oscarcd | cd ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:3: measurements ( amount )? inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(108,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount11252);
            measurements232=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements232.getTree());
            dbg.location(108,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:16: ( amount )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54);

            int LA54_0 = input.LA(1);

            if ( (LA54_0==106) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(108,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount11254);
                    amount233=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount233.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(108,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11257);
            inof234=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof234.getTree());
            dbg.location(108,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:29: ( oscarcd | cd )
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55);

            int LA55_0 = input.LA(1);

            if ( (LA55_0==11) ) {
                alt55=1;
            }
            else if ( (LA55_0==122) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:30: oscarcd
                    {
                    dbg.location(108,30);
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11260);
                    oscarcd235=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd235.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:38: cd
                    {
                    dbg.location(108,38);
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11262);
                    cd236=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd236.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(108, 41);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:1: unnamedmoleculeamount2 : oscarcd ( amount )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd237 = null;

        ChemicalChunkerParser.amount_return amount238 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(109, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:2: ( oscarcd ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:3: oscarcd ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(110,3);
            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21271);
            oscarcd237=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd237.getTree());
            dbg.location(110,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:11: ( amount )*
            try { dbg.enterSubRule(56);

            loop56:
            do {
                int alt56=2;
                try { dbg.enterDecision(56);

                try {
                    isCyclicDecision = true;
                    alt56 = dfa56.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(56);}

                switch (alt56) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(110,11);
            	    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount21273);
            	    amount238=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount238.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);
            } finally {dbg.exitSubRule(56);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(110, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: unnamedmoleculeamount3 : measurements ( amount )? inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements239 = null;

        ChemicalChunkerParser.amount_return amount240 = null;

        ChemicalChunkerParser.inof_return inof241 = null;

        ChemicalChunkerParser.jj_return jj242 = null;

        ChemicalChunkerParser.noun_return noun243 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(111, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( measurements ( amount )? inof ( ( jj )? noun )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:3: measurements ( amount )? inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(112,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount31283);
            measurements239=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements239.getTree());
            dbg.location(112,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:16: ( amount )?
            int alt57=2;
            try { dbg.enterSubRule(57);
            try { dbg.enterDecision(57);

            int LA57_0 = input.LA(1);

            if ( (LA57_0==106) ) {
                alt57=1;
            }
            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(112,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount31285);
                    amount240=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount240.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(57);}

            dbg.location(112,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31288);
            inof241=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof241.getTree());
            dbg.location(112,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:29: ( ( jj )? noun )+
            int cnt59=0;
            try { dbg.enterSubRule(59);

            loop59:
            do {
                int alt59=2;
                try { dbg.enterDecision(59);

                try {
                    isCyclicDecision = true;
                    alt59 = dfa59.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(59);}

                switch (alt59) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( jj )? noun
            	    {
            	    dbg.location(112,30);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( jj )?
            	    int alt58=2;
            	    try { dbg.enterSubRule(58);
            	    try { dbg.enterDecision(58);

            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==138) ) {
            	        int LA58_1 = input.LA(2);

            	        if ( (LA58_1==TOKEN) ) {
            	            int LA58_3 = input.LA(3);

            	            if ( (synpred192_ChemicalChunker()) ) {
            	                alt58=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(58);}

            	    switch (alt58) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            dbg.location(112,30);
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31291);
            	            jj242=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj242.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(58);}

            	    dbg.location(112,34);
            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31294);
            	    noun243=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun243.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt59 >= 1 ) break loop59;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(59, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt59++;
            } while (true);
            } finally {dbg.exitSubRule(59);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(112, 40);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1244 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2245 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3246 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(114, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt60=3;
            try { dbg.enterDecision(60);

            try {
                isCyclicDecision = true;
                alt60 = dfa60.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(115,3);
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1305);
                    unnamedmoleculeamount1244=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1244.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(115,28);
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1309);
                    unnamedmoleculeamount2245=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2245.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(115,53);
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1313);
                    unnamedmoleculeamount3246=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3246.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(115, 76);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount247 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "unnamedmolecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(118, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:4: unnamedmoleculeamount
            {
            dbg.location(119,4);
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1326);
            unnamedmoleculeamount247=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount247.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 119:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                dbg.location(119,29);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(119,31);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                dbg.location(119,55);
                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(119, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmolecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: amount : lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb248 = null;

        ChemicalChunkerParser.measurements_return measurements249 = null;

        ChemicalChunkerParser.comma_return comma250 = null;

        ChemicalChunkerParser.measurements_return measurements251 = null;

        ChemicalChunkerParser.rrb_return rrb252 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try { dbg.enterRule(getGrammarFileName(), "amount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(121, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:9: ( lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:11: lrb measurements ( comma measurements )* rrb
            {
            dbg.location(121,11);
            pushFollow(FOLLOW_lrb_in_amount1347);
            lrb248=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb248.getTree());
            dbg.location(121,15);
            pushFollow(FOLLOW_measurements_in_amount1349);
            measurements249=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measurements.add(measurements249.getTree());
            dbg.location(121,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:28: ( comma measurements )*
            try { dbg.enterSubRule(61);

            loop61:
            do {
                int alt61=2;
                try { dbg.enterDecision(61);

                int LA61_0 = input.LA(1);

                if ( (LA61_0==98) ) {
                    alt61=1;
                }


                } finally {dbg.exitDecision(61);}

                switch (alt61) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:29: comma measurements
            	    {
            	    dbg.location(121,29);
            	    pushFollow(FOLLOW_comma_in_amount1352);
            	    comma250=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma250.getTree());
            	    dbg.location(121,36);
            	    pushFollow(FOLLOW_measurements_in_amount1355);
            	    measurements251=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements251.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);
            } finally {dbg.exitSubRule(61);}

            dbg.location(121,52);
            pushFollow(FOLLOW_rrb_in_amount1360);
            rrb252=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb252.getTree());


            // AST REWRITE
            // elements: rrb, comma, measurements, lrb, measurements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:56: -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
            {
                dbg.location(121,61);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:61: ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(121,63);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                dbg.location(121,79);
                adaptor.addChild(root_1, stream_lrb.nextTree());
                dbg.location(121,83);
                adaptor.addChild(root_1, stream_measurements.nextTree());
                dbg.location(121,96);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:96: ( comma measurements )*
                while ( stream_comma.hasNext()||stream_measurements.hasNext() ) {
                    dbg.location(121,97);
                    adaptor.addChild(root_1, stream_comma.nextTree());
                    dbg.location(121,104);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_comma.reset();
                stream_measurements.reset();
                dbg.location(121,120);
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(121, 124);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "amount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "amount"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral253 = null;

        ChemicalChunkerParser.nn_return nn254 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod255 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd256 = null;

        ChemicalChunkerParser.cd_return cd257 = null;



        try { dbg.enterRule(getGrammarFileName(), "method");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(123, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(124,5);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( nngeneral | nn )?
            int alt62=3;
            try { dbg.enterSubRule(62);
            try { dbg.enterDecision(62);

            int LA62_0 = input.LA(1);

            if ( (LA62_0==44) ) {
                alt62=1;
            }
            else if ( (LA62_0==144) ) {
                alt62=2;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:6: nngeneral
                    {
                    dbg.location(124,6);
                    pushFollow(FOLLOW_nngeneral_in_method1397);
                    nngeneral253=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral253.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:16: nn
                    {
                    dbg.location(124,16);
                    pushFollow(FOLLOW_nn_in_method1399);
                    nn254=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn254.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(62);}

            dbg.location(124,21);
            pushFollow(FOLLOW_nnmethod_in_method1403);
            nnmethod255=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod255.getTree());
            dbg.location(124,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:30: ( oscarcd | cd )?
            int alt63=3;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==11) ) {
                alt63=1;
            }
            else if ( (LA63_0==122) ) {
                alt63=2;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:31: oscarcd
                    {
                    dbg.location(124,31);
                    pushFollow(FOLLOW_oscarcd_in_method1406);
                    oscarcd256=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd256.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:39: cd
                    {
                    dbg.location(124,39);
                    pushFollow(FOLLOW_cd_in_method1408);
                    cd257=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd257.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(124, 45);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "method");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb258 = null;

        ChemicalChunkerParser.rrb_return rrb259 = null;

        ChemicalChunkerParser.lsqb_return lsqb260 = null;

        ChemicalChunkerParser.rsqb_return rsqb261 = null;



        try { dbg.enterRule(getGrammarFileName(), "brackets");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(125, 5);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(126,8);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt64=0;
            try { dbg.enterSubRule(64);

            loop64:
            do {
                int alt64=5;
                try { dbg.enterDecision(64);

                try {
                    isCyclicDecision = true;
                    alt64 = dfa64.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(64);}

                switch (alt64) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:9: lrb
            	    {
            	    dbg.location(126,9);
            	    pushFollow(FOLLOW_lrb_in_brackets1430);
            	    lrb258=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb258.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:13: rrb
            	    {
            	    dbg.location(126,13);
            	    pushFollow(FOLLOW_rrb_in_brackets1432);
            	    rrb259=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb259.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:17: lsqb
            	    {
            	    dbg.location(126,17);
            	    pushFollow(FOLLOW_lsqb_in_brackets1434);
            	    lsqb260=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb260.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:22: rsqb
            	    {
            	    dbg.location(126,22);
            	    pushFollow(FOLLOW_rsqb_in_brackets1436);
            	    rsqb261=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb261.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt64 >= 1 ) break loop64;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(64, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt64++;
            } while (true);
            } finally {dbg.exitSubRule(64);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(126, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "brackets");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal262=null;
        Token TOKEN263=null;

        Object string_literal262_tree=null;
        Object TOKEN263_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(128, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:8: ( 'OSCAR-CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(128,9);
            string_literal262=(Token)match(input,11,FOLLOW_11_in_oscarcd1444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal262_tree = (Object)adaptor.create(string_literal262);
            adaptor.addChild(root_0, string_literal262_tree);
            }
            dbg.location(128,20);
            TOKEN263=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd1446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN263_tree = (Object)adaptor.create(TOKEN263);
            adaptor.addChild(root_0, TOKEN263_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(128, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal264=null;
        Token TOKEN265=null;

        Object string_literal264_tree=null;
        Object TOKEN265_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(129, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:8: ( 'OSCAR-CJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(129,9);
            string_literal264=(Token)match(input,12,FOLLOW_12_in_oscarcj1451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal264_tree = (Object)adaptor.create(string_literal264);
            adaptor.addChild(root_0, string_literal264_tree);
            }
            dbg.location(129,20);
            TOKEN265=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj1453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN265_tree = (Object)adaptor.create(TOKEN265);
            adaptor.addChild(root_0, TOKEN265_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(129, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal266=null;
        Token TOKEN267=null;

        Object string_literal266_tree=null;
        Object TOKEN267_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarrn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(130, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:8: ( 'OSCAR-RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(130,9);
            string_literal266=(Token)match(input,13,FOLLOW_13_in_oscarrn1458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal266_tree = (Object)adaptor.create(string_literal266);
            adaptor.addChild(root_0, string_literal266_tree);
            }
            dbg.location(130,20);
            TOKEN267=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn1460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN267_tree = (Object)adaptor.create(TOKEN267);
            adaptor.addChild(root_0, TOKEN267_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(130, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarrn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal268=null;
        Token TOKEN269=null;

        Object string_literal268_tree=null;
        Object TOKEN269_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcpr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(131, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( 'OSCAR-CPR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(131,10);
            string_literal268=(Token)match(input,14,FOLLOW_14_in_oscarcpr1465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal268_tree = (Object)adaptor.create(string_literal268);
            adaptor.addChild(root_0, string_literal268_tree);
            }
            dbg.location(131,22);
            TOKEN269=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr1467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN269_tree = (Object)adaptor.create(TOKEN269);
            adaptor.addChild(root_0, TOKEN269_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(131, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcpr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal270=null;
        Token TOKEN271=null;

        Object string_literal270_tree=null;
        Object TOKEN271_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscaront");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(132, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:9: ( 'OSCAR-ONT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(132,11);
            string_literal270=(Token)match(input,15,FOLLOW_15_in_oscaront1473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal270_tree = (Object)adaptor.create(string_literal270);
            adaptor.addChild(root_0, string_literal270_tree);
            }
            dbg.location(132,23);
            TOKEN271=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront1475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN271_tree = (Object)adaptor.create(TOKEN271);
            adaptor.addChild(root_0, TOKEN271_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(132, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscaront");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal272=null;
        Token TOKEN273=null;

        Object string_literal272_tree=null;
        Object TOKEN273_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "tmunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(133, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:10: ( 'TM-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(133,11);
            string_literal272=(Token)match(input,16,FOLLOW_16_in_tmunicode1480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal272_tree = (Object)adaptor.create(string_literal272);
            adaptor.addChild(root_0, string_literal272_tree);
            }
            dbg.location(133,24);
            TOKEN273=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode1482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN273_tree = (Object)adaptor.create(TOKEN273);
            adaptor.addChild(root_0, TOKEN273_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(133, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "tmunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal274=null;
        Token TOKEN275=null;

        Object string_literal274_tree=null;
        Object TOKEN275_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cdunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(134, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:10: ( 'CD-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(134,11);
            string_literal274=(Token)match(input,17,FOLLOW_17_in_cdunicode1487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal274_tree = (Object)adaptor.create(string_literal274);
            adaptor.addChild(root_0, string_literal274_tree);
            }
            dbg.location(134,24);
            TOKEN275=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode1489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN275_tree = (Object)adaptor.create(TOKEN275);
            adaptor.addChild(root_0, TOKEN275_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(134, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cdunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal276=null;
        Token TOKEN277=null;

        Object string_literal276_tree=null;
        Object TOKEN277_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inas");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(137, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:5: ( 'IN-AS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(137,6);
            string_literal276=(Token)match(input,18,FOLLOW_18_in_inas1496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal276_tree = (Object)adaptor.create(string_literal276);
            adaptor.addChild(root_0, string_literal276_tree);
            }
            dbg.location(137,14);
            TOKEN277=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas1498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN277_tree = (Object)adaptor.create(TOKEN277);
            adaptor.addChild(root_0, TOKEN277_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(137, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inas");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal278=null;
        Token TOKEN279=null;

        Object string_literal278_tree=null;
        Object TOKEN279_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inbefore");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(138, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:9: ( 'IN-BEFORE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(138,10);
            string_literal278=(Token)match(input,19,FOLLOW_19_in_inbefore1503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal278_tree = (Object)adaptor.create(string_literal278);
            adaptor.addChild(root_0, string_literal278_tree);
            }
            dbg.location(138,22);
            TOKEN279=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore1505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN279_tree = (Object)adaptor.create(TOKEN279);
            adaptor.addChild(root_0, TOKEN279_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(138, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inbefore");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal280=null;
        Token TOKEN281=null;

        Object string_literal280_tree=null;
        Object TOKEN281_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inafter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(139, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:8: ( 'IN-AFTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(139,9);
            string_literal280=(Token)match(input,20,FOLLOW_20_in_inafter1510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal280_tree = (Object)adaptor.create(string_literal280);
            adaptor.addChild(root_0, string_literal280_tree);
            }
            dbg.location(139,20);
            TOKEN281=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter1512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN281_tree = (Object)adaptor.create(TOKEN281);
            adaptor.addChild(root_0, TOKEN281_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(139, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inafter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal282=null;
        Token TOKEN283=null;

        Object string_literal282_tree=null;
        Object TOKEN283_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(140, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:5: ( 'IN-IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(140,6);
            string_literal282=(Token)match(input,21,FOLLOW_21_in_inin1517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal282_tree = (Object)adaptor.create(string_literal282);
            adaptor.addChild(root_0, string_literal282_tree);
            }
            dbg.location(140,14);
            TOKEN283=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin1519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN283_tree = (Object)adaptor.create(TOKEN283);
            adaptor.addChild(root_0, TOKEN283_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(140, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal284=null;
        Token TOKEN285=null;

        Object string_literal284_tree=null;
        Object TOKEN285_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ininto");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(141, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:7: ( 'IN-INTO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(141,8);
            string_literal284=(Token)match(input,22,FOLLOW_22_in_ininto1524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal284_tree = (Object)adaptor.create(string_literal284);
            adaptor.addChild(root_0, string_literal284_tree);
            }
            dbg.location(141,18);
            TOKEN285=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto1526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN285_tree = (Object)adaptor.create(TOKEN285);
            adaptor.addChild(root_0, TOKEN285_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(141, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ininto");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal286=null;
        Token TOKEN287=null;

        Object string_literal286_tree=null;
        Object TOKEN287_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwith");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(142, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:7: ( 'IN-WITH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(142,8);
            string_literal286=(Token)match(input,23,FOLLOW_23_in_inwith1531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal286_tree = (Object)adaptor.create(string_literal286);
            adaptor.addChild(root_0, string_literal286_tree);
            }
            dbg.location(142,18);
            TOKEN287=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith1533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN287_tree = (Object)adaptor.create(TOKEN287);
            adaptor.addChild(root_0, TOKEN287_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(142, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwith");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal288=null;
        Token TOKEN289=null;

        Object string_literal288_tree=null;
        Object TOKEN289_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwithout");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(143, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:10: ( 'IN-WITHOUT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(143,11);
            string_literal288=(Token)match(input,24,FOLLOW_24_in_inwithout1538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal288_tree = (Object)adaptor.create(string_literal288);
            adaptor.addChild(root_0, string_literal288_tree);
            }
            dbg.location(143,24);
            TOKEN289=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout1540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN289_tree = (Object)adaptor.create(TOKEN289);
            adaptor.addChild(root_0, TOKEN289_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(143, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwithout");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal290=null;
        Token TOKEN291=null;

        Object string_literal290_tree=null;
        Object TOKEN291_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inby");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(144, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:5: ( 'IN-BY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(144,6);
            string_literal290=(Token)match(input,25,FOLLOW_25_in_inby1545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal290_tree = (Object)adaptor.create(string_literal290);
            adaptor.addChild(root_0, string_literal290_tree);
            }
            dbg.location(144,14);
            TOKEN291=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby1547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN291_tree = (Object)adaptor.create(TOKEN291);
            adaptor.addChild(root_0, TOKEN291_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(144, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inby");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal292=null;
        Token TOKEN293=null;

        Object string_literal292_tree=null;
        Object TOKEN293_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "invia");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(145, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:6: ( 'IN-VIA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(145,7);
            string_literal292=(Token)match(input,26,FOLLOW_26_in_invia1552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal292_tree = (Object)adaptor.create(string_literal292);
            adaptor.addChild(root_0, string_literal292_tree);
            }
            dbg.location(145,16);
            TOKEN293=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia1554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN293_tree = (Object)adaptor.create(TOKEN293);
            adaptor.addChild(root_0, TOKEN293_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(145, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "invia");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal294=null;
        Token TOKEN295=null;

        Object string_literal294_tree=null;
        Object TOKEN295_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inof");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(146, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:5: ( 'IN-OF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(146,6);
            string_literal294=(Token)match(input,27,FOLLOW_27_in_inof1559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal294_tree = (Object)adaptor.create(string_literal294);
            adaptor.addChild(root_0, string_literal294_tree);
            }
            dbg.location(146,14);
            TOKEN295=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof1561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN295_tree = (Object)adaptor.create(TOKEN295);
            adaptor.addChild(root_0, TOKEN295_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(146, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inof");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal296=null;
        Token TOKEN297=null;

        Object string_literal296_tree=null;
        Object TOKEN297_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(147, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:5: ( 'IN-ON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(147,6);
            string_literal296=(Token)match(input,28,FOLLOW_28_in_inon1566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal296_tree = (Object)adaptor.create(string_literal296);
            adaptor.addChild(root_0, string_literal296_tree);
            }
            dbg.location(147,14);
            TOKEN297=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon1568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN297_tree = (Object)adaptor.create(TOKEN297);
            adaptor.addChild(root_0, TOKEN297_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(147, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal298=null;
        Token TOKEN299=null;

        Object string_literal298_tree=null;
        Object TOKEN299_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(148, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:6: ( 'IN-FOR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(148,7);
            string_literal298=(Token)match(input,29,FOLLOW_29_in_infor1573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal298_tree = (Object)adaptor.create(string_literal298);
            adaptor.addChild(root_0, string_literal298_tree);
            }
            dbg.location(148,16);
            TOKEN299=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor1575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN299_tree = (Object)adaptor.create(TOKEN299);
            adaptor.addChild(root_0, TOKEN299_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(148, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal300=null;
        Token TOKEN301=null;

        Object string_literal300_tree=null;
        Object TOKEN301_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infrom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(149, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:7: ( 'IN-FROM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(149,8);
            string_literal300=(Token)match(input,30,FOLLOW_30_in_infrom1580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal300_tree = (Object)adaptor.create(string_literal300);
            adaptor.addChild(root_0, string_literal300_tree);
            }
            dbg.location(149,18);
            TOKEN301=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom1582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN301_tree = (Object)adaptor.create(TOKEN301);
            adaptor.addChild(root_0, TOKEN301_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(149, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infrom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal302=null;
        Token TOKEN303=null;

        Object string_literal302_tree=null;
        Object TOKEN303_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inunder");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(150, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:8: ( 'IN-UNDER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(150,9);
            string_literal302=(Token)match(input,31,FOLLOW_31_in_inunder1587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal302_tree = (Object)adaptor.create(string_literal302);
            adaptor.addChild(root_0, string_literal302_tree);
            }
            dbg.location(150,20);
            TOKEN303=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder1589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN303_tree = (Object)adaptor.create(TOKEN303);
            adaptor.addChild(root_0, TOKEN303_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(150, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inunder");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal304=null;
        Token TOKEN305=null;

        Object string_literal304_tree=null;
        Object TOKEN305_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(151, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:7: ( 'IN-OVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(151,8);
            string_literal304=(Token)match(input,32,FOLLOW_32_in_inover1594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal304_tree = (Object)adaptor.create(string_literal304);
            adaptor.addChild(root_0, string_literal304_tree);
            }
            dbg.location(151,18);
            TOKEN305=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover1596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN305_tree = (Object)adaptor.create(TOKEN305);
            adaptor.addChild(root_0, TOKEN305_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(151, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal306=null;
        Token TOKEN307=null;

        Object string_literal306_tree=null;
        Object TOKEN307_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inoff");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(152, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:6: ( 'IN-OFF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(152,7);
            string_literal306=(Token)match(input,33,FOLLOW_33_in_inoff1601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal306_tree = (Object)adaptor.create(string_literal306);
            adaptor.addChild(root_0, string_literal306_tree);
            }
            dbg.location(152,16);
            TOKEN307=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff1603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN307_tree = (Object)adaptor.create(TOKEN307);
            adaptor.addChild(root_0, TOKEN307_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(152, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inoff");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal308=null;
        Token TOKEN309=null;

        Object string_literal308_tree=null;
        Object TOKEN309_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnstate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(155, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:8: ( 'NN-STATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(155,9);
            string_literal308=(Token)match(input,34,FOLLOW_34_in_nnstate1610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal308_tree = (Object)adaptor.create(string_literal308);
            adaptor.addChild(root_0, string_literal308_tree);
            }
            dbg.location(155,20);
            TOKEN309=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate1612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN309_tree = (Object)adaptor.create(TOKEN309);
            adaptor.addChild(root_0, TOKEN309_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(155, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnstate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal310=null;
        Token TOKEN311=null;

        Object string_literal310_tree=null;
        Object TOKEN311_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(156, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:7: ( 'NN-TIME' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(156,8);
            string_literal310=(Token)match(input,35,FOLLOW_35_in_nntime1617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal310_tree = (Object)adaptor.create(string_literal310);
            adaptor.addChild(root_0, string_literal310_tree);
            }
            dbg.location(156,18);
            TOKEN311=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime1619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN311_tree = (Object)adaptor.create(TOKEN311);
            adaptor.addChild(root_0, TOKEN311_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(156, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntime"

    public static class nngram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: nngram : 'NN-GRAM' TOKEN ;
    public final ChemicalChunkerParser.nngram_return nngram() throws RecognitionException {
        ChemicalChunkerParser.nngram_return retval = new ChemicalChunkerParser.nngram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal312=null;
        Token TOKEN313=null;

        Object string_literal312_tree=null;
        Object TOKEN313_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(157, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:7: ( 'NN-GRAM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:8: 'NN-GRAM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(157,8);
            string_literal312=(Token)match(input,36,FOLLOW_36_in_nngram1624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal312_tree = (Object)adaptor.create(string_literal312);
            adaptor.addChild(root_0, string_literal312_tree);
            }
            dbg.location(157,18);
            TOKEN313=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngram1626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN313_tree = (Object)adaptor.create(TOKEN313);
            adaptor.addChild(root_0, TOKEN313_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(157, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngram"

    public static class nnmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: nnmol : 'NN-MOL' TOKEN ;
    public final ChemicalChunkerParser.nnmol_return nnmol() throws RecognitionException {
        ChemicalChunkerParser.nnmol_return retval = new ChemicalChunkerParser.nnmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal314=null;
        Token TOKEN315=null;

        Object string_literal314_tree=null;
        Object TOKEN315_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(158, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:6: ( 'NN-MOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:7: 'NN-MOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(158,7);
            string_literal314=(Token)match(input,37,FOLLOW_37_in_nnmol1631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal314_tree = (Object)adaptor.create(string_literal314);
            adaptor.addChild(root_0, string_literal314_tree);
            }
            dbg.location(158,16);
            TOKEN315=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmol1633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN315_tree = (Object)adaptor.create(TOKEN315);
            adaptor.addChild(root_0, TOKEN315_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(158, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmol"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal316=null;
        Token TOKEN317=null;

        Object string_literal316_tree=null;
        Object TOKEN317_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnatmosphere");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(159, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:13: ( 'NN-ATMOSPHERE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(159,14);
            string_literal316=(Token)match(input,38,FOLLOW_38_in_nnatmosphere1638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal316_tree = (Object)adaptor.create(string_literal316);
            adaptor.addChild(root_0, string_literal316_tree);
            }
            dbg.location(159,30);
            TOKEN317=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere1640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN317_tree = (Object)adaptor.create(TOKEN317);
            adaptor.addChild(root_0, TOKEN317_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(159, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnatmosphere");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal318=null;
        Token TOKEN319=null;

        Object string_literal318_tree=null;
        Object TOKEN319_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nneq");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(160, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:5: ( 'NN-EQ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(160,6);
            string_literal318=(Token)match(input,39,FOLLOW_39_in_nneq1645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal318_tree = (Object)adaptor.create(string_literal318);
            adaptor.addChild(root_0, string_literal318_tree);
            }
            dbg.location(160,14);
            TOKEN319=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq1647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN319_tree = (Object)adaptor.create(TOKEN319);
            adaptor.addChild(root_0, TOKEN319_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(160, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nneq");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal320=null;
        Token TOKEN321=null;

        Object string_literal320_tree=null;
        Object TOKEN321_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(161, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:6: ( 'NN-VOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(161,7);
            string_literal320=(Token)match(input,40,FOLLOW_40_in_nnvol1652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal320_tree = (Object)adaptor.create(string_literal320);
            adaptor.addChild(root_0, string_literal320_tree);
            }
            dbg.location(161,16);
            TOKEN321=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol1654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN321_tree = (Object)adaptor.create(TOKEN321);
            adaptor.addChild(root_0, TOKEN321_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(161, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal322=null;
        Token TOKEN323=null;

        Object string_literal322_tree=null;
        Object TOKEN323_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchementity");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(162, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:13: ( 'NN-CHEMENTITY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(162,14);
            string_literal322=(Token)match(input,41,FOLLOW_41_in_nnchementity1659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal322_tree = (Object)adaptor.create(string_literal322);
            adaptor.addChild(root_0, string_literal322_tree);
            }
            dbg.location(162,30);
            TOKEN323=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity1661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN323_tree = (Object)adaptor.create(TOKEN323);
            adaptor.addChild(root_0, TOKEN323_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(162, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchementity");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal324=null;
        Token TOKEN325=null;

        Object string_literal324_tree=null;
        Object TOKEN325_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(163, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:7: ( 'NN-TEMP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(163,8);
            string_literal324=(Token)match(input,42,FOLLOW_42_in_nntemp1666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal324_tree = (Object)adaptor.create(string_literal324);
            adaptor.addChild(root_0, string_literal324_tree);
            }
            dbg.location(163,18);
            TOKEN325=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp1668); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN325_tree = (Object)adaptor.create(TOKEN325);
            adaptor.addChild(root_0, TOKEN325_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(163, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal326=null;
        Token TOKEN327=null;

        Object string_literal326_tree=null;
        Object TOKEN327_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnflash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(164, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:8: ( 'NN-FLASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(164,9);
            string_literal326=(Token)match(input,43,FOLLOW_43_in_nnflash1673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal326_tree = (Object)adaptor.create(string_literal326);
            adaptor.addChild(root_0, string_literal326_tree);
            }
            dbg.location(164,20);
            TOKEN327=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash1675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN327_tree = (Object)adaptor.create(TOKEN327);
            adaptor.addChild(root_0, TOKEN327_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(164, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnflash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal328=null;
        Token TOKEN329=null;

        Object string_literal328_tree=null;
        Object TOKEN329_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngeneral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(165, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:10: ( 'NN-GENERAL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(165,11);
            string_literal328=(Token)match(input,44,FOLLOW_44_in_nngeneral1680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal328_tree = (Object)adaptor.create(string_literal328);
            adaptor.addChild(root_0, string_literal328_tree);
            }
            dbg.location(165,24);
            TOKEN329=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral1682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN329_tree = (Object)adaptor.create(TOKEN329);
            adaptor.addChild(root_0, TOKEN329_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(165, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngeneral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal330=null;
        Token TOKEN331=null;

        Object string_literal330_tree=null;
        Object TOKEN331_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmethod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(166, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:9: ( 'NN-METHOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(166,10);
            string_literal330=(Token)match(input,45,FOLLOW_45_in_nnmethod1687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal330_tree = (Object)adaptor.create(string_literal330);
            adaptor.addChild(root_0, string_literal330_tree);
            }
            dbg.location(166,22);
            TOKEN331=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod1689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN331_tree = (Object)adaptor.create(TOKEN331);
            adaptor.addChild(root_0, TOKEN331_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(166, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmethod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal332=null;
        Token TOKEN333=null;

        Object string_literal332_tree=null;
        Object TOKEN333_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(167, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:9: ( 'NN-AMOUNT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(167,10);
            string_literal332=(Token)match(input,46,FOLLOW_46_in_nnamount1694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal332_tree = (Object)adaptor.create(string_literal332);
            adaptor.addChild(root_0, string_literal332_tree);
            }
            dbg.location(167,22);
            TOKEN333=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount1696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN333_tree = (Object)adaptor.create(TOKEN333);
            adaptor.addChild(root_0, TOKEN333_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(167, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal334=null;
        Token TOKEN335=null;

        Object string_literal334_tree=null;
        Object TOKEN335_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpressure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(168, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:11: ( 'NN-PRESSURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(168,12);
            string_literal334=(Token)match(input,47,FOLLOW_47_in_nnpressure1701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal334_tree = (Object)adaptor.create(string_literal334);
            adaptor.addChild(root_0, string_literal334_tree);
            }
            dbg.location(168,26);
            TOKEN335=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure1703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN335_tree = (Object)adaptor.create(TOKEN335);
            adaptor.addChild(root_0, TOKEN335_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(168, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpressure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal336=null;
        Token TOKEN337=null;

        Object string_literal336_tree=null;
        Object TOKEN337_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncolumn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(169, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:9: ( 'NN-COLUMN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(169,10);
            string_literal336=(Token)match(input,48,FOLLOW_48_in_nncolumn1708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal336_tree = (Object)adaptor.create(string_literal336);
            adaptor.addChild(root_0, string_literal336_tree);
            }
            dbg.location(169,22);
            TOKEN337=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn1710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN337_tree = (Object)adaptor.create(TOKEN337);
            adaptor.addChild(root_0, TOKEN337_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(169, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncolumn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal338=null;
        Token TOKEN339=null;

        Object string_literal338_tree=null;
        Object TOKEN339_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchromatography");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(170, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(170,18);
            string_literal338=(Token)match(input,49,FOLLOW_49_in_nnchromatography1715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal338_tree = (Object)adaptor.create(string_literal338);
            adaptor.addChild(root_0, string_literal338_tree);
            }
            dbg.location(170,38);
            TOKEN339=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography1717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN339_tree = (Object)adaptor.create(TOKEN339);
            adaptor.addChild(root_0, TOKEN339_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(170, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchromatography");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal340=null;
        Token TOKEN341=null;

        Object string_literal340_tree=null;
        Object TOKEN341_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvacuum");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(171, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:9: ( 'NN-VACUUM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(171,10);
            string_literal340=(Token)match(input,50,FOLLOW_50_in_nnvacuum1722); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal340_tree = (Object)adaptor.create(string_literal340);
            adaptor.addChild(root_0, string_literal340_tree);
            }
            dbg.location(171,22);
            TOKEN341=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum1724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN341_tree = (Object)adaptor.create(TOKEN341);
            adaptor.addChild(root_0, TOKEN341_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(171, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvacuum");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal342=null;
        Token TOKEN343=null;

        Object string_literal342_tree=null;
        Object TOKEN343_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncycle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(172, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:8: ( 'NN-CYCLE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(172,9);
            string_literal342=(Token)match(input,51,FOLLOW_51_in_nncycle1729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal342_tree = (Object)adaptor.create(string_literal342);
            adaptor.addChild(root_0, string_literal342_tree);
            }
            dbg.location(172,20);
            TOKEN343=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle1731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN343_tree = (Object)adaptor.create(TOKEN343);
            adaptor.addChild(root_0, TOKEN343_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(172, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncycle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal344=null;
        Token TOKEN345=null;

        Object string_literal344_tree=null;
        Object TOKEN345_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntimes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(173, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:8: ( 'NN-TIMES' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(173,9);
            string_literal344=(Token)match(input,52,FOLLOW_52_in_nntimes1736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal344_tree = (Object)adaptor.create(string_literal344);
            adaptor.addChild(root_0, string_literal344_tree);
            }
            dbg.location(173,20);
            TOKEN345=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes1738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN345_tree = (Object)adaptor.create(TOKEN345);
            adaptor.addChild(root_0, TOKEN345_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(173, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntimes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal346=null;
        Token TOKEN347=null;

        Object string_literal346_tree=null;
        Object TOKEN347_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(176, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:8: ( 'OSCAR-CM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(176,9);
            string_literal346=(Token)match(input,53,FOLLOW_53_in_oscarcm1745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal346_tree = (Object)adaptor.create(string_literal346);
            adaptor.addChild(root_0, string_literal346_tree);
            }
            dbg.location(176,20);
            TOKEN347=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm1747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN347_tree = (Object)adaptor.create(TOKEN347);
            adaptor.addChild(root_0, TOKEN347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(176, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal348=null;
        Token TOKEN349=null;

        Object string_literal348_tree=null;
        Object TOKEN349_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbuse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(179, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:6: ( 'VB-USE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(179,7);
            string_literal348=(Token)match(input,54,FOLLOW_54_in_vbuse1754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal348_tree = (Object)adaptor.create(string_literal348);
            adaptor.addChild(root_0, string_literal348_tree);
            }
            dbg.location(179,16);
            TOKEN349=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN349_tree = (Object)adaptor.create(TOKEN349);
            adaptor.addChild(root_0, TOKEN349_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(179, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbuse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal350=null;
        Token TOKEN351=null;

        Object string_literal350_tree=null;
        Object TOKEN351_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbchange");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(180, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:9: ( 'VB-CHANGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(180,10);
            string_literal350=(Token)match(input,55,FOLLOW_55_in_vbchange1761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal350_tree = (Object)adaptor.create(string_literal350);
            adaptor.addChild(root_0, string_literal350_tree);
            }
            dbg.location(180,22);
            TOKEN351=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange1763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN351_tree = (Object)adaptor.create(TOKEN351);
            adaptor.addChild(root_0, TOKEN351_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(180, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbchange");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal352=null;
        Token TOKEN353=null;

        Object string_literal352_tree=null;
        Object TOKEN353_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubmerge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(181, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:11: ( 'VB-SUBMERGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(181,12);
            string_literal352=(Token)match(input,56,FOLLOW_56_in_vbsubmerge1768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal352_tree = (Object)adaptor.create(string_literal352);
            adaptor.addChild(root_0, string_literal352_tree);
            }
            dbg.location(181,26);
            TOKEN353=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge1770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN353_tree = (Object)adaptor.create(TOKEN353);
            adaptor.addChild(root_0, TOKEN353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(181, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubmerge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal354=null;
        Token TOKEN355=null;

        Object string_literal354_tree=null;
        Object TOKEN355_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubject");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(182, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:10: ( 'VB-SUBJECT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(182,11);
            string_literal354=(Token)match(input,57,FOLLOW_57_in_vbsubject1775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal354_tree = (Object)adaptor.create(string_literal354);
            adaptor.addChild(root_0, string_literal354_tree);
            }
            dbg.location(182,24);
            TOKEN355=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject1777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN355_tree = (Object)adaptor.create(TOKEN355);
            adaptor.addChild(root_0, TOKEN355_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(182, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubject");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal356=null;
        Token TOKEN357=null;

        Object string_literal356_tree=null;
        Object TOKEN357_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(185, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:6: ( 'NN-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(185,7);
            string_literal356=(Token)match(input,58,FOLLOW_58_in_nnadd1784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal356_tree = (Object)adaptor.create(string_literal356);
            adaptor.addChild(root_0, string_literal356_tree);
            }
            dbg.location(185,16);
            TOKEN357=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd1786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN357_tree = (Object)adaptor.create(TOKEN357);
            adaptor.addChild(root_0, TOKEN357_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(185, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal358=null;
        Token TOKEN359=null;

        Object string_literal358_tree=null;
        Object TOKEN359_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(186, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:10: ( 'NN-MIXTURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(186,11);
            string_literal358=(Token)match(input,59,FOLLOW_59_in_nnmixture1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal358_tree = (Object)adaptor.create(string_literal358);
            adaptor.addChild(root_0, string_literal358_tree);
            }
            dbg.location(186,24);
            TOKEN359=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture1793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN359_tree = (Object)adaptor.create(TOKEN359);
            adaptor.addChild(root_0, TOKEN359_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(186, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal360=null;
        Token TOKEN361=null;

        Object string_literal360_tree=null;
        Object TOKEN361_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(187, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:6: ( 'VB-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(187,7);
            string_literal360=(Token)match(input,60,FOLLOW_60_in_vbadd1798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal360_tree = (Object)adaptor.create(string_literal360);
            adaptor.addChild(root_0, string_literal360_tree);
            }
            dbg.location(187,16);
            TOKEN361=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd1800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN361_tree = (Object)adaptor.create(TOKEN361);
            adaptor.addChild(root_0, TOKEN361_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(187, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal362=null;
        Token TOKEN363=null;

        Object string_literal362_tree=null;
        Object TOKEN363_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcharge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(188, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:9: ( 'VB-CHARGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(188,10);
            string_literal362=(Token)match(input,61,FOLLOW_61_in_vbcharge1805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal362_tree = (Object)adaptor.create(string_literal362);
            adaptor.addChild(root_0, string_literal362_tree);
            }
            dbg.location(188,22);
            TOKEN363=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge1807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN363_tree = (Object)adaptor.create(TOKEN363);
            adaptor.addChild(root_0, TOKEN363_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(188, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcharge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal364=null;
        Token TOKEN365=null;

        Object string_literal364_tree=null;
        Object TOKEN365_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcontain");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(189, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:10: ( 'VB-CONTAIN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(189,11);
            string_literal364=(Token)match(input,62,FOLLOW_62_in_vbcontain1812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal364_tree = (Object)adaptor.create(string_literal364);
            adaptor.addChild(root_0, string_literal364_tree);
            }
            dbg.location(189,24);
            TOKEN365=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain1814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN365_tree = (Object)adaptor.create(TOKEN365);
            adaptor.addChild(root_0, TOKEN365_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(189, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcontain");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal366=null;
        Token TOKEN367=null;

        Object string_literal366_tree=null;
        Object TOKEN367_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdrop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(190, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:7: ( 'VB-DROP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(190,8);
            string_literal366=(Token)match(input,63,FOLLOW_63_in_vbdrop1819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal366_tree = (Object)adaptor.create(string_literal366);
            adaptor.addChild(root_0, string_literal366_tree);
            }
            dbg.location(190,18);
            TOKEN367=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop1821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN367_tree = (Object)adaptor.create(TOKEN367);
            adaptor.addChild(root_0, TOKEN367_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(190, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdrop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal368=null;
        Token TOKEN369=null;

        Object string_literal368_tree=null;
        Object TOKEN369_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfill");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(191, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:7: ( 'VB-FILL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(191,8);
            string_literal368=(Token)match(input,64,FOLLOW_64_in_vbfill1826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal368_tree = (Object)adaptor.create(string_literal368);
            adaptor.addChild(root_0, string_literal368_tree);
            }
            dbg.location(191,18);
            TOKEN369=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill1828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN369_tree = (Object)adaptor.create(TOKEN369);
            adaptor.addChild(root_0, TOKEN369_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(191, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfill");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal370=null;
        Token TOKEN371=null;

        Object string_literal370_tree=null;
        Object TOKEN371_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsuspend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(192, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:10: ( 'VB-SUSPEND' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(192,11);
            string_literal370=(Token)match(input,65,FOLLOW_65_in_vbsuspend1833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal370_tree = (Object)adaptor.create(string_literal370);
            adaptor.addChild(root_0, string_literal370_tree);
            }
            dbg.location(192,24);
            TOKEN371=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend1835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN371_tree = (Object)adaptor.create(TOKEN371);
            adaptor.addChild(root_0, TOKEN371_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(192, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsuspend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal372=null;
        Token TOKEN373=null;

        Object string_literal372_tree=null;
        Object TOKEN373_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbtreat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(193, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:8: ( 'VB-TREAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(193,9);
            string_literal372=(Token)match(input,66,FOLLOW_66_in_vbtreat1840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal372_tree = (Object)adaptor.create(string_literal372);
            adaptor.addChild(root_0, string_literal372_tree);
            }
            dbg.location(193,20);
            TOKEN373=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat1842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN373_tree = (Object)adaptor.create(TOKEN373);
            adaptor.addChild(root_0, TOKEN373_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(193, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbtreat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal374=null;
        Token TOKEN375=null;

        Object string_literal374_tree=null;
        Object TOKEN375_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(196, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:12: ( 'VB-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(196,13);
            string_literal374=(Token)match(input,67,FOLLOW_67_in_vbapparatus1849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal374_tree = (Object)adaptor.create(string_literal374);
            adaptor.addChild(root_0, string_literal374_tree);
            }
            dbg.location(196,28);
            TOKEN375=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus1851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN375_tree = (Object)adaptor.create(TOKEN375);
            adaptor.addChild(root_0, TOKEN375_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(196, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal376=null;
        Token TOKEN377=null;

        Object string_literal376_tree=null;
        Object TOKEN377_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(197, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:12: ( 'NN-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(197,13);
            string_literal376=(Token)match(input,68,FOLLOW_68_in_nnapparatus1856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal376_tree = (Object)adaptor.create(string_literal376);
            adaptor.addChild(root_0, string_literal376_tree);
            }
            dbg.location(197,28);
            TOKEN377=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus1858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN377_tree = (Object)adaptor.create(TOKEN377);
            adaptor.addChild(root_0, TOKEN377_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(197, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal378=null;
        Token TOKEN379=null;

        Object string_literal378_tree=null;
        Object TOKEN379_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(200, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:14: ( 'VB-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(200,15);
            string_literal378=(Token)match(input,69,FOLLOW_69_in_vbconcentrate1865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal378_tree = (Object)adaptor.create(string_literal378);
            adaptor.addChild(root_0, string_literal378_tree);
            }
            dbg.location(200,32);
            TOKEN379=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate1867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN379_tree = (Object)adaptor.create(TOKEN379);
            adaptor.addChild(root_0, TOKEN379_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(200, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal380=null;
        Token TOKEN381=null;

        Object string_literal380_tree=null;
        Object TOKEN381_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(201, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:14: ( 'NN-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(201,15);
            string_literal380=(Token)match(input,70,FOLLOW_70_in_nnconcentrate1872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal380_tree = (Object)adaptor.create(string_literal380);
            adaptor.addChild(root_0, string_literal380_tree);
            }
            dbg.location(201,32);
            TOKEN381=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate1874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN381_tree = (Object)adaptor.create(TOKEN381);
            adaptor.addChild(root_0, TOKEN381_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(201, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal382=null;
        Token TOKEN383=null;

        Object string_literal382_tree=null;
        Object TOKEN383_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcool");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(204, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:7: ( 'VB-COOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(204,8);
            string_literal382=(Token)match(input,71,FOLLOW_71_in_vbcool1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal382_tree = (Object)adaptor.create(string_literal382);
            adaptor.addChild(root_0, string_literal382_tree);
            }
            dbg.location(204,18);
            TOKEN383=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool1883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN383_tree = (Object)adaptor.create(TOKEN383);
            adaptor.addChild(root_0, TOKEN383_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(204, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcool");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal384=null;
        Token TOKEN385=null;

        Object string_literal384_tree=null;
        Object TOKEN385_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdegass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(207, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:9: ( 'VB-DEGASS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(207,10);
            string_literal384=(Token)match(input,72,FOLLOW_72_in_vbdegass1890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal384_tree = (Object)adaptor.create(string_literal384);
            adaptor.addChild(root_0, string_literal384_tree);
            }
            dbg.location(207,22);
            TOKEN385=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass1892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN385_tree = (Object)adaptor.create(TOKEN385);
            adaptor.addChild(root_0, TOKEN385_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(207, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdegass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal386=null;
        Token TOKEN387=null;

        Object string_literal386_tree=null;
        Object TOKEN387_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdissolve");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(210, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:11: ( 'VB-DISSOLVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(210,12);
            string_literal386=(Token)match(input,73,FOLLOW_73_in_vbdissolve1899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = (Object)adaptor.create(string_literal386);
            adaptor.addChild(root_0, string_literal386_tree);
            }
            dbg.location(210,26);
            TOKEN387=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve1901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN387_tree = (Object)adaptor.create(TOKEN387);
            adaptor.addChild(root_0, TOKEN387_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(210, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdissolve");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal388=null;
        Token TOKEN389=null;

        Object string_literal388_tree=null;
        Object TOKEN389_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(213, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:6: ( 'VB-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(213,7);
            string_literal388=(Token)match(input,74,FOLLOW_74_in_vbdry1908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal388_tree = (Object)adaptor.create(string_literal388);
            adaptor.addChild(root_0, string_literal388_tree);
            }
            dbg.location(213,16);
            TOKEN389=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry1910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN389_tree = (Object)adaptor.create(TOKEN389);
            adaptor.addChild(root_0, TOKEN389_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(213, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal390=null;
        Token TOKEN391=null;

        Object string_literal390_tree=null;
        Object TOKEN391_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nndry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(214, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:6: ( 'NN-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(214,7);
            string_literal390=(Token)match(input,75,FOLLOW_75_in_nndry1915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal390_tree = (Object)adaptor.create(string_literal390);
            adaptor.addChild(root_0, string_literal390_tree);
            }
            dbg.location(214,16);
            TOKEN391=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry1917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN391_tree = (Object)adaptor.create(TOKEN391);
            adaptor.addChild(root_0, TOKEN391_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(214, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nndry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal392=null;
        Token TOKEN393=null;

        Object string_literal392_tree=null;
        Object TOKEN393_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(217, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:10: ( 'VB-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(217,11);
            string_literal392=(Token)match(input,76,FOLLOW_76_in_vbextract1924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal392_tree = (Object)adaptor.create(string_literal392);
            adaptor.addChild(root_0, string_literal392_tree);
            }
            dbg.location(217,24);
            TOKEN393=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract1926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN393_tree = (Object)adaptor.create(TOKEN393);
            adaptor.addChild(root_0, TOKEN393_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(217, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal394=null;
        Token TOKEN395=null;

        Object string_literal394_tree=null;
        Object TOKEN395_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(218, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:10: ( 'NN-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(218,11);
            string_literal394=(Token)match(input,77,FOLLOW_77_in_nnextract1931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal394_tree = (Object)adaptor.create(string_literal394);
            adaptor.addChild(root_0, string_literal394_tree);
            }
            dbg.location(218,24);
            TOKEN395=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract1933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN395_tree = (Object)adaptor.create(TOKEN395);
            adaptor.addChild(root_0, TOKEN395_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(218, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal396=null;
        Token TOKEN397=null;

        Object string_literal396_tree=null;
        Object TOKEN397_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(221, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:9: ( 'VB-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(221,10);
            string_literal396=(Token)match(input,78,FOLLOW_78_in_vbfilter1940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal396_tree = (Object)adaptor.create(string_literal396);
            adaptor.addChild(root_0, string_literal396_tree);
            }
            dbg.location(221,22);
            TOKEN397=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter1942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN397_tree = (Object)adaptor.create(TOKEN397);
            adaptor.addChild(root_0, TOKEN397_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(221, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal398=null;
        Token TOKEN399=null;

        Object string_literal398_tree=null;
        Object TOKEN399_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(222, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:9: ( 'NN-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(222,10);
            string_literal398=(Token)match(input,79,FOLLOW_79_in_nnfilter1947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal398_tree = (Object)adaptor.create(string_literal398);
            adaptor.addChild(root_0, string_literal398_tree);
            }
            dbg.location(222,22);
            TOKEN399=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter1949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN399_tree = (Object)adaptor.create(TOKEN399);
            adaptor.addChild(root_0, TOKEN399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(222, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal400=null;
        Token TOKEN401=null;

        Object string_literal400_tree=null;
        Object TOKEN401_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbheat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(225, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:7: ( 'VB-HEAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(225,8);
            string_literal400=(Token)match(input,80,FOLLOW_80_in_vbheat1956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal400_tree = (Object)adaptor.create(string_literal400);
            adaptor.addChild(root_0, string_literal400_tree);
            }
            dbg.location(225,18);
            TOKEN401=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat1958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN401_tree = (Object)adaptor.create(TOKEN401);
            adaptor.addChild(root_0, TOKEN401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(225, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbheat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal402=null;
        Token TOKEN403=null;

        Object string_literal402_tree=null;
        Object TOKEN403_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbincrease");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(226, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:11: ( 'VB-INCREASE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(226,12);
            string_literal402=(Token)match(input,81,FOLLOW_81_in_vbincrease1963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal402_tree = (Object)adaptor.create(string_literal402);
            adaptor.addChild(root_0, string_literal402_tree);
            }
            dbg.location(226,26);
            TOKEN403=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease1965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN403_tree = (Object)adaptor.create(TOKEN403);
            adaptor.addChild(root_0, TOKEN403_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(226, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbincrease");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal404=null;
        Token TOKEN405=null;

        Object string_literal404_tree=null;
        Object TOKEN405_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpartition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(229, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:12: ( 'VB-PARTITION' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(229,13);
            string_literal404=(Token)match(input,82,FOLLOW_82_in_vbpartition1972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal404_tree = (Object)adaptor.create(string_literal404);
            adaptor.addChild(root_0, string_literal404_tree);
            }
            dbg.location(229,28);
            TOKEN405=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition1974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN405_tree = (Object)adaptor.create(TOKEN405);
            adaptor.addChild(root_0, TOKEN405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(229, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpartition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal406=null;
        Token TOKEN407=null;

        Object string_literal406_tree=null;
        Object TOKEN407_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(232, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:14: ( 'VB-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(232,15);
            string_literal406=(Token)match(input,83,FOLLOW_83_in_vbprecipitate1981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = (Object)adaptor.create(string_literal406);
            adaptor.addChild(root_0, string_literal406_tree);
            }
            dbg.location(232,32);
            TOKEN407=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate1983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN407_tree = (Object)adaptor.create(TOKEN407);
            adaptor.addChild(root_0, TOKEN407_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(232, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal408=null;
        Token TOKEN409=null;

        Object string_literal408_tree=null;
        Object TOKEN409_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:14: ( 'NN-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(233,15);
            string_literal408=(Token)match(input,84,FOLLOW_84_in_nnprecipitate1988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal408_tree = (Object)adaptor.create(string_literal408);
            adaptor.addChild(root_0, string_literal408_tree);
            }
            dbg.location(233,32);
            TOKEN409=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate1990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN409_tree = (Object)adaptor.create(TOKEN409);
            adaptor.addChild(root_0, TOKEN409_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(233, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal410=null;
        Token TOKEN411=null;

        Object string_literal410_tree=null;
        Object TOKEN411_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(236, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:9: ( 'VB-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(236,10);
            string_literal410=(Token)match(input,85,FOLLOW_85_in_vbpurify1997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal410_tree = (Object)adaptor.create(string_literal410);
            adaptor.addChild(root_0, string_literal410_tree);
            }
            dbg.location(236,22);
            TOKEN411=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify1999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN411_tree = (Object)adaptor.create(TOKEN411);
            adaptor.addChild(root_0, TOKEN411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(236, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal412=null;
        Token TOKEN413=null;

        Object string_literal412_tree=null;
        Object TOKEN413_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(237, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:9: ( 'NN-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(237,10);
            string_literal412=(Token)match(input,86,FOLLOW_86_in_nnpurify2004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = (Object)adaptor.create(string_literal412);
            adaptor.addChild(root_0, string_literal412_tree);
            }
            dbg.location(237,22);
            TOKEN413=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN413_tree = (Object)adaptor.create(TOKEN413);
            adaptor.addChild(root_0, TOKEN413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(237, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal414=null;
        Token TOKEN415=null;

        Object string_literal414_tree=null;
        Object TOKEN415_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbquench");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(240, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:9: ( 'VB-QUENCH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(240,10);
            string_literal414=(Token)match(input,87,FOLLOW_87_in_vbquench2013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal414_tree = (Object)adaptor.create(string_literal414);
            adaptor.addChild(root_0, string_literal414_tree);
            }
            dbg.location(240,22);
            TOKEN415=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN415_tree = (Object)adaptor.create(TOKEN415);
            adaptor.addChild(root_0, TOKEN415_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(240, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbquench");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal416=null;
        Token TOKEN417=null;

        Object string_literal416_tree=null;
        Object TOKEN417_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbrecover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(243, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:10: ( 'VB-RECOVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(243,11);
            string_literal416=(Token)match(input,88,FOLLOW_88_in_vbrecover2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal416_tree = (Object)adaptor.create(string_literal416);
            adaptor.addChild(root_0, string_literal416_tree);
            }
            dbg.location(243,24);
            TOKEN417=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN417_tree = (Object)adaptor.create(TOKEN417);
            adaptor.addChild(root_0, TOKEN417_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(243, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbrecover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal418=null;
        Token TOKEN419=null;

        Object string_literal418_tree=null;
        Object TOKEN419_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(246, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:9: ( 'VB-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(246,10);
            string_literal418=(Token)match(input,89,FOLLOW_89_in_vbremove2031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal418_tree = (Object)adaptor.create(string_literal418);
            adaptor.addChild(root_0, string_literal418_tree);
            }
            dbg.location(246,22);
            TOKEN419=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN419_tree = (Object)adaptor.create(TOKEN419);
            adaptor.addChild(root_0, TOKEN419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(246, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal420=null;
        Token TOKEN421=null;

        Object string_literal420_tree=null;
        Object TOKEN421_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(247, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:9: ( 'NN-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(247,10);
            string_literal420=(Token)match(input,90,FOLLOW_90_in_nnremove2038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal420_tree = (Object)adaptor.create(string_literal420);
            adaptor.addChild(root_0, string_literal420_tree);
            }
            dbg.location(247,22);
            TOKEN421=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN421_tree = (Object)adaptor.create(TOKEN421);
            adaptor.addChild(root_0, TOKEN421_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(247, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal422=null;
        Token TOKEN423=null;

        Object string_literal422_tree=null;
        Object TOKEN423_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbstir");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(250, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:7: ( 'VB-STIR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(250,8);
            string_literal422=(Token)match(input,91,FOLLOW_91_in_vbstir2047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal422_tree = (Object)adaptor.create(string_literal422);
            adaptor.addChild(root_0, string_literal422_tree);
            }
            dbg.location(250,18);
            TOKEN423=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN423_tree = (Object)adaptor.create(TOKEN423);
            adaptor.addChild(root_0, TOKEN423_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(250, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbstir");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal424=null;
        Token TOKEN425=null;

        Object string_literal424_tree=null;
        Object TOKEN425_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(253, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:13: ( 'VB-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(253,14);
            string_literal424=(Token)match(input,92,FOLLOW_92_in_vbsynthesize2056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal424_tree = (Object)adaptor.create(string_literal424);
            adaptor.addChild(root_0, string_literal424_tree);
            }
            dbg.location(253,30);
            TOKEN425=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN425_tree = (Object)adaptor.create(TOKEN425);
            adaptor.addChild(root_0, TOKEN425_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(253, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal426=null;
        Token TOKEN427=null;

        Object string_literal426_tree=null;
        Object TOKEN427_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(254, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:13: ( 'NN-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(254,14);
            string_literal426=(Token)match(input,93,FOLLOW_93_in_nnsynthesize2063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = (Object)adaptor.create(string_literal426);
            adaptor.addChild(root_0, string_literal426_tree);
            }
            dbg.location(254,30);
            TOKEN427=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN427_tree = (Object)adaptor.create(TOKEN427);
            adaptor.addChild(root_0, TOKEN427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(254, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal428=null;
        Token TOKEN429=null;

        Object string_literal428_tree=null;
        Object TOKEN429_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwait");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(257, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:7: ( 'VB-WAIT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(257,8);
            string_literal428=(Token)match(input,94,FOLLOW_94_in_vbwait2072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal428_tree = (Object)adaptor.create(string_literal428);
            adaptor.addChild(root_0, string_literal428_tree);
            }
            dbg.location(257,18);
            TOKEN429=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN429_tree = (Object)adaptor.create(TOKEN429);
            adaptor.addChild(root_0, TOKEN429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(257, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwait");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal430=null;
        Token TOKEN431=null;

        Object string_literal430_tree=null;
        Object TOKEN431_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(260, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:7: ( 'VB-WASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(260,8);
            string_literal430=(Token)match(input,95,FOLLOW_95_in_vbwash2081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal430_tree = (Object)adaptor.create(string_literal430);
            adaptor.addChild(root_0, string_literal430_tree);
            }
            dbg.location(260,18);
            TOKEN431=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN431_tree = (Object)adaptor.create(TOKEN431);
            adaptor.addChild(root_0, TOKEN431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(260, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal432=null;
        Token TOKEN433=null;

        Object string_literal432_tree=null;
        Object TOKEN433_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbyield");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(263, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:8: ( 'VB-YIELD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(263,9);
            string_literal432=(Token)match(input,96,FOLLOW_96_in_vbyield2090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal432_tree = (Object)adaptor.create(string_literal432);
            adaptor.addChild(root_0, string_literal432_tree);
            }
            dbg.location(263,20);
            TOKEN433=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN433_tree = (Object)adaptor.create(TOKEN433);
            adaptor.addChild(root_0, TOKEN433_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(263, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbyield");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal434=null;
        Token TOKEN435=null;

        Object string_literal434_tree=null;
        Object TOKEN435_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "colon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(266, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:6: ( 'COLON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(266,7);
            string_literal434=(Token)match(input,97,FOLLOW_97_in_colon2099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = (Object)adaptor.create(string_literal434);
            adaptor.addChild(root_0, string_literal434_tree);
            }
            dbg.location(266,15);
            TOKEN435=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN435_tree = (Object)adaptor.create(TOKEN435);
            adaptor.addChild(root_0, TOKEN435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(266, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "colon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal436=null;
        Token TOKEN437=null;

        Object string_literal436_tree=null;
        Object TOKEN437_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "comma");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(267, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:6: ( 'COMMA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(267,7);
            string_literal436=(Token)match(input,98,FOLLOW_98_in_comma2106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal436_tree = (Object)adaptor.create(string_literal436);
            adaptor.addChild(root_0, string_literal436_tree);
            }
            dbg.location(267,15);
            TOKEN437=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN437_tree = (Object)adaptor.create(TOKEN437);
            adaptor.addChild(root_0, TOKEN437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(267, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comma");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal438=null;
        Token TOKEN439=null;

        Object string_literal438_tree=null;
        Object TOKEN439_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "apost");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(268, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:6: ( 'APOST' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(268,7);
            string_literal438=(Token)match(input,99,FOLLOW_99_in_apost2113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = (Object)adaptor.create(string_literal438);
            adaptor.addChild(root_0, string_literal438_tree);
            }
            dbg.location(268,15);
            TOKEN439=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN439_tree = (Object)adaptor.create(TOKEN439);
            adaptor.addChild(root_0, TOKEN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(268, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apost");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal440=null;
        Token TOKEN441=null;

        Object string_literal440_tree=null;
        Object TOKEN441_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "neg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(269, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:4: ( 'NEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(269,5);
            string_literal440=(Token)match(input,100,FOLLOW_100_in_neg2120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = (Object)adaptor.create(string_literal440);
            adaptor.addChild(root_0, string_literal440_tree);
            }
            dbg.location(269,11);
            TOKEN441=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN441_tree = (Object)adaptor.create(TOKEN441);
            adaptor.addChild(root_0, TOKEN441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(269, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "neg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal442=null;
        Token TOKEN443=null;

        Object string_literal442_tree=null;
        Object TOKEN443_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(270, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:5: ( 'DASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(270,6);
            string_literal442=(Token)match(input,101,FOLLOW_101_in_dash2127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = (Object)adaptor.create(string_literal442);
            adaptor.addChild(root_0, string_literal442_tree);
            }
            dbg.location(270,13);
            TOKEN443=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN443_tree = (Object)adaptor.create(TOKEN443);
            adaptor.addChild(root_0, TOKEN443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(270, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal444=null;
        Token TOKEN445=null;

        Object string_literal444_tree=null;
        Object TOKEN445_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "stop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(271, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:5: ( 'STOP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(271,6);
            string_literal444=(Token)match(input,102,FOLLOW_102_in_stop2134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (Object)adaptor.create(string_literal444);
            adaptor.addChild(root_0, string_literal444_tree);
            }
            dbg.location(271,13);
            TOKEN445=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN445_tree = (Object)adaptor.create(TOKEN445);
            adaptor.addChild(root_0, TOKEN445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(271, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "stop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal446=null;
        Token TOKEN447=null;

        Object string_literal446_tree=null;
        Object TOKEN447_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpercent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(272, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:10: ( 'NN-PERCENT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(272,11);
            string_literal446=(Token)match(input,103,FOLLOW_103_in_nnpercent2141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (Object)adaptor.create(string_literal446);
            adaptor.addChild(root_0, string_literal446_tree);
            }
            dbg.location(272,24);
            TOKEN447=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN447_tree = (Object)adaptor.create(TOKEN447);
            adaptor.addChild(root_0, TOKEN447_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(272, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpercent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal448=null;
        Token TOKEN449=null;

        Object string_literal448_tree=null;
        Object TOKEN449_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(273, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:5: ( 'LSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(273,6);
            string_literal448=(Token)match(input,104,FOLLOW_104_in_lsqb2148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (Object)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            dbg.location(273,13);
            TOKEN449=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN449_tree = (Object)adaptor.create(TOKEN449);
            adaptor.addChild(root_0, TOKEN449_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(273, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal450=null;
        Token TOKEN451=null;

        Object string_literal450_tree=null;
        Object TOKEN451_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(274, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:5: ( 'RSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(274,6);
            string_literal450=(Token)match(input,105,FOLLOW_105_in_rsqb2155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = (Object)adaptor.create(string_literal450);
            adaptor.addChild(root_0, string_literal450_tree);
            }
            dbg.location(274,13);
            TOKEN451=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN451_tree = (Object)adaptor.create(TOKEN451);
            adaptor.addChild(root_0, TOKEN451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(274, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal452=null;
        Token TOKEN453=null;

        Object string_literal452_tree=null;
        Object TOKEN453_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(275, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:4: ( '-LRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(275,5);
            string_literal452=(Token)match(input,106,FOLLOW_106_in_lrb2162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = (Object)adaptor.create(string_literal452);
            adaptor.addChild(root_0, string_literal452_tree);
            }
            dbg.location(275,13);
            TOKEN453=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN453_tree = (Object)adaptor.create(TOKEN453);
            adaptor.addChild(root_0, TOKEN453_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(275, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal454=null;
        Token TOKEN455=null;

        Object string_literal454_tree=null;
        Object TOKEN455_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(276, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:4: ( '-RRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(276,5);
            string_literal454=(Token)match(input,107,FOLLOW_107_in_rrb2169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal454_tree = (Object)adaptor.create(string_literal454);
            adaptor.addChild(root_0, string_literal454_tree);
            }
            dbg.location(276,13);
            TOKEN455=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN455_tree = (Object)adaptor.create(TOKEN455);
            adaptor.addChild(root_0, TOKEN455_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(276, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal456=null;
        Token TOKEN457=null;

        Object string_literal456_tree=null;
        Object TOKEN457_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(281, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:4: ( 'ABL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(281,5);
            string_literal456=(Token)match(input,108,FOLLOW_108_in_abl2180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (Object)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            dbg.location(281,11);
            TOKEN457=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN457_tree = (Object)adaptor.create(TOKEN457);
            adaptor.addChild(root_0, TOKEN457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(281, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal458=null;
        Token TOKEN459=null;

        Object string_literal458_tree=null;
        Object TOKEN459_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(284, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:4: ( 'ABN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(284,5);
            string_literal458=(Token)match(input,109,FOLLOW_109_in_abn2189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (Object)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            dbg.location(284,11);
            TOKEN459=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN459_tree = (Object)adaptor.create(TOKEN459);
            adaptor.addChild(root_0, TOKEN459_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(284, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal460=null;
        Token TOKEN461=null;

        Object string_literal460_tree=null;
        Object TOKEN461_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(287, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:4: ( 'ABX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(287,5);
            string_literal460=(Token)match(input,110,FOLLOW_110_in_abx2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (Object)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            dbg.location(287,11);
            TOKEN461=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN461_tree = (Object)adaptor.create(TOKEN461);
            adaptor.addChild(root_0, TOKEN461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(287, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal462=null;
        Token TOKEN463=null;

        Object string_literal462_tree=null;
        Object TOKEN463_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ap");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(290, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:3: ( 'AP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(290,4);
            string_literal462=(Token)match(input,111,FOLLOW_111_in_ap2207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = (Object)adaptor.create(string_literal462);
            adaptor.addChild(root_0, string_literal462_tree);
            }
            dbg.location(290,9);
            TOKEN463=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN463_tree = (Object)adaptor.create(TOKEN463);
            adaptor.addChild(root_0, TOKEN463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(290, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ap");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal464=null;
        Token TOKEN465=null;

        Object string_literal464_tree=null;
        Object TOKEN465_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "at");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(293, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:3: ( 'AT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(293,4);
            string_literal464=(Token)match(input,112,FOLLOW_112_in_at2216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (Object)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            dbg.location(293,9);
            TOKEN465=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN465_tree = (Object)adaptor.create(TOKEN465);
            adaptor.addChild(root_0, TOKEN465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(293, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal466=null;
        Token TOKEN467=null;

        Object string_literal466_tree=null;
        Object TOKEN467_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "be");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(296, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:3: ( 'BE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(296,4);
            string_literal466=(Token)match(input,113,FOLLOW_113_in_be2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = (Object)adaptor.create(string_literal466);
            adaptor.addChild(root_0, string_literal466_tree);
            }
            dbg.location(296,9);
            TOKEN467=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN467_tree = (Object)adaptor.create(TOKEN467);
            adaptor.addChild(root_0, TOKEN467_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(296, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "be");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal468=null;
        Token TOKEN469=null;

        Object string_literal468_tree=null;
        Object TOKEN469_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bed");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(299, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:4: ( 'BED' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(299,5);
            string_literal468=(Token)match(input,114,FOLLOW_114_in_bed2234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (Object)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            dbg.location(299,11);
            TOKEN469=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2236); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN469_tree = (Object)adaptor.create(TOKEN469);
            adaptor.addChild(root_0, TOKEN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(299, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bed");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal470=null;
        Token TOKEN471=null;

        Object string_literal470_tree=null;
        Object TOKEN471_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bedz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(302, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:5: ( 'BEDZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(302,6);
            string_literal470=(Token)match(input,115,FOLLOW_115_in_bedz2243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = (Object)adaptor.create(string_literal470);
            adaptor.addChild(root_0, string_literal470_tree);
            }
            dbg.location(302,13);
            TOKEN471=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN471_tree = (Object)adaptor.create(TOKEN471);
            adaptor.addChild(root_0, TOKEN471_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(302, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bedz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal472=null;
        Token TOKEN473=null;

        Object string_literal472_tree=null;
        Object TOKEN473_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "beg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(305, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:4: ( 'BEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(305,5);
            string_literal472=(Token)match(input,116,FOLLOW_116_in_beg2252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = (Object)adaptor.create(string_literal472);
            adaptor.addChild(root_0, string_literal472_tree);
            }
            dbg.location(305,11);
            TOKEN473=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN473_tree = (Object)adaptor.create(TOKEN473);
            adaptor.addChild(root_0, TOKEN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(305, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "beg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal474=null;
        Token TOKEN475=null;

        Object string_literal474_tree=null;
        Object TOKEN475_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(308, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:4: ( 'BEM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(308,5);
            string_literal474=(Token)match(input,117,FOLLOW_117_in_bem2261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (Object)adaptor.create(string_literal474);
            adaptor.addChild(root_0, string_literal474_tree);
            }
            dbg.location(308,11);
            TOKEN475=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN475_tree = (Object)adaptor.create(TOKEN475);
            adaptor.addChild(root_0, TOKEN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(308, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal476=null;
        Token TOKEN477=null;

        Object string_literal476_tree=null;
        Object TOKEN477_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ben");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(311, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:4: ( 'BEN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(311,5);
            string_literal476=(Token)match(input,118,FOLLOW_118_in_ben2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal476_tree = (Object)adaptor.create(string_literal476);
            adaptor.addChild(root_0, string_literal476_tree);
            }
            dbg.location(311,11);
            TOKEN477=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN477_tree = (Object)adaptor.create(TOKEN477);
            adaptor.addChild(root_0, TOKEN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(311, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ben");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal478=null;
        Token TOKEN479=null;

        Object string_literal478_tree=null;
        Object TOKEN479_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ber");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(314, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:4: ( 'BER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(314,5);
            string_literal478=(Token)match(input,119,FOLLOW_119_in_ber2279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (Object)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            dbg.location(314,11);
            TOKEN479=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN479_tree = (Object)adaptor.create(TOKEN479);
            adaptor.addChild(root_0, TOKEN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(314, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ber");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal480=null;
        Token TOKEN481=null;

        Object string_literal480_tree=null;
        Object TOKEN481_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bez");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(317, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:4: ( 'BEZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(317,5);
            string_literal480=(Token)match(input,120,FOLLOW_120_in_bez2288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (Object)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            dbg.location(317,11);
            TOKEN481=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2290); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN481_tree = (Object)adaptor.create(TOKEN481);
            adaptor.addChild(root_0, TOKEN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(317, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bez");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal482=null;
        Token TOKEN483=null;

        Object string_literal482_tree=null;
        Object TOKEN483_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(320, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:3: ( 'CC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(320,4);
            string_literal482=(Token)match(input,121,FOLLOW_121_in_cc2297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (Object)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            dbg.location(320,9);
            TOKEN483=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN483_tree = (Object)adaptor.create(TOKEN483);
            adaptor.addChild(root_0, TOKEN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(320, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal484=null;
        Token TOKEN485=null;

        Object string_literal484_tree=null;
        Object TOKEN485_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(323, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:3: ( 'CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(323,4);
            string_literal484=(Token)match(input,122,FOLLOW_122_in_cd2306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (Object)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            dbg.location(323,9);
            TOKEN485=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN485_tree = (Object)adaptor.create(TOKEN485);
            adaptor.addChild(root_0, TOKEN485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(323, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal486=null;
        Token TOKEN487=null;

        Object string_literal486_tree=null;
        Object TOKEN487_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(326, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:3: ( 'CS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(326,4);
            string_literal486=(Token)match(input,123,FOLLOW_123_in_cs2315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = (Object)adaptor.create(string_literal486);
            adaptor.addChild(root_0, string_literal486_tree);
            }
            dbg.location(326,9);
            TOKEN487=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN487_tree = (Object)adaptor.create(TOKEN487);
            adaptor.addChild(root_0, TOKEN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(326, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal488=null;
        Token TOKEN489=null;

        Object string_literal488_tree=null;
        Object TOKEN489_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dotok");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(329, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:7: ( 'DO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(329,8);
            string_literal488=(Token)match(input,124,FOLLOW_124_in_dotok2325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal488_tree = (Object)adaptor.create(string_literal488);
            adaptor.addChild(root_0, string_literal488_tree);
            }
            dbg.location(329,13);
            TOKEN489=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN489_tree = (Object)adaptor.create(TOKEN489);
            adaptor.addChild(root_0, TOKEN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(329, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dotok");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal490=null;
        Token TOKEN491=null;

        Object string_literal490_tree=null;
        Object TOKEN491_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(332, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:4: ( 'DOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(332,5);
            string_literal490=(Token)match(input,125,FOLLOW_125_in_dod2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = (Object)adaptor.create(string_literal490);
            adaptor.addChild(root_0, string_literal490_tree);
            }
            dbg.location(332,11);
            TOKEN491=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN491_tree = (Object)adaptor.create(TOKEN491);
            adaptor.addChild(root_0, TOKEN491_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(332, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal492=null;
        Token TOKEN493=null;

        Object string_literal492_tree=null;
        Object TOKEN493_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "doz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(335, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:4: ( 'DOZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(335,5);
            string_literal492=(Token)match(input,126,FOLLOW_126_in_doz2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal492_tree = (Object)adaptor.create(string_literal492);
            adaptor.addChild(root_0, string_literal492_tree);
            }
            dbg.location(335,11);
            TOKEN493=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN493_tree = (Object)adaptor.create(TOKEN493);
            adaptor.addChild(root_0, TOKEN493_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(335, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "doz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal494=null;
        Token TOKEN495=null;

        Object string_literal494_tree=null;
        Object TOKEN495_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(338, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:3: ( 'DT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(338,4);
            string_literal494=(Token)match(input,127,FOLLOW_127_in_dt2352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal494_tree = (Object)adaptor.create(string_literal494);
            adaptor.addChild(root_0, string_literal494_tree);
            }
            dbg.location(338,9);
            TOKEN495=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt2354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN495_tree = (Object)adaptor.create(TOKEN495);
            adaptor.addChild(root_0, TOKEN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(338, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;
        Token TOKEN497=null;

        Object string_literal496_tree=null;
        Object TOKEN497_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dti");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(341, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:4: ( 'DTI' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(341,5);
            string_literal496=(Token)match(input,128,FOLLOW_128_in_dti2361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (Object)adaptor.create(string_literal496);
            adaptor.addChild(root_0, string_literal496_tree);
            }
            dbg.location(341,11);
            TOKEN497=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti2363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN497_tree = (Object)adaptor.create(TOKEN497);
            adaptor.addChild(root_0, TOKEN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(341, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dti");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal498=null;
        Token TOKEN499=null;

        Object string_literal498_tree=null;
        Object TOKEN499_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dts");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:4: ( 'DTS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(344,5);
            string_literal498=(Token)match(input,129,FOLLOW_129_in_dts2370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal498_tree = (Object)adaptor.create(string_literal498);
            adaptor.addChild(root_0, string_literal498_tree);
            }
            dbg.location(344,11);
            TOKEN499=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts2372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN499_tree = (Object)adaptor.create(TOKEN499);
            adaptor.addChild(root_0, TOKEN499_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(344, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dts");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal500=null;
        Token TOKEN501=null;

        Object string_literal500_tree=null;
        Object TOKEN501_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dtx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(347, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:4: ( 'DTX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(347,5);
            string_literal500=(Token)match(input,130,FOLLOW_130_in_dtx2379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (Object)adaptor.create(string_literal500);
            adaptor.addChild(root_0, string_literal500_tree);
            }
            dbg.location(347,11);
            TOKEN501=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx2381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN501_tree = (Object)adaptor.create(TOKEN501);
            adaptor.addChild(root_0, TOKEN501_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(347, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dtx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal502=null;
        Token TOKEN503=null;

        Object string_literal502_tree=null;
        Object TOKEN503_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ex");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:3: ( 'EX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(350,4);
            string_literal502=(Token)match(input,131,FOLLOW_131_in_ex2388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = (Object)adaptor.create(string_literal502);
            adaptor.addChild(root_0, string_literal502_tree);
            }
            dbg.location(350,9);
            TOKEN503=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex2390); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN503_tree = (Object)adaptor.create(TOKEN503);
            adaptor.addChild(root_0, TOKEN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(350, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ex");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal504=null;
        Token TOKEN505=null;

        Object string_literal504_tree=null;
        Object TOKEN505_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fw");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(353, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:3: ( 'FW' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(353,4);
            string_literal504=(Token)match(input,132,FOLLOW_132_in_fw2397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = (Object)adaptor.create(string_literal504);
            adaptor.addChild(root_0, string_literal504_tree);
            }
            dbg.location(353,9);
            TOKEN505=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw2399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN505_tree = (Object)adaptor.create(TOKEN505);
            adaptor.addChild(root_0, TOKEN505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(353, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fw");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fw"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal506=null;
        Token TOKEN507=null;

        Object string_literal506_tree=null;
        Object TOKEN507_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:3: ( 'HV' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(356,4);
            string_literal506=(Token)match(input,133,FOLLOW_133_in_hv2406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal506_tree = (Object)adaptor.create(string_literal506);
            adaptor.addChild(root_0, string_literal506_tree);
            }
            dbg.location(356,9);
            TOKEN507=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv2408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN507_tree = (Object)adaptor.create(TOKEN507);
            adaptor.addChild(root_0, TOKEN507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(356, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal508=null;
        Token TOKEN509=null;

        Object string_literal508_tree=null;
        Object TOKEN509_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(359, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:4: ( 'HVD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:359:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(359,5);
            string_literal508=(Token)match(input,134,FOLLOW_134_in_hvd2415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal508_tree = (Object)adaptor.create(string_literal508);
            adaptor.addChild(root_0, string_literal508_tree);
            }
            dbg.location(359,11);
            TOKEN509=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd2417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN509_tree = (Object)adaptor.create(TOKEN509);
            adaptor.addChild(root_0, TOKEN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(359, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal510=null;
        Token TOKEN511=null;

        Object string_literal510_tree=null;
        Object TOKEN511_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(362, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:4: ( 'HVG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:362:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(362,5);
            string_literal510=(Token)match(input,135,FOLLOW_135_in_hvg2424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal510_tree = (Object)adaptor.create(string_literal510);
            adaptor.addChild(root_0, string_literal510_tree);
            }
            dbg.location(362,11);
            TOKEN511=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg2426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN511_tree = (Object)adaptor.create(TOKEN511);
            adaptor.addChild(root_0, TOKEN511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(362, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal512=null;
        Token TOKEN513=null;

        Object string_literal512_tree=null;
        Object TOKEN513_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(365, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:4: ( 'HVN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:365:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(365,5);
            string_literal512=(Token)match(input,136,FOLLOW_136_in_hvn2433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal512_tree = (Object)adaptor.create(string_literal512);
            adaptor.addChild(root_0, string_literal512_tree);
            }
            dbg.location(365,11);
            TOKEN513=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn2435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN513_tree = (Object)adaptor.create(TOKEN513);
            adaptor.addChild(root_0, TOKEN513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(365, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal514=null;
        Token TOKEN515=null;

        Object string_literal514_tree=null;
        Object TOKEN515_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "in");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:3: ( 'IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(368,4);
            string_literal514=(Token)match(input,137,FOLLOW_137_in_in2442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal514_tree = (Object)adaptor.create(string_literal514);
            adaptor.addChild(root_0, string_literal514_tree);
            }
            dbg.location(368,9);
            TOKEN515=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in2444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN515_tree = (Object)adaptor.create(TOKEN515);
            adaptor.addChild(root_0, TOKEN515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(368, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "in");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal516=null;
        Token TOKEN517=null;

        Object string_literal516_tree=null;
        Object TOKEN517_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(371, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:3: ( 'JJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(371,4);
            string_literal516=(Token)match(input,138,FOLLOW_138_in_jj2451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal516_tree = (Object)adaptor.create(string_literal516);
            adaptor.addChild(root_0, string_literal516_tree);
            }
            dbg.location(371,9);
            TOKEN517=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj2453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN517_tree = (Object)adaptor.create(TOKEN517);
            adaptor.addChild(root_0, TOKEN517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(371, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal518=null;
        Token TOKEN519=null;

        Object string_literal518_tree=null;
        Object TOKEN519_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(374, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:4: ( 'JJR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(374,5);
            string_literal518=(Token)match(input,139,FOLLOW_139_in_jjr2460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (Object)adaptor.create(string_literal518);
            adaptor.addChild(root_0, string_literal518_tree);
            }
            dbg.location(374,11);
            TOKEN519=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr2462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN519_tree = (Object)adaptor.create(TOKEN519);
            adaptor.addChild(root_0, TOKEN519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(374, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal520=null;
        Token TOKEN521=null;

        Object string_literal520_tree=null;
        Object TOKEN521_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(377, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:4: ( 'JJS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(377,5);
            string_literal520=(Token)match(input,140,FOLLOW_140_in_jjs2469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = (Object)adaptor.create(string_literal520);
            adaptor.addChild(root_0, string_literal520_tree);
            }
            dbg.location(377,11);
            TOKEN521=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs2471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN521_tree = (Object)adaptor.create(TOKEN521);
            adaptor.addChild(root_0, TOKEN521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(377, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal522=null;
        Token TOKEN523=null;

        Object string_literal522_tree=null;
        Object TOKEN523_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:4: ( 'JJT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(380,5);
            string_literal522=(Token)match(input,141,FOLLOW_141_in_jjt2478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (Object)adaptor.create(string_literal522);
            adaptor.addChild(root_0, string_literal522_tree);
            }
            dbg.location(380,11);
            TOKEN523=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt2480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN523_tree = (Object)adaptor.create(TOKEN523);
            adaptor.addChild(root_0, TOKEN523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(380, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal524=null;
        Token TOKEN525=null;

        Object string_literal524_tree=null;
        Object TOKEN525_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "md");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(383, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:3: ( 'MD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(383,4);
            string_literal524=(Token)match(input,142,FOLLOW_142_in_md2487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal524_tree = (Object)adaptor.create(string_literal524);
            adaptor.addChild(root_0, string_literal524_tree);
            }
            dbg.location(383,9);
            TOKEN525=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md2489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN525_tree = (Object)adaptor.create(TOKEN525);
            adaptor.addChild(root_0, TOKEN525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(383, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "md");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal526=null;
        Token TOKEN527=null;

        Object string_literal526_tree=null;
        Object TOKEN527_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(386, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:3: ( 'NC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(386,4);
            string_literal526=(Token)match(input,143,FOLLOW_143_in_nc2496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal526_tree = (Object)adaptor.create(string_literal526);
            adaptor.addChild(root_0, string_literal526_tree);
            }
            dbg.location(386,9);
            TOKEN527=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc2498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN527_tree = (Object)adaptor.create(TOKEN527);
            adaptor.addChild(root_0, TOKEN527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(386, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal528=null;
        Token TOKEN529=null;

        Object string_literal528_tree=null;
        Object TOKEN529_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(389, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:3: ( 'NN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(389,4);
            string_literal528=(Token)match(input,144,FOLLOW_144_in_nn2505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = (Object)adaptor.create(string_literal528);
            adaptor.addChild(root_0, string_literal528_tree);
            }
            dbg.location(389,9);
            TOKEN529=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn2507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN529_tree = (Object)adaptor.create(TOKEN529);
            adaptor.addChild(root_0, TOKEN529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(389, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal530=null;
        Token TOKEN531=null;

        Object string_literal530_tree=null;
        Object TOKEN531_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(392, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:8: ( 'NN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:392:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(392,9);
            string_literal530=(Token)match(input,145,FOLLOW_145_in_nn_poss2514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal530_tree = (Object)adaptor.create(string_literal530);
            adaptor.addChild(root_0, string_literal530_tree);
            }
            dbg.location(392,15);
            TOKEN531=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss2516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN531_tree = (Object)adaptor.create(TOKEN531);
            adaptor.addChild(root_0, TOKEN531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(392, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(395, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:4: ( 'NNS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:395:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(395,5);
            string_literal532=(Token)match(input,146,FOLLOW_146_in_nns2523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            dbg.location(395,11);
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns2525); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(395, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(398, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:9: ( 'NNS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(398,10);
            string_literal534=(Token)match(input,147,FOLLOW_147_in_nns_poss2532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            dbg.location(398,17);
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss2534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(398, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(401, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:3: ( 'NP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:401:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(401,4);
            string_literal536=(Token)match(input,148,FOLLOW_148_in_np2541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            dbg.location(401,9);
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np2543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(401, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:4: ( 'NNP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(405,5);
            string_literal538=(Token)match(input,149,FOLLOW_149_in_nnp2551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            dbg.location(405,11);
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp2553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(405, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(409, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:8: ( 'NP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(409,9);
            string_literal540=(Token)match(input,150,FOLLOW_150_in_np_poss2561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            dbg.location(409,15);
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss2563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(409, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(412, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: ( 'NPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(412,5);
            string_literal542=(Token)match(input,151,FOLLOW_151_in_nps2570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            dbg.location(412,11);
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps2572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(412, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(415, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:9: ( 'NPS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(415,10);
            string_literal544=(Token)match(input,152,FOLLOW_152_in_nps_poss2579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            dbg.location(415,17);
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss2581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(415, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:3: ( 'NR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(418,4);
            string_literal546=(Token)match(input,153,FOLLOW_153_in_nr2588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            dbg.location(418,9);
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr2590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(418, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "od");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:3: ( 'OD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(421,4);
            string_literal548=(Token)match(input,154,FOLLOW_154_in_od2597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            dbg.location(421,9);
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od2599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(421, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "od");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(424, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:3: ( 'PN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(424,4);
            string_literal550=(Token)match(input,155,FOLLOW_155_in_pn2606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            dbg.location(424,9);
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn2608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(424, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(427, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:8: ( 'PN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(427,9);
            string_literal552=(Token)match(input,156,FOLLOW_156_in_pn_poss2615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            dbg.location(427,15);
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss2617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(427, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(430, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:8: ( 'PP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(430,9);
            string_literal554=(Token)match(input,157,FOLLOW_157_in_pp_poss2624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            dbg.location(430,15);
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(430, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(433, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:13: ( 'PP$$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(433,14);
            string_literal556=(Token)match(input,158,FOLLOW_158_in_pp_poss_poss2633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            dbg.location(433,21);
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss2635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(433, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(436, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: ( 'PPL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(436,5);
            string_literal558=(Token)match(input,159,FOLLOW_159_in_ppl2642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            dbg.location(436,11);
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(436, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppls");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(439, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:5: ( 'PPLS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(439,6);
            string_literal560=(Token)match(input,160,FOLLOW_160_in_ppls2651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            dbg.location(439,13);
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(439, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppls");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "prp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(441, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:5: ( 'PRP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(441,7);
            string_literal562=(Token)match(input,161,FOLLOW_161_in_prp2661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            dbg.location(441,14);
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp2664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(441, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(444, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:4: ( 'PPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(444,5);
            string_literal564=(Token)match(input,162,FOLLOW_162_in_ppo2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            dbg.location(444,11);
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo2673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(444, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(447, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:4: ( 'PPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(447,5);
            string_literal566=(Token)match(input,163,FOLLOW_163_in_pps2680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            dbg.location(447,11);
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(447, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(450, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:5: ( 'PPSS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(450,6);
            string_literal568=(Token)match(input,164,FOLLOW_164_in_ppss2689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            dbg.location(450,13);
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss2691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(450, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(453, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:3: ( 'QL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(453,4);
            string_literal570=(Token)match(input,165,FOLLOW_165_in_ql2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            dbg.location(453,9);
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(453, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "qlp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(456, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:4: ( 'QLP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(456,5);
            string_literal572=(Token)match(input,166,FOLLOW_166_in_qlp2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            dbg.location(456,11);
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp2709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(456, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qlp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(459, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:3: ( 'RB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(459,4);
            string_literal574=(Token)match(input,167,FOLLOW_167_in_rb2716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            dbg.location(459,9);
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb2718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(459, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(462, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:4: ( 'RBR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(462,5);
            string_literal576=(Token)match(input,168,FOLLOW_168_in_rbr2725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            dbg.location(462,11);
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr2727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(462, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(465, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:4: ( 'RBT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(465,5);
            string_literal578=(Token)match(input,169,FOLLOW_169_in_rbt2734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            dbg.location(465,11);
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt2736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(465, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbt"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(468, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:3: ( 'RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(468,4);
            string_literal580=(Token)match(input,170,FOLLOW_170_in_rn2743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            dbg.location(468,9);
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn2745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(468, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(471, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:3: ( 'RP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(471,4);
            string_literal582=(Token)match(input,171,FOLLOW_171_in_rp2752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            dbg.location(471,9);
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp2754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(471, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(474, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:5: ( 'SYM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(474,7);
            string_literal584=(Token)match(input,172,FOLLOW_172_in_sym2763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            dbg.location(474,13);
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym2765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(474, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "to");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:3: ( 'TO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(477,4);
            string_literal586=(Token)match(input,173,FOLLOW_173_in_to2772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            dbg.location(477,9);
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to2774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(477, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "to");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "uh");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(480, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:3: ( 'UH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(480,4);
            string_literal588=(Token)match(input,174,FOLLOW_174_in_uh2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            dbg.location(480,9);
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(480, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "uh");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(483, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:3: ( 'VB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(483,4);
            string_literal590=(Token)match(input,175,FOLLOW_175_in_vb2790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            dbg.location(483,9);
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb2792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(483, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:4: ( 'VBD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(486,5);
            string_literal592=(Token)match(input,176,FOLLOW_176_in_vbd2799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            dbg.location(486,11);
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd2801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(486, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(489, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:4: ( 'VBG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(489,5);
            string_literal594=(Token)match(input,177,FOLLOW_177_in_vbg2808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            dbg.location(489,11);
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg2810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(489, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(492, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:4: ( 'VBN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(492,5);
            string_literal596=(Token)match(input,178,FOLLOW_178_in_vbn2817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            dbg.location(492,11);
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn2819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(492, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(495, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:4: ( 'VBZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(495,5);
            string_literal598=(Token)match(input,179,FOLLOW_179_in_vbz2826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            dbg.location(495,11);
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz2828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(495, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wdt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(498, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:4: ( 'WDT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(498,5);
            string_literal600=(Token)match(input,180,FOLLOW_180_in_wdt2835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            dbg.location(498,11);
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt2837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(498, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wdt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(501, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:8: ( 'WP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(501,9);
            string_literal602=(Token)match(input,181,FOLLOW_181_in_wp_poss2844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            dbg.location(501,15);
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(501, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wpo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(505, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:4: ( 'WPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(505,5);
            string_literal604=(Token)match(input,182,FOLLOW_182_in_wpo2854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            dbg.location(505,11);
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo2856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(505, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wpo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(508, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:4: ( 'WPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(508,5);
            string_literal606=(Token)match(input,183,FOLLOW_183_in_wps2863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            dbg.location(508,11);
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps2865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(508, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(512, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:4: ( 'WQL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(512,5);
            string_literal608=(Token)match(input,184,FOLLOW_184_in_wql2873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            dbg.location(512,11);
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql2875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(512, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(515, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:4: ( 'WRB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(515,5);
            string_literal610=(Token)match(input,185,FOLLOW_185_in_wrb2882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            dbg.location(515,11);
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb2884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(515, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: ( sentence )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:14: sentence
        {
        dbg.location(35,14);
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker183);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: ( unmatchedPhrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:23: unmatchedPhrase
        {
        dbg.location(35,23);
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker185);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:58: adv
        {
        dbg.location(35,58);
        pushFollow(FOLLOW_adv_in_synpred7_ChemicalChunker198);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:13: nounphrase
        {
        dbg.location(37,13);
        pushFollow(FOLLOW_nounphrase_in_synpred8_ChemicalChunker210);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:24: verbphrase
        {
        dbg.location(37,24);
        pushFollow(FOLLOW_verbphrase_in_synpred9_ChemicalChunker212);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:35: prepphrase
        {
        dbg.location(37,35);
        pushFollow(FOLLOW_prepphrase_in_synpred10_ChemicalChunker214);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:5: noun
        {
        dbg.location(44,5);
        pushFollow(FOLLOW_noun_in_synpred11_ChemicalChunker249);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:15: adj
        {
        dbg.location(44,15);
        pushFollow(FOLLOW_adj_in_synpred13_ChemicalChunker253);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: ( oscarcd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:32: oscarcd
        {
        dbg.location(44,32);
        pushFollow(FOLLOW_oscarcd_in_synpred17_ChemicalChunker261);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:40: oscarcm
        {
        dbg.location(44,40);
        pushFollow(FOLLOW_oscarcm_in_synpred18_ChemicalChunker263);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: ( oscarrn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:48: oscarrn
        {
        dbg.location(44,48);
        pushFollow(FOLLOW_oscarrn_in_synpred19_ChemicalChunker265);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: ( oscaront )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:56: oscaront
        {
        dbg.location(44,56);
        pushFollow(FOLLOW_oscaront_in_synpred20_ChemicalChunker267);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: adj
        {
        dbg.location(49,28);
        pushFollow(FOLLOW_adj_in_synpred22_ChemicalChunker304);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:39: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:39: noun
        {
        dbg.location(49,39);
        pushFollow(FOLLOW_noun_in_synpred24_ChemicalChunker311);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred25_ChemicalChunker
    public final void synpred25_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( cc )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: cc
        {
        dbg.location(49,46);
        pushFollow(FOLLOW_cc_in_synpred25_ChemicalChunker315);
        cc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:62: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:62: adj
        {
        dbg.location(49,62);
        pushFollow(FOLLOW_adj_in_synpred28_ChemicalChunker325);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( cc )? ( comma )? ( cc )? ( adj )+ noun
        {
        dbg.location(49,46);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:46: ( cc )?
        int alt65=2;
        try { dbg.enterSubRule(65);
        try { dbg.enterDecision(65);

        int LA65_0 = input.LA(1);

        if ( (LA65_0==121) ) {
            int LA65_1 = input.LA(2);

            if ( (LA65_1==TOKEN) ) {
                int LA65_3 = input.LA(3);

                if ( (synpred25_ChemicalChunker()) ) {
                    alt65=1;
                }
            }
        }
        } finally {dbg.exitDecision(65);}

        switch (alt65) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(49,46);
                pushFollow(FOLLOW_cc_in_synpred29_ChemicalChunker315);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(65);}

        dbg.location(49,50);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:50: ( comma )?
        int alt66=2;
        try { dbg.enterSubRule(66);
        try { dbg.enterDecision(66);

        int LA66_0 = input.LA(1);

        if ( (LA66_0==98) ) {
            alt66=1;
        }
        } finally {dbg.exitDecision(66);}

        switch (alt66) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(49,50);
                pushFollow(FOLLOW_comma_in_synpred29_ChemicalChunker318);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(66);}

        dbg.location(49,57);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:57: ( cc )?
        int alt67=2;
        try { dbg.enterSubRule(67);
        try { dbg.enterDecision(67);

        int LA67_0 = input.LA(1);

        if ( (LA67_0==121) ) {
            alt67=1;
        }
        } finally {dbg.exitDecision(67);}

        switch (alt67) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(49,57);
                pushFollow(FOLLOW_cc_in_synpred29_ChemicalChunker321);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(67);}

        dbg.location(49,62);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:62: ( adj )+
        int cnt68=0;
        try { dbg.enterSubRule(68);

        loop68:
        do {
            int alt68=2;
            try { dbg.enterDecision(68);

            try {
                isCyclicDecision = true;
                alt68 = dfa68.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    dbg.location(49,62);
        	    pushFollow(FOLLOW_adj_in_synpred29_ChemicalChunker325);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt68 >= 1 ) break loop68;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(68, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt68++;
        } while (true);
        } finally {dbg.exitSubRule(68);}

        dbg.location(49,67);
        pushFollow(FOLLOW_noun_in_synpred29_ChemicalChunker328);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:78: ( prepphraseOf )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:78: prepphraseOf
        {
        dbg.location(49,78);
        pushFollow(FOLLOW_prepphraseOf_in_synpred30_ChemicalChunker336);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:92: ( prepphraseIN )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:92: prepphraseIN
        {
        dbg.location(49,92);
        pushFollow(FOLLOW_prepphraseIN_in_synpred31_ChemicalChunker339);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: ( to )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: to
        {
        dbg.location(54,24);
        pushFollow(FOLLOW_to_in_synpred32_ChemicalChunker372);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:28: ( inAll )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:28: inAll
        {
        dbg.location(54,28);
        pushFollow(FOLLOW_inAll_in_synpred33_ChemicalChunker375);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:55: ( verb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:55: verb
        {
        dbg.location(54,55);
        pushFollow(FOLLOW_verb_in_synpred37_ChemicalChunker388);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:61: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:61: adv
        {
        dbg.location(54,61);
        pushFollow(FOLLOW_adv_in_synpred38_ChemicalChunker391);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:66: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:66: adj
        {
        dbg.location(54,66);
        pushFollow(FOLLOW_adj_in_synpred39_ChemicalChunker394);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:45: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:45: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
        {
        dbg.location(54,45);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:45: ( adv )*
        try { dbg.enterSubRule(69);

        loop69:
        do {
            int alt69=2;
            try { dbg.enterDecision(69);

            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=167 && LA69_0<=169)) ) {
                alt69=1;
            }


            } finally {dbg.exitDecision(69);}

            switch (alt69) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(54,45);
        	    pushFollow(FOLLOW_adv_in_synpred40_ChemicalChunker382);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop69;
            }
        } while (true);
        } finally {dbg.exitSubRule(69);}

        dbg.location(54,50);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:50: ( adj )?
        int alt70=2;
        try { dbg.enterSubRule(70);
        try { dbg.enterDecision(70);

        int LA70_0 = input.LA(1);

        if ( ((LA70_0>=12 && LA70_0<=13)||(LA70_0>=138 && LA70_0<=141)) ) {
            alt70=1;
        }
        } finally {dbg.exitDecision(70);}

        switch (alt70) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(54,50);
                pushFollow(FOLLOW_adj_in_synpred40_ChemicalChunker385);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(70);}

        dbg.location(54,55);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:55: ( verb )+
        int cnt71=0;
        try { dbg.enterSubRule(71);

        loop71:
        do {
            int alt71=2;
            try { dbg.enterDecision(71);

            int LA71_0 = input.LA(1);

            if ( (LA71_0==54||(LA71_0>=56 && LA71_0<=57)||(LA71_0>=60 && LA71_0<=67)||LA71_0==69||(LA71_0>=71 && LA71_0<=74)||LA71_0==76||LA71_0==78||(LA71_0>=80 && LA71_0<=83)||LA71_0==85||(LA71_0>=87 && LA71_0<=89)||(LA71_0>=91 && LA71_0<=92)||(LA71_0>=94 && LA71_0<=96)||(LA71_0>=176 && LA71_0<=179)) ) {
                alt71=1;
            }


            } finally {dbg.exitDecision(71);}

            switch (alt71) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    dbg.location(54,55);
        	    pushFollow(FOLLOW_verb_in_synpred40_ChemicalChunker388);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt71 >= 1 ) break loop71;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(71, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt71++;
        } while (true);
        } finally {dbg.exitSubRule(71);}

        dbg.location(54,61);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:61: ( adv )*
        try { dbg.enterSubRule(72);

        loop72:
        do {
            int alt72=2;
            try { dbg.enterDecision(72);

            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=167 && LA72_0<=169)) ) {
                alt72=1;
            }


            } finally {dbg.exitDecision(72);}

            switch (alt72) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(54,61);
        	    pushFollow(FOLLOW_adv_in_synpred40_ChemicalChunker391);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop72;
            }
        } while (true);
        } finally {dbg.exitSubRule(72);}

        dbg.location(54,66);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:66: ( adj )?
        int alt73=2;
        try { dbg.enterSubRule(73);
        try { dbg.enterDecision(73);

        int LA73_0 = input.LA(1);

        if ( ((LA73_0>=12 && LA73_0<=13)||(LA73_0>=138 && LA73_0<=141)) ) {
            alt73=1;
        }
        } finally {dbg.exitDecision(73);}

        switch (alt73) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(54,66);
                pushFollow(FOLLOW_adj_in_synpred40_ChemicalChunker394);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(73);}


        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:74: ( ( cc )? ( comma )? prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:74: ( cc )? ( comma )? prepphrase
        {
        dbg.location(54,74);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:74: ( cc )?
        int alt74=2;
        try { dbg.enterSubRule(74);
        try { dbg.enterDecision(74);

        int LA74_0 = input.LA(1);

        if ( (LA74_0==121) ) {
            alt74=1;
        }
        } finally {dbg.exitDecision(74);}

        switch (alt74) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(54,74);
                pushFollow(FOLLOW_cc_in_synpred43_ChemicalChunker400);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(74);}

        dbg.location(54,78);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:78: ( comma )?
        int alt75=2;
        try { dbg.enterSubRule(75);
        try { dbg.enterDecision(75);

        int LA75_0 = input.LA(1);

        if ( (LA75_0==98) ) {
            alt75=1;
        }
        } finally {dbg.exitDecision(75);}

        switch (alt75) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(54,78);
                pushFollow(FOLLOW_comma_in_synpred43_ChemicalChunker403);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(75);}

        dbg.location(54,85);
        pushFollow(FOLLOW_prepphrase_in_synpred43_ChemicalChunker406);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred80_ChemicalChunker
    public final void synpred80_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:13: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:13: unnamedmolecule
        {
        dbg.location(58,13);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred80_ChemicalChunker506);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_ChemicalChunker

    // $ANTLR start synpred81_ChemicalChunker
    public final void synpred81_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:29: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:29: molecule
        {
        dbg.location(58,29);
        pushFollow(FOLLOW_molecule_in_synpred81_ChemicalChunker508);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_ChemicalChunker

    // $ANTLR start synpred83_ChemicalChunker
    public final void synpred83_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:46: ( nn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:46: nn
        {
        dbg.location(58,46);
        pushFollow(FOLLOW_nn_in_synpred83_ChemicalChunker512);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:79: ( apparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:79: apparatus
        {
        dbg.location(58,79);
        pushFollow(FOLLOW_apparatus_in_synpred89_ChemicalChunker524);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:107: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:107: amount
        {
        dbg.location(58,107);
        pushFollow(FOLLOW_amount_in_synpred92_ChemicalChunker530);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:127: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:127: measurements
        {
        dbg.location(58,127);
        pushFollow(FOLLOW_measurements_in_synpred94_ChemicalChunker534);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:183: ( nnpressure )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:183: nnpressure
        {
        dbg.location(58,183);
        pushFollow(FOLLOW_nnpressure_in_synpred100_ChemicalChunker546);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:311: ( number )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:311: number
        {
        dbg.location(58,311);
        pushFollow(FOLLOW_number_in_synpred114_ChemicalChunker574);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:318: ( mixture )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:318: mixture
        {
        dbg.location(58,318);
        pushFollow(FOLLOW_mixture_in_synpred115_ChemicalChunker576);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:16: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:16: measurements
        {
        dbg.location(59,16);
        pushFollow(FOLLOW_measurements_in_synpred116_ChemicalChunker588);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:37: ( oscarCompound )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:37: oscarCompound
        {
        dbg.location(59,37);
        pushFollow(FOLLOW_oscarCompound_in_synpred119_ChemicalChunker594);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:51: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:51: molecule
        {
        dbg.location(59,51);
        pushFollow(FOLLOW_molecule_in_synpred120_ChemicalChunker596);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:60: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:60: unnamedmolecule
        {
        dbg.location(59,60);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred121_ChemicalChunker598);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:85: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:85: cd
        {
        dbg.location(59,85);
        pushFollow(FOLLOW_cd_in_synpred124_ChemicalChunker604);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:88: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:88: noun
        {
        dbg.location(59,88);
        pushFollow(FOLLOW_noun_in_synpred125_ChemicalChunker606);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:98: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:98: cd
        {
        dbg.location(59,98);
        pushFollow(FOLLOW_cd_in_synpred127_ChemicalChunker610);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:107: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:107: adj
        {
        dbg.location(59,107);
        pushFollow(FOLLOW_adj_in_synpred129_ChemicalChunker614);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred137_ChemicalChunker
    public final void synpred137_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:5: ( prepphraseOther )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:5: prepphraseOther
        {
        dbg.location(66,5);
        pushFollow(FOLLOW_prepphraseOther_in_synpred137_ChemicalChunker659);
        prepphraseOther();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_ChemicalChunker

    // $ANTLR start synpred138_ChemicalChunker
    public final void synpred138_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:21: ( prepphraseTemp )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:21: prepphraseTemp
        {
        dbg.location(66,21);
        pushFollow(FOLLOW_prepphraseTemp_in_synpred138_ChemicalChunker661);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:4: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:4: adv
        {
        dbg.location(74,4);
        pushFollow(FOLLOW_adv_in_synpred142_ChemicalChunker741);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:8: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:8: adj
        {
        dbg.location(74,8);
        pushFollow(FOLLOW_adj_in_synpred143_ChemicalChunker743);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:19: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:19: adv
        {
        dbg.location(80,19);
        pushFollow(FOLLOW_adv_in_synpred165_ChemicalChunker869);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:23: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:23: adj
        {
        dbg.location(80,23);
        pushFollow(FOLLOW_adj_in_synpred166_ChemicalChunker871);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:18: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:18: adj
        {
        dbg.location(89,18);
        pushFollow(FOLLOW_adj_in_synpred172_ChemicalChunker1032);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:22: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:22: jj
        {
        dbg.location(89,22);
        pushFollow(FOLLOW_jj_in_synpred173_ChemicalChunker1034);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:41: ( nnapparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:41: nnapparatus
        {
        dbg.location(89,41);
        pushFollow(FOLLOW_nnapparatus_in_synpred176_ChemicalChunker1042);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:19: ( oscarCompound1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:19: oscarCompound1
        {
        dbg.location(94,19);
        pushFollow(FOLLOW_oscarCompound1_in_synpred180_ChemicalChunker1089);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:34: ( oscarCompound2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:34: oscarCompound2
        {
        dbg.location(94,34);
        pushFollow(FOLLOW_oscarCompound2_in_synpred181_ChemicalChunker1091);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:49: ( oscarCompound3 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:49: oscarCompound3
        {
        dbg.location(94,49);
        pushFollow(FOLLOW_oscarCompound3_in_synpred182_ChemicalChunker1093);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:73: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:73: rrb
        {
        dbg.location(94,73);
        pushFollow(FOLLOW_rrb_in_synpred183_ChemicalChunker1098);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:26: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:26: oscarcm
        {
        dbg.location(97,26);
        pushFollow(FOLLOW_oscarcm_in_synpred184_ChemicalChunker1134);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:18: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:18: amount
        {
        dbg.location(102,18);
        pushFollow(FOLLOW_amount_in_synpred186_ChemicalChunker1198);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:11: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:11: amount
        {
        dbg.location(110,11);
        pushFollow(FOLLOW_amount_in_synpred190_ChemicalChunker1273);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: jj
        {
        dbg.location(112,30);
        pushFollow(FOLLOW_jj_in_synpred192_ChemicalChunker1291);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( ( jj )? noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( jj )? noun
        {
        dbg.location(112,30);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: ( jj )?
        int alt76=2;
        try { dbg.enterSubRule(76);
        try { dbg.enterDecision(76);

        int LA76_0 = input.LA(1);

        if ( (LA76_0==138) ) {
            int LA76_1 = input.LA(2);

            if ( (LA76_1==TOKEN) ) {
                int LA76_3 = input.LA(3);

                if ( (synpred192_ChemicalChunker()) ) {
                    alt76=1;
                }
            }
        }
        } finally {dbg.exitDecision(76);}

        switch (alt76) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                dbg.location(112,30);
                pushFollow(FOLLOW_jj_in_synpred193_ChemicalChunker1291);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(76);}

        dbg.location(112,34);
        pushFollow(FOLLOW_noun_in_synpred193_ChemicalChunker1294);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:3: ( unnamedmoleculeamount1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:3: unnamedmoleculeamount1
        {
        dbg.location(115,3);
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred194_ChemicalChunker1305);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:9: ( lrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:9: lrb
        {
        dbg.location(126,9);
        pushFollow(FOLLOW_lrb_in_synpred201_ChemicalChunker1430);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:13: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:13: rrb
        {
        dbg.location(126,13);
        pushFollow(FOLLOW_rrb_in_synpred202_ChemicalChunker1432);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:17: ( lsqb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:17: lsqb
        {
        dbg.location(126,17);
        pushFollow(FOLLOW_lsqb_in_synpred203_ChemicalChunker1434);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred204_ChemicalChunker
    public final void synpred204_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:22: ( rsqb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:22: rsqb
        {
        dbg.location(126,22);
        pushFollow(FOLLOW_rsqb_in_synpred204_ChemicalChunker1436);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred137_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred83_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred204_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred138_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred81_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred80_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA68 dfa68 = new DFA68(this);
    static final String DFA2_eotS =
        "\151\uffff";
    static final String DFA2_eofS =
        "\1\1\150\uffff";
    static final String DFA2_minS =
        "\1\13\1\uffff\145\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b7\1\uffff\145\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\145\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\57\1\26\1\32\1\3\1\65\1\44\1\2\1\121\1\56\1\135\1\61"+
        "\1\35\1\137\1\116\1\33\1\122\1\77\1\142\1\5\1\105\1\47\1\144\1\112"+
        "\1\101\1\76\1\25\1\111\1\127\1\17\1\22\1\0\1\45\1\30\1\37\1\104"+
        "\1\51\1\66\1\134\1\114\1\72\1\55\1\64\1\15\1\50\1\136\1\75\1\62"+
        "\1\106\1\24\1\34\1\60\1\23\1\140\1\73\1\132\1\130\1\46\1\43\1\63"+
        "\1\110\1\100\1\16\1\36\1\11\1\4\1\113\1\143\1\107\1\21\1\13\1\42"+
        "\1\41\1\103\1\71\1\67\1\54\1\124\1\117\1\123\1\126\1\70\1\53\1\74"+
        "\1\31\1\12\1\20\1\14\1\115\1\131\1\52\1\102\1\27\1\40\1\1\1\7\1"+
        "\141\1\125\1\120\1\133\1\10\1\6\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\16\1\12\1\13\1\25\1\56\2\uffff\1\62\1\63\1\61\1\67\1\70\1"+
            "\77\1\100\1\64\1\76\1\71\1\73\1\65\1\66\1\75\1\74\1\72\1\20"+
            "\1\26\2\uffff\1\31\1\32\1\uffff\1\34\1\35\1\36\1\37\1\40\1\41"+
            "\1\27\1\42\1\43\1\44\1\45\1\46\1\17\1\105\1\uffff\1\106\1\107"+
            "\1\24\1\55\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1"+
            "\30\1\120\1\47\1\121\1\122\1\123\1\124\1\uffff\1\125\1\uffff"+
            "\1\126\1\uffff\1\127\1\130\1\131\1\132\1\uffff\1\133\1\uffff"+
            "\1\134\1\135\1\136\1\uffff\1\137\1\140\1\54\1\141\1\142\1\143"+
            "\1\uffff\1\1\3\uffff\1\1\1\uffff\1\145\1\146\1\33\1\144\15\uffff"+
            "\1\1\1\15\4\uffff\1\5\11\uffff\1\60\1\6\1\7\1\10\1\11\2\uffff"+
            "\1\21\1\uffff\1\22\2\uffff\1\23\13\uffff\1\14\5\uffff\1\2\1"+
            "\3\1\4\3\uffff\1\57\2\uffff\1\102\1\101\1\104\1\103\1\50\1\51"+
            "\1\52\1\53",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 35:13: ( sentence | unmatchedPhrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 103;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 104;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\14\uffff";
    static final String DFA3_eofS =
        "\1\1\13\uffff";
    static final String DFA3_minS =
        "\1\13\1\uffff\3\12\3\uffff\3\0\1\uffff";
    static final String DFA3_maxS =
        "\1\u00b7\1\uffff\3\12\3\uffff\3\0\1\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\5\3\uffff\1\1\1\2\1\3\3\uffff\1\4";
    static final String DFA3_specialS =
        "\10\uffff\1\0\1\1\1\2\1\uffff}>";
    static final String[] DFA3_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\5\3\uffff\1\7\1\uffff\4\1\15\uffff\1\6\1\1\4"+
            "\uffff\1\1\11\uffff\5\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\1\2\1\3\1\4\3\uffff\1\1\2\uffff\10\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 35:43: ( comma | cc | stop | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\147\uffff";
    static final String DFA4_eofS =
        "\1\1\146\uffff";
    static final String DFA4_minS =
        "\1\13\1\uffff\142\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00b7\1\uffff\142\0\3\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\4\142\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\2\uffff\1\103\1\15\1\101\1\135\1\73\1\42\1\124\1\45\1\35\1\2\1"+
        "\127\1\106\1\133\1\126\1\20\1\17\1\60\1\4\1\61\1\24\1\63\1\110\1"+
        "\70\1\107\1\72\1\134\1\136\1\130\1\26\1\1\1\16\1\62\1\55\1\40\1"+
        "\51\1\31\1\3\1\54\1\50\1\113\1\117\1\100\1\37\1\56\1\30\1\77\1\0"+
        "\1\102\1\46\1\74\1\32\1\44\1\71\1\27\1\53\1\121\1\41\1\11\1\7\1"+
        "\125\1\57\1\114\1\137\1\13\1\33\1\52\1\10\1\122\1\120\1\75\1\43"+
        "\1\34\1\21\1\140\1\132\1\123\1\115\1\105\1\47\1\5\1\23\1\36\1\131"+
        "\1\76\1\116\1\65\1\12\1\6\1\25\1\141\1\66\1\111\1\22\1\14\1\64\1"+
        "\112\1\67\1\104\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\16\1\12\1\13\1\25\1\56\2\uffff\1\62\1\63\1\61\1\67\1\70\1"+
            "\77\1\100\1\64\1\76\1\71\1\73\1\65\1\66\1\75\1\74\1\72\1\20"+
            "\1\26\2\uffff\1\31\1\32\1\uffff\1\34\1\35\1\36\1\37\1\40\1\41"+
            "\1\27\1\42\1\43\1\44\1\45\1\46\1\17\1\105\1\uffff\1\106\1\107"+
            "\1\24\1\55\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1"+
            "\30\1\120\1\47\1\121\1\122\1\123\1\124\1\uffff\1\125\1\uffff"+
            "\1\126\1\uffff\1\127\1\130\1\131\1\132\1\uffff\1\133\1\uffff"+
            "\1\134\1\135\1\136\1\uffff\1\137\1\140\1\54\1\141\1\142\1\143"+
            "\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\1\33\1\1\15\uffff\1\1\1"+
            "\15\4\uffff\1\5\11\uffff\1\60\1\6\1\7\1\10\1\11\2\uffff\1\21"+
            "\1\uffff\1\22\2\uffff\1\23\13\uffff\1\14\5\uffff\1\2\1\3\1\4"+
            "\3\uffff\1\57\2\uffff\1\102\1\101\1\104\1\103\1\50\1\51\1\52"+
            "\1\53",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 37:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 101;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\153\uffff";
    static final String DFA5_eofS =
        "\153\uffff";
    static final String DFA5_minS =
        "\1\13\2\uffff\2\0\7\uffff\6\0\4\uffff\1\0\22\uffff\1\0\101\uffff";
    static final String DFA5_maxS =
        "\1\u00b7\2\uffff\2\0\7\uffff\6\0\4\uffff\1\0\22\uffff\1\0\101\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\50\uffff\1\2\42\uffff\1\4\2\uffff\1\5\21\uffff\1\6"+
        "\1\13\2\uffff\1\7\1\10\1\3\1\11\1\12";
    static final String DFA5_specialS =
        "\3\uffff\1\0\1\1\7\uffff\1\2\1\3\1\4\1\5\1\6\1\7\4\uffff\1\10\22"+
        "\uffff\1\11\101\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\3\1\20\1\21\1\1\1\51\2\uffff\20\120\2\1\2\uffff\2\1\1\uffff"+
            "\14\1\1\4\1\52\1\uffff\2\52\2\1\10\52\1\1\1\52\1\1\4\52\1\uffff"+
            "\1\52\1\uffff\1\52\1\uffff\4\52\1\uffff\1\52\1\uffff\3\52\1"+
            "\uffff\2\52\1\1\3\52\7\uffff\2\143\1\26\1\143\16\uffff\1\1\4"+
            "\uffff\1\142\11\uffff\1\120\1\14\1\15\1\16\1\17\2\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\3\115\3\uffff"+
            "\1\120\2\uffff\4\52\4\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "44:4: ( noun | verb | adj | adv | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 102;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 104;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 105;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 99;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 106;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\20\uffff";
    static final String DFA7_eofS =
        "\20\uffff";
    static final String DFA7_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA7_maxS =
        "\1\u00b7\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA7_specialS =
        "\11\uffff\1\0\1\3\1\4\1\1\1\2\1\5\1\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\3\10\12\uffff\4\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:27: ( adj | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\54\uffff";
    static final String DFA8_eofS =
        "\1\1\53\uffff";
    static final String DFA8_minS =
        "\1\13\1\uffff\51\0\1\uffff";
    static final String DFA8_maxS =
        "\1\u00b7\1\uffff\51\0\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA8_specialS =
        "\2\uffff\1\17\1\20\1\12\1\15\1\45\1\30\1\50\1\43\1\36\1\34\1\23"+
        "\1\35\1\3\1\25\1\16\1\27\1\24\1\37\1\42\1\13\1\40\1\2\1\41\1\14"+
        "\1\22\1\0\1\21\1\46\1\32\1\5\1\44\1\11\1\1\1\10\1\6\1\33\1\4\1\26"+
        "\1\31\1\47\1\7\1\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\12\1\6\1\7\1\21\1\52\2\uffff\20\1\1\14\1\22\2\uffff\1\25"+
            "\1\26\1\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\23\1\36\1\37\1"+
            "\40\1\41\1\42\1\13\1\1\1\uffff\2\1\1\20\1\51\10\1\1\24\1\1\1"+
            "\43\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\50\3\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\1\27\1\1\15\uffff\1\1\1\11\4\uffff\1\1\11\uffff\1\1\1\2\1"+
            "\3\1\4\1\5\2\uffff\1\15\1\uffff\1\16\2\uffff\1\17\13\uffff\1"+
            "\10\5\uffff\3\1\3\uffff\1\1\2\uffff\4\1\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 49:39: ( noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_27 = input.LA(1);

                         
                        int index8_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_34 = input.LA(1);

                         
                        int index8_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_23 = input.LA(1);

                         
                        int index8_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_23);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_38 = input.LA(1);

                         
                        int index8_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_38);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_31 = input.LA(1);

                         
                        int index8_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_31);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_36 = input.LA(1);

                         
                        int index8_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_36);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_42 = input.LA(1);

                         
                        int index8_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_42);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_35 = input.LA(1);

                         
                        int index8_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_35);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_33 = input.LA(1);

                         
                        int index8_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_33);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_21 = input.LA(1);

                         
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_25 = input.LA(1);

                         
                        int index8_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_25);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_28 = input.LA(1);

                         
                        int index8_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_28);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_26 = input.LA(1);

                         
                        int index8_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA8_39 = input.LA(1);

                         
                        int index8_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_39);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA8_40 = input.LA(1);

                         
                        int index8_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_40);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA8_30 = input.LA(1);

                         
                        int index8_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_30);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA8_37 = input.LA(1);

                         
                        int index8_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_37);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA8_22 = input.LA(1);

                         
                        int index8_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_22);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA8_24 = input.LA(1);

                         
                        int index8_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_24);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA8_32 = input.LA(1);

                         
                        int index8_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_32);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA8_29 = input.LA(1);

                         
                        int index8_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_29);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA8_41 = input.LA(1);

                         
                        int index8_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\153\uffff";
    static final String DFA13_eofS =
        "\1\1\152\uffff";
    static final String DFA13_minS =
        "\1\13\2\uffff\2\0\6\uffff\6\0\132\uffff";
    static final String DFA13_maxS =
        "\1\u00b7\2\uffff\2\0\6\uffff\6\0\132\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\150\uffff\1\1";
    static final String DFA13_specialS =
        "\3\uffff\1\0\1\1\6\uffff\1\2\1\3\1\4\1\5\1\6\1\7\132\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\1\1\17\1\20\2\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff"+
            "\23\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\6\1\1\uffff\1\3\3\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\1\4\1\1\4\uffff\1\1\11\uffff\1\1\1\13\1\14\1\15\1\16\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\3\1\3\uffff"+
            "\1\1\2\uffff\10\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 49:45: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_14 = input.LA(1);

                         
                        int index13_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_15 = input.LA(1);

                         
                        int index13_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\17\uffff";
    static final String DFA12_eofS =
        "\17\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA12_maxS =
        "\1\u00b7\1\uffff\6\12\6\0\1\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA12_specialS =
        "\10\uffff\1\2\1\5\1\1\1\0\1\4\1\3\1\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\22\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 49:62: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\57\uffff";
    static final String DFA23_eofS =
        "\1\1\56\uffff";
    static final String DFA23_minS =
        "\1\13\1\uffff\54\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u00b7\1\uffff\54\0\1\uffff";
    static final String DFA23_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA23_specialS =
        "\2\uffff\1\1\1\26\1\0\1\25\1\11\1\34\1\31\1\33\1\4\1\30\1\3\1\36"+
        "\1\5\1\23\1\13\1\44\1\2\1\27\1\51\1\24\1\52\1\12\1\50\1\22\1\32"+
        "\1\42\1\16\1\53\1\21\1\20\1\47\1\46\1\17\1\45\1\15\1\14\1\40\1\6"+
        "\1\37\1\41\1\10\1\35\1\7\1\43\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\1\1\11\1\12\2\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\17"+
            "\1\uffff\1\20\1\21\2\1\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1"+
            "\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\uffff\1\37\1\uffff\1"+
            "\40\1\uffff\1\41\1\42\1\43\1\44\1\uffff\1\45\1\uffff\1\46\1"+
            "\47\1\50\1\uffff\1\51\1\52\1\1\1\53\1\54\1\55\1\uffff\1\1\3"+
            "\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\11\uffff\1\1"+
            "\1\5\1\6\1\7\1\10\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\1\2\1\3\1\4\3\uffff\1\1\2\uffff\1\14\1\13\1\16"+
            "\1\15\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "()+ loopback of 54:44: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_18 = input.LA(1);

                         
                        int index23_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_14 = input.LA(1);

                         
                        int index23_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA23_39 = input.LA(1);

                         
                        int index23_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA23_44 = input.LA(1);

                         
                        int index23_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA23_42 = input.LA(1);

                         
                        int index23_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_42);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA23_6 = input.LA(1);

                         
                        int index23_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA23_23 = input.LA(1);

                         
                        int index23_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA23_16 = input.LA(1);

                         
                        int index23_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA23_37 = input.LA(1);

                         
                        int index23_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_37);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA23_36 = input.LA(1);

                         
                        int index23_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_36);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA23_28 = input.LA(1);

                         
                        int index23_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_28);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA23_34 = input.LA(1);

                         
                        int index23_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_34);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA23_31 = input.LA(1);

                         
                        int index23_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA23_30 = input.LA(1);

                         
                        int index23_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_30);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA23_25 = input.LA(1);

                         
                        int index23_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA23_15 = input.LA(1);

                         
                        int index23_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_15);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA23_21 = input.LA(1);

                         
                        int index23_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA23_19 = input.LA(1);

                         
                        int index23_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_19);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA23_26 = input.LA(1);

                         
                        int index23_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA23_7 = input.LA(1);

                         
                        int index23_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_7);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA23_43 = input.LA(1);

                         
                        int index23_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_43);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA23_40 = input.LA(1);

                         
                        int index23_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_40);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA23_38 = input.LA(1);

                         
                        int index23_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA23_41 = input.LA(1);

                         
                        int index23_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_41);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA23_27 = input.LA(1);

                         
                        int index23_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_27);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA23_45 = input.LA(1);

                         
                        int index23_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_45);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA23_17 = input.LA(1);

                         
                        int index23_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_17);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA23_35 = input.LA(1);

                         
                        int index23_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_35);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA23_33 = input.LA(1);

                         
                        int index23_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_33);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA23_32 = input.LA(1);

                         
                        int index23_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_32);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA23_24 = input.LA(1);

                         
                        int index23_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_24);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA23_20 = input.LA(1);

                         
                        int index23_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_20);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA23_22 = input.LA(1);

                         
                        int index23_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_22);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA23_29 = input.LA(1);

                         
                        int index23_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\46\uffff";
    static final String DFA20_eofS =
        "\1\1\45\uffff";
    static final String DFA20_minS =
        "\1\13\1\uffff\43\0\1\uffff";
    static final String DFA20_maxS =
        "\1\u00b7\1\uffff\43\0\1\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA20_specialS =
        "\2\uffff\1\33\1\11\1\22\1\16\1\6\1\2\1\34\1\17\1\41\1\0\1\15\1\36"+
        "\1\21\1\42\1\20\1\37\1\32\1\12\1\1\1\23\1\31\1\27\1\24\1\4\1\25"+
        "\1\5\1\13\1\14\1\30\1\3\1\10\1\35\1\40\1\26\1\7\1\uffff}>";
    static final String[] DFA20_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\6\1\uffff\1\7\1"+
            "\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\1"+
            "\1\22\1\23\1\24\1\25\1\uffff\1\26\1\uffff\1\27\1\uffff\1\30"+
            "\1\31\1\32\1\33\1\uffff\1\34\1\uffff\1\35\1\36\1\37\1\uffff"+
            "\1\40\1\41\1\1\1\42\1\43\1\44\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\4\1\15\uffff\2\1\4\uffff\1\1\11\uffff\5\1\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\3\1\3\uffff\1\1\2\uffff"+
            "\1\3\1\2\1\5\1\4\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()+ loopback of 54:55: ( verb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_20 = input.LA(1);

                         
                        int index20_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_31 = input.LA(1);

                         
                        int index20_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_25 = input.LA(1);

                         
                        int index20_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_27 = input.LA(1);

                         
                        int index20_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_36 = input.LA(1);

                         
                        int index20_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_36);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_32 = input.LA(1);

                         
                        int index20_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_32);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_19 = input.LA(1);

                         
                        int index20_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_28 = input.LA(1);

                         
                        int index20_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_29 = input.LA(1);

                         
                        int index20_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_29);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA20_16 = input.LA(1);

                         
                        int index20_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA20_21 = input.LA(1);

                         
                        int index20_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA20_24 = input.LA(1);

                         
                        int index20_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA20_26 = input.LA(1);

                         
                        int index20_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_26);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA20_35 = input.LA(1);

                         
                        int index20_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_35);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA20_23 = input.LA(1);

                         
                        int index20_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA20_30 = input.LA(1);

                         
                        int index20_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA20_22 = input.LA(1);

                         
                        int index20_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_22);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA20_18 = input.LA(1);

                         
                        int index20_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_18);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA20_33 = input.LA(1);

                         
                        int index20_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_33);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA20_17 = input.LA(1);

                         
                        int index20_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_17);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA20_34 = input.LA(1);

                         
                        int index20_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA20_15 = input.LA(1);

                         
                        int index20_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\153\uffff";
    static final String DFA22_eofS =
        "\1\7\152\uffff";
    static final String DFA22_minS =
        "\1\13\6\0\144\uffff";
    static final String DFA22_maxS =
        "\1\u00b7\6\0\144\uffff";
    static final String DFA22_acceptS =
        "\7\uffff\1\2\142\uffff\1\1";
    static final String DFA22_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\144\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\22\7\2\uffff\2\7\1\uffff\16\7\1\uffff"+
            "\23\7\1\uffff\1\7\1\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff"+
            "\3\7\1\uffff\6\7\1\uffff\1\7\3\uffff\1\7\1\uffff\4\7\15\uffff"+
            "\2\7\4\uffff\1\7\11\uffff\1\7\1\1\1\2\1\3\1\4\2\uffff\1\7\1"+
            "\uffff\1\7\2\uffff\1\7\13\uffff\1\7\5\uffff\3\7\3\uffff\1\7"+
            "\2\uffff\10\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "54:66: ( adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_4 = input.LA(1);

                         
                        int index22_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_5 = input.LA(1);

                         
                        int index22_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_6 = input.LA(1);

                         
                        int index22_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\153\uffff";
    static final String DFA26_eofS =
        "\1\3\152\uffff";
    static final String DFA26_minS =
        "\1\13\2\0\1\uffff\3\0\1\uffff\7\0\1\uffff\1\0\41\uffff\22\0\47\uffff";
    static final String DFA26_maxS =
        "\1\u00b7\2\0\1\uffff\3\0\1\uffff\7\0\1\uffff\1\0\41\uffff\22\0\47"+
        "\uffff";
    static final String DFA26_acceptS =
        "\3\uffff\1\2\146\uffff\1\1";
    static final String DFA26_specialS =
        "\1\uffff\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\uffff\1\14\41\uffff\1\15\1\16\1\17\1\20\1\21\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\47"+
        "\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\3\1\15\1\16\2\3\2\uffff\1\65\1\66\1\64\1\72\1\73\1\102\1"+
            "\103\1\67\1\101\1\74\1\76\1\70\1\71\1\100\1\77\1\75\2\3\2\uffff"+
            "\2\3\1\uffff\16\3\1\uffff\23\3\1\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\4\3\1\uffff\1\3\1\uffff\3\3\1\uffff\6\3\1\uffff\1\1\3\uffff"+
            "\1\3\1\uffff\4\3\15\uffff\1\2\1\20\4\uffff\1\10\11\uffff\1\63"+
            "\1\11\1\12\1\13\1\14\2\uffff\1\3\1\uffff\1\3\2\uffff\1\3\13"+
            "\uffff\1\3\5\uffff\1\4\1\5\1\6\3\uffff\1\62\2\uffff\10\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 54:73: ( ( cc )? ( comma )? prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_50 = input.LA(1);

                         
                        int index26_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_50);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_51 = input.LA(1);

                         
                        int index26_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_51);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_52 = input.LA(1);

                         
                        int index26_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_53 = input.LA(1);

                         
                        int index26_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_54 = input.LA(1);

                         
                        int index26_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_55 = input.LA(1);

                         
                        int index26_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_56 = input.LA(1);

                         
                        int index26_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_56);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_57 = input.LA(1);

                         
                        int index26_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_58 = input.LA(1);

                         
                        int index26_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_58);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_59 = input.LA(1);

                         
                        int index26_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_59);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_60 = input.LA(1);

                         
                        int index26_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_61 = input.LA(1);

                         
                        int index26_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_61);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_62 = input.LA(1);

                         
                        int index26_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_62);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_63 = input.LA(1);

                         
                        int index26_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA26_64 = input.LA(1);

                         
                        int index26_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_64);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA26_65 = input.LA(1);

                         
                        int index26_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_65);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA26_66 = input.LA(1);

                         
                        int index26_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_66);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA26_67 = input.LA(1);

                         
                        int index26_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\63\uffff";
    static final String DFA29_eofS =
        "\63\uffff";
    static final String DFA29_minS =
        "\1\13\1\uffff\3\0\1\uffff\1\0\13\uffff\1\0\3\uffff\1\0\34\uffff";
    static final String DFA29_maxS =
        "\1\u00b7\1\uffff\3\0\1\uffff\1\0\13\uffff\1\0\3\uffff\1\0\34\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\1\3\uffff\1\4\1\uffff\1\6\1\7\1\10\1\11\1\12\1\13\7\uffff"+
        "\1\14\1\15\1\uffff\1\17\1\21\1\22\1\23\1\24\1\25\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\2\1\3\1\20"+
        "\1\44\1\46\1\5\1\26\1\16\1\45";
    static final String DFA29_specialS =
        "\2\uffff\1\0\1\1\1\2\1\uffff\1\3\13\uffff\1\4\3\uffff\1\5\34\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\3\2\14\1\12\1\51\22\uffff\1\5\1\13\2\uffff\1\24\1\25\1\uffff"+
            "\1\27\1\30\1\31\1\32\1\33\1\34\1\22\1\35\1\36\1\37\1\40\1\41"+
            "\1\4\4\uffff\1\11\1\50\10\uffff\1\14\1\uffff\1\42\26\uffff\1"+
            "\47\14\uffff\1\26\17\uffff\1\2\17\uffff\4\14\2\uffff\1\6\1\uffff"+
            "\1\7\2\uffff\1\10\13\uffff\1\1\22\uffff\1\43\1\44\1\45\1\46",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "58:1: noun : ( prp | unnamedmolecule | molecule | nnstate | nn | nns | nnp | nnadd | oscarcpr | nntime | apparatus | nnatmosphere | nneq | amount | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | mixture | oscarCompound );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_ChemicalChunker()) ) {s = 42;}

                        else if ( (synpred81_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 44;}

                        else if ( (synpred114_ChemicalChunker()) ) {s = 45;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_ChemicalChunker()) ) {s = 42;}

                        else if ( (synpred114_ChemicalChunker()) ) {s = 45;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 48;}

                         
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_22 = input.LA(1);

                         
                        int index29_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred115_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index29_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\70\uffff";
    static final String DFA30_eofS =
        "\70\uffff";
    static final String DFA30_minS =
        "\1\13\1\uffff\1\0\2\uffff\2\0\12\uffff\6\0\41\uffff";
    static final String DFA30_maxS =
        "\1\u00b7\1\uffff\1\0\2\uffff\2\0\12\uffff\6\0\41\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\17\1\uffff\1\2\1\3\2\uffff\1\7\1\10\1\12\45\uffff\1\13"+
        "\1\15\1\1\1\5\1\6\1\11\1\14\1\4\1\16";
    static final String DFA30_specialS =
        "\2\uffff\1\0\2\uffff\1\1\1\2\12\uffff\1\3\1\4\1\5\1\6\1\7\1\10\41"+
        "\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\6\1\25\1\26\2\11\13\uffff\1\57\6\uffff\2\11\2\uffff\2\11"+
            "\1\uffff\14\11\1\5\4\uffff\2\11\10\uffff\1\11\1\uffff\1\11\26"+
            "\uffff\1\11\4\uffff\1\60\2\uffff\1\7\1\4\3\uffff\1\11\1\1\16"+
            "\uffff\1\2\17\uffff\1\21\1\22\1\23\1\24\1\3\1\uffff\1\11\1\uffff"+
            "\1\11\2\uffff\1\11\13\uffff\1\11\12\uffff\1\10\7\uffff\4\11",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()+ loopback of 59:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_2 = input.LA(1);

                         
                        int index30_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred120_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred121_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred124_ChemicalChunker()) ) {s = 52;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 53;}

                         
                        input.seek(index30_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_5 = input.LA(1);

                         
                        int index30_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (synpred120_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index30_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_6 = input.LA(1);

                         
                        int index30_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index30_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_17 = input.LA(1);

                         
                        int index30_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_18 = input.LA(1);

                         
                        int index30_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_19 = input.LA(1);

                         
                        int index30_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_20 = input.LA(1);

                         
                        int index30_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA30_21 = input.LA(1);

                         
                        int index30_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA30_22 = input.LA(1);

                         
                        int index30_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 55;}

                         
                        input.seek(index30_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\152\uffff";
    static final String DFA33_eofS =
        "\145\uffff\1\117\4\uffff";
    static final String DFA33_minS =
        "\1\14\35\12\11\14\22\13\1\14\1\43\24\12\3\uffff\11\172\13\13\2\12"+
        "\2\0";
    static final String DFA33_maxS =
        "\1\u00ad\35\12\11\u00ad\22\u00b7\1\u00a9\1\52\24\12\3\uffff\11\172"+
        "\13\u00b7\2\12\2\0";
    static final String DFA33_acceptS =
        "\117\uffff\1\1\1\3\1\2\30\uffff";
    static final String DFA33_specialS =
        "\150\uffff\1\1\1\0}>";
    static final String[] DFA33_transitionS = {
            "\1\10\1\11\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16\1"+
            "\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\4\1\5\1\6\1\7\31\uffff\1\1\1\2\1\3\3\uffff"+
            "\1\33",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\4\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\31\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\117\1\114\1\115\2\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\2\uffff\1\117\1\uffff\1\117\2"+
            "\uffff\1\117\13\uffff\1\117\5\uffff\1\105\1\106\1\107\3\uffff"+
            "\1\117\6\uffff\4\117",
            "\1\102\1\103\154\uffff\1\35\17\uffff\1\76\1\77\1\100\1\101"+
            "\31\uffff\1\73\1\74\1\75",
            "\1\120\6\uffff\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\131",
            "\1\132",
            "\1\133",
            "\1\134",
            "\1\135",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145",
            "",
            "",
            "",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\117\1\114\1\115\2\117\22\uffff\2\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\17\uffff\1\110\1\111\1"+
            "\112\1\113\2\uffff\1\117\1\uffff\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\5\uffff\1\105\1\106\1\107\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\4\117\2\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\12\uffff\4\117",
            "\5\117\2\uffff\21\117\1\146\6\117\1\147\14\117\1\uffff\23\117"+
            "\1\uffff\1\117\1\uffff\1\117\1\uffff\4\117\1\uffff\1\117\1\uffff"+
            "\3\117\1\uffff\6\117\1\uffff\1\117\3\uffff\6\117\15\uffff\2"+
            "\117\4\uffff\1\117\11\uffff\5\117\2\uffff\1\117\1\uffff\1\117"+
            "\2\uffff\1\117\13\uffff\1\117\5\uffff\3\117\3\uffff\1\117\2"+
            "\uffff\10\117",
            "\1\150",
            "\1\151",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "65:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_105 = input.LA(1);

                         
                        int index33_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred138_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index33_105);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_104 = input.LA(1);

                         
                        int index33_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_ChemicalChunker()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index33_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\26\uffff";
    static final String DFA36_eofS =
        "\26\uffff";
    static final String DFA36_minS =
        "\1\14\11\12\1\uffff\11\0\2\uffff";
    static final String DFA36_maxS =
        "\1\u00ad\11\12\1\uffff\11\0\2\uffff";
    static final String DFA36_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA36_specialS =
        "\13\uffff\1\7\1\0\1\10\1\4\1\6\1\1\1\5\1\3\1\2\2\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\10\1\11\4\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\31\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "74:3: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\26\uffff";
    static final String DFA41_eofS =
        "\26\uffff";
    static final String DFA41_minS =
        "\1\14\11\12\1\uffff\11\0\2\uffff";
    static final String DFA41_maxS =
        "\1\u00ad\11\12\1\uffff\11\0\2\uffff";
    static final String DFA41_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA41_specialS =
        "\13\uffff\1\2\1\7\1\4\1\0\1\10\1\5\1\3\1\1\1\6\2\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\10\1\11\4\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\31\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "80:18: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_14 = input.LA(1);

                         
                        int index41_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_18 = input.LA(1);

                         
                        int index41_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_11 = input.LA(1);

                         
                        int index41_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_17 = input.LA(1);

                         
                        int index41_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_13 = input.LA(1);

                         
                        int index41_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_16 = input.LA(1);

                         
                        int index41_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_16);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_19 = input.LA(1);

                         
                        int index41_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_12 = input.LA(1);

                         
                        int index41_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_15 = input.LA(1);

                         
                        int index41_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index41_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\21\uffff";
    static final String DFA48_eofS =
        "\2\uffff\1\3\4\uffff\1\3\11\uffff";
    static final String DFA48_minS =
        "\1\65\1\12\1\13\1\uffff\3\12\1\13\1\0\1\13\1\12\1\uffff\1\12\2\0"+
        "\2\uffff";
    static final String DFA48_maxS =
        "\1\65\1\12\1\u00b7\1\uffff\3\12\1\u00b7\1\0\1\u00b7\1\12\1\uffff"+
        "\1\12\2\0\2\uffff";
    static final String DFA48_acceptS =
        "\3\uffff\1\4\7\uffff\1\2\3\uffff\1\1\1\3";
    static final String DFA48_specialS =
        "\10\uffff\1\1\4\uffff\1\2\1\0\2\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\1",
            "\1\2",
            "\5\3\2\uffff\22\3\2\uffff\2\3\1\uffff\14\3\1\5\1\3\1\uffff"+
            "\23\3\1\uffff\1\3\1\uffff\1\3\1\uffff\4\3\1\uffff\1\3\1\uffff"+
            "\3\3\1\uffff\6\3\1\uffff\1\3\2\uffff\1\6\1\3\1\uffff\4\3\15"+
            "\uffff\2\3\4\uffff\1\3\11\uffff\1\3\1\4\4\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\3\3\2\uffff\2\3\2\uffff"+
            "\10\3",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\5\3\2\uffff\22\3\2\uffff\2\3\1\uffff\14\3\1\12\1\3\1\uffff"+
            "\23\3\1\uffff\1\3\1\uffff\1\3\1\uffff\4\3\1\uffff\1\3\1\uffff"+
            "\3\3\1\uffff\6\3\1\uffff\1\3\2\uffff\2\3\1\uffff\4\3\15\uffff"+
            "\2\3\4\uffff\1\3\11\uffff\6\3\1\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\13\uffff\1\3\5\uffff\3\3\2\uffff\2\3\2\uffff\10\3",
            "\1\uffff",
            "\5\3\13\uffff\1\3\6\uffff\2\3\2\uffff\2\3\1\uffff\14\3\1\14"+
            "\4\uffff\2\3\10\uffff\1\3\1\uffff\1\3\26\uffff\1\3\4\uffff\1"+
            "\3\2\uffff\2\3\3\uffff\2\3\16\uffff\1\3\17\uffff\5\3\1\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\12\uffff\1\3\7\uffff"+
            "\4\3",
            "\1\15",
            "",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "94:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_14 = input.LA(1);

                         
                        int index48_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\41\uffff";
    static final String DFA52_eofS =
        "\1\1\2\uffff\1\1\1\uffff\1\1\4\uffff\4\1\2\uffff\1\1\3\uffff\1\1"+
        "\4\uffff\4\1\3\uffff\1\1";
    static final String DFA52_minS =
        "\1\13\1\uffff\1\12\1\13\1\12\1\13\4\12\4\13\2\12\1\13\1\0\1\12\1"+
        "\uffff\1\13\4\12\4\13\2\12\1\0\1\13";
    static final String DFA52_maxS =
        "\1\u00b7\1\uffff\1\12\1\u00b7\1\12\1\u00b7\4\12\4\u00b7\2\12\1\u00b7"+
        "\1\0\1\12\1\uffff\1\u00b7\4\12\4\u00b7\2\12\1\0\1\u00b7";
    static final String DFA52_acceptS =
        "\1\uffff\1\2\21\uffff\1\1\15\uffff";
    static final String DFA52_specialS =
        "\21\uffff\1\1\15\uffff\1\0\1\uffff}>";
    static final String[] DFA52_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\2\1\1\15\uffff\2"+
            "\1\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "",
            "\1\3",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\uffff\4\1\15\uffff\1\1\1\4\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\5",
            "\5\1\2\uffff\22\1\1\7\1\6\2\1\1\11\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\10\4\1\15\uffff\2\1\4\uffff\1"+
            "\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\16\2\uffff\2\1\1\uffff\3\1\1\17\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\16\2\uffff\2\1\1\uffff\3\1\1\17\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\16\2\uffff\2\1\1\uffff\3\1\1\17\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\16\2\uffff\2\1\1\uffff\3\1\1\17\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\20",
            "\1\21",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\uffff\4\1\15\uffff\1\1\1\22\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\uffff",
            "\1\24",
            "",
            "\5\1\2\uffff\22\1\1\26\1\25\2\1\1\30\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\27\4\1\15\uffff\2\1\4\uffff\1"+
            "\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\36\2\uffff\2\1\1\uffff\3\1\1\35\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\36\2\uffff\2\1\1\uffff\3\1\1\35\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\36\2\uffff\2\1\1\uffff\3\1\1\35\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\36\2\uffff\2\1\1\uffff\3\1\1\35\15\uffff\2\1"+
            "\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "\1\37",
            "\1\40",
            "\1\uffff",
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\uffff\4\1\15\uffff\1\1\1\22\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1"
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:18: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\156\uffff";
    static final String DFA56_eofS =
        "\1\1\155\uffff";
    static final String DFA56_minS =
        "\1\13\35\uffff\1\0\117\uffff";
    static final String DFA56_maxS =
        "\1\u00b7\35\uffff\1\0\117\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\153\uffff\1\1";
    static final String DFA56_specialS =
        "\36\uffff\1\0\117\uffff}>";
    static final String[] DFA56_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\36\1\1\15\uffff\2"+
            "\1\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 110:11: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_30 = input.LA(1);

                         
                        int index56_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_ChemicalChunker()) ) {s = 109;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\54\uffff";
    static final String DFA59_eofS =
        "\1\1\53\uffff";
    static final String DFA59_minS =
        "\1\13\1\uffff\51\0\1\uffff";
    static final String DFA59_maxS =
        "\1\u00b7\1\uffff\51\0\1\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA59_specialS =
        "\2\uffff\1\3\1\21\1\27\1\45\1\23\1\41\1\40\1\1\1\34\1\47\1\37\1"+
        "\33\1\14\1\50\1\25\1\11\1\13\1\36\1\4\1\2\1\43\1\30\1\17\1\26\1"+
        "\46\1\0\1\16\1\5\1\31\1\20\1\7\1\44\1\6\1\15\1\22\1\10\1\42\1\24"+
        "\1\12\1\32\1\35\1\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\12\1\6\1\7\1\21\1\52\2\uffff\20\1\1\14\1\22\2\uffff\1\25"+
            "\1\26\1\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\23\1\36\1\37\1"+
            "\40\1\41\1\42\1\13\1\1\1\uffff\2\1\1\20\1\51\10\1\1\24\1\1\1"+
            "\43\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\50\3\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2"+
            "\1\1\27\1\1\15\uffff\1\1\1\11\4\uffff\1\1\11\uffff\1\1\1\2\1"+
            "\3\1\4\1\5\1\1\1\uffff\1\15\1\uffff\1\16\2\uffff\1\17\13\uffff"+
            "\1\10\5\uffff\3\1\2\uffff\2\1\2\uffff\4\1\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "()+ loopback of 112:29: ( ( jj )? noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_27 = input.LA(1);

                         
                        int index59_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_9 = input.LA(1);

                         
                        int index59_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_21 = input.LA(1);

                         
                        int index59_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_2 = input.LA(1);

                         
                        int index59_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_20 = input.LA(1);

                         
                        int index59_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_29 = input.LA(1);

                         
                        int index59_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_29);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_34 = input.LA(1);

                         
                        int index59_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_34);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_32 = input.LA(1);

                         
                        int index59_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_32);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_37 = input.LA(1);

                         
                        int index59_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_37);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_17 = input.LA(1);

                         
                        int index59_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_40 = input.LA(1);

                         
                        int index59_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_40);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_18 = input.LA(1);

                         
                        int index59_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA59_35 = input.LA(1);

                         
                        int index59_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_35);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA59_28 = input.LA(1);

                         
                        int index59_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_28);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA59_24 = input.LA(1);

                         
                        int index59_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA59_31 = input.LA(1);

                         
                        int index59_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA59_3 = input.LA(1);

                         
                        int index59_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_3);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA59_36 = input.LA(1);

                         
                        int index59_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA59_6 = input.LA(1);

                         
                        int index59_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_6);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA59_39 = input.LA(1);

                         
                        int index59_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA59_16 = input.LA(1);

                         
                        int index59_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_16);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA59_25 = input.LA(1);

                         
                        int index59_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA59_4 = input.LA(1);

                         
                        int index59_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_4);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA59_23 = input.LA(1);

                         
                        int index59_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_23);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA59_30 = input.LA(1);

                         
                        int index59_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_30);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA59_41 = input.LA(1);

                         
                        int index59_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_41);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA59_42 = input.LA(1);

                         
                        int index59_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_42);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA59_19 = input.LA(1);

                         
                        int index59_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_19);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA59_8 = input.LA(1);

                         
                        int index59_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_8);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA59_7 = input.LA(1);

                         
                        int index59_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_7);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA59_38 = input.LA(1);

                         
                        int index59_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_38);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA59_22 = input.LA(1);

                         
                        int index59_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_22);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA59_33 = input.LA(1);

                         
                        int index59_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_33);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA59_5 = input.LA(1);

                         
                        int index59_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA59_26 = input.LA(1);

                         
                        int index59_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_26);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA60_eotS =
        "\56\uffff";
    static final String DFA60_eofS =
        "\56\uffff";
    static final String DFA60_minS =
        "\1\13\1\12\1\uffff\1\44\4\12\4\33\2\12\1\172\1\13\1\12\1\uffff\2"+
        "\12\1\44\2\0\4\12\1\uffff\4\142\2\12\1\172\1\33\1\12\1\44\4\12\4"+
        "\142";
    static final String DFA60_maxS =
        "\1\172\1\12\1\uffff\1\147\4\12\4\152\2\12\1\172\1\u00b7\1\12\1\uffff"+
        "\2\12\1\147\2\0\4\12\1\uffff\4\153\2\12\1\172\1\33\1\12\1\147\4"+
        "\12\4\153";
    static final String DFA60_acceptS =
        "\2\uffff\1\2\16\uffff\1\3\11\uffff\1\1\22\uffff";
    static final String DFA60_specialS =
        "\25\uffff\1\0\1\1\27\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\2\156\uffff\1\1",
            "\1\3",
            "",
            "\1\6\1\4\2\uffff\1\5\76\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\23\4\21\22\uffff\2\21\2\uffff\2\21\1\uffff\15\21\4\uffff"+
            "\2\21\10\uffff\1\21\1\uffff\1\21\26\uffff\1\21\14\uffff\1\21"+
            "\17\uffff\1\22\17\uffff\4\21\2\uffff\1\21\1\uffff\1\21\2\uffff"+
            "\1\21\13\uffff\1\21\22\uffff\4\21",
            "\1\24",
            "",
            "\1\25",
            "\1\26",
            "\1\32\1\27\2\uffff\1\30\76\uffff\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\15",
            "\1\45",
            "\1\47\1\50\2\uffff\1\51\76\uffff\1\46",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41"
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "114:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_21 = input.LA(1);

                         
                        int index60_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index60_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_22 = input.LA(1);

                         
                        int index60_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index60_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\12\uffff";
    static final String DFA64_eofS =
        "\1\1\11\uffff";
    static final String DFA64_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA64_maxS =
        "\1\u00b7\1\uffff\4\0\4\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA64_specialS =
        "\2\uffff\1\0\1\3\1\2\1\1\4\uffff}>";
    static final String[] DFA64_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\4\1\5\1\2\1\3\15\uffff"+
            "\2\1\4\uffff\1\1\11\uffff\5\1\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\3\1\3\uffff\1\1\2\uffff\10\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()+ loopback of 126:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_2 = input.LA(1);

                         
                        int index64_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index64_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_5 = input.LA(1);

                         
                        int index64_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index64_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_4 = input.LA(1);

                         
                        int index64_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index64_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_3 = input.LA(1);

                         
                        int index64_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index64_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\17\uffff";
    static final String DFA68_eofS =
        "\17\uffff";
    static final String DFA68_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA68_maxS =
        "\1\u00b7\1\uffff\6\12\6\0\1\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA68_specialS =
        "\10\uffff\1\4\1\2\1\0\1\5\1\3\1\1\1\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\22\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()+ loopback of 49:62: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_10 = input.LA(1);

                         
                        int index68_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA68_13 = input.LA(1);

                         
                        int index68_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA68_12 = input.LA(1);

                         
                        int index68_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA68_8 = input.LA(1);

                         
                        int index68_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA68_11 = input.LA(1);

                         
                        int index68_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document161 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000F01FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_sentence_in_sentences183 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000F45FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences185 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000F45FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_comma_in_sentences192 = new BitSet(new long[]{0x0000000000003002L,0x0200004400000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_cc_in_sentences194 = new BitSet(new long[]{0x0000000000003002L,0x0200004400000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_stop_in_sentences196 = new BitSet(new long[]{0x0000000000003002L,0x0200004400000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_adv_in_sentences198 = new BitSet(new long[]{0x0000000000003002L,0x0200004400000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence210 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000401FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_verbphrase_in_sentence212 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000401FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_prepphrase_in_sentence214 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000401FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_unmatchedTokens253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_unmatchedTokens255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure300 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure304 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure306 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure311 = new BitSet(new long[]{0x0C3FFECC0820F802L,0x8600040420000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_cc_in_nounphraseStructure315 = new BitSet(new long[]{0x0000000000003000L,0x0200000400000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_comma_in_nounphraseStructure318 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_cc_in_nounphraseStructure321 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure325 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure328 = new BitSet(new long[]{0x0000000008203002L,0x0200000400000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure336 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure339 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure372 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure375 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure378 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure382 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure385 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure388 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure391 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure394 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure400 = new BitSet(new long[]{0xFF7FFECFFFFCF800L,0x84000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure403 = new BitSet(new long[]{0xFF7FFECFFFFCF800L,0x84000401FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure406 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x86000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_vbg_in_verb416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixture585 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x8400046420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_measurements_in_mixture588 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_md_in_mixture590 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_stop_in_mixture592 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_oscarCompound_in_mixture594 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_molecule_in_mixture596 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixture598 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_dash_in_mixture600 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_sym_in_mixture602 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_cd_in_mixture604 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_noun_in_mixture606 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_inof_in_mixture608 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_cd_in_mixture610 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_comma_in_mixture612 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_adj_in_mixture614 = new BitSet(new long[]{0x0C3FFECC0800F800L,0x84000C6420000050L,0x00F0138200257C00L});
    public static final BitSet FOLLOW_rrb_in_mixture618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_adj626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseOther675 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0000200000000200L});
    public static final BitSet FOLLOW_adj_in_prepphraseOther677 = new BitSet(new long[]{0x00000003FFFC0000L,0x0000000000000000L,0x0000200000000200L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther681 = new BitSet(new long[]{0x0C3FFECFFFFCF800L,0x8400040020000050L,0x00F0238200253E00L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf715 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime741 = new BitSet(new long[]{0x00000003FFFC3000L,0x8400000000000000L,0x0000238000003E00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime743 = new BitSet(new long[]{0x00000003FFFC3000L,0x8400000000000000L,0x0000238000003E00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime747 = new BitSet(new long[]{0x0000000000003000L,0x8400000000000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime751 = new BitSet(new long[]{0x0000000000003000L,0x0400000000000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime755 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime757 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime761 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN802 = new BitSet(new long[]{0x0020000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp869 = new BitSet(new long[]{0x00000003FFFC3000L,0x8400000000000000L,0x0000238000003E00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp871 = new BitSet(new long[]{0x00000003FFFC3000L,0x8400000000000000L,0x0000238000003E00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp875 = new BitSet(new long[]{0x0000000000003000L,0x8400000000000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp878 = new BitSet(new long[]{0x0000000000003000L,0x0400000000000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp882 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp884 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp888 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mmol935 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nnmol_in_mmol937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_gram958 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nngram_in_gram960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent981 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_nnpercent_in_percent983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1004 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_apparatus1030 = new BitSet(new long[]{0x0000800000003000L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_adj_in_apparatus1032 = new BitSet(new long[]{0x0000800000003000L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_jj_in_apparatus1034 = new BitSet(new long[]{0x0000800000003000L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nn_in_apparatus1036 = new BitSet(new long[]{0x0000800000003000L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nnpressure_in_apparatus1038 = new BitSet(new long[]{0x0000800000003000L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1042 = new BitSet(new long[]{0x0000800000003002L,0x0400000000000010L,0x0000000000013C00L});
    public static final BitSet FOLLOW_mmol_in_measurements1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gram_in_measurements1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurements1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurements1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1089 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1091 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1093 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1095 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31107 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31109 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21132 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21134 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11157 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_moleculeamount11180 = new BitSet(new long[]{0x0000000008000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount11182 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11185 = new BitSet(new long[]{0x0020000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21195 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount21198 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount11252 = new BitSet(new long[]{0x0000000008000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount11254 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11257 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21271 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount21273 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount31283 = new BitSet(new long[]{0x0000000008000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount31285 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31288 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31291 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31294 = new BitSet(new long[]{0x0C3FFECC0000F802L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_amount1347 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1349 = new BitSet(new long[]{0x0000000000000000L,0x0000080400000000L});
    public static final BitSet FOLLOW_comma_in_amount1352 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1355 = new BitSet(new long[]{0x0000000000000000L,0x0000080400000000L});
    public static final BitSet FOLLOW_rrb_in_amount1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_method1397 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_nn_in_method1399 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method1403 = new BitSet(new long[]{0x0000000000000802L,0x0400000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets1430 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000F01FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_rrb_in_brackets1432 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000F01FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_lsqb_in_brackets1434 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000F01FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_rsqb_in_brackets1436 = new BitSet(new long[]{0xFF7FFECFFFFCF802L,0x84000F01FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_11_in_oscarcd1444 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj1451 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn1458 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr1465 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront1473 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront1475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode1480 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode1487 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas1496 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore1503 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter1510 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin1517 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin1519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto1524 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto1526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith1531 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout1538 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby1545 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia1552 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof1559 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon1566 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor1573 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom1580 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder1587 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder1589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover1594 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff1601 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnstate1610 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nntime1617 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime1619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nngram1624 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngram1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmol1631 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmol1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnatmosphere1638 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nneq1645 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnvol1652 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nnchementity1659 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nntemp1666 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp1668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnflash1673 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash1675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nngeneral1680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnmethod1687 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nnamount1694 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnpressure1701 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nncolumn1708 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nnchromatography1715 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnvacuum1722 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum1724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nncycle1729 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle1731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nntimes1736 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes1738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_oscarcm1745 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_vbuse1754 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbchange1761 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbsubmerge1768 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge1770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubject1775 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject1777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_nnadd1784 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnmixture1791 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_vbadd1798 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbcharge1805 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcontain1812 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbdrop1819 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbfill1826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbsuspend1833 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbtreat1840 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat1842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbapparatus1849 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus1851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_nnapparatus1856 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_vbconcentrate1865 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_nnconcentrate1872 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_vbcool1881 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbdegass1890 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass1892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdissolve1899 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve1901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdry1908 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_nndry1915 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_vbextract1924 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_nnextract1931 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_vbfilter1940 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_nnfilter1947 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_vbheat1956 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbincrease1963 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbpartition1972 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition1974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbprecipitate1981 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate1983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_nnprecipitate1988 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbpurify1997 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_nnpurify2004 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbquench2013 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbrecover2022 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbremove2031 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_nnremove2038 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbstir2047 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbsynthesize2056 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_nnsynthesize2063 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbwait2072 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbwash2081 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbyield2090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_colon2099 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_comma2106 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_apost2113 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_neg2120 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_dash2127 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_stop2134 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_nnpercent2141 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_lsqb2148 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_rsqb2155 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_lrb2162 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_rrb2169 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_abl2180 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abn2189 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_abx2198 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_ap2207 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_at2216 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_be2225 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_bed2234 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed2236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bedz2243 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_beg2252 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg2254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_bem2261 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_ben2270 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ber2279 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_bez2288 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_cc2297 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cd2306 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_cs2315 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs2317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_dotok2325 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dod2334 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_doz2343 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dt2352 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dti2361 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dts2370 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dtx2379 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx2381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_ex2388 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_fw2397 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw2399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_hv2406 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_hvd2415 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hvg2424 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvn2433 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn2435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_in2442 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_jj2451 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj2453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_jjr2460 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jjs2469 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs2471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjt2478 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_md2487 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_nc2496 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_nn2505 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn2507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nn_poss2514 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nns2523 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns2525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nns_poss2532 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_np2541 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nnp2551 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np_poss2561 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nps2570 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nps_poss2579 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nr2588 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr2590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_od2597 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_pn2606 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_pn_poss2615 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss2617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pp_poss2624 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pp_poss_poss2633 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ppl2642 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl2644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ppls2651 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls2653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_prp2661 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppo2671 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_pps2680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppss2689 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ql2698 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_qlp2707 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_rb2716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_rbr2725 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rbt2734 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rn2743 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rp2752 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_sym2763 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_to2772 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_uh2781 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_vb2790 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_vbd2799 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd2801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_vbg2808 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_vbn2817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vbz2826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_wdt2835 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_wp_poss2844 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss2846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_wpo2854 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo2856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_wps2863 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_wql2873 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wrb2882 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb2884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred7_ChemicalChunker198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred8_ChemicalChunker210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred9_ChemicalChunker212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred10_ChemicalChunker214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred11_ChemicalChunker249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred13_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred17_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred18_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred19_ChemicalChunker265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred20_ChemicalChunker267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred22_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred24_ChemicalChunker311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred25_ChemicalChunker315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred28_ChemicalChunker325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred29_ChemicalChunker315 = new BitSet(new long[]{0x0000000000003000L,0x0200000400000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_comma_in_synpred29_ChemicalChunker318 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_cc_in_synpred29_ChemicalChunker321 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_adj_in_synpred29_ChemicalChunker325 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_noun_in_synpred29_ChemicalChunker328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred30_ChemicalChunker336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred31_ChemicalChunker339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred32_ChemicalChunker372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred33_ChemicalChunker375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred37_ChemicalChunker388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred38_ChemicalChunker391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred39_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred40_ChemicalChunker382 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_adj_in_synpred40_ChemicalChunker385 = new BitSet(new long[]{0xF3400003FFFC3000L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_verb_in_synpred40_ChemicalChunker388 = new BitSet(new long[]{0xF3400003FFFC3002L,0x00000001DBAF57AFL,0x000F238000003E00L});
    public static final BitSet FOLLOW_adv_in_synpred40_ChemicalChunker391 = new BitSet(new long[]{0x0000000000003002L,0x0000000000000000L,0x0000038000003C00L});
    public static final BitSet FOLLOW_adj_in_synpred40_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred43_ChemicalChunker400 = new BitSet(new long[]{0xFF7FFECFFFFCF800L,0x84000405FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_comma_in_synpred43_ChemicalChunker403 = new BitSet(new long[]{0xFF7FFECFFFFCF800L,0x84000401FBAF57FFL,0x00FF238200253E00L});
    public static final BitSet FOLLOW_prepphrase_in_synpred43_ChemicalChunker406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred80_ChemicalChunker506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred81_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred83_ChemicalChunker512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred89_ChemicalChunker524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred92_ChemicalChunker530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred94_ChemicalChunker534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred100_ChemicalChunker546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred114_ChemicalChunker574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred115_ChemicalChunker576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred116_ChemicalChunker588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred119_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred120_ChemicalChunker596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred121_ChemicalChunker598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred124_ChemicalChunker604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred125_ChemicalChunker606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred127_ChemicalChunker610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred129_ChemicalChunker614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_synpred137_ChemicalChunker659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred138_ChemicalChunker661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred142_ChemicalChunker741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred143_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred165_ChemicalChunker869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred166_ChemicalChunker871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred172_ChemicalChunker1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred173_ChemicalChunker1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred176_ChemicalChunker1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred180_ChemicalChunker1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred181_ChemicalChunker1091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred182_ChemicalChunker1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred183_ChemicalChunker1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred184_ChemicalChunker1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred186_ChemicalChunker1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred190_ChemicalChunker1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred192_ChemicalChunker1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred193_ChemicalChunker1291 = new BitSet(new long[]{0x0C3FFECC0000F800L,0x8400040020000050L,0x00F0038200253C00L});
    public static final BitSet FOLLOW_noun_in_synpred193_ChemicalChunker1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred194_ChemicalChunker1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred201_ChemicalChunker1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred202_ChemicalChunker1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred203_ChemicalChunker1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred204_ChemicalChunker1436 = new BitSet(new long[]{0x0000000000000002L});

}