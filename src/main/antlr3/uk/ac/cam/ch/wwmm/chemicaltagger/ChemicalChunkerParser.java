// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-01-11 15:41:19

    package uk.ac.cam.ch.wwmm.chemicaltagger;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "TOKEN", "UNMATCHED", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-GRAM'", "'NN-MOL'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-AMOUNT'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RBT'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WRB'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__159=159;
    public static final int T__27=27;
    public static final int T__158=158;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=9;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__19=19;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__16=16;
    public static final int T__147=147;
    public static final int T__15=15;
    public static final int T__90=90;
    public static final int T__18=18;
    public static final int T__149=149;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int NODE=4;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int UNMATCHED=10;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__59=59;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__30=30;
    public static final int T__173=173;
    public static final int T__31=31;
    public static final int T__172=172;
    public static final int T__32=32;
    public static final int T__179=179;
    public static final int T__33=33;
    public static final int ACHAR=7;
    public static final int T__178=178;
    public static final int T__34=34;
    public static final int NEWLINE=6;
    public static final int T__177=177;
    public static final int T__35=35;
    public static final int T__176=176;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "synpred194_ChemicalChunker", "hvg", "prepphraseIN", 
        "synpred11_ChemicalChunker", "synpred64_ChemicalChunker", "pn_poss", 
        "synpred104_ChemicalChunker", "inbefore", "synpred193_ChemicalChunker", 
        "prepphrase", "synpred87_ChemicalChunker", "synpred34_ChemicalChunker", 
        "synpred125_ChemicalChunker", "synpred183_ChemicalChunker", "synpred124_ChemicalChunker", 
        "synpred146_ChemicalChunker", "vbextract", "vbtreat", "dt", "cd", 
        "noun", "synpred4_ChemicalChunker", "synpred19_ChemicalChunker", 
        "vbapparatus", "mmol", "rn", "synpred109_ChemicalChunker", "synpred164_ChemicalChunker", 
        "synpred138_ChemicalChunker", "nntemp", "apost", "moleculeamount1", 
        "synpred76_ChemicalChunker", "vbwait", "dotok", "synpred90_ChemicalChunker", 
        "inover", "synpred107_ChemicalChunker", "synpred106_ChemicalChunker", 
        "abl", "vbsubmerge", "synpred201_ChemicalChunker", "dod", "synpred187_ChemicalChunker", 
        "synpred165_ChemicalChunker", "synpred35_ChemicalChunker", "synpred99_ChemicalChunker", 
        "synpred184_ChemicalChunker", "vbpartition", "rp", "wpo", "abn", 
        "vbyield", "uh", "ppls", "prepphraseOf", "synpred143_ChemicalChunker", 
        "number", "synpred81_ChemicalChunker", "synpred37_ChemicalChunker", 
        "rrb", "fw", "nneq", "vbd", "synpred134_ChemicalChunker", "ql", 
        "synpred136_ChemicalChunker", "vbdegass", "nnpurify", "adv", "nnconcentrate", 
        "vbsuspend", "synpred178_ChemicalChunker", "lrb", "nncolumn", "synpred1_ChemicalChunker", 
        "vbconcentrate", "synpred150_ChemicalChunker", "synpred103_ChemicalChunker", 
        "synpred163_ChemicalChunker", "inunder", "synpred57_ChemicalChunker", 
        "synpred96_ChemicalChunker", "prepphraseTemp", "inof", "synpred91_ChemicalChunker", 
        "vbchange", "synpred151_ChemicalChunker", "inwithout", "vbg", "synpred92_ChemicalChunker", 
        "synpred48_ChemicalChunker", "synpred127_ChemicalChunker", "synpred152_ChemicalChunker", 
        "vbcontain", "oscarcj", "synpred159_ChemicalChunker", "oscarcd", 
        "synpred166_ChemicalChunker", "synpred31_ChemicalChunker", "synpred132_ChemicalChunker", 
        "synpred39_ChemicalChunker", "synpred126_ChemicalChunker", "synpred110_ChemicalChunker", 
        "synpred197_ChemicalChunker", "synpred172_ChemicalChunker", "rb", 
        "oscarCompound2", "synpred115_ChemicalChunker", "synpred66_ChemicalChunker", 
        "oscarCompound", "synpred78_ChemicalChunker", "pp_poss", "synpred13_ChemicalChunker", 
        "synpred63_ChemicalChunker", "wps", "synpred145_ChemicalChunker", 
        "vbprecipitate", "synpred147_ChemicalChunker", "synpred105_ChemicalChunker", 
        "prepphraseTime", "nnflash", "inafter", "unnamedmoleculeamount1", 
        "neg", "nc", "synpred180_ChemicalChunker", "nns_poss", "dtx", "synpred195_ChemicalChunker", 
        "synpred174_ChemicalChunker", "oscaront", "molecule", "synpred88_ChemicalChunker", 
        "synpred113_ChemicalChunker", "synpred170_ChemicalChunker", "nnremove", 
        "synpred179_ChemicalChunker", "synpred97_ChemicalChunker", "synpred21_ChemicalChunker", 
        "synpred140_ChemicalChunker", "synpred177_ChemicalChunker", "vbfill", 
        "bez", "bedz", "synpred33_ChemicalChunker", "synpred56_ChemicalChunker", 
        "volume", "synpred8_ChemicalChunker", "inoff", "synpred18_ChemicalChunker", 
        "sentence1", "wrb", "synpred77_ChemicalChunker", "pps", "synpred198_ChemicalChunker", 
        "synpred89_ChemicalChunker", "synpred32_ChemicalChunker", "cs", 
        "ex", "nnapparatus", "at", "dts", "synpred69_ChemicalChunker", "oscarCompound1", 
        "synpred71_ChemicalChunker", "comma", "nncycle", "inas", "vbfilter", 
        "oscarrn", "nnfilter", "synpred101_ChemicalChunker", "synpred186_ChemicalChunker", 
        "synpred181_ChemicalChunker", "synpred9_ChemicalChunker", "infrom", 
        "verbphrase", "synpred199_ChemicalChunker", "nnchromatography", 
        "nps", "synpred116_ChemicalChunker", "abx", "synpred137_ChemicalChunker", 
        "doz", "synpred52_ChemicalChunker", "nps_poss", "synpred196_ChemicalChunker", 
        "synpred112_ChemicalChunker", "rbt", "synpred86_ChemicalChunker", 
        "amount", "vbdry", "synpred131_ChemicalChunker", "synpred161_ChemicalChunker", 
        "dti", "pn", "measurements", "synpred149_ChemicalChunker", "synpred133_ChemicalChunker", 
        "nnmethod", "synpred119_ChemicalChunker", "unnamedmoleculeamount", 
        "vbcharge", "invia", "synpred2_ChemicalChunker", "nngeneral", "gram", 
        "synpred100_ChemicalChunker", "synpred182_ChemicalChunker", "synpred10_ChemicalChunker", 
        "ber", "mixture", "synpred93_ChemicalChunker", "synpred79_ChemicalChunker", 
        "vbquench", "hvn", "vbincrease", "synpred139_ChemicalChunker", "synpred58_ChemicalChunker", 
        "np", "nnpercent", "nnvacuum", "synpred15_ChemicalChunker", "od", 
        "vbwash", "np_poss", "ben", "synpred51_ChemicalChunker", "synpred20_ChemicalChunker", 
        "synpred46_ChemicalChunker", "synpred142_ChemicalChunker", "synpred73_ChemicalChunker", 
        "nnadd", "synpred50_ChemicalChunker", "synpred185_ChemicalChunker", 
        "nnstate", "nnmol", "nnamount", "vbadd", "synpred7_ChemicalChunker", 
        "synpred135_ChemicalChunker", "vbremove", "synpred47_ChemicalChunker", 
        "nnsynthesize", "inAll", "synpred175_ChemicalChunker", "ppo", "synpred85_ChemicalChunker", 
        "synpred158_ChemicalChunker", "synpred188_ChemicalChunker", "unnamedmoleculeamount2", 
        "synpred14_ChemicalChunker", "vbstir", "synpred53_ChemicalChunker", 
        "synpred62_ChemicalChunker", "synpred75_ChemicalChunker", "bem", 
        "stop", "synpred122_ChemicalChunker", "percent", "synpred36_ChemicalChunker", 
        "synpred160_ChemicalChunker", "synpred49_ChemicalChunker", "synpred141_ChemicalChunker", 
        "hv", "synpred168_ChemicalChunker", "synpred59_ChemicalChunker", 
        "synpred67_ChemicalChunker", "synpred114_ChemicalChunker", "jjt", 
        "inby", "synpred118_ChemicalChunker", "jj", "synpred111_ChemicalChunker", 
        "beg", "dash", "apparatus", "vbn", "vbheat", "nr", "oscarCompound3", 
        "nnp", "synpred6_ChemicalChunker", "tmunicode", "synpred24_ChemicalChunker", 
        "synpred12_ChemicalChunker", "synpred54_ChemicalChunker", "sentence", 
        "synpred102_ChemicalChunker", "synpred70_ChemicalChunker", "synpred190_ChemicalChunker", 
        "synpred44_ChemicalChunker", "synpred191_ChemicalChunker", "unnamedmoleculeamount3", 
        "vbpurify", "synpred74_ChemicalChunker", "synpred83_ChemicalChunker", 
        "lsqb", "synpred148_ChemicalChunker", "synpred95_ChemicalChunker", 
        "ppss", "method", "synpred41_ChemicalChunker", "synpred45_ChemicalChunker", 
        "synpred154_ChemicalChunker", "vbsynthesize", "synpred17_ChemicalChunker", 
        "synpred60_ChemicalChunker", "synpred82_ChemicalChunker", "nnextract", 
        "synpred28_ChemicalChunker", "adj", "synpred26_ChemicalChunker", 
        "synpred176_ChemicalChunker", "synpred30_ChemicalChunker", "nntimes", 
        "synpred42_ChemicalChunker", "nn", "synpred167_ChemicalChunker", 
        "bed", "synpred200_ChemicalChunker", "vbz", "inon", "prepphraseOther", 
        "nnvol", "vb", "md", "vbuse", "verb", "synpred80_ChemicalChunker", 
        "ppl", "synpred162_ChemicalChunker", "synpred169_ChemicalChunker", 
        "jjs", "nndry", "nnmixture", "synpred68_ChemicalChunker", "synpred23_ChemicalChunker", 
        "nns", "synpred156_ChemicalChunker", "nnprecipitate", "synpred129_ChemicalChunker", 
        "synpred189_ChemicalChunker", "moleculeamount", "synpred43_ChemicalChunker", 
        "synpred171_ChemicalChunker", "inwith", "ininto", "synpred29_ChemicalChunker", 
        "nngram", "hvd", "be", "synpred61_ChemicalChunker", "unnamedmolecule", 
        "synpred98_ChemicalChunker", "synpred5_ChemicalChunker", "synpred173_ChemicalChunker", 
        "synpred38_ChemicalChunker", "moleculeamount2", "nnpressure", "vbrecover", 
        "synpred144_ChemicalChunker", "nn_poss", "vbsubject", "synpred157_ChemicalChunker", 
        "synpred40_ChemicalChunker", "synpred22_ChemicalChunker", "synpred192_ChemicalChunker", 
        "rsqb", "document", "synpred117_ChemicalChunker", "synpred55_ChemicalChunker", 
        "colon", "in", "synpred121_ChemicalChunker", "qlp", "sentence3", 
        "synpred94_ChemicalChunker", "wdt", "synpred123_ChemicalChunker", 
        "oscarcm", "synpred72_ChemicalChunker", "synpred25_ChemicalChunker", 
        "nounphrase", "synpred27_ChemicalChunker", "synpred120_ChemicalChunker", 
        "infor", "synpred65_ChemicalChunker", "cdunicode", "vbcool", "wp_poss", 
        "vbdrop", "inin", "synpred108_ChemicalChunker", "synpred128_ChemicalChunker", 
        "synpred3_ChemicalChunker", "sentence2", "synpred153_ChemicalChunker", 
        "jjr", "cc", "vbdissolve", "sym", "nnchementity", "nnatmosphere", 
        "to", "synpred130_ChemicalChunker", "pp_poss_poss", "synpred155_ChemicalChunker", 
        "nntime", "sentence4", "synpred16_ChemicalChunker", "ap", "synpred84_ChemicalChunker", 
        "rbr"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public ChemicalChunkerParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public ChemicalChunkerParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:1: document : ( sentence | UNMATCHED )+ -> ( ^( NODE[\"Sentence\"] sentence ) )+ ( NODE[\"UNMATCHED\"] ( UNMATCHED )? )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token UNMATCHED2=null;
        ChemicalChunkerParser.sentence_return sentence1 = null;


        Object UNMATCHED2_tree=null;
        RewriteRuleTokenStream stream_UNMATCHED=new RewriteRuleTokenStream(adaptor,"token UNMATCHED");
        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try { dbg.enterRule(getGrammarFileName(), "document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(30, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:9: ( ( sentence | UNMATCHED )+ -> ( ^( NODE[\"Sentence\"] sentence ) )+ ( NODE[\"UNMATCHED\"] ( UNMATCHED )? )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:11: ( sentence | UNMATCHED )+
            {
            dbg.location(30,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:11: ( sentence | UNMATCHED )+
            int cnt1=0;
            try { dbg.enterSubRule(1);

            loop1:
            do {
                int alt1=3;
                try { dbg.enterDecision(1);

                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=11 && LA1_0<=14)||(LA1_0>=17 && LA1_0<=34)||(LA1_0>=37 && LA1_0<=38)||(LA1_0>=40 && LA1_0<=53)||(LA1_0>=55 && LA1_0<=73)||LA1_0==75||LA1_0==77||(LA1_0>=79 && LA1_0<=82)||LA1_0==84||(LA1_0>=86 && LA1_0<=88)||(LA1_0>=90 && LA1_0<=95)||LA1_0==105||LA1_0==121||LA1_0==126||(LA1_0>=136 && LA1_0<=141)||LA1_0==143||LA1_0==145||LA1_0==148||(LA1_0>=165 && LA1_0<=167)||LA1_0==171||(LA1_0>=174 && LA1_0<=181)) ) {
                    alt1=1;
                }
                else if ( (LA1_0==UNMATCHED) ) {
                    alt1=2;
                }


                } finally {dbg.exitDecision(1);}

                switch (alt1) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:12: sentence
            	    {
            	    dbg.location(30,12);
            	    pushFollow(FOLLOW_sentence_in_document170);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:21: UNMATCHED
            	    {
            	    dbg.location(30,21);
            	    UNMATCHED2=(Token)match(input,UNMATCHED,FOLLOW_UNMATCHED_in_document172); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_UNMATCHED.add(UNMATCHED2);


            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt1++;
            } while (true);
            } finally {dbg.exitSubRule(1);}



            // AST REWRITE
            // elements: UNMATCHED, sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 30:32: -> ( ^( NODE[\"Sentence\"] sentence ) )+ ( NODE[\"UNMATCHED\"] ( UNMATCHED )? )+
            {
                dbg.location(30,35);
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    dbg.location(30,35);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:35: ^( NODE[\"Sentence\"] sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(30,37);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    dbg.location(30,55);
                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();
                dbg.location(30,67);
                if ( !() ) {
                    throw new RewriteEarlyExitException();
                }
                while (  ) {
                    dbg.location(30,68);
                    adaptor.addChild(root_0, (Object)adaptor.create(NODE, "UNMATCHED"));
                    dbg.location(30,87);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:30:87: ( UNMATCHED )?
                    if ( stream_UNMATCHED.hasNext() ) {
                        dbg.location(30,87);
                        adaptor.addChild(root_0, stream_UNMATCHED.nextNode());

                    }
                    stream_UNMATCHED.reset();

                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(30, 101);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:1: sentence : ( sentence1 | sentence2 | sentence3 | sentence4 )+ ( comma | cc | stop | adv )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence1_return sentence13 = null;

        ChemicalChunkerParser.sentence2_return sentence24 = null;

        ChemicalChunkerParser.sentence3_return sentence35 = null;

        ChemicalChunkerParser.sentence4_return sentence46 = null;

        ChemicalChunkerParser.comma_return comma7 = null;

        ChemicalChunkerParser.cc_return cc8 = null;

        ChemicalChunkerParser.stop_return stop9 = null;

        ChemicalChunkerParser.adv_return adv10 = null;



        try { dbg.enterRule(getGrammarFileName(), "sentence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(32, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:9: ( ( sentence1 | sentence2 | sentence3 | sentence4 )+ ( comma | cc | stop | adv )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:12: ( sentence1 | sentence2 | sentence3 | sentence4 )+ ( comma | cc | stop | adv )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(32,12);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:12: ( sentence1 | sentence2 | sentence3 | sentence4 )+
            int cnt2=0;
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=5;
                try { dbg.enterDecision(2);

                try {
                    isCyclicDecision = true;
                    alt2 = dfa2.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: sentence1
            	    {
            	    dbg.location(32,13);
            	    pushFollow(FOLLOW_sentence1_in_sentence206);
            	    sentence13=sentence1();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence13.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: sentence2
            	    {
            	    dbg.location(32,23);
            	    pushFollow(FOLLOW_sentence2_in_sentence208);
            	    sentence24=sentence2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence24.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: sentence3
            	    {
            	    dbg.location(32,33);
            	    pushFollow(FOLLOW_sentence3_in_sentence210);
            	    sentence35=sentence3();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence35.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:43: sentence4
            	    {
            	    dbg.location(32,43);
            	    pushFollow(FOLLOW_sentence4_in_sentence212);
            	    sentence46=sentence4();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence46.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt2++;
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(32,57);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:57: ( comma | cc | stop | adv )*
            try { dbg.enterSubRule(3);

            loop3:
            do {
                int alt3=5;
                try { dbg.enterDecision(3);

                try {
                    isCyclicDecision = true;
                    alt3 = dfa3.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(3);}

                switch (alt3) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:58: comma
            	    {
            	    dbg.location(32,58);
            	    pushFollow(FOLLOW_comma_in_sentence219);
            	    comma7=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma7.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:64: cc
            	    {
            	    dbg.location(32,64);
            	    pushFollow(FOLLOW_cc_in_sentence221);
            	    cc8=cc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc8.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:67: stop
            	    {
            	    dbg.location(32,67);
            	    pushFollow(FOLLOW_stop_in_sentence223);
            	    stop9=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop9.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:72: adv
            	    {
            	    dbg.location(32,72);
            	    pushFollow(FOLLOW_adv_in_sentence225);
            	    adv10=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv10.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);
            } finally {dbg.exitSubRule(3);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(32, 78);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentence1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:33:1: sentence1 : ( nounphrase )+ ( verbphrase )* ( prepphrase )* -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )* ;
    public final ChemicalChunkerParser.sentence1_return sentence1() throws RecognitionException {
        ChemicalChunkerParser.sentence1_return retval = new ChemicalChunkerParser.sentence1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase11 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase12 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase13 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(33, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:2: ( ( nounphrase )+ ( verbphrase )* ( prepphrase )* -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )+ ( verbphrase )* ( prepphrase )*
            {
            dbg.location(34,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )+
            int cnt4=0;
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=2;
                try { dbg.enterDecision(4);

                try {
                    isCyclicDecision = true;
                    alt4 = dfa4.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(34,4);
            	    pushFollow(FOLLOW_nounphrase_in_sentence1236);
            	    nounphrase11=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase11.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt4++;
            } while (true);
            } finally {dbg.exitSubRule(4);}

            dbg.location(34,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: ( verbphrase )*
            try { dbg.enterSubRule(5);

            loop5:
            do {
                int alt5=2;
                try { dbg.enterDecision(5);

                try {
                    isCyclicDecision = true;
                    alt5 = dfa5.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(5);}

                switch (alt5) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(34,16);
            	    pushFollow(FOLLOW_verbphrase_in_sentence1239);
            	    verbphrase12=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase12.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);
            } finally {dbg.exitSubRule(5);}

            dbg.location(34,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: ( prepphrase )*
            try { dbg.enterSubRule(6);

            loop6:
            do {
                int alt6=2;
                try { dbg.enterDecision(6);

                try {
                    isCyclicDecision = true;
                    alt6 = dfa6.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(6);}

                switch (alt6) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(34,28);
            	    pushFollow(FOLLOW_prepphrase_in_sentence1242);
            	    prepphrase13=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);
            } finally {dbg.exitSubRule(6);}



            // AST REWRITE
            // elements: prepphrase, verbphrase, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:39: -> ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ( prepphrase )*
            {
                dbg.location(34,42);
                if ( !(stream_nounphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(34,42);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:42: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(34,44);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(34,64);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(34,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:78: ( ^( NODE[\"VerbPhrase\"] verbphrase ) )*
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(34,78);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:78: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(34,80);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(34,100);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();
                dbg.location(34,114);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:114: ( prepphrase )*
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(34,114);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(34, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence1"

    public static class sentence2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:35:1: sentence2 : ( verbphrase )+ ( nounphrase )* ( prepphrase )* -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )* ;
    public final ChemicalChunkerParser.sentence2_return sentence2() throws RecognitionException {
        ChemicalChunkerParser.sentence2_return retval = new ChemicalChunkerParser.sentence2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase14 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase15 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase16 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(35, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:2: ( ( verbphrase )+ ( nounphrase )* ( prepphrase )* -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )+ ( nounphrase )* ( prepphrase )*
            {
            dbg.location(36,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )+
            int cnt7=0;
            try { dbg.enterSubRule(7);

            loop7:
            do {
                int alt7=2;
                try { dbg.enterDecision(7);

                try {
                    isCyclicDecision = true;
                    alt7 = dfa7.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(7);}

                switch (alt7) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(36,4);
            	    pushFollow(FOLLOW_verbphrase_in_sentence2276);
            	    verbphrase14=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase14.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt7++;
            } while (true);
            } finally {dbg.exitSubRule(7);}

            dbg.location(36,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: ( nounphrase )*
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(36,16);
            	    pushFollow(FOLLOW_nounphrase_in_sentence2279);
            	    nounphrase15=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase15.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);
            } finally {dbg.exitSubRule(8);}

            dbg.location(36,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: ( prepphrase )*
            try { dbg.enterSubRule(9);

            loop9:
            do {
                int alt9=2;
                try { dbg.enterDecision(9);

                try {
                    isCyclicDecision = true;
                    alt9 = dfa9.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(9);}

                switch (alt9) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(36,28);
            	    pushFollow(FOLLOW_prepphrase_in_sentence2282);
            	    prepphrase16=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase16.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);
            } finally {dbg.exitSubRule(9);}



            // AST REWRITE
            // elements: nounphrase, prepphrase, verbphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 36:39: -> ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ( prepphrase )*
            {
                dbg.location(36,42);
                if ( !(stream_verbphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(36,42);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:42: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(36,44);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(36,64);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();
                dbg.location(36,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:78: ( ^( NODE[\"NounPhrase\"] nounphrase ) )*
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(36,78);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:78: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(36,80);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(36,100);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(36,114);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:114: ( prepphrase )*
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(36,114);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(36, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence2"

    public static class sentence3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:37:1: sentence3 : ( prepphrase )+ ( nounphrase )+ ( verbphrase )* -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* ;
    public final ChemicalChunkerParser.sentence3_return sentence3() throws RecognitionException {
        ChemicalChunkerParser.sentence3_return retval = new ChemicalChunkerParser.sentence3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase17 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase18 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase19 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(37, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:2: ( ( prepphrase )+ ( nounphrase )+ ( verbphrase )* -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )+ ( nounphrase )+ ( verbphrase )*
            {
            dbg.location(38,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )+
            int cnt10=0;
            try { dbg.enterSubRule(10);

            loop10:
            do {
                int alt10=2;
                try { dbg.enterDecision(10);

                try {
                    isCyclicDecision = true;
                    alt10 = dfa10.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(10);}

                switch (alt10) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(38,4);
            	    pushFollow(FOLLOW_prepphrase_in_sentence3316);
            	    prepphrase17=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase17.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt10++;
            } while (true);
            } finally {dbg.exitSubRule(10);}

            dbg.location(38,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:16: ( nounphrase )+
            int cnt11=0;
            try { dbg.enterSubRule(11);

            loop11:
            do {
                int alt11=2;
                try { dbg.enterDecision(11);

                try {
                    isCyclicDecision = true;
                    alt11 = dfa11.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(11);}

                switch (alt11) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(38,16);
            	    pushFollow(FOLLOW_nounphrase_in_sentence3319);
            	    nounphrase18=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase18.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt11 >= 1 ) break loop11;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(11, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt11++;
            } while (true);
            } finally {dbg.exitSubRule(11);}

            dbg.location(38,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: ( verbphrase )*
            try { dbg.enterSubRule(12);

            loop12:
            do {
                int alt12=2;
                try { dbg.enterDecision(12);

                try {
                    isCyclicDecision = true;
                    alt12 = dfa12.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(12);}

                switch (alt12) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(38,28);
            	    pushFollow(FOLLOW_verbphrase_in_sentence3322);
            	    verbphrase19=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase19.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);
            } finally {dbg.exitSubRule(12);}



            // AST REWRITE
            // elements: verbphrase, prepphrase, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 38:39: -> ( prepphrase )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )*
            {
                dbg.location(38,43);
                if ( !(stream_prepphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(38,43);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();
                dbg.location(38,56);
                if ( !(stream_nounphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(38,56);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(38,58);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(38,78);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();
                dbg.location(38,91);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:91: ( ^( NODE[\"VerbPhrase\"] verbphrase ) )*
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(38,91);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:91: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(38,93);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(38,113);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(38, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence3"

    public static class sentence4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence4"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:40:1: sentence4 : ( prepphrase )+ ( verbphrase )+ ( nounphrase )* -> ( prepphrase )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* ;
    public final ChemicalChunkerParser.sentence4_return sentence4() throws RecognitionException {
        ChemicalChunkerParser.sentence4_return retval = new ChemicalChunkerParser.sentence4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase20 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase21 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase22 = null;


        RewriteRuleSubtreeStream stream_verbphrase=new RewriteRuleSubtreeStream(adaptor,"rule verbphrase");
        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_prepphrase=new RewriteRuleSubtreeStream(adaptor,"rule prepphrase");
        try { dbg.enterRule(getGrammarFileName(), "sentence4");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(40, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:2: ( ( prepphrase )+ ( verbphrase )+ ( nounphrase )* -> ( prepphrase )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:4: ( prepphrase )+ ( verbphrase )+ ( nounphrase )*
            {
            dbg.location(41,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:4: ( prepphrase )+
            int cnt13=0;
            try { dbg.enterSubRule(13);

            loop13:
            do {
                int alt13=2;
                try { dbg.enterDecision(13);

                try {
                    isCyclicDecision = true;
                    alt13 = dfa13.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(13);}

                switch (alt13) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: prepphrase
            	    {
            	    dbg.location(41,4);
            	    pushFollow(FOLLOW_prepphrase_in_sentence4358);
            	    prepphrase20=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prepphrase.add(prepphrase20.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt13++;
            } while (true);
            } finally {dbg.exitSubRule(13);}

            dbg.location(41,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:16: ( verbphrase )+
            int cnt14=0;
            try { dbg.enterSubRule(14);

            loop14:
            do {
                int alt14=2;
                try { dbg.enterDecision(14);

                try {
                    isCyclicDecision = true;
                    alt14 = dfa14.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(14);}

                switch (alt14) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verbphrase
            	    {
            	    dbg.location(41,16);
            	    pushFollow(FOLLOW_verbphrase_in_sentence4361);
            	    verbphrase21=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_verbphrase.add(verbphrase21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt14 >= 1 ) break loop14;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(14, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt14++;
            } while (true);
            } finally {dbg.exitSubRule(14);}

            dbg.location(41,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:28: ( nounphrase )*
            try { dbg.enterSubRule(15);

            loop15:
            do {
                int alt15=2;
                try { dbg.enterDecision(15);

                try {
                    isCyclicDecision = true;
                    alt15 = dfa15.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(15);}

                switch (alt15) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nounphrase
            	    {
            	    dbg.location(41,28);
            	    pushFollow(FOLLOW_nounphrase_in_sentence4364);
            	    nounphrase22=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase22.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);
            } finally {dbg.exitSubRule(15);}



            // AST REWRITE
            // elements: verbphrase, prepphrase, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 41:39: -> ( prepphrase )+ ( ^( NODE[\"VerbPhrase\"] verbphrase ) )+ ( ^( NODE[\"NounPhrase\"] nounphrase ) )*
            {
                dbg.location(41,43);
                if ( !(stream_prepphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_prepphrase.hasNext() ) {
                    dbg.location(41,43);
                    adaptor.addChild(root_0, stream_prepphrase.nextTree());

                }
                stream_prepphrase.reset();
                dbg.location(41,56);
                if ( !(stream_verbphrase.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_verbphrase.hasNext() ) {
                    dbg.location(41,56);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:56: ^( NODE[\"VerbPhrase\"] verbphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(41,58);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                    dbg.location(41,78);
                    adaptor.addChild(root_1, stream_verbphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_verbphrase.reset();
                dbg.location(41,91);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:91: ( ^( NODE[\"NounPhrase\"] nounphrase ) )*
                while ( stream_nounphrase.hasNext() ) {
                    dbg.location(41,91);
                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:91: ^( NODE[\"NounPhrase\"] nounphrase )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(41,93);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                    dbg.location(41,113);
                    adaptor.addChild(root_1, stream_nounphrase.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_nounphrase.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(41, 125);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sentence4");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sentence4"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:1: nounphrase : ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt23 = null;

        ChemicalChunkerParser.adj_return adj24 = null;

        ChemicalChunkerParser.adv_return adv25 = null;

        ChemicalChunkerParser.noun_return noun26 = null;

        ChemicalChunkerParser.cc_return cc27 = null;

        ChemicalChunkerParser.comma_return comma28 = null;

        ChemicalChunkerParser.cc_return cc29 = null;

        ChemicalChunkerParser.adj_return adj30 = null;

        ChemicalChunkerParser.noun_return noun31 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf32 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN33 = null;



        try { dbg.enterRule(getGrammarFileName(), "nounphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(43, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:12: ( ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:14: ( dt )? ( adj | adv )* ( noun )+ ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )* ( prepphraseOf | prepphraseIN )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(43,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:14: ( dt )?
            int alt16=2;
            try { dbg.enterSubRule(16);
            try { dbg.enterDecision(16);

            int LA16_0 = input.LA(1);

            if ( (LA16_0==126) ) {
                alt16=1;
            }
            } finally {dbg.exitDecision(16);}

            switch (alt16) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(43,14);
                    pushFollow(FOLLOW_dt_in_nounphrase397);
                    dt23=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt23.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(16);}

            dbg.location(43,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:18: ( adj | adv )*
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=3;
                try { dbg.enterDecision(17);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: adj
            	    {
            	    dbg.location(43,19);
            	    pushFollow(FOLLOW_adj_in_nounphrase401);
            	    adj24=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj24.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:23: adv
            	    {
            	    dbg.location(43,23);
            	    pushFollow(FOLLOW_adv_in_nounphrase403);
            	    adv25=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv25.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);
            } finally {dbg.exitSubRule(17);}

            dbg.location(43,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:30: ( noun )+
            int cnt18=0;
            try { dbg.enterSubRule(18);

            loop18:
            do {
                int alt18=2;
                try { dbg.enterDecision(18);

                try {
                    isCyclicDecision = true;
                    alt18 = dfa18.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(18);}

                switch (alt18) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: noun
            	    {
            	    dbg.location(43,30);
            	    pushFollow(FOLLOW_noun_in_nounphrase408);
            	    noun26=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun26.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt18 >= 1 ) break loop18;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(18, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt18++;
            } while (true);
            } finally {dbg.exitSubRule(18);}

            dbg.location(43,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:36: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*
            try { dbg.enterSubRule(23);

            loop23:
            do {
                int alt23=2;
                try { dbg.enterDecision(23);

                try {
                    isCyclicDecision = true;
                    alt23 = dfa23.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(23);}

                switch (alt23) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( cc )? ( comma )? ( cc )? ( adj )+ noun
            	    {
            	    dbg.location(43,37);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( cc )?
            	    int alt19=2;
            	    try { dbg.enterSubRule(19);
            	    try { dbg.enterDecision(19);

            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==120) ) {
            	        int LA19_1 = input.LA(2);

            	        if ( (LA19_1==TOKEN) ) {
            	            int LA19_3 = input.LA(3);

            	            if ( (synpred27_ChemicalChunker()) ) {
            	                alt19=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(19);}

            	    switch (alt19) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(43,37);
            	            pushFollow(FOLLOW_cc_in_nounphrase412);
            	            cc27=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc27.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(19);}

            	    dbg.location(43,41);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:41: ( comma )?
            	    int alt20=2;
            	    try { dbg.enterSubRule(20);
            	    try { dbg.enterDecision(20);

            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==97) ) {
            	        alt20=1;
            	    }
            	    } finally {dbg.exitDecision(20);}

            	    switch (alt20) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(43,41);
            	            pushFollow(FOLLOW_comma_in_nounphrase415);
            	            comma28=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma28.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(20);}

            	    dbg.location(43,48);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:48: ( cc )?
            	    int alt21=2;
            	    try { dbg.enterSubRule(21);
            	    try { dbg.enterDecision(21);

            	    int LA21_0 = input.LA(1);

            	    if ( (LA21_0==120) ) {
            	        alt21=1;
            	    }
            	    } finally {dbg.exitDecision(21);}

            	    switch (alt21) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(43,48);
            	            pushFollow(FOLLOW_cc_in_nounphrase418);
            	            cc29=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc29.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(21);}

            	    dbg.location(43,53);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:53: ( adj )+
            	    int cnt22=0;
            	    try { dbg.enterSubRule(22);

            	    loop22:
            	    do {
            	        int alt22=2;
            	        try { dbg.enterDecision(22);

            	        try {
            	            isCyclicDecision = true;
            	            alt22 = dfa22.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(22);}

            	        switch (alt22) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    dbg.location(43,53);
            	    	    pushFollow(FOLLOW_adj_in_nounphrase422);
            	    	    adj30=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj30.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt22 >= 1 ) break loop22;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(22, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt22++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(22);}

            	    dbg.location(43,58);
            	    pushFollow(FOLLOW_noun_in_nounphrase425);
            	    noun31=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun31.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);
            } finally {dbg.exitSubRule(23);}

            dbg.location(43,68);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:68: ( prepphraseOf | prepphraseIN )*
            try { dbg.enterSubRule(24);

            loop24:
            do {
                int alt24=3;
                try { dbg.enterDecision(24);

                int LA24_0 = input.LA(1);

                if ( (LA24_0==20) ) {
                    int LA24_2 = input.LA(2);

                    if ( (synpred33_ChemicalChunker()) ) {
                        alt24=2;
                    }


                }
                else if ( (LA24_0==26) ) {
                    int LA24_3 = input.LA(2);

                    if ( (synpred32_ChemicalChunker()) ) {
                        alt24=1;
                    }


                }


                } finally {dbg.exitDecision(24);}

                switch (alt24) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:69: prepphraseOf
            	    {
            	    dbg.location(43,69);
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphrase433);
            	    prepphraseOf32=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf32.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:83: prepphraseIN
            	    {
            	    dbg.location(43,83);
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphrase436);
            	    prepphraseIN33=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN33.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);
            } finally {dbg.exitSubRule(24);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(43, 99);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nounphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:1: verbphrase : ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to34 = null;

        ChemicalChunkerParser.inAll_return inAll35 = null;

        ChemicalChunkerParser.inafter_return inafter36 = null;

        ChemicalChunkerParser.adv_return adv37 = null;

        ChemicalChunkerParser.adj_return adj38 = null;

        ChemicalChunkerParser.verb_return verb39 = null;

        ChemicalChunkerParser.adv_return adv40 = null;

        ChemicalChunkerParser.adj_return adj41 = null;

        ChemicalChunkerParser.cc_return cc42 = null;

        ChemicalChunkerParser.comma_return comma43 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase44 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(46, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:12: ( ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:15: ( to )? ( inAll )? ( inafter )? ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+ ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(46,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:15: ( to )?
            int alt25=2;
            try { dbg.enterSubRule(25);
            try { dbg.enterDecision(25);

            int LA25_0 = input.LA(1);

            if ( (LA25_0==171) ) {
                int LA25_1 = input.LA(2);

                if ( (LA25_1==TOKEN) ) {
                    int LA25_3 = input.LA(3);

                    if ( (synpred34_ChemicalChunker()) ) {
                        alt25=1;
                    }
                }
            }
            } finally {dbg.exitDecision(25);}

            switch (alt25) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    dbg.location(46,15);
                    pushFollow(FOLLOW_to_in_verbphrase450);
                    to34=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to34.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(25);}

            dbg.location(46,19);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:19: ( inAll )?
            int alt26=2;
            try { dbg.enterSubRule(26);
            try { dbg.enterDecision(26);

            int LA26_0 = input.LA(1);

            if ( ((LA26_0>=17 && LA26_0<=18)||(LA26_0>=20 && LA26_0<=32)||LA26_0==136||LA26_0==171) ) {
                alt26=1;
            }
            else if ( (LA26_0==19) ) {
                int LA26_2 = input.LA(2);

                if ( (LA26_2==TOKEN) ) {
                    int LA26_4 = input.LA(3);

                    if ( (synpred35_ChemicalChunker()) ) {
                        alt26=1;
                    }
                }
            }
            } finally {dbg.exitDecision(26);}

            switch (alt26) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(46,19);
                    pushFollow(FOLLOW_inAll_in_verbphrase453);
                    inAll35=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll35.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(26);}

            dbg.location(46,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:26: ( inafter )?
            int alt27=2;
            try { dbg.enterSubRule(27);
            try { dbg.enterDecision(27);

            int LA27_0 = input.LA(1);

            if ( (LA27_0==19) ) {
                alt27=1;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    dbg.location(46,26);
                    pushFollow(FOLLOW_inafter_in_verbphrase456);
                    inafter36=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter36.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(27);}

            dbg.location(46,35);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:35: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+
            int cnt33=0;
            try { dbg.enterSubRule(33);

            loop33:
            do {
                int alt33=2;
                try { dbg.enterDecision(33);

                try {
                    isCyclicDecision = true;
                    alt33 = dfa33.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(33);}

                switch (alt33) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:36: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
            	    {
            	    dbg.location(46,36);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:36: ( adv )*
            	    try { dbg.enterSubRule(28);

            	    loop28:
            	    do {
            	        int alt28=2;
            	        try { dbg.enterDecision(28);

            	        int LA28_0 = input.LA(1);

            	        if ( ((LA28_0>=165 && LA28_0<=167)) ) {
            	            alt28=1;
            	        }


            	        } finally {dbg.exitDecision(28);}

            	        switch (alt28) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(46,36);
            	    	    pushFollow(FOLLOW_adv_in_verbphrase460);
            	    	    adv37=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv37.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(28);}

            	    dbg.location(46,41);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:41: ( adj )?
            	    int alt29=2;
            	    try { dbg.enterSubRule(29);
            	    try { dbg.enterDecision(29);

            	    int LA29_0 = input.LA(1);

            	    if ( ((LA29_0>=12 && LA29_0<=13)||(LA29_0>=137 && LA29_0<=140)) ) {
            	        alt29=1;
            	    }
            	    } finally {dbg.exitDecision(29);}

            	    switch (alt29) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(46,41);
            	            pushFollow(FOLLOW_adj_in_verbphrase463);
            	            adj38=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj38.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(29);}

            	    dbg.location(46,46);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:46: ( verb )+
            	    int cnt30=0;
            	    try { dbg.enterSubRule(30);

            	    loop30:
            	    do {
            	        int alt30=2;
            	        try { dbg.enterDecision(30);

            	        try {
            	            isCyclicDecision = true;
            	            alt30 = dfa30.predict(input);
            	        }
            	        catch (NoViableAltException nvae) {
            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	        } finally {dbg.exitDecision(30);}

            	        switch (alt30) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    dbg.location(46,46);
            	    	    pushFollow(FOLLOW_verb_in_verbphrase466);
            	    	    verb39=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb39.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt30 >= 1 ) break loop30;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(30, input);
            	                dbg.recognitionException(eee);

            	                throw eee;
            	        }
            	        cnt30++;
            	    } while (true);
            	    } finally {dbg.exitSubRule(30);}

            	    dbg.location(46,52);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:52: ( adv )*
            	    try { dbg.enterSubRule(31);

            	    loop31:
            	    do {
            	        int alt31=2;
            	        try { dbg.enterDecision(31);

            	        switch ( input.LA(1) ) {
            	        case 165:
            	            {
            	            int LA31_2 = input.LA(2);

            	            if ( (LA31_2==TOKEN) ) {
            	                int LA31_5 = input.LA(3);

            	                if ( (synpred40_ChemicalChunker()) ) {
            	                    alt31=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 166:
            	            {
            	            int LA31_3 = input.LA(2);

            	            if ( (LA31_3==TOKEN) ) {
            	                int LA31_6 = input.LA(3);

            	                if ( (synpred40_ChemicalChunker()) ) {
            	                    alt31=1;
            	                }


            	            }


            	            }
            	            break;
            	        case 167:
            	            {
            	            int LA31_4 = input.LA(2);

            	            if ( (LA31_4==TOKEN) ) {
            	                int LA31_7 = input.LA(3);

            	                if ( (synpred40_ChemicalChunker()) ) {
            	                    alt31=1;
            	                }


            	            }


            	            }
            	            break;

            	        }

            	        } finally {dbg.exitDecision(31);}

            	        switch (alt31) {
            	    	case 1 :
            	    	    dbg.enterAlt(1);

            	    	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    dbg.location(46,52);
            	    	    pushFollow(FOLLOW_adv_in_verbphrase469);
            	    	    adv40=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv40.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop31;
            	        }
            	    } while (true);
            	    } finally {dbg.exitSubRule(31);}

            	    dbg.location(46,57);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:57: ( adj )?
            	    int alt32=2;
            	    try { dbg.enterSubRule(32);
            	    try { dbg.enterDecision(32);

            	    try {
            	        isCyclicDecision = true;
            	        alt32 = dfa32.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(32);}

            	    switch (alt32) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            dbg.location(46,57);
            	            pushFollow(FOLLOW_adj_in_verbphrase472);
            	            adj41=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj41.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(32);}


            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt33++;
            } while (true);
            } finally {dbg.exitSubRule(33);}

            dbg.location(46,64);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:64: ( ( cc )? ( comma )? prepphrase )*
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=2;
                try { dbg.enterDecision(36);

                try {
                    isCyclicDecision = true;
                    alt36 = dfa36.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:65: ( cc )? ( comma )? prepphrase
            	    {
            	    dbg.location(46,65);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:65: ( cc )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34);

            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0==120) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            dbg.location(46,65);
            	            pushFollow(FOLLOW_cc_in_verbphrase478);
            	            cc42=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc42.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}

            	    dbg.location(46,69);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:69: ( comma )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35);

            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==97) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            dbg.location(46,69);
            	            pushFollow(FOLLOW_comma_in_verbphrase481);
            	            comma43=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma43.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}

            	    dbg.location(46,76);
            	    pushFollow(FOLLOW_prepphrase_in_verbphrase484);
            	    prepphrase44=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase44.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);
            } finally {dbg.exitSubRule(36);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(46, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:1: verb : ( vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbg_return vbg45 = null;

        ChemicalChunkerParser.vbd_return vbd46 = null;

        ChemicalChunkerParser.vbz_return vbz47 = null;

        ChemicalChunkerParser.vbn_return vbn48 = null;

        ChemicalChunkerParser.vbuse_return vbuse49 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge50 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject51 = null;

        ChemicalChunkerParser.vbadd_return vbadd52 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge53 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain54 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop55 = null;

        ChemicalChunkerParser.vbfill_return vbfill56 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend57 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat58 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus59 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate60 = null;

        ChemicalChunkerParser.vbcool_return vbcool61 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass62 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve63 = null;

        ChemicalChunkerParser.vbdry_return vbdry64 = null;

        ChemicalChunkerParser.vbextract_return vbextract65 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter66 = null;

        ChemicalChunkerParser.vbheat_return vbheat67 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease68 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition69 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate70 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify71 = null;

        ChemicalChunkerParser.vbquench_return vbquench72 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover73 = null;

        ChemicalChunkerParser.vbremove_return vbremove74 = null;

        ChemicalChunkerParser.vbstir_return vbstir75 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize76 = null;

        ChemicalChunkerParser.vbwait_return vbwait77 = null;

        ChemicalChunkerParser.vbwash_return vbwash78 = null;

        ChemicalChunkerParser.vbyield_return vbyield79 = null;



        try { dbg.enterRule(getGrammarFileName(), "verb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(47, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:6: ( vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield )
            int alt37=35;
            try { dbg.enterDecision(37);

            switch ( input.LA(1) ) {
            case 175:
                {
                alt37=1;
                }
                break;
            case 174:
                {
                alt37=2;
                }
                break;
            case 177:
                {
                alt37=3;
                }
                break;
            case 176:
                {
                alt37=4;
                }
                break;
            case 53:
                {
                alt37=5;
                }
                break;
            case 55:
                {
                alt37=6;
                }
                break;
            case 56:
                {
                alt37=7;
                }
                break;
            case 59:
                {
                alt37=8;
                }
                break;
            case 60:
                {
                alt37=9;
                }
                break;
            case 61:
                {
                alt37=10;
                }
                break;
            case 62:
                {
                alt37=11;
                }
                break;
            case 63:
                {
                alt37=12;
                }
                break;
            case 64:
                {
                alt37=13;
                }
                break;
            case 65:
                {
                alt37=14;
                }
                break;
            case 66:
                {
                alt37=15;
                }
                break;
            case 68:
                {
                alt37=16;
                }
                break;
            case 70:
                {
                alt37=17;
                }
                break;
            case 71:
                {
                alt37=18;
                }
                break;
            case 72:
                {
                alt37=19;
                }
                break;
            case 73:
                {
                alt37=20;
                }
                break;
            case 75:
                {
                alt37=21;
                }
                break;
            case 77:
                {
                alt37=22;
                }
                break;
            case 79:
                {
                alt37=23;
                }
                break;
            case 80:
                {
                alt37=24;
                }
                break;
            case 81:
                {
                alt37=25;
                }
                break;
            case 82:
                {
                alt37=26;
                }
                break;
            case 84:
                {
                alt37=27;
                }
                break;
            case 86:
                {
                alt37=28;
                }
                break;
            case 87:
                {
                alt37=29;
                }
                break;
            case 88:
                {
                alt37=30;
                }
                break;
            case 90:
                {
                alt37=31;
                }
                break;
            case 91:
                {
                alt37=32;
                }
                break;
            case 93:
                {
                alt37=33;
                }
                break;
            case 94:
                {
                alt37=34;
                }
                break;
            case 95:
                {
                alt37=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:8: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,8);
                    pushFollow(FOLLOW_vbg_in_verb494);
                    vbg45=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg45.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:12: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,12);
                    pushFollow(FOLLOW_vbd_in_verb496);
                    vbd46=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd46.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:16: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,16);
                    pushFollow(FOLLOW_vbz_in_verb498);
                    vbz47=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz47.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:20: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,20);
                    pushFollow(FOLLOW_vbn_in_verb500);
                    vbn48=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn48.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:24: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,24);
                    pushFollow(FOLLOW_vbuse_in_verb502);
                    vbuse49=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse49.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:30: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,30);
                    pushFollow(FOLLOW_vbsubmerge_in_verb504);
                    vbsubmerge50=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge50.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:41: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,41);
                    pushFollow(FOLLOW_vbsubject_in_verb506);
                    vbsubject51=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject51.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:51: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,51);
                    pushFollow(FOLLOW_vbadd_in_verb508);
                    vbadd52=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd52.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:57: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,57);
                    pushFollow(FOLLOW_vbcharge_in_verb510);
                    vbcharge53=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge53.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:66: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,66);
                    pushFollow(FOLLOW_vbcontain_in_verb512);
                    vbcontain54=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain54.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:76: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,76);
                    pushFollow(FOLLOW_vbdrop_in_verb514);
                    vbdrop55=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop55.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:83: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,83);
                    pushFollow(FOLLOW_vbfill_in_verb516);
                    vbfill56=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill56.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:90: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,90);
                    pushFollow(FOLLOW_vbsuspend_in_verb518);
                    vbsuspend57=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend57.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:100: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,100);
                    pushFollow(FOLLOW_vbtreat_in_verb520);
                    vbtreat58=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat58.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:108: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,108);
                    pushFollow(FOLLOW_vbapparatus_in_verb522);
                    vbapparatus59=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus59.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:120: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,120);
                    pushFollow(FOLLOW_vbconcentrate_in_verb524);
                    vbconcentrate60=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate60.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:134: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,134);
                    pushFollow(FOLLOW_vbcool_in_verb526);
                    vbcool61=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool61.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:141: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,141);
                    pushFollow(FOLLOW_vbdegass_in_verb528);
                    vbdegass62=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass62.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:150: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,150);
                    pushFollow(FOLLOW_vbdissolve_in_verb530);
                    vbdissolve63=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve63.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:161: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,161);
                    pushFollow(FOLLOW_vbdry_in_verb532);
                    vbdry64=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry64.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:167: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,167);
                    pushFollow(FOLLOW_vbextract_in_verb534);
                    vbextract65=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract65.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:177: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,177);
                    pushFollow(FOLLOW_vbfilter_in_verb536);
                    vbfilter66=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter66.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:187: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,187);
                    pushFollow(FOLLOW_vbheat_in_verb539);
                    vbheat67=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat67.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:194: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,194);
                    pushFollow(FOLLOW_vbincrease_in_verb541);
                    vbincrease68=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease68.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:205: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,205);
                    pushFollow(FOLLOW_vbpartition_in_verb543);
                    vbpartition69=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition69.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:217: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,217);
                    pushFollow(FOLLOW_vbprecipitate_in_verb545);
                    vbprecipitate70=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate70.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:231: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,231);
                    pushFollow(FOLLOW_vbpurify_in_verb547);
                    vbpurify71=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify71.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:240: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,240);
                    pushFollow(FOLLOW_vbquench_in_verb549);
                    vbquench72=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench72.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:249: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,249);
                    pushFollow(FOLLOW_vbrecover_in_verb551);
                    vbrecover73=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover73.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:259: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,259);
                    pushFollow(FOLLOW_vbremove_in_verb553);
                    vbremove74=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove74.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:268: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,268);
                    pushFollow(FOLLOW_vbstir_in_verb555);
                    vbstir75=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir75.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:275: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,275);
                    pushFollow(FOLLOW_vbsynthesize_in_verb557);
                    vbsynthesize76=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize76.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:288: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,288);
                    pushFollow(FOLLOW_vbwait_in_verb559);
                    vbwait77=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait77.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:295: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,295);
                    pushFollow(FOLLOW_vbwash_in_verb561);
                    vbwash78=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash78.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:47:302: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(47,302);
                    pushFollow(FOLLOW_vbyield_in_verb563);
                    vbyield79=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield79.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(47, 309);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd80 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd81 = null;



        try { dbg.enterRule(getGrammarFileName(), "number");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(48, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:8: ( cd | oscarcd )
            int alt38=2;
            try { dbg.enterDecision(38);

            int LA38_0 = input.LA(1);

            if ( (LA38_0==121) ) {
                alt38=1;
            }
            else if ( (LA38_0==11) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,10);
                    pushFollow(FOLLOW_cd_in_number570);
                    cd80=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd80.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(48,13);
                    pushFollow(FOLLOW_oscarcd_in_number572);
                    oscarcd81=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd81.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(48, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "number");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "number"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:1: noun : ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.md_return md82 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule83 = null;

        ChemicalChunkerParser.molecule_return molecule84 = null;

        ChemicalChunkerParser.nnstate_return nnstate85 = null;

        ChemicalChunkerParser.nn_return nn86 = null;

        ChemicalChunkerParser.nns_return nns87 = null;

        ChemicalChunkerParser.nntime_return nntime88 = null;

        ChemicalChunkerParser.apparatus_return apparatus89 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere90 = null;

        ChemicalChunkerParser.nneq_return nneq91 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity92 = null;

        ChemicalChunkerParser.measurements_return measurements93 = null;

        ChemicalChunkerParser.nntemp_return nntemp94 = null;

        ChemicalChunkerParser.nnflash_return nnflash95 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral96 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod97 = null;

        ChemicalChunkerParser.nnamount_return nnamount98 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure99 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn100 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography101 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum102 = null;

        ChemicalChunkerParser.nncycle_return nncycle103 = null;

        ChemicalChunkerParser.nntimes_return nntimes104 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus105 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate106 = null;

        ChemicalChunkerParser.wdt_return wdt107 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss108 = null;

        ChemicalChunkerParser.wpo_return wpo109 = null;

        ChemicalChunkerParser.wps_return wps110 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize111 = null;

        ChemicalChunkerParser.oscaront_return oscaront112 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture113 = null;

        ChemicalChunkerParser.amount_return amount114 = null;

        ChemicalChunkerParser.cd_return cd115 = null;

        ChemicalChunkerParser.nnp_return nnp116 = null;

        ChemicalChunkerParser.nnadd_return nnadd117 = null;

        ChemicalChunkerParser.mixture_return mixture118 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound119 = null;



        try { dbg.enterRule(getGrammarFileName(), "noun");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(49, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:6: ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound )
            int alt39=38;
            try { dbg.enterDecision(39);

            try {
                isCyclicDecision = true;
                alt39 = dfa39.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(39);}

            switch (alt39) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:9: md
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,9);
                    pushFollow(FOLLOW_md_in_noun581);
                    md82=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md82.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:12: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,12);
                    pushFollow(FOLLOW_unnamedmolecule_in_noun583);
                    unnamedmolecule83=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule83.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,28);
                    pushFollow(FOLLOW_molecule_in_noun585);
                    molecule84=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule84.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:37: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,37);
                    pushFollow(FOLLOW_nnstate_in_noun587);
                    nnstate85=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate85.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,45);
                    pushFollow(FOLLOW_nn_in_noun589);
                    nn86=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn86.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:48: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,48);
                    pushFollow(FOLLOW_nns_in_noun591);
                    nns87=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns87.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:52: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,52);
                    pushFollow(FOLLOW_nntime_in_noun593);
                    nntime88=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime88.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:59: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,59);
                    pushFollow(FOLLOW_apparatus_in_noun595);
                    apparatus89=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus89.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:69: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,69);
                    pushFollow(FOLLOW_nnatmosphere_in_noun597);
                    nnatmosphere90=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere90.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:82: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,82);
                    pushFollow(FOLLOW_nneq_in_noun599);
                    nneq91=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq91.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:87: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,87);
                    pushFollow(FOLLOW_nnchementity_in_noun601);
                    nnchementity92=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity92.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,100);
                    pushFollow(FOLLOW_measurements_in_noun603);
                    measurements93=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements93.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:113: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,113);
                    pushFollow(FOLLOW_nntemp_in_noun605);
                    nntemp94=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp94.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:120: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,120);
                    pushFollow(FOLLOW_nnflash_in_noun607);
                    nnflash95=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash95.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:128: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,128);
                    pushFollow(FOLLOW_nngeneral_in_noun609);
                    nngeneral96=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral96.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:138: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,138);
                    pushFollow(FOLLOW_nnmethod_in_noun611);
                    nnmethod97=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod97.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:147: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,147);
                    pushFollow(FOLLOW_nnamount_in_noun613);
                    nnamount98=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount98.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:156: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,156);
                    pushFollow(FOLLOW_nnpressure_in_noun615);
                    nnpressure99=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure99.getTree());

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:167: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,167);
                    pushFollow(FOLLOW_nncolumn_in_noun617);
                    nncolumn100=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn100.getTree());

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:176: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,176);
                    pushFollow(FOLLOW_nnchromatography_in_noun619);
                    nnchromatography101=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography101.getTree());

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:193: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,193);
                    pushFollow(FOLLOW_nnvacuum_in_noun621);
                    nnvacuum102=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum102.getTree());

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:202: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,202);
                    pushFollow(FOLLOW_nncycle_in_noun623);
                    nncycle103=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle103.getTree());

                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:210: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,210);
                    pushFollow(FOLLOW_nntimes_in_noun625);
                    nntimes104=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes104.getTree());

                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:218: nnapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(49,218);
                    pushFollow(FOLLOW_nnapparatus_in_noun627);
                    nnapparatus105=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus105.getTree());

                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,1);
                    pushFollow(FOLLOW_nnconcentrate_in_noun630);
                    nnconcentrate106=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate106.getTree());

                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:15: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,15);
                    pushFollow(FOLLOW_wdt_in_noun632);
                    wdt107=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt107.getTree());

                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:19: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,19);
                    pushFollow(FOLLOW_wp_poss_in_noun634);
                    wp_poss108=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss108.getTree());

                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,27);
                    pushFollow(FOLLOW_wpo_in_noun636);
                    wpo109=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo109.getTree());

                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:31: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,31);
                    pushFollow(FOLLOW_wps_in_noun638);
                    wps110=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps110.getTree());

                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:35: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,35);
                    pushFollow(FOLLOW_nnsynthesize_in_noun640);
                    nnsynthesize111=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize111.getTree());

                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:48: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,48);
                    pushFollow(FOLLOW_oscaront_in_noun642);
                    oscaront112=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront112.getTree());

                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:57: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,57);
                    pushFollow(FOLLOW_nnmixture_in_noun644);
                    nnmixture113=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture113.getTree());

                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,67);
                    pushFollow(FOLLOW_amount_in_noun646);
                    amount114=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount114.getTree());

                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:74: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,74);
                    pushFollow(FOLLOW_cd_in_noun648);
                    cd115=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd115.getTree());

                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:77: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,77);
                    pushFollow(FOLLOW_nnp_in_noun650);
                    nnp116=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp116.getTree());

                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:81: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,81);
                    pushFollow(FOLLOW_nnadd_in_noun652);
                    nnadd117=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd117.getTree());

                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:87: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,87);
                    pushFollow(FOLLOW_mixture_in_noun654);
                    mixture118=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture118.getTree());

                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:95: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(50,95);
                    pushFollow(FOLLOW_oscarCompound_in_noun656);
                    oscarCompound119=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound119.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(50, 108);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "noun");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "noun"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:1: mixture : lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb120 = null;

        ChemicalChunkerParser.measurements_return measurements121 = null;

        ChemicalChunkerParser.md_return md122 = null;

        ChemicalChunkerParser.stop_return stop123 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound124 = null;

        ChemicalChunkerParser.molecule_return molecule125 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule126 = null;

        ChemicalChunkerParser.dash_return dash127 = null;

        ChemicalChunkerParser.sym_return sym128 = null;

        ChemicalChunkerParser.cd_return cd129 = null;

        ChemicalChunkerParser.noun_return noun130 = null;

        ChemicalChunkerParser.inof_return inof131 = null;

        ChemicalChunkerParser.cd_return cd132 = null;

        ChemicalChunkerParser.comma_return comma133 = null;

        ChemicalChunkerParser.adj_return adj134 = null;

        ChemicalChunkerParser.rrb_return rrb135 = null;



        try { dbg.enterRule(getGrammarFileName(), "mixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(52, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:8: ( lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:11: lrb ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(52,11);
            pushFollow(FOLLOW_lrb_in_mixture664);
            lrb120=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb120.getTree());
            dbg.location(52,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+
            int cnt40=0;
            try { dbg.enterSubRule(40);

            loop40:
            do {
                int alt40=15;
                try { dbg.enterDecision(40);

                try {
                    isCyclicDecision = true;
                    alt40 = dfa40.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(40);}

                switch (alt40) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:16: measurements
            	    {
            	    dbg.location(52,16);
            	    pushFollow(FOLLOW_measurements_in_mixture667);
            	    measurements121=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements121.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:29: md
            	    {
            	    dbg.location(52,29);
            	    pushFollow(FOLLOW_md_in_mixture669);
            	    md122=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md122.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:32: stop
            	    {
            	    dbg.location(52,32);
            	    pushFollow(FOLLOW_stop_in_mixture671);
            	    stop123=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop123.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:37: oscarCompound
            	    {
            	    dbg.location(52,37);
            	    pushFollow(FOLLOW_oscarCompound_in_mixture673);
            	    oscarCompound124=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound124.getTree());

            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:51: molecule
            	    {
            	    dbg.location(52,51);
            	    pushFollow(FOLLOW_molecule_in_mixture675);
            	    molecule125=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule125.getTree());

            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:60: unnamedmolecule
            	    {
            	    dbg.location(52,60);
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixture677);
            	    unnamedmolecule126=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule126.getTree());

            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:76: dash
            	    {
            	    dbg.location(52,76);
            	    pushFollow(FOLLOW_dash_in_mixture679);
            	    dash127=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash127.getTree());

            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:81: sym
            	    {
            	    dbg.location(52,81);
            	    pushFollow(FOLLOW_sym_in_mixture681);
            	    sym128=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym128.getTree());

            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:85: cd
            	    {
            	    dbg.location(52,85);
            	    pushFollow(FOLLOW_cd_in_mixture683);
            	    cd129=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd129.getTree());

            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:88: noun
            	    {
            	    dbg.location(52,88);
            	    pushFollow(FOLLOW_noun_in_mixture685);
            	    noun130=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun130.getTree());

            	    }
            	    break;
            	case 11 :
            	    dbg.enterAlt(11);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:93: inof
            	    {
            	    dbg.location(52,93);
            	    pushFollow(FOLLOW_inof_in_mixture687);
            	    inof131=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof131.getTree());

            	    }
            	    break;
            	case 12 :
            	    dbg.enterAlt(12);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:98: cd
            	    {
            	    dbg.location(52,98);
            	    pushFollow(FOLLOW_cd_in_mixture689);
            	    cd132=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd132.getTree());

            	    }
            	    break;
            	case 13 :
            	    dbg.enterAlt(13);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:101: comma
            	    {
            	    dbg.location(52,101);
            	    pushFollow(FOLLOW_comma_in_mixture691);
            	    comma133=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma133.getTree());

            	    }
            	    break;
            	case 14 :
            	    dbg.enterAlt(14);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:107: adj
            	    {
            	    dbg.location(52,107);
            	    pushFollow(FOLLOW_adj_in_mixture693);
            	    adj134=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj134.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt40++;
            } while (true);
            } finally {dbg.exitSubRule(40);}

            dbg.location(52,113);
            pushFollow(FOLLOW_rrb_in_mixture697);
            rrb135=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb135.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(52, 116);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mixture"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj136 = null;

        ChemicalChunkerParser.jjr_return jjr137 = null;

        ChemicalChunkerParser.jjs_return jjs138 = null;

        ChemicalChunkerParser.jjt_return jjt139 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj140 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn141 = null;



        try { dbg.enterRule(getGrammarFileName(), "adj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(54, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt41=6;
            try { dbg.enterDecision(41);

            switch ( input.LA(1) ) {
            case 137:
                {
                alt41=1;
                }
                break;
            case 138:
                {
                alt41=2;
                }
                break;
            case 139:
                {
                alt41=3;
                }
                break;
            case 140:
                {
                alt41=4;
                }
                break;
            case 12:
                {
                alt41=5;
                }
                break;
            case 13:
                {
                alt41=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,7);
                    pushFollow(FOLLOW_jj_in_adj705);
                    jj136=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj136.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,10);
                    pushFollow(FOLLOW_jjr_in_adj707);
                    jjr137=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr137.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,14);
                    pushFollow(FOLLOW_jjs_in_adj709);
                    jjs138=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs138.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,18);
                    pushFollow(FOLLOW_jjt_in_adj711);
                    jjt139=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt139.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,22);
                    pushFollow(FOLLOW_oscarcj_in_adj713);
                    oscarcj140=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj140.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(54,30);
                    pushFollow(FOLLOW_oscarrn_in_adj715);
                    oscarrn141=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn141.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(54, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: adv : ( rb | rbr | rbt );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb142 = null;

        ChemicalChunkerParser.rbr_return rbr143 = null;

        ChemicalChunkerParser.rbt_return rbt144 = null;



        try { dbg.enterRule(getGrammarFileName(), "adv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(56, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:5: ( rb | rbr | rbt )
            int alt42=3;
            try { dbg.enterDecision(42);

            switch ( input.LA(1) ) {
            case 165:
                {
                alt42=1;
                }
                break;
            case 166:
                {
                alt42=2;
                }
                break;
            case 167:
                {
                alt42=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(56,7);
                    pushFollow(FOLLOW_rb_in_adv723);
                    rb142=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb142.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(56,10);
                    pushFollow(FOLLOW_rbr_in_adv725);
                    rbr143=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr143.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(56,14);
                    pushFollow(FOLLOW_rbt_in_adv727);
                    rbt144=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt144.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(56, 17);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "adv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther145 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp146 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime147 = null;



        try { dbg.enterRule(getGrammarFileName(), "prepphrase");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(58, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:2: ( prepphraseOther | prepphraseTemp | prepphraseTime )
            int alt43=3;
            try { dbg.enterDecision(43);

            try {
                isCyclicDecision = true;
                alt43 = dfa43.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:5: prepphraseOther
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(59,5);
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase738);
                    prepphraseOther145=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther145.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:21: prepphraseTemp
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(59,21);
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase740);
                    prepphraseTemp146=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp146.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:36: prepphraseTime
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(59,36);
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase742);
                    prepphraseTime147=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime147.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(59, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphrase");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: prepphraseOther : ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv148 = null;

        ChemicalChunkerParser.adj_return adj149 = null;

        ChemicalChunkerParser.inAll_return inAll150 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase151 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOther");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(61, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:2: ( ( adv | adj )? ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:4: ( adv | adj )? ( inAll )+ nounphrase
            {
            dbg.location(62,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:4: ( adv | adj )?
            int alt44=3;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=165 && LA44_0<=167)) ) {
                alt44=1;
            }
            else if ( ((LA44_0>=12 && LA44_0<=13)||(LA44_0>=137 && LA44_0<=140)) ) {
                alt44=2;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:5: adv
                    {
                    dbg.location(62,5);
                    pushFollow(FOLLOW_adv_in_prepphraseOther754);
                    adv148=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv148.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:9: adj
                    {
                    dbg.location(62,9);
                    pushFollow(FOLLOW_adj_in_prepphraseOther756);
                    adj149=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj149.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}

            dbg.location(62,15);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:15: ( inAll )+
            int cnt45=0;
            try { dbg.enterSubRule(45);

            loop45:
            do {
                int alt45=2;
                try { dbg.enterDecision(45);

                int LA45_0 = input.LA(1);

                if ( ((LA45_0>=17 && LA45_0<=32)||LA45_0==136||LA45_0==171) ) {
                    alt45=1;
                }


                } finally {dbg.exitDecision(45);}

                switch (alt45) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    dbg.location(62,15);
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther760);
            	    inAll150=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll150.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt45++;
            } while (true);
            } finally {dbg.exitSubRule(45);}

            dbg.location(62,23);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOther764);
            nounphrase151=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase151.getTree());


            // AST REWRITE
            // elements: adv, inAll, nounphrase, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 62:34: -> ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
            {
                dbg.location(62,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:38: ^( NODE[\"PrepPhrase\"] ( adv )? ( adj )? ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(62,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(62,60);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:60: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(62,60);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(62,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:65: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(62,65);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(62,70);
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    dbg.location(62,70);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(62,78);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(62, 89);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOther");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof152 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase153 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseOf");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(63, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:4: inof nounphrase
            {
            dbg.location(64,4);
            pushFollow(FOLLOW_inof_in_prepphraseOf794);
            inof152=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof152.getTree());
            dbg.location(64,10);
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf797);
            nounphrase153=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase153.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 64:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                dbg.location(64,24);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(64,26);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                dbg.location(64,46);
                adaptor.addChild(root_1, stream_inof.nextTree());
                dbg.location(64,52);
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(64, 63);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseOf");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: prepphraseTime : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv154 = null;

        ChemicalChunkerParser.adj_return adj155 = null;

        ChemicalChunkerParser.inAll_return inAll156 = null;

        ChemicalChunkerParser.dt_return dt157 = null;

        ChemicalChunkerParser.adv_return adv158 = null;

        ChemicalChunkerParser.adj_return adj159 = null;

        ChemicalChunkerParser.cd_return cd160 = null;

        ChemicalChunkerParser.nntime_return nntime161 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(66, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:2: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:3: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntime
            {
            dbg.location(67,3);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:3: ( adv | adj )?
            int alt46=3;
            try { dbg.enterSubRule(46);
            try { dbg.enterDecision(46);

            try {
                isCyclicDecision = true;
                alt46 = dfa46.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:4: adv
                    {
                    dbg.location(67,4);
                    pushFollow(FOLLOW_adv_in_prepphraseTime820);
                    adv154=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv154.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: adj
                    {
                    dbg.location(67,8);
                    pushFollow(FOLLOW_adj_in_prepphraseTime822);
                    adj155=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj155.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(46);}

            dbg.location(67,14);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:14: ( inAll )?
            int alt47=2;
            try { dbg.enterSubRule(47);
            try { dbg.enterDecision(47);

            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=17 && LA47_0<=32)||LA47_0==136||LA47_0==171) ) {
                alt47=1;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(67,14);
                    pushFollow(FOLLOW_inAll_in_prepphraseTime826);
                    inAll156=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll156.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(47);}

            dbg.location(67,22);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:22: ( dt )?
            int alt48=2;
            try { dbg.enterSubRule(48);
            try { dbg.enterDecision(48);

            int LA48_0 = input.LA(1);

            if ( (LA48_0==126) ) {
                alt48=1;
            }
            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(67,22);
                    pushFollow(FOLLOW_dt_in_prepphraseTime830);
                    dt157=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt157.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(48);}

            dbg.location(67,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:26: ( adv | adj )?
            int alt49=3;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( ((LA49_0>=165 && LA49_0<=167)) ) {
                alt49=1;
            }
            else if ( ((LA49_0>=12 && LA49_0<=13)||(LA49_0>=137 && LA49_0<=140)) ) {
                alt49=2;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:27: adv
                    {
                    dbg.location(67,27);
                    pushFollow(FOLLOW_adv_in_prepphraseTime834);
                    adv158=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv158.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:31: adj
                    {
                    dbg.location(67,31);
                    pushFollow(FOLLOW_adj_in_prepphraseTime836);
                    adj159=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj159.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}

            dbg.location(67,37);
            pushFollow(FOLLOW_cd_in_prepphraseTime840);
            cd160=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd160.getTree());
            dbg.location(67,40);
            pushFollow(FOLLOW_nntime_in_prepphraseTime842);
            nntime161=nntime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntime.add(nntime161.getTree());


            // AST REWRITE
            // elements: adj, inAll, adv, cd, adv, nntime, dt, adj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 67:47: -> ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
            {
                dbg.location(67,51);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:51: ^( NODE[\"TimePhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntime )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(67,53);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                dbg.location(67,73);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:73: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(67,73);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(67,78);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:78: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(67,78);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(67,83);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:83: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(67,83);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(67,90);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:90: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(67,90);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(67,94);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:94: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(67,94);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(67,99);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:99: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(67,99);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(67,104);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(67,107);
                adaptor.addChild(root_1, stream_nntime.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(67, 114);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:1: prepphraseIN : inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin162 = null;

        ChemicalChunkerParser.molecule_return molecule163 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseIN");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(68, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:2: ( inin molecule -> ^( NODE[\"INMolecule\"] inin molecule ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:3: inin molecule
            {
            dbg.location(69,3);
            pushFollow(FOLLOW_inin_in_prepphraseIN881);
            inin162=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin162.getTree());
            dbg.location(69,8);
            pushFollow(FOLLOW_molecule_in_prepphraseIN883);
            molecule163=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule163.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 69:17: -> ^( NODE[\"INMolecule\"] inin molecule )
            {
                dbg.location(69,21);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:21: ^( NODE[\"INMolecule\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(69,23);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "INMolecule"), root_1);

                dbg.location(69,43);
                adaptor.addChild(root_1, stream_inin.nextTree());
                dbg.location(69,49);
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(69, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseIN");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in164 = null;

        ChemicalChunkerParser.inafter_return inafter165 = null;

        ChemicalChunkerParser.inas_return inas166 = null;

        ChemicalChunkerParser.inbefore_return inbefore167 = null;

        ChemicalChunkerParser.inby_return inby168 = null;

        ChemicalChunkerParser.infor_return infor169 = null;

        ChemicalChunkerParser.infrom_return infrom170 = null;

        ChemicalChunkerParser.inin_return inin171 = null;

        ChemicalChunkerParser.ininto_return ininto172 = null;

        ChemicalChunkerParser.inof_return inof173 = null;

        ChemicalChunkerParser.inoff_return inoff174 = null;

        ChemicalChunkerParser.inon_return inon175 = null;

        ChemicalChunkerParser.inover_return inover176 = null;

        ChemicalChunkerParser.inunder_return inunder177 = null;

        ChemicalChunkerParser.invia_return invia178 = null;

        ChemicalChunkerParser.inwith_return inwith179 = null;

        ChemicalChunkerParser.inwithout_return inwithout180 = null;

        ChemicalChunkerParser.to_return to181 = null;



        try { dbg.enterRule(getGrammarFileName(), "inAll");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(72, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt50=18;
            try { dbg.enterDecision(50);

            switch ( input.LA(1) ) {
            case 136:
                {
                alt50=1;
                }
                break;
            case 19:
                {
                alt50=2;
                }
                break;
            case 17:
                {
                alt50=3;
                }
                break;
            case 18:
                {
                alt50=4;
                }
                break;
            case 24:
                {
                alt50=5;
                }
                break;
            case 28:
                {
                alt50=6;
                }
                break;
            case 29:
                {
                alt50=7;
                }
                break;
            case 20:
                {
                alt50=8;
                }
                break;
            case 21:
                {
                alt50=9;
                }
                break;
            case 26:
                {
                alt50=10;
                }
                break;
            case 32:
                {
                alt50=11;
                }
                break;
            case 27:
                {
                alt50=12;
                }
                break;
            case 31:
                {
                alt50=13;
                }
                break;
            case 30:
                {
                alt50=14;
                }
                break;
            case 25:
                {
                alt50=15;
                }
                break;
            case 22:
                {
                alt50=16;
                }
                break;
            case 23:
                {
                alt50=17;
                }
                break;
            case 171:
                {
                alt50=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,9);
                    pushFollow(FOLLOW_in_in_inAll906);
                    in164=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in164.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,12);
                    pushFollow(FOLLOW_inafter_in_inAll908);
                    inafter165=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter165.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,20);
                    pushFollow(FOLLOW_inas_in_inAll910);
                    inas166=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas166.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,25);
                    pushFollow(FOLLOW_inbefore_in_inAll912);
                    inbefore167=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore167.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,34);
                    pushFollow(FOLLOW_inby_in_inAll914);
                    inby168=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby168.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,39);
                    pushFollow(FOLLOW_infor_in_inAll916);
                    infor169=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor169.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,45);
                    pushFollow(FOLLOW_infrom_in_inAll918);
                    infrom170=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom170.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,52);
                    pushFollow(FOLLOW_inin_in_inAll920);
                    inin171=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin171.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,57);
                    pushFollow(FOLLOW_ininto_in_inAll922);
                    ininto172=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto172.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,64);
                    pushFollow(FOLLOW_inof_in_inAll924);
                    inof173=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof173.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,69);
                    pushFollow(FOLLOW_inoff_in_inAll926);
                    inoff174=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff174.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,75);
                    pushFollow(FOLLOW_inon_in_inAll928);
                    inon175=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon175.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,80);
                    pushFollow(FOLLOW_inover_in_inAll930);
                    inover176=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover176.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,87);
                    pushFollow(FOLLOW_inunder_in_inAll932);
                    inunder177=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder177.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,95);
                    pushFollow(FOLLOW_invia_in_inAll934);
                    invia178=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia178.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,101);
                    pushFollow(FOLLOW_inwith_in_inAll936);
                    inwith179=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith179.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,108);
                    pushFollow(FOLLOW_inwithout_in_inAll938);
                    inwithout180=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout180.getTree());

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(72,118);
                    pushFollow(FOLLOW_to_in_inAll940);
                    to181=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to181.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(72, 120);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inAll");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv182 = null;

        ChemicalChunkerParser.adj_return adj183 = null;

        ChemicalChunkerParser.inAll_return inAll184 = null;

        ChemicalChunkerParser.dt_return dt185 = null;

        ChemicalChunkerParser.adv_return adv186 = null;

        ChemicalChunkerParser.adj_return adj187 = null;

        ChemicalChunkerParser.cd_return cd188 = null;

        ChemicalChunkerParser.nntemp_return nntemp189 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "prepphraseTemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(73, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? cd nntemp
            {
            dbg.location(73,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:18: ( adv | adj )?
            int alt51=3;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51);

            try {
                isCyclicDecision = true;
                alt51 = dfa51.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:19: adv
                    {
                    dbg.location(73,19);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp948);
                    adv182=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv182.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:23: adj
                    {
                    dbg.location(73,23);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp950);
                    adj183=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj183.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(73,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:29: ( inAll )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52);

            int LA52_0 = input.LA(1);

            if ( ((LA52_0>=17 && LA52_0<=32)||LA52_0==136||LA52_0==171) ) {
                alt52=1;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    dbg.location(73,29);
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp954);
                    inAll184=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll184.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(73,36);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:36: ( dt )?
            int alt53=2;
            try { dbg.enterSubRule(53);
            try { dbg.enterDecision(53);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==126) ) {
                alt53=1;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    dbg.location(73,36);
                    pushFollow(FOLLOW_dt_in_prepphraseTemp957);
                    dt185=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt185.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(53);}

            dbg.location(73,40);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:40: ( adv | adj )?
            int alt54=3;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54);

            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=165 && LA54_0<=167)) ) {
                alt54=1;
            }
            else if ( ((LA54_0>=12 && LA54_0<=13)||(LA54_0>=137 && LA54_0<=140)) ) {
                alt54=2;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:41: adv
                    {
                    dbg.location(73,41);
                    pushFollow(FOLLOW_adv_in_prepphraseTemp961);
                    adv186=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv186.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:45: adj
                    {
                    dbg.location(73,45);
                    pushFollow(FOLLOW_adj_in_prepphraseTemp963);
                    adj187=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj187.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(73,51);
            pushFollow(FOLLOW_cd_in_prepphraseTemp967);
            cd188=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd188.getTree());
            dbg.location(73,54);
            pushFollow(FOLLOW_nntemp_in_prepphraseTemp969);
            nntemp189=nntemp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nntemp.add(nntemp189.getTree());


            // AST REWRITE
            // elements: dt, nntemp, adj, adv, cd, adv, adj, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 73:61: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
            {
                dbg.location(73,65);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:65: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? cd nntemp )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(73,67);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                dbg.location(73,87);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:87: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(73,87);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(73,92);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:92: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(73,92);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(73,98);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:98: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    dbg.location(73,98);
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                dbg.location(73,106);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:106: ( dt )?
                if ( stream_dt.hasNext() ) {
                    dbg.location(73,106);
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                dbg.location(73,110);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:110: ( adv )?
                if ( stream_adv.hasNext() ) {
                    dbg.location(73,110);
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                dbg.location(73,115);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:115: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(73,115);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(73,120);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(73,123);
                adaptor.addChild(root_1, stream_nntemp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(73, 130);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prepphraseTemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class mmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: mmol : cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) ;
    public final ChemicalChunkerParser.mmol_return mmol() throws RecognitionException {
        ChemicalChunkerParser.mmol_return retval = new ChemicalChunkerParser.mmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd190 = null;

        ChemicalChunkerParser.nnmol_return nnmol191 = null;


        RewriteRuleSubtreeStream stream_nnmol=new RewriteRuleSubtreeStream(adaptor,"rule nnmol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "mmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(76, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:6: ( cd nnmol -> ^( NODE[\"MMOL\"] cd nnmol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:8: cd nnmol
            {
            dbg.location(76,8);
            pushFollow(FOLLOW_cd_in_mmol1014);
            cd190=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd190.getTree());
            dbg.location(76,11);
            pushFollow(FOLLOW_nnmol_in_mmol1016);
            nnmol191=nnmol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmol.add(nnmol191.getTree());


            // AST REWRITE
            // elements: cd, nnmol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 76:17: -> ^( NODE[\"MMOL\"] cd nnmol )
            {
                dbg.location(76,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:20: ^( NODE[\"MMOL\"] cd nnmol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(76,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MMOL"), root_1);

                dbg.location(76,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(76,40);
                adaptor.addChild(root_1, stream_nnmol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(76, 47);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "mmol"

    public static class gram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:1: gram : cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) ;
    public final ChemicalChunkerParser.gram_return gram() throws RecognitionException {
        ChemicalChunkerParser.gram_return retval = new ChemicalChunkerParser.gram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd192 = null;

        ChemicalChunkerParser.nngram_return nngram193 = null;


        RewriteRuleSubtreeStream stream_nngram=new RewriteRuleSubtreeStream(adaptor,"rule nngram");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "gram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(77, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:6: ( cd nngram -> ^( NODE[\"GRAM\"] cd nngram ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:8: cd nngram
            {
            dbg.location(77,8);
            pushFollow(FOLLOW_cd_in_gram1037);
            cd192=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd192.getTree());
            dbg.location(77,11);
            pushFollow(FOLLOW_nngram_in_gram1039);
            nngram193=nngram();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nngram.add(nngram193.getTree());


            // AST REWRITE
            // elements: nngram, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 77:17: -> ^( NODE[\"GRAM\"] cd nngram )
            {
                dbg.location(77,20);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:20: ^( NODE[\"GRAM\"] cd nngram )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(77,22);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "GRAM"), root_1);

                dbg.location(77,37);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(77,40);
                adaptor.addChild(root_1, stream_nngram.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(77, 48);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "gram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "gram"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:1: percent : cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd194 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent195 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "percent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(78, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:9: ( cd nnpercent -> ^( NODE[\"PERCENT\"] cd nnpercent ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:11: cd nnpercent
            {
            dbg.location(78,11);
            pushFollow(FOLLOW_cd_in_percent1060);
            cd194=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd194.getTree());
            dbg.location(78,14);
            pushFollow(FOLLOW_nnpercent_in_percent1062);
            nnpercent195=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent195.getTree());


            // AST REWRITE
            // elements: nnpercent, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 78:24: -> ^( NODE[\"PERCENT\"] cd nnpercent )
            {
                dbg.location(78,27);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:27: ^( NODE[\"PERCENT\"] cd nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(78,29);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                dbg.location(78,47);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(78,50);
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(78, 61);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "percent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd196 = null;

        ChemicalChunkerParser.nnvol_return nnvol197 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try { dbg.enterRule(getGrammarFileName(), "volume");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(79, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:10: cd nnvol
            {
            dbg.location(79,10);
            pushFollow(FOLLOW_cd_in_volume1083);
            cd196=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd196.getTree());
            dbg.location(79,13);
            pushFollow(FOLLOW_nnvol_in_volume1085);
            nnvol197=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol197.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 79:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                dbg.location(79,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(79,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                dbg.location(79,41);
                adaptor.addChild(root_1, stream_cd.nextTree());
                dbg.location(79,44);
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(79, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "volume");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "volume"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: apparatus : ( measurements | adj | jj | nn )+ ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements198 = null;

        ChemicalChunkerParser.adj_return adj199 = null;

        ChemicalChunkerParser.jj_return jj200 = null;

        ChemicalChunkerParser.nn_return nn201 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus202 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try { dbg.enterRule(getGrammarFileName(), "apparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(81, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:2: ( ( measurements | adj | jj | nn )+ ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:4: ( measurements | adj | jj | nn )+ ( nnapparatus )+
            {
            dbg.location(82,4);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:4: ( measurements | adj | jj | nn )+
            int cnt55=0;
            try { dbg.enterSubRule(55);

            loop55:
            do {
                int alt55=5;
                try { dbg.enterDecision(55);

                switch ( input.LA(1) ) {
                case 121:
                    {
                    alt55=1;
                    }
                    break;
                case 137:
                    {
                    int LA55_3 = input.LA(2);

                    if ( (LA55_3==TOKEN) ) {
                        int LA55_6 = input.LA(3);

                        if ( (synpred174_ChemicalChunker()) ) {
                            alt55=2;
                        }
                        else if ( (synpred175_ChemicalChunker()) ) {
                            alt55=3;
                        }


                    }


                    }
                    break;
                case 12:
                case 13:
                case 138:
                case 139:
                case 140:
                    {
                    alt55=2;
                    }
                    break;
                case 143:
                    {
                    alt55=4;
                    }
                    break;

                }

                } finally {dbg.exitDecision(55);}

                switch (alt55) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:5: measurements
            	    {
            	    dbg.location(82,5);
            	    pushFollow(FOLLOW_measurements_in_apparatus1109);
            	    measurements198=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements198.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:18: adj
            	    {
            	    dbg.location(82,18);
            	    pushFollow(FOLLOW_adj_in_apparatus1111);
            	    adj199=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_adj.add(adj199.getTree());

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:22: jj
            	    {
            	    dbg.location(82,22);
            	    pushFollow(FOLLOW_jj_in_apparatus1113);
            	    jj200=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_jj.add(jj200.getTree());

            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:25: nn
            	    {
            	    dbg.location(82,25);
            	    pushFollow(FOLLOW_nn_in_apparatus1115);
            	    nn201=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nn.add(nn201.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt55++;
            } while (true);
            } finally {dbg.exitSubRule(55);}

            dbg.location(82,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:30: ( nnapparatus )+
            int cnt56=0;
            try { dbg.enterSubRule(56);

            loop56:
            do {
                int alt56=2;
                try { dbg.enterDecision(56);

                int LA56_0 = input.LA(1);

                if ( (LA56_0==67) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==TOKEN) ) {
                        int LA56_3 = input.LA(3);

                        if ( (synpred177_ChemicalChunker()) ) {
                            alt56=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(56);}

                switch (alt56) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    dbg.location(82,30);
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1119);
            	    nnapparatus202=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus202.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt56++;
            } while (true);
            } finally {dbg.exitSubRule(56);}



            // AST REWRITE
            // elements: adj, measurements, nnapparatus, nn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 82:42: -> ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
            {
                dbg.location(82,45);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:45: ^( NODE[\"APPARATUS\"] ( measurements )? ( adj )? ( nn )? ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(82,47);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                dbg.location(82,67);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:67: ( measurements )?
                if ( stream_measurements.hasNext() ) {
                    dbg.location(82,67);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_measurements.reset();
                dbg.location(82,81);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:81: ( adj )?
                if ( stream_adj.hasNext() ) {
                    dbg.location(82,81);
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                dbg.location(82,86);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:86: ( nn )?
                if ( stream_nn.hasNext() ) {
                    dbg.location(82,86);
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                dbg.location(82,90);
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    dbg.location(82,90);
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(82, 104);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: measurements : ( mmol | gram | percent | volume );
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mmol_return mmol203 = null;

        ChemicalChunkerParser.gram_return gram204 = null;

        ChemicalChunkerParser.percent_return percent205 = null;

        ChemicalChunkerParser.volume_return volume206 = null;



        try { dbg.enterRule(getGrammarFileName(), "measurements");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(83, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:2: ( mmol | gram | percent | volume )
            int alt57=4;
            try { dbg.enterDecision(57);

            int LA57_0 = input.LA(1);

            if ( (LA57_0==121) ) {
                int LA57_1 = input.LA(2);

                if ( (LA57_1==TOKEN) ) {
                    switch ( input.LA(3) ) {
                    case 102:
                        {
                        alt57=3;
                        }
                        break;
                    case 36:
                        {
                        alt57=1;
                        }
                        break;
                    case 35:
                        {
                        alt57=2;
                        }
                        break;
                    case 39:
                        {
                        alt57=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:3: mmol
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(84,3);
                    pushFollow(FOLLOW_mmol_in_measurements1148);
                    mmol203=mmol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mmol203.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:8: gram
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(84,8);
                    pushFollow(FOLLOW_gram_in_measurements1150);
                    gram204=gram();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gram204.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:13: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(84,13);
                    pushFollow(FOLLOW_percent_in_measurements1152);
                    percent205=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent205.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:21: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(84,21);
                    pushFollow(FOLLOW_volume_in_measurements1154);
                    volume206=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume206.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(84, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "measurements");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "measurements"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1207 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2208 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3209 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm210 = null;

        ChemicalChunkerParser.rrb_return rrb211 = null;



        try { dbg.enterRule(getGrammarFileName(), "oscarCompound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(87, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm ) ( rrb )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(87,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )
            int alt58=4;
            try { dbg.enterSubRule(58);
            try { dbg.enterDecision(58);

            try {
                isCyclicDecision = true;
                alt58 = dfa58.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:19: oscarCompound1
                    {
                    dbg.location(87,19);
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1166);
                    oscarCompound1207=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1207.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:34: oscarCompound2
                    {
                    dbg.location(87,34);
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1168);
                    oscarCompound2208=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2208.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:49: oscarCompound3
                    {
                    dbg.location(87,49);
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1170);
                    oscarCompound3209=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3209.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:64: oscarcm
                    {
                    dbg.location(87,64);
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1172);
                    oscarcm210=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm210.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(58);}

            dbg.location(87,73);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:73: ( rrb )?
            int alt59=2;
            try { dbg.enterSubRule(59);
            try { dbg.enterDecision(59);

            int LA59_0 = input.LA(1);

            if ( (LA59_0==106) ) {
                int LA59_1 = input.LA(2);

                if ( (LA59_1==TOKEN) ) {
                    int LA59_3 = input.LA(3);

                    if ( (synpred184_ChemicalChunker()) ) {
                        alt59=1;
                    }
                }
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rrb
                    {
                    dbg.location(87,73);
                    pushFollow(FOLLOW_rrb_in_oscarCompound1175);
                    rrb211=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb211.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(59);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(87, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: oscarCompound3 : oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm212 = null;

        ChemicalChunkerParser.dash_return dash213 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm214 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(89, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:16: ( oscarcm dash oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:18: oscarcm dash oscarcm
            {
            dbg.location(89,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31184);
            oscarcm212=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm212.getTree());
            dbg.location(89,26);
            pushFollow(FOLLOW_dash_in_oscarCompound31186);
            dash213=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dash.add(dash213.getTree());
            dbg.location(89,31);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31188);
            oscarcm214=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm214.getTree());


            // AST REWRITE
            // elements: dash, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 89:39: -> ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
            {
                dbg.location(89,42);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:42: ^( NODE[\"OSCARCM\"] oscarcm dash oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(89,44);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(89,61);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(89,69);
                adaptor.addChild(root_1, stream_dash.nextTree());
                dbg.location(89,74);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(89, 82);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm215 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm216 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(90, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:18: oscarcm ( oscarcm )+
            {
            dbg.location(90,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21209);
            oscarcm215=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm215.getTree());
            dbg.location(90,26);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:26: ( oscarcm )+
            int cnt60=0;
            try { dbg.enterSubRule(60);

            loop60:
            do {
                int alt60=2;
                try { dbg.enterDecision(60);

                int LA60_0 = input.LA(1);

                if ( (LA60_0==52) ) {
                    int LA60_2 = input.LA(2);

                    if ( (LA60_2==TOKEN) ) {
                        int LA60_3 = input.LA(3);

                        if ( (synpred185_ChemicalChunker()) ) {
                            alt60=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(60);}

                switch (alt60) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    dbg.location(90,26);
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21211);
            	    oscarcm216=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm216.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt60 >= 1 ) break loop60;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(60, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt60++;
            } while (true);
            } finally {dbg.exitSubRule(60);}



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                dbg.location(90,38);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(90,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(90,57);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(90,65);
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    dbg.location(90,65);
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(90, 74);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm217 = null;

        ChemicalChunkerParser.jj_return jj218 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm219 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try { dbg.enterRule(getGrammarFileName(), "oscarCompound1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(91, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:18: oscarcm jj oscarcm
            {
            dbg.location(91,18);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11232);
            oscarcm217=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm217.getTree());
            dbg.location(91,26);
            pushFollow(FOLLOW_jj_in_oscarCompound11234);
            jj218=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj218.getTree());
            dbg.location(91,29);
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11236);
            oscarcm219=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm219.getTree());


            // AST REWRITE
            // elements: oscarcm, jj, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 91:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                dbg.location(91,40);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(91,42);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                dbg.location(91,59);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                dbg.location(91,67);
                adaptor.addChild(root_1, stream_jj.nextTree());
                dbg.location(91,70);
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(91, 78);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarCompound1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: moleculeamount1 : measurements ( amount )? inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements220 = null;

        ChemicalChunkerParser.amount_return amount221 = null;

        ChemicalChunkerParser.inof_return inof222 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound223 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(92, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:2: ( measurements ( amount )? inof oscarCompound )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:3: measurements ( amount )? inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(93,3);
            pushFollow(FOLLOW_measurements_in_moleculeamount11257);
            measurements220=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements220.getTree());
            dbg.location(93,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:16: ( amount )?
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61);

            int LA61_0 = input.LA(1);

            if ( (LA61_0==105) ) {
                alt61=1;
            }
            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(93,16);
                    pushFollow(FOLLOW_amount_in_moleculeamount11259);
                    amount221=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount221.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}

            dbg.location(93,24);
            pushFollow(FOLLOW_inof_in_moleculeamount11262);
            inof222=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof222.getTree());
            dbg.location(93,29);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11264);
            oscarCompound223=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(93, 42);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: moleculeamount2 : oscarCompound ( amount )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound224 = null;

        ChemicalChunkerParser.amount_return amount225 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(94, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:2: ( oscarCompound ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:3: oscarCompound ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(95,3);
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount21272);
            oscarCompound224=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound224.getTree());
            dbg.location(95,18);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:18: ( amount )*
            try { dbg.enterSubRule(62);

            loop62:
            do {
                int alt62=2;
                try { dbg.enterDecision(62);

                try {
                    isCyclicDecision = true;
                    alt62 = dfa62.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(62);}

                switch (alt62) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(95,18);
            	    pushFollow(FOLLOW_amount_in_moleculeamount21275);
            	    amount225=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount225.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);
            } finally {dbg.exitSubRule(62);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(95, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1226 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2227 = null;



        try { dbg.enterRule(getGrammarFileName(), "moleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(96, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:16: ( moleculeamount1 | moleculeamount2 )
            int alt63=2;
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==121) ) {
                alt63=1;
            }
            else if ( (LA63_0==52) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(96,18);
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1285);
                    moleculeamount1226=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1226.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(96,36);
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1289);
                    moleculeamount2227=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2227.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(96, 52);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount228 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "molecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(97, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:5: moleculeamount
            {
            dbg.location(98,5);
            pushFollow(FOLLOW_moleculeamount_in_molecule1310);
            moleculeamount228=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount228.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 98:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                dbg.location(98,22);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(98,24);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                dbg.location(98,42);
                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(98, 58);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "molecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:1: unnamedmoleculeamount1 : measurements ( amount )? inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements229 = null;

        ChemicalChunkerParser.amount_return amount230 = null;

        ChemicalChunkerParser.inof_return inof231 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd232 = null;

        ChemicalChunkerParser.cd_return cd233 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount1");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(100, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:2: ( measurements ( amount )? inof ( oscarcd | cd ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:3: measurements ( amount )? inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(101,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount11329);
            measurements229=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements229.getTree());
            dbg.location(101,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:16: ( amount )?
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64);

            int LA64_0 = input.LA(1);

            if ( (LA64_0==105) ) {
                alt64=1;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(101,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount11331);
                    amount230=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount230.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}

            dbg.location(101,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11334);
            inof231=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof231.getTree());
            dbg.location(101,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:29: ( oscarcd | cd )
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65);

            int LA65_0 = input.LA(1);

            if ( (LA65_0==11) ) {
                alt65=1;
            }
            else if ( (LA65_0==121) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:30: oscarcd
                    {
                    dbg.location(101,30);
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11337);
                    oscarcd232=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd232.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:38: cd
                    {
                    dbg.location(101,38);
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11339);
                    cd233=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd233.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(101, 41);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount1");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:1: unnamedmoleculeamount2 : oscarcd ( amount )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd234 = null;

        ChemicalChunkerParser.amount_return amount235 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount2");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(102, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:2: ( oscarcd ( amount )* )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:3: oscarcd ( amount )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(103,3);
            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21348);
            oscarcd234=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd234.getTree());
            dbg.location(103,11);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:11: ( amount )*
            try { dbg.enterSubRule(66);

            loop66:
            do {
                int alt66=2;
                try { dbg.enterDecision(66);

                try {
                    isCyclicDecision = true;
                    alt66 = dfa66.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(66);}

                switch (alt66) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
            	    {
            	    dbg.location(103,11);
            	    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount21350);
            	    amount235=amount();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount235.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);
            } finally {dbg.exitSubRule(66);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(103, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount2");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: unnamedmoleculeamount3 : measurements ( amount )? inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements236 = null;

        ChemicalChunkerParser.amount_return amount237 = null;

        ChemicalChunkerParser.inof_return inof238 = null;

        ChemicalChunkerParser.jj_return jj239 = null;

        ChemicalChunkerParser.noun_return noun240 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount3");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(104, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:2: ( measurements ( amount )? inof ( ( jj )? noun )+ )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:3: measurements ( amount )? inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(105,3);
            pushFollow(FOLLOW_measurements_in_unnamedmoleculeamount31360);
            measurements236=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements236.getTree());
            dbg.location(105,16);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:16: ( amount )?
            int alt67=2;
            try { dbg.enterSubRule(67);
            try { dbg.enterDecision(67);

            int LA67_0 = input.LA(1);

            if ( (LA67_0==105) ) {
                alt67=1;
            }
            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: amount
                    {
                    dbg.location(105,16);
                    pushFollow(FOLLOW_amount_in_unnamedmoleculeamount31362);
                    amount237=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount237.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(67);}

            dbg.location(105,24);
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31365);
            inof238=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof238.getTree());
            dbg.location(105,29);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:29: ( ( jj )? noun )+
            int cnt69=0;
            try { dbg.enterSubRule(69);

            loop69:
            do {
                int alt69=2;
                try { dbg.enterDecision(69);

                try {
                    isCyclicDecision = true;
                    alt69 = dfa69.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(69);}

                switch (alt69) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( jj )? noun
            	    {
            	    dbg.location(105,30);
            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( jj )?
            	    int alt68=2;
            	    try { dbg.enterSubRule(68);
            	    try { dbg.enterDecision(68);

            	    int LA68_0 = input.LA(1);

            	    if ( (LA68_0==137) ) {
            	        int LA68_1 = input.LA(2);

            	        if ( (LA68_1==TOKEN) ) {
            	            int LA68_3 = input.LA(3);

            	            if ( (synpred193_ChemicalChunker()) ) {
            	                alt68=1;
            	            }
            	        }
            	    }
            	    } finally {dbg.exitDecision(68);}

            	    switch (alt68) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            dbg.location(105,30);
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31368);
            	            jj239=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj239.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(68);}

            	    dbg.location(105,34);
            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31371);
            	    noun240=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun240.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt69++;
            } while (true);
            } finally {dbg.exitSubRule(69);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(105, 40);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount3");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1241 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2242 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3243 = null;



        try { dbg.enterRule(getGrammarFileName(), "unnamedmoleculeamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(107, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt70=3;
            try { dbg.enterDecision(70);

            try {
                isCyclicDecision = true;
                alt70 = dfa70.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(108,3);
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1382);
                    unnamedmoleculeamount1241=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1241.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(108,28);
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1386);
                    unnamedmoleculeamount2242=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2242.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(108,53);
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1390);
                    unnamedmoleculeamount3243=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(108, 76);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmoleculeamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount244 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try { dbg.enterRule(getGrammarFileName(), "unnamedmolecule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(111, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:4: unnamedmoleculeamount
            {
            dbg.location(112,4);
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1403);
            unnamedmoleculeamount244=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount244.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 112:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                dbg.location(112,29);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(112,31);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                dbg.location(112,55);
                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(112, 77);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unnamedmolecule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: amount : lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb245 = null;

        ChemicalChunkerParser.measurements_return measurements246 = null;

        ChemicalChunkerParser.comma_return comma247 = null;

        ChemicalChunkerParser.measurements_return measurements248 = null;

        ChemicalChunkerParser.rrb_return rrb249 = null;


        RewriteRuleSubtreeStream stream_measurements=new RewriteRuleSubtreeStream(adaptor,"rule measurements");
        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try { dbg.enterRule(getGrammarFileName(), "amount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(114, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:9: ( lrb measurements ( comma measurements )* rrb -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb ) )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:11: lrb measurements ( comma measurements )* rrb
            {
            dbg.location(114,11);
            pushFollow(FOLLOW_lrb_in_amount1424);
            lrb245=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb245.getTree());
            dbg.location(114,15);
            pushFollow(FOLLOW_measurements_in_amount1426);
            measurements246=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measurements.add(measurements246.getTree());
            dbg.location(114,28);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:28: ( comma measurements )*
            try { dbg.enterSubRule(71);

            loop71:
            do {
                int alt71=2;
                try { dbg.enterDecision(71);

                int LA71_0 = input.LA(1);

                if ( (LA71_0==97) ) {
                    alt71=1;
                }


                } finally {dbg.exitDecision(71);}

                switch (alt71) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:29: comma measurements
            	    {
            	    dbg.location(114,29);
            	    pushFollow(FOLLOW_comma_in_amount1429);
            	    comma247=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma247.getTree());
            	    dbg.location(114,36);
            	    pushFollow(FOLLOW_measurements_in_amount1432);
            	    measurements248=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_measurements.add(measurements248.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);
            } finally {dbg.exitSubRule(71);}

            dbg.location(114,52);
            pushFollow(FOLLOW_rrb_in_amount1437);
            rrb249=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb249.getTree());


            // AST REWRITE
            // elements: measurements, lrb, rrb, comma, measurements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 114:56: -> ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
            {
                dbg.location(114,61);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:61: ^( NODE[\"AMOUNT\"] lrb measurements ( comma measurements )* rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(114,63);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                dbg.location(114,79);
                adaptor.addChild(root_1, stream_lrb.nextTree());
                dbg.location(114,83);
                adaptor.addChild(root_1, stream_measurements.nextTree());
                dbg.location(114,96);
                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:96: ( comma measurements )*
                while ( stream_comma.hasNext()||stream_measurements.hasNext() ) {
                    dbg.location(114,97);
                    adaptor.addChild(root_1, stream_comma.nextTree());
                    dbg.location(114,104);
                    adaptor.addChild(root_1, stream_measurements.nextTree());

                }
                stream_comma.reset();
                stream_measurements.reset();
                dbg.location(114,120);
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(114, 124);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "amount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "amount"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral250 = null;

        ChemicalChunkerParser.nn_return nn251 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod252 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd253 = null;

        ChemicalChunkerParser.cd_return cd254 = null;



        try { dbg.enterRule(getGrammarFileName(), "method");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(116, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(117,5);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:5: ( nngeneral | nn )?
            int alt72=3;
            try { dbg.enterSubRule(72);
            try { dbg.enterDecision(72);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==43) ) {
                alt72=1;
            }
            else if ( (LA72_0==143) ) {
                alt72=2;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:6: nngeneral
                    {
                    dbg.location(117,6);
                    pushFollow(FOLLOW_nngeneral_in_method1474);
                    nngeneral250=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral250.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:16: nn
                    {
                    dbg.location(117,16);
                    pushFollow(FOLLOW_nn_in_method1476);
                    nn251=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn251.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(72);}

            dbg.location(117,21);
            pushFollow(FOLLOW_nnmethod_in_method1480);
            nnmethod252=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod252.getTree());
            dbg.location(117,30);
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:30: ( oscarcd | cd )?
            int alt73=3;
            try { dbg.enterSubRule(73);
            try { dbg.enterDecision(73);

            int LA73_0 = input.LA(1);

            if ( (LA73_0==11) ) {
                alt73=1;
            }
            else if ( (LA73_0==121) ) {
                alt73=2;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:31: oscarcd
                    {
                    dbg.location(117,31);
                    pushFollow(FOLLOW_oscarcd_in_method1483);
                    oscarcd253=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd253.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:39: cd
                    {
                    dbg.location(117,39);
                    pushFollow(FOLLOW_cd_in_method1485);
                    cd254=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd254.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(73);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(117, 45);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "method");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "method"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal255=null;
        Token TOKEN256=null;

        Object string_literal255_tree=null;
        Object TOKEN256_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(122, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:8: ( 'OSCAR-CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(122,9);
            string_literal255=(Token)match(input,11,FOLLOW_11_in_oscarcd1506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal255_tree = (Object)adaptor.create(string_literal255);
            adaptor.addChild(root_0, string_literal255_tree);
            }
            dbg.location(122,20);
            TOKEN256=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd1508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN256_tree = (Object)adaptor.create(TOKEN256);
            adaptor.addChild(root_0, TOKEN256_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(122, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal257=null;
        Token TOKEN258=null;

        Object string_literal257_tree=null;
        Object TOKEN258_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(123, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:8: ( 'OSCAR-CJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(123,9);
            string_literal257=(Token)match(input,12,FOLLOW_12_in_oscarcj1513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal257_tree = (Object)adaptor.create(string_literal257);
            adaptor.addChild(root_0, string_literal257_tree);
            }
            dbg.location(123,20);
            TOKEN258=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj1515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN258_tree = (Object)adaptor.create(TOKEN258);
            adaptor.addChild(root_0, TOKEN258_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(123, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal259=null;
        Token TOKEN260=null;

        Object string_literal259_tree=null;
        Object TOKEN260_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarrn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(124, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:8: ( 'OSCAR-RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(124,9);
            string_literal259=(Token)match(input,13,FOLLOW_13_in_oscarrn1520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal259_tree = (Object)adaptor.create(string_literal259);
            adaptor.addChild(root_0, string_literal259_tree);
            }
            dbg.location(124,20);
            TOKEN260=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn1522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN260_tree = (Object)adaptor.create(TOKEN260);
            adaptor.addChild(root_0, TOKEN260_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(124, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarrn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal261=null;
        Token TOKEN262=null;

        Object string_literal261_tree=null;
        Object TOKEN262_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscaront");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(125, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:9: ( 'OSCAR-ONT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(125,11);
            string_literal261=(Token)match(input,14,FOLLOW_14_in_oscaront1528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal261_tree = (Object)adaptor.create(string_literal261);
            adaptor.addChild(root_0, string_literal261_tree);
            }
            dbg.location(125,23);
            TOKEN262=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront1530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN262_tree = (Object)adaptor.create(TOKEN262);
            adaptor.addChild(root_0, TOKEN262_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(125, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscaront");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal263=null;
        Token TOKEN264=null;

        Object string_literal263_tree=null;
        Object TOKEN264_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "tmunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(126, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:10: ( 'TM-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(126,11);
            string_literal263=(Token)match(input,15,FOLLOW_15_in_tmunicode1535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal263_tree = (Object)adaptor.create(string_literal263);
            adaptor.addChild(root_0, string_literal263_tree);
            }
            dbg.location(126,24);
            TOKEN264=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode1537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN264_tree = (Object)adaptor.create(TOKEN264);
            adaptor.addChild(root_0, TOKEN264_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(126, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "tmunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal265=null;
        Token TOKEN266=null;

        Object string_literal265_tree=null;
        Object TOKEN266_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cdunicode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(127, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:10: ( 'CD-UNICODE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(127,11);
            string_literal265=(Token)match(input,16,FOLLOW_16_in_cdunicode1542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal265_tree = (Object)adaptor.create(string_literal265);
            adaptor.addChild(root_0, string_literal265_tree);
            }
            dbg.location(127,24);
            TOKEN266=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode1544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN266_tree = (Object)adaptor.create(TOKEN266);
            adaptor.addChild(root_0, TOKEN266_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(127, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cdunicode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal267=null;
        Token TOKEN268=null;

        Object string_literal267_tree=null;
        Object TOKEN268_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inas");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(130, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:5: ( 'IN-AS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(130,6);
            string_literal267=(Token)match(input,17,FOLLOW_17_in_inas1551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal267_tree = (Object)adaptor.create(string_literal267);
            adaptor.addChild(root_0, string_literal267_tree);
            }
            dbg.location(130,14);
            TOKEN268=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas1553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN268_tree = (Object)adaptor.create(TOKEN268);
            adaptor.addChild(root_0, TOKEN268_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(130, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inas");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal269=null;
        Token TOKEN270=null;

        Object string_literal269_tree=null;
        Object TOKEN270_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inbefore");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(131, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( 'IN-BEFORE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(131,10);
            string_literal269=(Token)match(input,18,FOLLOW_18_in_inbefore1558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal269_tree = (Object)adaptor.create(string_literal269);
            adaptor.addChild(root_0, string_literal269_tree);
            }
            dbg.location(131,22);
            TOKEN270=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore1560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN270_tree = (Object)adaptor.create(TOKEN270);
            adaptor.addChild(root_0, TOKEN270_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(131, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inbefore");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal271=null;
        Token TOKEN272=null;

        Object string_literal271_tree=null;
        Object TOKEN272_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inafter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(132, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:8: ( 'IN-AFTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(132,9);
            string_literal271=(Token)match(input,19,FOLLOW_19_in_inafter1565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal271_tree = (Object)adaptor.create(string_literal271);
            adaptor.addChild(root_0, string_literal271_tree);
            }
            dbg.location(132,20);
            TOKEN272=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter1567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN272_tree = (Object)adaptor.create(TOKEN272);
            adaptor.addChild(root_0, TOKEN272_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(132, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inafter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal273=null;
        Token TOKEN274=null;

        Object string_literal273_tree=null;
        Object TOKEN274_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(133, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:5: ( 'IN-IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(133,6);
            string_literal273=(Token)match(input,20,FOLLOW_20_in_inin1572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal273_tree = (Object)adaptor.create(string_literal273);
            adaptor.addChild(root_0, string_literal273_tree);
            }
            dbg.location(133,14);
            TOKEN274=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin1574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN274_tree = (Object)adaptor.create(TOKEN274);
            adaptor.addChild(root_0, TOKEN274_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(133, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal275=null;
        Token TOKEN276=null;

        Object string_literal275_tree=null;
        Object TOKEN276_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ininto");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(134, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:7: ( 'IN-INTO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(134,8);
            string_literal275=(Token)match(input,21,FOLLOW_21_in_ininto1579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal275_tree = (Object)adaptor.create(string_literal275);
            adaptor.addChild(root_0, string_literal275_tree);
            }
            dbg.location(134,18);
            TOKEN276=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto1581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN276_tree = (Object)adaptor.create(TOKEN276);
            adaptor.addChild(root_0, TOKEN276_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(134, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ininto");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal277=null;
        Token TOKEN278=null;

        Object string_literal277_tree=null;
        Object TOKEN278_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwith");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(135, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:7: ( 'IN-WITH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(135,8);
            string_literal277=(Token)match(input,22,FOLLOW_22_in_inwith1586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal277_tree = (Object)adaptor.create(string_literal277);
            adaptor.addChild(root_0, string_literal277_tree);
            }
            dbg.location(135,18);
            TOKEN278=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith1588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN278_tree = (Object)adaptor.create(TOKEN278);
            adaptor.addChild(root_0, TOKEN278_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(135, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwith");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal279=null;
        Token TOKEN280=null;

        Object string_literal279_tree=null;
        Object TOKEN280_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inwithout");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(136, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:10: ( 'IN-WITHOUT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(136,11);
            string_literal279=(Token)match(input,23,FOLLOW_23_in_inwithout1593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal279_tree = (Object)adaptor.create(string_literal279);
            adaptor.addChild(root_0, string_literal279_tree);
            }
            dbg.location(136,24);
            TOKEN280=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout1595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN280_tree = (Object)adaptor.create(TOKEN280);
            adaptor.addChild(root_0, TOKEN280_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(136, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inwithout");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal281=null;
        Token TOKEN282=null;

        Object string_literal281_tree=null;
        Object TOKEN282_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inby");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(137, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:5: ( 'IN-BY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(137,6);
            string_literal281=(Token)match(input,24,FOLLOW_24_in_inby1600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal281_tree = (Object)adaptor.create(string_literal281);
            adaptor.addChild(root_0, string_literal281_tree);
            }
            dbg.location(137,14);
            TOKEN282=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby1602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN282_tree = (Object)adaptor.create(TOKEN282);
            adaptor.addChild(root_0, TOKEN282_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(137, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inby");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal283=null;
        Token TOKEN284=null;

        Object string_literal283_tree=null;
        Object TOKEN284_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "invia");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(138, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:6: ( 'IN-VIA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(138,7);
            string_literal283=(Token)match(input,25,FOLLOW_25_in_invia1607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal283_tree = (Object)adaptor.create(string_literal283);
            adaptor.addChild(root_0, string_literal283_tree);
            }
            dbg.location(138,16);
            TOKEN284=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia1609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN284_tree = (Object)adaptor.create(TOKEN284);
            adaptor.addChild(root_0, TOKEN284_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(138, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "invia");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal285=null;
        Token TOKEN286=null;

        Object string_literal285_tree=null;
        Object TOKEN286_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inof");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(139, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( 'IN-OF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(139,6);
            string_literal285=(Token)match(input,26,FOLLOW_26_in_inof1614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal285_tree = (Object)adaptor.create(string_literal285);
            adaptor.addChild(root_0, string_literal285_tree);
            }
            dbg.location(139,14);
            TOKEN286=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof1616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN286_tree = (Object)adaptor.create(TOKEN286);
            adaptor.addChild(root_0, TOKEN286_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(139, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inof");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal287=null;
        Token TOKEN288=null;

        Object string_literal287_tree=null;
        Object TOKEN288_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(140, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:5: ( 'IN-ON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(140,6);
            string_literal287=(Token)match(input,27,FOLLOW_27_in_inon1621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal287_tree = (Object)adaptor.create(string_literal287);
            adaptor.addChild(root_0, string_literal287_tree);
            }
            dbg.location(140,14);
            TOKEN288=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon1623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN288_tree = (Object)adaptor.create(TOKEN288);
            adaptor.addChild(root_0, TOKEN288_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(140, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal289=null;
        Token TOKEN290=null;

        Object string_literal289_tree=null;
        Object TOKEN290_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(141, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:6: ( 'IN-FOR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(141,7);
            string_literal289=(Token)match(input,28,FOLLOW_28_in_infor1628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal289_tree = (Object)adaptor.create(string_literal289);
            adaptor.addChild(root_0, string_literal289_tree);
            }
            dbg.location(141,16);
            TOKEN290=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor1630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN290_tree = (Object)adaptor.create(TOKEN290);
            adaptor.addChild(root_0, TOKEN290_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(141, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal291=null;
        Token TOKEN292=null;

        Object string_literal291_tree=null;
        Object TOKEN292_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "infrom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(142, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:7: ( 'IN-FROM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(142,8);
            string_literal291=(Token)match(input,29,FOLLOW_29_in_infrom1635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal291_tree = (Object)adaptor.create(string_literal291);
            adaptor.addChild(root_0, string_literal291_tree);
            }
            dbg.location(142,18);
            TOKEN292=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom1637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN292_tree = (Object)adaptor.create(TOKEN292);
            adaptor.addChild(root_0, TOKEN292_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(142, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "infrom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal293=null;
        Token TOKEN294=null;

        Object string_literal293_tree=null;
        Object TOKEN294_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inunder");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(143, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:8: ( 'IN-UNDER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(143,9);
            string_literal293=(Token)match(input,30,FOLLOW_30_in_inunder1642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal293_tree = (Object)adaptor.create(string_literal293);
            adaptor.addChild(root_0, string_literal293_tree);
            }
            dbg.location(143,20);
            TOKEN294=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder1644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN294_tree = (Object)adaptor.create(TOKEN294);
            adaptor.addChild(root_0, TOKEN294_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(143, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inunder");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal295=null;
        Token TOKEN296=null;

        Object string_literal295_tree=null;
        Object TOKEN296_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(144, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:7: ( 'IN-OVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(144,8);
            string_literal295=(Token)match(input,31,FOLLOW_31_in_inover1649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal295_tree = (Object)adaptor.create(string_literal295);
            adaptor.addChild(root_0, string_literal295_tree);
            }
            dbg.location(144,18);
            TOKEN296=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover1651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN296_tree = (Object)adaptor.create(TOKEN296);
            adaptor.addChild(root_0, TOKEN296_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(144, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal297=null;
        Token TOKEN298=null;

        Object string_literal297_tree=null;
        Object TOKEN298_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "inoff");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(145, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:6: ( 'IN-OFF' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(145,7);
            string_literal297=(Token)match(input,32,FOLLOW_32_in_inoff1656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal297_tree = (Object)adaptor.create(string_literal297);
            adaptor.addChild(root_0, string_literal297_tree);
            }
            dbg.location(145,16);
            TOKEN298=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff1658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN298_tree = (Object)adaptor.create(TOKEN298);
            adaptor.addChild(root_0, TOKEN298_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(145, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "inoff");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal299=null;
        Token TOKEN300=null;

        Object string_literal299_tree=null;
        Object TOKEN300_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnstate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(148, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:8: ( 'NN-STATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(148,9);
            string_literal299=(Token)match(input,33,FOLLOW_33_in_nnstate1665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal299_tree = (Object)adaptor.create(string_literal299);
            adaptor.addChild(root_0, string_literal299_tree);
            }
            dbg.location(148,20);
            TOKEN300=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate1667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN300_tree = (Object)adaptor.create(TOKEN300);
            adaptor.addChild(root_0, TOKEN300_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(148, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnstate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal301=null;
        Token TOKEN302=null;

        Object string_literal301_tree=null;
        Object TOKEN302_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntime");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(149, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:7: ( 'NN-TIME' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(149,8);
            string_literal301=(Token)match(input,34,FOLLOW_34_in_nntime1672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal301_tree = (Object)adaptor.create(string_literal301);
            adaptor.addChild(root_0, string_literal301_tree);
            }
            dbg.location(149,18);
            TOKEN302=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime1674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN302_tree = (Object)adaptor.create(TOKEN302);
            adaptor.addChild(root_0, TOKEN302_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(149, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntime");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntime"

    public static class nngram_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngram"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: nngram : 'NN-GRAM' TOKEN ;
    public final ChemicalChunkerParser.nngram_return nngram() throws RecognitionException {
        ChemicalChunkerParser.nngram_return retval = new ChemicalChunkerParser.nngram_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal303=null;
        Token TOKEN304=null;

        Object string_literal303_tree=null;
        Object TOKEN304_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngram");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(150, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:7: ( 'NN-GRAM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:8: 'NN-GRAM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(150,8);
            string_literal303=(Token)match(input,35,FOLLOW_35_in_nngram1679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal303_tree = (Object)adaptor.create(string_literal303);
            adaptor.addChild(root_0, string_literal303_tree);
            }
            dbg.location(150,18);
            TOKEN304=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngram1681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN304_tree = (Object)adaptor.create(TOKEN304);
            adaptor.addChild(root_0, TOKEN304_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(150, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngram");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngram"

    public static class nnmol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: nnmol : 'NN-MOL' TOKEN ;
    public final ChemicalChunkerParser.nnmol_return nnmol() throws RecognitionException {
        ChemicalChunkerParser.nnmol_return retval = new ChemicalChunkerParser.nnmol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal305=null;
        Token TOKEN306=null;

        Object string_literal305_tree=null;
        Object TOKEN306_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(151, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:6: ( 'NN-MOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:7: 'NN-MOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(151,7);
            string_literal305=(Token)match(input,36,FOLLOW_36_in_nnmol1686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal305_tree = (Object)adaptor.create(string_literal305);
            adaptor.addChild(root_0, string_literal305_tree);
            }
            dbg.location(151,16);
            TOKEN306=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmol1688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN306_tree = (Object)adaptor.create(TOKEN306);
            adaptor.addChild(root_0, TOKEN306_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(151, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmol"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal307=null;
        Token TOKEN308=null;

        Object string_literal307_tree=null;
        Object TOKEN308_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnatmosphere");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(152, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:13: ( 'NN-ATMOSPHERE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(152,14);
            string_literal307=(Token)match(input,37,FOLLOW_37_in_nnatmosphere1693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal307_tree = (Object)adaptor.create(string_literal307);
            adaptor.addChild(root_0, string_literal307_tree);
            }
            dbg.location(152,30);
            TOKEN308=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere1695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN308_tree = (Object)adaptor.create(TOKEN308);
            adaptor.addChild(root_0, TOKEN308_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(152, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnatmosphere");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal309=null;
        Token TOKEN310=null;

        Object string_literal309_tree=null;
        Object TOKEN310_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nneq");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(153, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:5: ( 'NN-EQ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(153,6);
            string_literal309=(Token)match(input,38,FOLLOW_38_in_nneq1700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal309_tree = (Object)adaptor.create(string_literal309);
            adaptor.addChild(root_0, string_literal309_tree);
            }
            dbg.location(153,14);
            TOKEN310=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq1702); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN310_tree = (Object)adaptor.create(TOKEN310);
            adaptor.addChild(root_0, TOKEN310_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(153, 19);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nneq");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal311=null;
        Token TOKEN312=null;

        Object string_literal311_tree=null;
        Object TOKEN312_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(154, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:6: ( 'NN-VOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(154,7);
            string_literal311=(Token)match(input,39,FOLLOW_39_in_nnvol1707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal311_tree = (Object)adaptor.create(string_literal311);
            adaptor.addChild(root_0, string_literal311_tree);
            }
            dbg.location(154,16);
            TOKEN312=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol1709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN312_tree = (Object)adaptor.create(TOKEN312);
            adaptor.addChild(root_0, TOKEN312_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(154, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal313=null;
        Token TOKEN314=null;

        Object string_literal313_tree=null;
        Object TOKEN314_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchementity");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(155, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:13: ( 'NN-CHEMENTITY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(155,14);
            string_literal313=(Token)match(input,40,FOLLOW_40_in_nnchementity1714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal313_tree = (Object)adaptor.create(string_literal313);
            adaptor.addChild(root_0, string_literal313_tree);
            }
            dbg.location(155,30);
            TOKEN314=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity1716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN314_tree = (Object)adaptor.create(TOKEN314);
            adaptor.addChild(root_0, TOKEN314_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(155, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchementity");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal315=null;
        Token TOKEN316=null;

        Object string_literal315_tree=null;
        Object TOKEN316_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntemp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(156, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:7: ( 'NN-TEMP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(156,8);
            string_literal315=(Token)match(input,41,FOLLOW_41_in_nntemp1721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal315_tree = (Object)adaptor.create(string_literal315);
            adaptor.addChild(root_0, string_literal315_tree);
            }
            dbg.location(156,18);
            TOKEN316=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp1723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN316_tree = (Object)adaptor.create(TOKEN316);
            adaptor.addChild(root_0, TOKEN316_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(156, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntemp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal317=null;
        Token TOKEN318=null;

        Object string_literal317_tree=null;
        Object TOKEN318_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnflash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(157, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:8: ( 'NN-FLASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(157,9);
            string_literal317=(Token)match(input,42,FOLLOW_42_in_nnflash1728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal317_tree = (Object)adaptor.create(string_literal317);
            adaptor.addChild(root_0, string_literal317_tree);
            }
            dbg.location(157,20);
            TOKEN318=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash1730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN318_tree = (Object)adaptor.create(TOKEN318);
            adaptor.addChild(root_0, TOKEN318_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(157, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnflash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal319=null;
        Token TOKEN320=null;

        Object string_literal319_tree=null;
        Object TOKEN320_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nngeneral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(158, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:10: ( 'NN-GENERAL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(158,11);
            string_literal319=(Token)match(input,43,FOLLOW_43_in_nngeneral1735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal319_tree = (Object)adaptor.create(string_literal319);
            adaptor.addChild(root_0, string_literal319_tree);
            }
            dbg.location(158,24);
            TOKEN320=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral1737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN320_tree = (Object)adaptor.create(TOKEN320);
            adaptor.addChild(root_0, TOKEN320_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(158, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nngeneral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal321=null;
        Token TOKEN322=null;

        Object string_literal321_tree=null;
        Object TOKEN322_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmethod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(159, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:9: ( 'NN-METHOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(159,10);
            string_literal321=(Token)match(input,44,FOLLOW_44_in_nnmethod1742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal321_tree = (Object)adaptor.create(string_literal321);
            adaptor.addChild(root_0, string_literal321_tree);
            }
            dbg.location(159,22);
            TOKEN322=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod1744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN322_tree = (Object)adaptor.create(TOKEN322);
            adaptor.addChild(root_0, TOKEN322_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(159, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmethod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal323=null;
        Token TOKEN324=null;

        Object string_literal323_tree=null;
        Object TOKEN324_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnamount");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(160, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:9: ( 'NN-AMOUNT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(160,10);
            string_literal323=(Token)match(input,45,FOLLOW_45_in_nnamount1749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal323_tree = (Object)adaptor.create(string_literal323);
            adaptor.addChild(root_0, string_literal323_tree);
            }
            dbg.location(160,22);
            TOKEN324=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount1751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN324_tree = (Object)adaptor.create(TOKEN324);
            adaptor.addChild(root_0, TOKEN324_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(160, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnamount");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal325=null;
        Token TOKEN326=null;

        Object string_literal325_tree=null;
        Object TOKEN326_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpressure");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(161, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:11: ( 'NN-PRESSURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(161,12);
            string_literal325=(Token)match(input,46,FOLLOW_46_in_nnpressure1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal325_tree = (Object)adaptor.create(string_literal325);
            adaptor.addChild(root_0, string_literal325_tree);
            }
            dbg.location(161,26);
            TOKEN326=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure1758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN326_tree = (Object)adaptor.create(TOKEN326);
            adaptor.addChild(root_0, TOKEN326_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(161, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpressure");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal327=null;
        Token TOKEN328=null;

        Object string_literal327_tree=null;
        Object TOKEN328_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncolumn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(162, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:9: ( 'NN-COLUMN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(162,10);
            string_literal327=(Token)match(input,47,FOLLOW_47_in_nncolumn1763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal327_tree = (Object)adaptor.create(string_literal327);
            adaptor.addChild(root_0, string_literal327_tree);
            }
            dbg.location(162,22);
            TOKEN328=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn1765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN328_tree = (Object)adaptor.create(TOKEN328);
            adaptor.addChild(root_0, TOKEN328_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(162, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncolumn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal329=null;
        Token TOKEN330=null;

        Object string_literal329_tree=null;
        Object TOKEN330_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnchromatography");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(163, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(163,18);
            string_literal329=(Token)match(input,48,FOLLOW_48_in_nnchromatography1770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal329_tree = (Object)adaptor.create(string_literal329);
            adaptor.addChild(root_0, string_literal329_tree);
            }
            dbg.location(163,38);
            TOKEN330=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography1772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN330_tree = (Object)adaptor.create(TOKEN330);
            adaptor.addChild(root_0, TOKEN330_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(163, 43);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnchromatography");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal331=null;
        Token TOKEN332=null;

        Object string_literal331_tree=null;
        Object TOKEN332_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnvacuum");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(164, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:9: ( 'NN-VACUUM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(164,10);
            string_literal331=(Token)match(input,49,FOLLOW_49_in_nnvacuum1777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal331_tree = (Object)adaptor.create(string_literal331);
            adaptor.addChild(root_0, string_literal331_tree);
            }
            dbg.location(164,22);
            TOKEN332=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum1779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN332_tree = (Object)adaptor.create(TOKEN332);
            adaptor.addChild(root_0, TOKEN332_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(164, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnvacuum");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal333=null;
        Token TOKEN334=null;

        Object string_literal333_tree=null;
        Object TOKEN334_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nncycle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(165, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: ( 'NN-CYCLE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(165,9);
            string_literal333=(Token)match(input,50,FOLLOW_50_in_nncycle1784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal333_tree = (Object)adaptor.create(string_literal333);
            adaptor.addChild(root_0, string_literal333_tree);
            }
            dbg.location(165,20);
            TOKEN334=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle1786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN334_tree = (Object)adaptor.create(TOKEN334);
            adaptor.addChild(root_0, TOKEN334_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(165, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nncycle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal335=null;
        Token TOKEN336=null;

        Object string_literal335_tree=null;
        Object TOKEN336_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nntimes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(166, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:8: ( 'NN-TIMES' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(166,9);
            string_literal335=(Token)match(input,51,FOLLOW_51_in_nntimes1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal335_tree = (Object)adaptor.create(string_literal335);
            adaptor.addChild(root_0, string_literal335_tree);
            }
            dbg.location(166,20);
            TOKEN336=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes1793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN336_tree = (Object)adaptor.create(TOKEN336);
            adaptor.addChild(root_0, TOKEN336_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(166, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nntimes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal337=null;
        Token TOKEN338=null;

        Object string_literal337_tree=null;
        Object TOKEN338_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "oscarcm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(169, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:8: ( 'OSCAR-CM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(169,9);
            string_literal337=(Token)match(input,52,FOLLOW_52_in_oscarcm1800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal337_tree = (Object)adaptor.create(string_literal337);
            adaptor.addChild(root_0, string_literal337_tree);
            }
            dbg.location(169,20);
            TOKEN338=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm1802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN338_tree = (Object)adaptor.create(TOKEN338);
            adaptor.addChild(root_0, TOKEN338_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(169, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "oscarcm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal339=null;
        Token TOKEN340=null;

        Object string_literal339_tree=null;
        Object TOKEN340_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbuse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(172, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:6: ( 'VB-USE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(172,7);
            string_literal339=(Token)match(input,53,FOLLOW_53_in_vbuse1809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal339_tree = (Object)adaptor.create(string_literal339);
            adaptor.addChild(root_0, string_literal339_tree);
            }
            dbg.location(172,16);
            TOKEN340=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse1811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN340_tree = (Object)adaptor.create(TOKEN340);
            adaptor.addChild(root_0, TOKEN340_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(172, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbuse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal341=null;
        Token TOKEN342=null;

        Object string_literal341_tree=null;
        Object TOKEN342_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbchange");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(173, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:9: ( 'VB-CHANGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(173,10);
            string_literal341=(Token)match(input,54,FOLLOW_54_in_vbchange1816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal341_tree = (Object)adaptor.create(string_literal341);
            adaptor.addChild(root_0, string_literal341_tree);
            }
            dbg.location(173,22);
            TOKEN342=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange1818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN342_tree = (Object)adaptor.create(TOKEN342);
            adaptor.addChild(root_0, TOKEN342_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(173, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbchange");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal343=null;
        Token TOKEN344=null;

        Object string_literal343_tree=null;
        Object TOKEN344_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubmerge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(174, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:11: ( 'VB-SUBMERGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(174,12);
            string_literal343=(Token)match(input,55,FOLLOW_55_in_vbsubmerge1823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal343_tree = (Object)adaptor.create(string_literal343);
            adaptor.addChild(root_0, string_literal343_tree);
            }
            dbg.location(174,26);
            TOKEN344=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge1825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN344_tree = (Object)adaptor.create(TOKEN344);
            adaptor.addChild(root_0, TOKEN344_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(174, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubmerge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal345=null;
        Token TOKEN346=null;

        Object string_literal345_tree=null;
        Object TOKEN346_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsubject");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(175, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:10: ( 'VB-SUBJECT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(175,11);
            string_literal345=(Token)match(input,56,FOLLOW_56_in_vbsubject1830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal345_tree = (Object)adaptor.create(string_literal345);
            adaptor.addChild(root_0, string_literal345_tree);
            }
            dbg.location(175,24);
            TOKEN346=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject1832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN346_tree = (Object)adaptor.create(TOKEN346);
            adaptor.addChild(root_0, TOKEN346_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(175, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsubject");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal347=null;
        Token TOKEN348=null;

        Object string_literal347_tree=null;
        Object TOKEN348_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(178, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:6: ( 'NN-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(178,7);
            string_literal347=(Token)match(input,57,FOLLOW_57_in_nnadd1839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal347_tree = (Object)adaptor.create(string_literal347);
            adaptor.addChild(root_0, string_literal347_tree);
            }
            dbg.location(178,16);
            TOKEN348=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd1841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN348_tree = (Object)adaptor.create(TOKEN348);
            adaptor.addChild(root_0, TOKEN348_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(178, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal349=null;
        Token TOKEN350=null;

        Object string_literal349_tree=null;
        Object TOKEN350_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnmixture");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(179, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:10: ( 'NN-MIXTURE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(179,11);
            string_literal349=(Token)match(input,58,FOLLOW_58_in_nnmixture1846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal349_tree = (Object)adaptor.create(string_literal349);
            adaptor.addChild(root_0, string_literal349_tree);
            }
            dbg.location(179,24);
            TOKEN350=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture1848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN350_tree = (Object)adaptor.create(TOKEN350);
            adaptor.addChild(root_0, TOKEN350_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(179, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnmixture");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal351=null;
        Token TOKEN352=null;

        Object string_literal351_tree=null;
        Object TOKEN352_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbadd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(180, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:6: ( 'VB-ADD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(180,7);
            string_literal351=(Token)match(input,59,FOLLOW_59_in_vbadd1853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal351_tree = (Object)adaptor.create(string_literal351);
            adaptor.addChild(root_0, string_literal351_tree);
            }
            dbg.location(180,16);
            TOKEN352=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd1855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN352_tree = (Object)adaptor.create(TOKEN352);
            adaptor.addChild(root_0, TOKEN352_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(180, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbadd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal353=null;
        Token TOKEN354=null;

        Object string_literal353_tree=null;
        Object TOKEN354_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcharge");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(181, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:9: ( 'VB-CHARGE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(181,10);
            string_literal353=(Token)match(input,60,FOLLOW_60_in_vbcharge1860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal353_tree = (Object)adaptor.create(string_literal353);
            adaptor.addChild(root_0, string_literal353_tree);
            }
            dbg.location(181,22);
            TOKEN354=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge1862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN354_tree = (Object)adaptor.create(TOKEN354);
            adaptor.addChild(root_0, TOKEN354_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(181, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcharge");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal355=null;
        Token TOKEN356=null;

        Object string_literal355_tree=null;
        Object TOKEN356_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcontain");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(182, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:10: ( 'VB-CONTAIN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(182,11);
            string_literal355=(Token)match(input,61,FOLLOW_61_in_vbcontain1867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal355_tree = (Object)adaptor.create(string_literal355);
            adaptor.addChild(root_0, string_literal355_tree);
            }
            dbg.location(182,24);
            TOKEN356=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain1869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN356_tree = (Object)adaptor.create(TOKEN356);
            adaptor.addChild(root_0, TOKEN356_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(182, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcontain");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal357=null;
        Token TOKEN358=null;

        Object string_literal357_tree=null;
        Object TOKEN358_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdrop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(183, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:7: ( 'VB-DROP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(183,8);
            string_literal357=(Token)match(input,62,FOLLOW_62_in_vbdrop1874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal357_tree = (Object)adaptor.create(string_literal357);
            adaptor.addChild(root_0, string_literal357_tree);
            }
            dbg.location(183,18);
            TOKEN358=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop1876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN358_tree = (Object)adaptor.create(TOKEN358);
            adaptor.addChild(root_0, TOKEN358_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(183, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdrop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal359=null;
        Token TOKEN360=null;

        Object string_literal359_tree=null;
        Object TOKEN360_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfill");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(184, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:7: ( 'VB-FILL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(184,8);
            string_literal359=(Token)match(input,63,FOLLOW_63_in_vbfill1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal359_tree = (Object)adaptor.create(string_literal359);
            adaptor.addChild(root_0, string_literal359_tree);
            }
            dbg.location(184,18);
            TOKEN360=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill1883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN360_tree = (Object)adaptor.create(TOKEN360);
            adaptor.addChild(root_0, TOKEN360_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(184, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfill");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal361=null;
        Token TOKEN362=null;

        Object string_literal361_tree=null;
        Object TOKEN362_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsuspend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(185, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:10: ( 'VB-SUSPEND' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(185,11);
            string_literal361=(Token)match(input,64,FOLLOW_64_in_vbsuspend1888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal361_tree = (Object)adaptor.create(string_literal361);
            adaptor.addChild(root_0, string_literal361_tree);
            }
            dbg.location(185,24);
            TOKEN362=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend1890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN362_tree = (Object)adaptor.create(TOKEN362);
            adaptor.addChild(root_0, TOKEN362_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(185, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsuspend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal363=null;
        Token TOKEN364=null;

        Object string_literal363_tree=null;
        Object TOKEN364_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbtreat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(186, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:8: ( 'VB-TREAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(186,9);
            string_literal363=(Token)match(input,65,FOLLOW_65_in_vbtreat1895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal363_tree = (Object)adaptor.create(string_literal363);
            adaptor.addChild(root_0, string_literal363_tree);
            }
            dbg.location(186,20);
            TOKEN364=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat1897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN364_tree = (Object)adaptor.create(TOKEN364);
            adaptor.addChild(root_0, TOKEN364_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(186, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbtreat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal365=null;
        Token TOKEN366=null;

        Object string_literal365_tree=null;
        Object TOKEN366_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(189, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:12: ( 'VB-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(189,13);
            string_literal365=(Token)match(input,66,FOLLOW_66_in_vbapparatus1904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal365_tree = (Object)adaptor.create(string_literal365);
            adaptor.addChild(root_0, string_literal365_tree);
            }
            dbg.location(189,28);
            TOKEN366=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus1906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN366_tree = (Object)adaptor.create(TOKEN366);
            adaptor.addChild(root_0, TOKEN366_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(189, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal367=null;
        Token TOKEN368=null;

        Object string_literal367_tree=null;
        Object TOKEN368_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnapparatus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(190, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:12: ( 'NN-APPARATUS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(190,13);
            string_literal367=(Token)match(input,67,FOLLOW_67_in_nnapparatus1911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal367_tree = (Object)adaptor.create(string_literal367);
            adaptor.addChild(root_0, string_literal367_tree);
            }
            dbg.location(190,28);
            TOKEN368=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus1913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN368_tree = (Object)adaptor.create(TOKEN368);
            adaptor.addChild(root_0, TOKEN368_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(190, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnapparatus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal369=null;
        Token TOKEN370=null;

        Object string_literal369_tree=null;
        Object TOKEN370_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(193, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:14: ( 'VB-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(193,15);
            string_literal369=(Token)match(input,68,FOLLOW_68_in_vbconcentrate1920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal369_tree = (Object)adaptor.create(string_literal369);
            adaptor.addChild(root_0, string_literal369_tree);
            }
            dbg.location(193,32);
            TOKEN370=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate1922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN370_tree = (Object)adaptor.create(TOKEN370);
            adaptor.addChild(root_0, TOKEN370_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(193, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal371=null;
        Token TOKEN372=null;

        Object string_literal371_tree=null;
        Object TOKEN372_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnconcentrate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(194, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:14: ( 'NN-CONCENTRATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(194,15);
            string_literal371=(Token)match(input,69,FOLLOW_69_in_nnconcentrate1927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal371_tree = (Object)adaptor.create(string_literal371);
            adaptor.addChild(root_0, string_literal371_tree);
            }
            dbg.location(194,32);
            TOKEN372=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate1929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN372_tree = (Object)adaptor.create(TOKEN372);
            adaptor.addChild(root_0, TOKEN372_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(194, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnconcentrate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal373=null;
        Token TOKEN374=null;

        Object string_literal373_tree=null;
        Object TOKEN374_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbcool");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(197, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:7: ( 'VB-COOL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(197,8);
            string_literal373=(Token)match(input,70,FOLLOW_70_in_vbcool1936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal373_tree = (Object)adaptor.create(string_literal373);
            adaptor.addChild(root_0, string_literal373_tree);
            }
            dbg.location(197,18);
            TOKEN374=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool1938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN374_tree = (Object)adaptor.create(TOKEN374);
            adaptor.addChild(root_0, TOKEN374_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(197, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbcool");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal375=null;
        Token TOKEN376=null;

        Object string_literal375_tree=null;
        Object TOKEN376_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdegass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(200, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:9: ( 'VB-DEGASS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(200,10);
            string_literal375=(Token)match(input,71,FOLLOW_71_in_vbdegass1945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal375_tree = (Object)adaptor.create(string_literal375);
            adaptor.addChild(root_0, string_literal375_tree);
            }
            dbg.location(200,22);
            TOKEN376=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass1947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN376_tree = (Object)adaptor.create(TOKEN376);
            adaptor.addChild(root_0, TOKEN376_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(200, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdegass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal377=null;
        Token TOKEN378=null;

        Object string_literal377_tree=null;
        Object TOKEN378_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdissolve");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(203, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:11: ( 'VB-DISSOLVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(203,12);
            string_literal377=(Token)match(input,72,FOLLOW_72_in_vbdissolve1954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal377_tree = (Object)adaptor.create(string_literal377);
            adaptor.addChild(root_0, string_literal377_tree);
            }
            dbg.location(203,26);
            TOKEN378=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve1956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN378_tree = (Object)adaptor.create(TOKEN378);
            adaptor.addChild(root_0, TOKEN378_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(203, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdissolve");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal379=null;
        Token TOKEN380=null;

        Object string_literal379_tree=null;
        Object TOKEN380_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbdry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(206, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:6: ( 'VB-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(206,7);
            string_literal379=(Token)match(input,73,FOLLOW_73_in_vbdry1963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal379_tree = (Object)adaptor.create(string_literal379);
            adaptor.addChild(root_0, string_literal379_tree);
            }
            dbg.location(206,16);
            TOKEN380=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry1965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN380_tree = (Object)adaptor.create(TOKEN380);
            adaptor.addChild(root_0, TOKEN380_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(206, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbdry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal381=null;
        Token TOKEN382=null;

        Object string_literal381_tree=null;
        Object TOKEN382_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nndry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(207, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:6: ( 'NN-DRY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(207,7);
            string_literal381=(Token)match(input,74,FOLLOW_74_in_nndry1970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal381_tree = (Object)adaptor.create(string_literal381);
            adaptor.addChild(root_0, string_literal381_tree);
            }
            dbg.location(207,16);
            TOKEN382=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry1972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN382_tree = (Object)adaptor.create(TOKEN382);
            adaptor.addChild(root_0, TOKEN382_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(207, 21);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nndry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal383=null;
        Token TOKEN384=null;

        Object string_literal383_tree=null;
        Object TOKEN384_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(210, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:10: ( 'VB-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(210,11);
            string_literal383=(Token)match(input,75,FOLLOW_75_in_vbextract1979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal383_tree = (Object)adaptor.create(string_literal383);
            adaptor.addChild(root_0, string_literal383_tree);
            }
            dbg.location(210,24);
            TOKEN384=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract1981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN384_tree = (Object)adaptor.create(TOKEN384);
            adaptor.addChild(root_0, TOKEN384_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(210, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal385=null;
        Token TOKEN386=null;

        Object string_literal385_tree=null;
        Object TOKEN386_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnextract");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(211, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:10: ( 'NN-EXTRACT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(211,11);
            string_literal385=(Token)match(input,76,FOLLOW_76_in_nnextract1986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal385_tree = (Object)adaptor.create(string_literal385);
            adaptor.addChild(root_0, string_literal385_tree);
            }
            dbg.location(211,24);
            TOKEN386=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract1988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN386_tree = (Object)adaptor.create(TOKEN386);
            adaptor.addChild(root_0, TOKEN386_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(211, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnextract");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal387=null;
        Token TOKEN388=null;

        Object string_literal387_tree=null;
        Object TOKEN388_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(214, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:9: ( 'VB-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(214,10);
            string_literal387=(Token)match(input,77,FOLLOW_77_in_vbfilter1995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal387_tree = (Object)adaptor.create(string_literal387);
            adaptor.addChild(root_0, string_literal387_tree);
            }
            dbg.location(214,22);
            TOKEN388=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter1997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN388_tree = (Object)adaptor.create(TOKEN388);
            adaptor.addChild(root_0, TOKEN388_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(214, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal389=null;
        Token TOKEN390=null;

        Object string_literal389_tree=null;
        Object TOKEN390_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnfilter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(215, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:9: ( 'NN-FILTER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(215,10);
            string_literal389=(Token)match(input,78,FOLLOW_78_in_nnfilter2002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal389_tree = (Object)adaptor.create(string_literal389);
            adaptor.addChild(root_0, string_literal389_tree);
            }
            dbg.location(215,22);
            TOKEN390=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN390_tree = (Object)adaptor.create(TOKEN390);
            adaptor.addChild(root_0, TOKEN390_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(215, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnfilter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal391=null;
        Token TOKEN392=null;

        Object string_literal391_tree=null;
        Object TOKEN392_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbheat");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(218, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:7: ( 'VB-HEAT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(218,8);
            string_literal391=(Token)match(input,79,FOLLOW_79_in_vbheat2011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal391_tree = (Object)adaptor.create(string_literal391);
            adaptor.addChild(root_0, string_literal391_tree);
            }
            dbg.location(218,18);
            TOKEN392=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN392_tree = (Object)adaptor.create(TOKEN392);
            adaptor.addChild(root_0, TOKEN392_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(218, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbheat");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal393=null;
        Token TOKEN394=null;

        Object string_literal393_tree=null;
        Object TOKEN394_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbincrease");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(219, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:11: ( 'VB-INCREASE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(219,12);
            string_literal393=(Token)match(input,80,FOLLOW_80_in_vbincrease2018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal393_tree = (Object)adaptor.create(string_literal393);
            adaptor.addChild(root_0, string_literal393_tree);
            }
            dbg.location(219,26);
            TOKEN394=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN394_tree = (Object)adaptor.create(TOKEN394);
            adaptor.addChild(root_0, TOKEN394_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(219, 31);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbincrease");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal395=null;
        Token TOKEN396=null;

        Object string_literal395_tree=null;
        Object TOKEN396_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpartition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(222, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:12: ( 'VB-PARTITION' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(222,13);
            string_literal395=(Token)match(input,81,FOLLOW_81_in_vbpartition2027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal395_tree = (Object)adaptor.create(string_literal395);
            adaptor.addChild(root_0, string_literal395_tree);
            }
            dbg.location(222,28);
            TOKEN396=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN396_tree = (Object)adaptor.create(TOKEN396);
            adaptor.addChild(root_0, TOKEN396_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(222, 33);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpartition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal397=null;
        Token TOKEN398=null;

        Object string_literal397_tree=null;
        Object TOKEN398_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(225, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:14: ( 'VB-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(225,15);
            string_literal397=(Token)match(input,82,FOLLOW_82_in_vbprecipitate2036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal397_tree = (Object)adaptor.create(string_literal397);
            adaptor.addChild(root_0, string_literal397_tree);
            }
            dbg.location(225,32);
            TOKEN398=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN398_tree = (Object)adaptor.create(TOKEN398);
            adaptor.addChild(root_0, TOKEN398_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(225, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal399=null;
        Token TOKEN400=null;

        Object string_literal399_tree=null;
        Object TOKEN400_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnprecipitate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(226, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:14: ( 'NN-PRECIPITATE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(226,15);
            string_literal399=(Token)match(input,83,FOLLOW_83_in_nnprecipitate2043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal399_tree = (Object)adaptor.create(string_literal399);
            adaptor.addChild(root_0, string_literal399_tree);
            }
            dbg.location(226,32);
            TOKEN400=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN400_tree = (Object)adaptor.create(TOKEN400);
            adaptor.addChild(root_0, TOKEN400_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(226, 37);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnprecipitate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal401=null;
        Token TOKEN402=null;

        Object string_literal401_tree=null;
        Object TOKEN402_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(229, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:9: ( 'VB-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(229,10);
            string_literal401=(Token)match(input,84,FOLLOW_84_in_vbpurify2052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal401_tree = (Object)adaptor.create(string_literal401);
            adaptor.addChild(root_0, string_literal401_tree);
            }
            dbg.location(229,22);
            TOKEN402=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN402_tree = (Object)adaptor.create(TOKEN402);
            adaptor.addChild(root_0, TOKEN402_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(229, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal403=null;
        Token TOKEN404=null;

        Object string_literal403_tree=null;
        Object TOKEN404_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpurify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(230, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:9: ( 'NN-PURIFY' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(230,10);
            string_literal403=(Token)match(input,85,FOLLOW_85_in_nnpurify2059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal403_tree = (Object)adaptor.create(string_literal403);
            adaptor.addChild(root_0, string_literal403_tree);
            }
            dbg.location(230,22);
            TOKEN404=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN404_tree = (Object)adaptor.create(TOKEN404);
            adaptor.addChild(root_0, TOKEN404_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(230, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpurify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal405=null;
        Token TOKEN406=null;

        Object string_literal405_tree=null;
        Object TOKEN406_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbquench");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:9: ( 'VB-QUENCH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(233,10);
            string_literal405=(Token)match(input,86,FOLLOW_86_in_vbquench2068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal405_tree = (Object)adaptor.create(string_literal405);
            adaptor.addChild(root_0, string_literal405_tree);
            }
            dbg.location(233,22);
            TOKEN406=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN406_tree = (Object)adaptor.create(TOKEN406);
            adaptor.addChild(root_0, TOKEN406_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(233, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbquench");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal407=null;
        Token TOKEN408=null;

        Object string_literal407_tree=null;
        Object TOKEN408_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbrecover");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(236, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:10: ( 'VB-RECOVER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(236,11);
            string_literal407=(Token)match(input,87,FOLLOW_87_in_vbrecover2077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal407_tree = (Object)adaptor.create(string_literal407);
            adaptor.addChild(root_0, string_literal407_tree);
            }
            dbg.location(236,24);
            TOKEN408=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN408_tree = (Object)adaptor.create(TOKEN408);
            adaptor.addChild(root_0, TOKEN408_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(236, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbrecover");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal409=null;
        Token TOKEN410=null;

        Object string_literal409_tree=null;
        Object TOKEN410_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(239, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:9: ( 'VB-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(239,10);
            string_literal409=(Token)match(input,88,FOLLOW_88_in_vbremove2086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal409_tree = (Object)adaptor.create(string_literal409);
            adaptor.addChild(root_0, string_literal409_tree);
            }
            dbg.location(239,22);
            TOKEN410=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN410_tree = (Object)adaptor.create(TOKEN410);
            adaptor.addChild(root_0, TOKEN410_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(239, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal411=null;
        Token TOKEN412=null;

        Object string_literal411_tree=null;
        Object TOKEN412_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnremove");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(240, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:9: ( 'NN-REMOVE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(240,10);
            string_literal411=(Token)match(input,89,FOLLOW_89_in_nnremove2093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal411_tree = (Object)adaptor.create(string_literal411);
            adaptor.addChild(root_0, string_literal411_tree);
            }
            dbg.location(240,22);
            TOKEN412=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN412_tree = (Object)adaptor.create(TOKEN412);
            adaptor.addChild(root_0, TOKEN412_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(240, 27);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnremove");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal413=null;
        Token TOKEN414=null;

        Object string_literal413_tree=null;
        Object TOKEN414_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbstir");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(243, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:7: ( 'VB-STIR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(243,8);
            string_literal413=(Token)match(input,90,FOLLOW_90_in_vbstir2102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal413_tree = (Object)adaptor.create(string_literal413);
            adaptor.addChild(root_0, string_literal413_tree);
            }
            dbg.location(243,18);
            TOKEN414=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN414_tree = (Object)adaptor.create(TOKEN414);
            adaptor.addChild(root_0, TOKEN414_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(243, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbstir");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal415=null;
        Token TOKEN416=null;

        Object string_literal415_tree=null;
        Object TOKEN416_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(246, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:13: ( 'VB-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(246,14);
            string_literal415=(Token)match(input,91,FOLLOW_91_in_vbsynthesize2111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal415_tree = (Object)adaptor.create(string_literal415);
            adaptor.addChild(root_0, string_literal415_tree);
            }
            dbg.location(246,30);
            TOKEN416=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN416_tree = (Object)adaptor.create(TOKEN416);
            adaptor.addChild(root_0, TOKEN416_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(246, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal417=null;
        Token TOKEN418=null;

        Object string_literal417_tree=null;
        Object TOKEN418_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnsynthesize");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(247, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:13: ( 'NN-SYNTHESIZE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(247,14);
            string_literal417=(Token)match(input,92,FOLLOW_92_in_nnsynthesize2118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal417_tree = (Object)adaptor.create(string_literal417);
            adaptor.addChild(root_0, string_literal417_tree);
            }
            dbg.location(247,30);
            TOKEN418=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN418_tree = (Object)adaptor.create(TOKEN418);
            adaptor.addChild(root_0, TOKEN418_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(247, 35);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnsynthesize");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal419=null;
        Token TOKEN420=null;

        Object string_literal419_tree=null;
        Object TOKEN420_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwait");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(250, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:7: ( 'VB-WAIT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(250,8);
            string_literal419=(Token)match(input,93,FOLLOW_93_in_vbwait2127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal419_tree = (Object)adaptor.create(string_literal419);
            adaptor.addChild(root_0, string_literal419_tree);
            }
            dbg.location(250,18);
            TOKEN420=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN420_tree = (Object)adaptor.create(TOKEN420);
            adaptor.addChild(root_0, TOKEN420_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(250, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwait");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal421=null;
        Token TOKEN422=null;

        Object string_literal421_tree=null;
        Object TOKEN422_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbwash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(253, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:7: ( 'VB-WASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(253,8);
            string_literal421=(Token)match(input,94,FOLLOW_94_in_vbwash2136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal421_tree = (Object)adaptor.create(string_literal421);
            adaptor.addChild(root_0, string_literal421_tree);
            }
            dbg.location(253,18);
            TOKEN422=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN422_tree = (Object)adaptor.create(TOKEN422);
            adaptor.addChild(root_0, TOKEN422_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(253, 23);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbwash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal423=null;
        Token TOKEN424=null;

        Object string_literal423_tree=null;
        Object TOKEN424_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbyield");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(256, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:8: ( 'VB-YIELD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(256,9);
            string_literal423=(Token)match(input,95,FOLLOW_95_in_vbyield2145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal423_tree = (Object)adaptor.create(string_literal423);
            adaptor.addChild(root_0, string_literal423_tree);
            }
            dbg.location(256,20);
            TOKEN424=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN424_tree = (Object)adaptor.create(TOKEN424);
            adaptor.addChild(root_0, TOKEN424_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(256, 25);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbyield");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal425=null;
        Token TOKEN426=null;

        Object string_literal425_tree=null;
        Object TOKEN426_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "colon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(259, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:6: ( 'COLON' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(259,7);
            string_literal425=(Token)match(input,96,FOLLOW_96_in_colon2154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal425_tree = (Object)adaptor.create(string_literal425);
            adaptor.addChild(root_0, string_literal425_tree);
            }
            dbg.location(259,15);
            TOKEN426=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN426_tree = (Object)adaptor.create(TOKEN426);
            adaptor.addChild(root_0, TOKEN426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(259, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "colon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal427=null;
        Token TOKEN428=null;

        Object string_literal427_tree=null;
        Object TOKEN428_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "comma");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(260, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:6: ( 'COMMA' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(260,7);
            string_literal427=(Token)match(input,97,FOLLOW_97_in_comma2161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal427_tree = (Object)adaptor.create(string_literal427);
            adaptor.addChild(root_0, string_literal427_tree);
            }
            dbg.location(260,15);
            TOKEN428=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN428_tree = (Object)adaptor.create(TOKEN428);
            adaptor.addChild(root_0, TOKEN428_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(260, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comma");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal429=null;
        Token TOKEN430=null;

        Object string_literal429_tree=null;
        Object TOKEN430_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "apost");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(261, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:6: ( 'APOST' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(261,7);
            string_literal429=(Token)match(input,98,FOLLOW_98_in_apost2168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal429_tree = (Object)adaptor.create(string_literal429);
            adaptor.addChild(root_0, string_literal429_tree);
            }
            dbg.location(261,15);
            TOKEN430=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN430_tree = (Object)adaptor.create(TOKEN430);
            adaptor.addChild(root_0, TOKEN430_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(261, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "apost");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal431=null;
        Token TOKEN432=null;

        Object string_literal431_tree=null;
        Object TOKEN432_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "neg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(262, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:4: ( 'NEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(262,5);
            string_literal431=(Token)match(input,99,FOLLOW_99_in_neg2175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal431_tree = (Object)adaptor.create(string_literal431);
            adaptor.addChild(root_0, string_literal431_tree);
            }
            dbg.location(262,11);
            TOKEN432=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN432_tree = (Object)adaptor.create(TOKEN432);
            adaptor.addChild(root_0, TOKEN432_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(262, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "neg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal433=null;
        Token TOKEN434=null;

        Object string_literal433_tree=null;
        Object TOKEN434_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dash");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(263, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:5: ( 'DASH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(263,6);
            string_literal433=(Token)match(input,100,FOLLOW_100_in_dash2182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal433_tree = (Object)adaptor.create(string_literal433);
            adaptor.addChild(root_0, string_literal433_tree);
            }
            dbg.location(263,13);
            TOKEN434=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN434_tree = (Object)adaptor.create(TOKEN434);
            adaptor.addChild(root_0, TOKEN434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(263, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dash");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal435=null;
        Token TOKEN436=null;

        Object string_literal435_tree=null;
        Object TOKEN436_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "stop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(264, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:5: ( 'STOP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(264,6);
            string_literal435=(Token)match(input,101,FOLLOW_101_in_stop2189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal435_tree = (Object)adaptor.create(string_literal435);
            adaptor.addChild(root_0, string_literal435_tree);
            }
            dbg.location(264,13);
            TOKEN436=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN436_tree = (Object)adaptor.create(TOKEN436);
            adaptor.addChild(root_0, TOKEN436_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(264, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "stop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal437=null;
        Token TOKEN438=null;

        Object string_literal437_tree=null;
        Object TOKEN438_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnpercent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(265, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:10: ( 'NN-PERCENT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(265,11);
            string_literal437=(Token)match(input,102,FOLLOW_102_in_nnpercent2196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal437_tree = (Object)adaptor.create(string_literal437);
            adaptor.addChild(root_0, string_literal437_tree);
            }
            dbg.location(265,24);
            TOKEN438=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN438_tree = (Object)adaptor.create(TOKEN438);
            adaptor.addChild(root_0, TOKEN438_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(265, 29);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnpercent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal439=null;
        Token TOKEN440=null;

        Object string_literal439_tree=null;
        Object TOKEN440_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(266, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:5: ( 'LSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(266,6);
            string_literal439=(Token)match(input,103,FOLLOW_103_in_lsqb2203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal439_tree = (Object)adaptor.create(string_literal439);
            adaptor.addChild(root_0, string_literal439_tree);
            }
            dbg.location(266,13);
            TOKEN440=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN440_tree = (Object)adaptor.create(TOKEN440);
            adaptor.addChild(root_0, TOKEN440_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(266, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal441=null;
        Token TOKEN442=null;

        Object string_literal441_tree=null;
        Object TOKEN442_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rsqb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(267, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:5: ( 'RSQB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(267,6);
            string_literal441=(Token)match(input,104,FOLLOW_104_in_rsqb2210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal441_tree = (Object)adaptor.create(string_literal441);
            adaptor.addChild(root_0, string_literal441_tree);
            }
            dbg.location(267,13);
            TOKEN442=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN442_tree = (Object)adaptor.create(TOKEN442);
            adaptor.addChild(root_0, TOKEN442_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(267, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rsqb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal443=null;
        Token TOKEN444=null;

        Object string_literal443_tree=null;
        Object TOKEN444_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "lrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(268, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:4: ( '-LRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(268,5);
            string_literal443=(Token)match(input,105,FOLLOW_105_in_lrb2217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal443_tree = (Object)adaptor.create(string_literal443);
            adaptor.addChild(root_0, string_literal443_tree);
            }
            dbg.location(268,13);
            TOKEN444=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN444_tree = (Object)adaptor.create(TOKEN444);
            adaptor.addChild(root_0, TOKEN444_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(268, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "lrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal445=null;
        Token TOKEN446=null;

        Object string_literal445_tree=null;
        Object TOKEN446_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(269, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:4: ( '-RRB-' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(269,5);
            string_literal445=(Token)match(input,106,FOLLOW_106_in_rrb2224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal445_tree = (Object)adaptor.create(string_literal445);
            adaptor.addChild(root_0, string_literal445_tree);
            }
            dbg.location(269,13);
            TOKEN446=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN446_tree = (Object)adaptor.create(TOKEN446);
            adaptor.addChild(root_0, TOKEN446_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(269, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal447=null;
        Token TOKEN448=null;

        Object string_literal447_tree=null;
        Object TOKEN448_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(274, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:4: ( 'ABL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(274,5);
            string_literal447=(Token)match(input,107,FOLLOW_107_in_abl2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal447_tree = (Object)adaptor.create(string_literal447);
            adaptor.addChild(root_0, string_literal447_tree);
            }
            dbg.location(274,11);
            TOKEN448=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN448_tree = (Object)adaptor.create(TOKEN448);
            adaptor.addChild(root_0, TOKEN448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(274, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal449=null;
        Token TOKEN450=null;

        Object string_literal449_tree=null;
        Object TOKEN450_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(277, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:4: ( 'ABN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(277,5);
            string_literal449=(Token)match(input,108,FOLLOW_108_in_abn2244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal449_tree = (Object)adaptor.create(string_literal449);
            adaptor.addChild(root_0, string_literal449_tree);
            }
            dbg.location(277,11);
            TOKEN450=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN450_tree = (Object)adaptor.create(TOKEN450);
            adaptor.addChild(root_0, TOKEN450_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(277, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal451=null;
        Token TOKEN452=null;

        Object string_literal451_tree=null;
        Object TOKEN452_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "abx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(280, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:4: ( 'ABX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(280,5);
            string_literal451=(Token)match(input,109,FOLLOW_109_in_abx2253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal451_tree = (Object)adaptor.create(string_literal451);
            adaptor.addChild(root_0, string_literal451_tree);
            }
            dbg.location(280,11);
            TOKEN452=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN452_tree = (Object)adaptor.create(TOKEN452);
            adaptor.addChild(root_0, TOKEN452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(280, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "abx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal453=null;
        Token TOKEN454=null;

        Object string_literal453_tree=null;
        Object TOKEN454_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ap");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(283, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:3: ( 'AP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(283,4);
            string_literal453=(Token)match(input,110,FOLLOW_110_in_ap2262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal453_tree = (Object)adaptor.create(string_literal453);
            adaptor.addChild(root_0, string_literal453_tree);
            }
            dbg.location(283,9);
            TOKEN454=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN454_tree = (Object)adaptor.create(TOKEN454);
            adaptor.addChild(root_0, TOKEN454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(283, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ap");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal455=null;
        Token TOKEN456=null;

        Object string_literal455_tree=null;
        Object TOKEN456_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "at");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(286, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:3: ( 'AT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(286,4);
            string_literal455=(Token)match(input,111,FOLLOW_111_in_at2271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal455_tree = (Object)adaptor.create(string_literal455);
            adaptor.addChild(root_0, string_literal455_tree);
            }
            dbg.location(286,9);
            TOKEN456=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN456_tree = (Object)adaptor.create(TOKEN456);
            adaptor.addChild(root_0, TOKEN456_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(286, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal457=null;
        Token TOKEN458=null;

        Object string_literal457_tree=null;
        Object TOKEN458_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "be");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(289, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:3: ( 'BE' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(289,4);
            string_literal457=(Token)match(input,112,FOLLOW_112_in_be2280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal457_tree = (Object)adaptor.create(string_literal457);
            adaptor.addChild(root_0, string_literal457_tree);
            }
            dbg.location(289,9);
            TOKEN458=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN458_tree = (Object)adaptor.create(TOKEN458);
            adaptor.addChild(root_0, TOKEN458_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(289, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "be");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal459=null;
        Token TOKEN460=null;

        Object string_literal459_tree=null;
        Object TOKEN460_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bed");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(292, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:4: ( 'BED' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(292,5);
            string_literal459=(Token)match(input,113,FOLLOW_113_in_bed2289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal459_tree = (Object)adaptor.create(string_literal459);
            adaptor.addChild(root_0, string_literal459_tree);
            }
            dbg.location(292,11);
            TOKEN460=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN460_tree = (Object)adaptor.create(TOKEN460);
            adaptor.addChild(root_0, TOKEN460_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(292, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bed");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal461=null;
        Token TOKEN462=null;

        Object string_literal461_tree=null;
        Object TOKEN462_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bedz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(295, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:5: ( 'BEDZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(295,6);
            string_literal461=(Token)match(input,114,FOLLOW_114_in_bedz2298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = (Object)adaptor.create(string_literal461);
            adaptor.addChild(root_0, string_literal461_tree);
            }
            dbg.location(295,13);
            TOKEN462=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN462_tree = (Object)adaptor.create(TOKEN462);
            adaptor.addChild(root_0, TOKEN462_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(295, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bedz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal463=null;
        Token TOKEN464=null;

        Object string_literal463_tree=null;
        Object TOKEN464_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "beg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(298, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:4: ( 'BEG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(298,5);
            string_literal463=(Token)match(input,115,FOLLOW_115_in_beg2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal463_tree = (Object)adaptor.create(string_literal463);
            adaptor.addChild(root_0, string_literal463_tree);
            }
            dbg.location(298,11);
            TOKEN464=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN464_tree = (Object)adaptor.create(TOKEN464);
            adaptor.addChild(root_0, TOKEN464_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(298, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "beg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal465=null;
        Token TOKEN466=null;

        Object string_literal465_tree=null;
        Object TOKEN466_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(301, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:4: ( 'BEM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(301,5);
            string_literal465=(Token)match(input,116,FOLLOW_116_in_bem2316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal465_tree = (Object)adaptor.create(string_literal465);
            adaptor.addChild(root_0, string_literal465_tree);
            }
            dbg.location(301,11);
            TOKEN466=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN466_tree = (Object)adaptor.create(TOKEN466);
            adaptor.addChild(root_0, TOKEN466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(301, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal467=null;
        Token TOKEN468=null;

        Object string_literal467_tree=null;
        Object TOKEN468_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ben");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(304, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:4: ( 'BEN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(304,5);
            string_literal467=(Token)match(input,117,FOLLOW_117_in_ben2325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = (Object)adaptor.create(string_literal467);
            adaptor.addChild(root_0, string_literal467_tree);
            }
            dbg.location(304,11);
            TOKEN468=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN468_tree = (Object)adaptor.create(TOKEN468);
            adaptor.addChild(root_0, TOKEN468_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(304, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ben");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal469=null;
        Token TOKEN470=null;

        Object string_literal469_tree=null;
        Object TOKEN470_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ber");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(307, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:4: ( 'BER' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(307,5);
            string_literal469=(Token)match(input,118,FOLLOW_118_in_ber2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal469_tree = (Object)adaptor.create(string_literal469);
            adaptor.addChild(root_0, string_literal469_tree);
            }
            dbg.location(307,11);
            TOKEN470=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN470_tree = (Object)adaptor.create(TOKEN470);
            adaptor.addChild(root_0, TOKEN470_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(307, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ber");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal471=null;
        Token TOKEN472=null;

        Object string_literal471_tree=null;
        Object TOKEN472_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bez");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(310, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:4: ( 'BEZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(310,5);
            string_literal471=(Token)match(input,119,FOLLOW_119_in_bez2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal471_tree = (Object)adaptor.create(string_literal471);
            adaptor.addChild(root_0, string_literal471_tree);
            }
            dbg.location(310,11);
            TOKEN472=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN472_tree = (Object)adaptor.create(TOKEN472);
            adaptor.addChild(root_0, TOKEN472_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(310, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bez");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal473=null;
        Token TOKEN474=null;

        Object string_literal473_tree=null;
        Object TOKEN474_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(313, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:3: ( 'CC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(313,4);
            string_literal473=(Token)match(input,120,FOLLOW_120_in_cc2352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal473_tree = (Object)adaptor.create(string_literal473);
            adaptor.addChild(root_0, string_literal473_tree);
            }
            dbg.location(313,9);
            TOKEN474=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN474_tree = (Object)adaptor.create(TOKEN474);
            adaptor.addChild(root_0, TOKEN474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(313, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal475=null;
        Token TOKEN476=null;

        Object string_literal475_tree=null;
        Object TOKEN476_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(316, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:3: ( 'CD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(316,4);
            string_literal475=(Token)match(input,121,FOLLOW_121_in_cd2361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal475_tree = (Object)adaptor.create(string_literal475);
            adaptor.addChild(root_0, string_literal475_tree);
            }
            dbg.location(316,9);
            TOKEN476=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN476_tree = (Object)adaptor.create(TOKEN476);
            adaptor.addChild(root_0, TOKEN476_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(316, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal477=null;
        Token TOKEN478=null;

        Object string_literal477_tree=null;
        Object TOKEN478_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "cs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(319, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:3: ( 'CS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(319,4);
            string_literal477=(Token)match(input,122,FOLLOW_122_in_cs2370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = (Object)adaptor.create(string_literal477);
            adaptor.addChild(root_0, string_literal477_tree);
            }
            dbg.location(319,9);
            TOKEN478=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN478_tree = (Object)adaptor.create(TOKEN478);
            adaptor.addChild(root_0, TOKEN478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(319, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal479=null;
        Token TOKEN480=null;

        Object string_literal479_tree=null;
        Object TOKEN480_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dotok");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(322, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:7: ( 'DO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(322,8);
            string_literal479=(Token)match(input,123,FOLLOW_123_in_dotok2380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal479_tree = (Object)adaptor.create(string_literal479);
            adaptor.addChild(root_0, string_literal479_tree);
            }
            dbg.location(322,13);
            TOKEN480=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN480_tree = (Object)adaptor.create(TOKEN480);
            adaptor.addChild(root_0, TOKEN480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(322, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dotok");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal481=null;
        Token TOKEN482=null;

        Object string_literal481_tree=null;
        Object TOKEN482_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(325, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:4: ( 'DOD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(325,5);
            string_literal481=(Token)match(input,124,FOLLOW_124_in_dod2389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal481_tree = (Object)adaptor.create(string_literal481);
            adaptor.addChild(root_0, string_literal481_tree);
            }
            dbg.location(325,11);
            TOKEN482=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN482_tree = (Object)adaptor.create(TOKEN482);
            adaptor.addChild(root_0, TOKEN482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(325, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal483=null;
        Token TOKEN484=null;

        Object string_literal483_tree=null;
        Object TOKEN484_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "doz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(328, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:4: ( 'DOZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(328,5);
            string_literal483=(Token)match(input,125,FOLLOW_125_in_doz2398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal483_tree = (Object)adaptor.create(string_literal483);
            adaptor.addChild(root_0, string_literal483_tree);
            }
            dbg.location(328,11);
            TOKEN484=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN484_tree = (Object)adaptor.create(TOKEN484);
            adaptor.addChild(root_0, TOKEN484_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(328, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "doz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal485=null;
        Token TOKEN486=null;

        Object string_literal485_tree=null;
        Object TOKEN486_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:3: ( 'DT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(331,4);
            string_literal485=(Token)match(input,126,FOLLOW_126_in_dt2407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal485_tree = (Object)adaptor.create(string_literal485);
            adaptor.addChild(root_0, string_literal485_tree);
            }
            dbg.location(331,9);
            TOKEN486=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt2409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN486_tree = (Object)adaptor.create(TOKEN486);
            adaptor.addChild(root_0, TOKEN486_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(331, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal487=null;
        Token TOKEN488=null;

        Object string_literal487_tree=null;
        Object TOKEN488_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dti");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(334, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:4: ( 'DTI' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(334,5);
            string_literal487=(Token)match(input,127,FOLLOW_127_in_dti2416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal487_tree = (Object)adaptor.create(string_literal487);
            adaptor.addChild(root_0, string_literal487_tree);
            }
            dbg.location(334,11);
            TOKEN488=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti2418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN488_tree = (Object)adaptor.create(TOKEN488);
            adaptor.addChild(root_0, TOKEN488_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(334, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dti");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal489=null;
        Token TOKEN490=null;

        Object string_literal489_tree=null;
        Object TOKEN490_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dts");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(337, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:4: ( 'DTS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(337,5);
            string_literal489=(Token)match(input,128,FOLLOW_128_in_dts2425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal489_tree = (Object)adaptor.create(string_literal489);
            adaptor.addChild(root_0, string_literal489_tree);
            }
            dbg.location(337,11);
            TOKEN490=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts2427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN490_tree = (Object)adaptor.create(TOKEN490);
            adaptor.addChild(root_0, TOKEN490_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(337, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dts");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal491=null;
        Token TOKEN492=null;

        Object string_literal491_tree=null;
        Object TOKEN492_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "dtx");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:4: ( 'DTX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(340,5);
            string_literal491=(Token)match(input,129,FOLLOW_129_in_dtx2434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal491_tree = (Object)adaptor.create(string_literal491);
            adaptor.addChild(root_0, string_literal491_tree);
            }
            dbg.location(340,11);
            TOKEN492=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx2436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN492_tree = (Object)adaptor.create(TOKEN492);
            adaptor.addChild(root_0, TOKEN492_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(340, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "dtx");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal493=null;
        Token TOKEN494=null;

        Object string_literal493_tree=null;
        Object TOKEN494_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ex");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(343, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:3: ( 'EX' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(343,4);
            string_literal493=(Token)match(input,130,FOLLOW_130_in_ex2443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal493_tree = (Object)adaptor.create(string_literal493);
            adaptor.addChild(root_0, string_literal493_tree);
            }
            dbg.location(343,9);
            TOKEN494=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex2445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN494_tree = (Object)adaptor.create(TOKEN494);
            adaptor.addChild(root_0, TOKEN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(343, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ex");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal495=null;
        Token TOKEN496=null;

        Object string_literal495_tree=null;
        Object TOKEN496_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fw");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(346, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:3: ( 'FW' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(346,4);
            string_literal495=(Token)match(input,131,FOLLOW_131_in_fw2452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal495_tree = (Object)adaptor.create(string_literal495);
            adaptor.addChild(root_0, string_literal495_tree);
            }
            dbg.location(346,9);
            TOKEN496=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw2454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN496_tree = (Object)adaptor.create(TOKEN496);
            adaptor.addChild(root_0, TOKEN496_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(346, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fw");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fw"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal497=null;
        Token TOKEN498=null;

        Object string_literal497_tree=null;
        Object TOKEN498_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hv");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(349, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:3: ( 'HV' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(349,4);
            string_literal497=(Token)match(input,132,FOLLOW_132_in_hv2461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal497_tree = (Object)adaptor.create(string_literal497);
            adaptor.addChild(root_0, string_literal497_tree);
            }
            dbg.location(349,9);
            TOKEN498=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv2463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN498_tree = (Object)adaptor.create(TOKEN498);
            adaptor.addChild(root_0, TOKEN498_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(349, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hv");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal499=null;
        Token TOKEN500=null;

        Object string_literal499_tree=null;
        Object TOKEN500_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:4: ( 'HVD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(352,5);
            string_literal499=(Token)match(input,133,FOLLOW_133_in_hvd2470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal499_tree = (Object)adaptor.create(string_literal499);
            adaptor.addChild(root_0, string_literal499_tree);
            }
            dbg.location(352,11);
            TOKEN500=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd2472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN500_tree = (Object)adaptor.create(TOKEN500);
            adaptor.addChild(root_0, TOKEN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(352, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal501=null;
        Token TOKEN502=null;

        Object string_literal501_tree=null;
        Object TOKEN502_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(355, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:4: ( 'HVG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(355,5);
            string_literal501=(Token)match(input,134,FOLLOW_134_in_hvg2479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal501_tree = (Object)adaptor.create(string_literal501);
            adaptor.addChild(root_0, string_literal501_tree);
            }
            dbg.location(355,11);
            TOKEN502=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg2481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN502_tree = (Object)adaptor.create(TOKEN502);
            adaptor.addChild(root_0, TOKEN502_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(355, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal503=null;
        Token TOKEN504=null;

        Object string_literal503_tree=null;
        Object TOKEN504_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "hvn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(358, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:4: ( 'HVN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(358,5);
            string_literal503=(Token)match(input,135,FOLLOW_135_in_hvn2488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal503_tree = (Object)adaptor.create(string_literal503);
            adaptor.addChild(root_0, string_literal503_tree);
            }
            dbg.location(358,11);
            TOKEN504=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn2490); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN504_tree = (Object)adaptor.create(TOKEN504);
            adaptor.addChild(root_0, TOKEN504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(358, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hvn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal505=null;
        Token TOKEN506=null;

        Object string_literal505_tree=null;
        Object TOKEN506_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "in");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:3: ( 'IN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(361,4);
            string_literal505=(Token)match(input,136,FOLLOW_136_in_in2497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal505_tree = (Object)adaptor.create(string_literal505);
            adaptor.addChild(root_0, string_literal505_tree);
            }
            dbg.location(361,9);
            TOKEN506=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in2499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN506_tree = (Object)adaptor.create(TOKEN506);
            adaptor.addChild(root_0, TOKEN506_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(361, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "in");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal507=null;
        Token TOKEN508=null;

        Object string_literal507_tree=null;
        Object TOKEN508_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jj");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(364, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:3: ( 'JJ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(364,4);
            string_literal507=(Token)match(input,137,FOLLOW_137_in_jj2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal507_tree = (Object)adaptor.create(string_literal507);
            adaptor.addChild(root_0, string_literal507_tree);
            }
            dbg.location(364,9);
            TOKEN508=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj2508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN508_tree = (Object)adaptor.create(TOKEN508);
            adaptor.addChild(root_0, TOKEN508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(364, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jj");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal509=null;
        Token TOKEN510=null;

        Object string_literal509_tree=null;
        Object TOKEN510_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(367, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:4: ( 'JJR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(367,5);
            string_literal509=(Token)match(input,138,FOLLOW_138_in_jjr2515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal509_tree = (Object)adaptor.create(string_literal509);
            adaptor.addChild(root_0, string_literal509_tree);
            }
            dbg.location(367,11);
            TOKEN510=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr2517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN510_tree = (Object)adaptor.create(TOKEN510);
            adaptor.addChild(root_0, TOKEN510_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(367, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal511=null;
        Token TOKEN512=null;

        Object string_literal511_tree=null;
        Object TOKEN512_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(370, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:4: ( 'JJS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(370,5);
            string_literal511=(Token)match(input,139,FOLLOW_139_in_jjs2524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal511_tree = (Object)adaptor.create(string_literal511);
            adaptor.addChild(root_0, string_literal511_tree);
            }
            dbg.location(370,11);
            TOKEN512=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs2526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN512_tree = (Object)adaptor.create(TOKEN512);
            adaptor.addChild(root_0, TOKEN512_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(370, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal513=null;
        Token TOKEN514=null;

        Object string_literal513_tree=null;
        Object TOKEN514_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "jjt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(373, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:4: ( 'JJT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(373,5);
            string_literal513=(Token)match(input,140,FOLLOW_140_in_jjt2533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal513_tree = (Object)adaptor.create(string_literal513);
            adaptor.addChild(root_0, string_literal513_tree);
            }
            dbg.location(373,11);
            TOKEN514=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt2535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN514_tree = (Object)adaptor.create(TOKEN514);
            adaptor.addChild(root_0, TOKEN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(373, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "jjt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal515=null;
        Token TOKEN516=null;

        Object string_literal515_tree=null;
        Object TOKEN516_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "md");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(376, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:3: ( 'MD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(376,4);
            string_literal515=(Token)match(input,141,FOLLOW_141_in_md2542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal515_tree = (Object)adaptor.create(string_literal515);
            adaptor.addChild(root_0, string_literal515_tree);
            }
            dbg.location(376,9);
            TOKEN516=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md2544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN516_tree = (Object)adaptor.create(TOKEN516);
            adaptor.addChild(root_0, TOKEN516_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(376, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "md");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal517=null;
        Token TOKEN518=null;

        Object string_literal517_tree=null;
        Object TOKEN518_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nc");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(379, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:3: ( 'NC' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(379,4);
            string_literal517=(Token)match(input,142,FOLLOW_142_in_nc2551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal517_tree = (Object)adaptor.create(string_literal517);
            adaptor.addChild(root_0, string_literal517_tree);
            }
            dbg.location(379,9);
            TOKEN518=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc2553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN518_tree = (Object)adaptor.create(TOKEN518);
            adaptor.addChild(root_0, TOKEN518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(379, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nc");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal519=null;
        Token TOKEN520=null;

        Object string_literal519_tree=null;
        Object TOKEN520_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(382, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:3: ( 'NN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(382,4);
            string_literal519=(Token)match(input,143,FOLLOW_143_in_nn2560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal519_tree = (Object)adaptor.create(string_literal519);
            adaptor.addChild(root_0, string_literal519_tree);
            }
            dbg.location(382,9);
            TOKEN520=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn2562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN520_tree = (Object)adaptor.create(TOKEN520);
            adaptor.addChild(root_0, TOKEN520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(382, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal521=null;
        Token TOKEN522=null;

        Object string_literal521_tree=null;
        Object TOKEN522_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(385, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:8: ( 'NN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(385,9);
            string_literal521=(Token)match(input,144,FOLLOW_144_in_nn_poss2569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal521_tree = (Object)adaptor.create(string_literal521);
            adaptor.addChild(root_0, string_literal521_tree);
            }
            dbg.location(385,15);
            TOKEN522=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss2571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN522_tree = (Object)adaptor.create(TOKEN522);
            adaptor.addChild(root_0, TOKEN522_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(385, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal523=null;
        Token TOKEN524=null;

        Object string_literal523_tree=null;
        Object TOKEN524_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(388, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:4: ( 'NNS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(388,5);
            string_literal523=(Token)match(input,145,FOLLOW_145_in_nns2578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal523_tree = (Object)adaptor.create(string_literal523);
            adaptor.addChild(root_0, string_literal523_tree);
            }
            dbg.location(388,11);
            TOKEN524=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN524_tree = (Object)adaptor.create(TOKEN524);
            adaptor.addChild(root_0, TOKEN524_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(388, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal525=null;
        Token TOKEN526=null;

        Object string_literal525_tree=null;
        Object TOKEN526_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nns_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(391, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:9: ( 'NNS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(391,10);
            string_literal525=(Token)match(input,146,FOLLOW_146_in_nns_poss2587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal525_tree = (Object)adaptor.create(string_literal525);
            adaptor.addChild(root_0, string_literal525_tree);
            }
            dbg.location(391,17);
            TOKEN526=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss2589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN526_tree = (Object)adaptor.create(TOKEN526);
            adaptor.addChild(root_0, TOKEN526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(391, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nns_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal527=null;
        Token TOKEN528=null;

        Object string_literal527_tree=null;
        Object TOKEN528_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(394, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:3: ( 'NP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(394,4);
            string_literal527=(Token)match(input,147,FOLLOW_147_in_np2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal527_tree = (Object)adaptor.create(string_literal527);
            adaptor.addChild(root_0, string_literal527_tree);
            }
            dbg.location(394,9);
            TOKEN528=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN528_tree = (Object)adaptor.create(TOKEN528);
            adaptor.addChild(root_0, TOKEN528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(394, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal529=null;
        Token TOKEN530=null;

        Object string_literal529_tree=null;
        Object TOKEN530_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nnp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(398, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:4: ( 'NNP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:398:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(398,5);
            string_literal529=(Token)match(input,148,FOLLOW_148_in_nnp2606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal529_tree = (Object)adaptor.create(string_literal529);
            adaptor.addChild(root_0, string_literal529_tree);
            }
            dbg.location(398,11);
            TOKEN530=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp2608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN530_tree = (Object)adaptor.create(TOKEN530);
            adaptor.addChild(root_0, TOKEN530_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(398, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nnp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal531=null;
        Token TOKEN532=null;

        Object string_literal531_tree=null;
        Object TOKEN532_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "np_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(402, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:8: ( 'NP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(402,9);
            string_literal531=(Token)match(input,149,FOLLOW_149_in_np_poss2616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal531_tree = (Object)adaptor.create(string_literal531);
            adaptor.addChild(root_0, string_literal531_tree);
            }
            dbg.location(402,15);
            TOKEN532=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss2618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN532_tree = (Object)adaptor.create(TOKEN532);
            adaptor.addChild(root_0, TOKEN532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(402, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "np_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal533=null;
        Token TOKEN534=null;

        Object string_literal533_tree=null;
        Object TOKEN534_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:4: ( 'NPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(405,5);
            string_literal533=(Token)match(input,150,FOLLOW_150_in_nps2625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal533_tree = (Object)adaptor.create(string_literal533);
            adaptor.addChild(root_0, string_literal533_tree);
            }
            dbg.location(405,11);
            TOKEN534=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps2627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN534_tree = (Object)adaptor.create(TOKEN534);
            adaptor.addChild(root_0, TOKEN534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(405, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal535=null;
        Token TOKEN536=null;

        Object string_literal535_tree=null;
        Object TOKEN536_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nps_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(408, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:9: ( 'NPS$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(408,10);
            string_literal535=(Token)match(input,151,FOLLOW_151_in_nps_poss2634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal535_tree = (Object)adaptor.create(string_literal535);
            adaptor.addChild(root_0, string_literal535_tree);
            }
            dbg.location(408,17);
            TOKEN536=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss2636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN536_tree = (Object)adaptor.create(TOKEN536);
            adaptor.addChild(root_0, TOKEN536_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(408, 22);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nps_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal537=null;
        Token TOKEN538=null;

        Object string_literal537_tree=null;
        Object TOKEN538_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "nr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(411, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:3: ( 'NR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(411,4);
            string_literal537=(Token)match(input,152,FOLLOW_152_in_nr2643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal537_tree = (Object)adaptor.create(string_literal537);
            adaptor.addChild(root_0, string_literal537_tree);
            }
            dbg.location(411,9);
            TOKEN538=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr2645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN538_tree = (Object)adaptor.create(TOKEN538);
            adaptor.addChild(root_0, TOKEN538_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(411, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal539=null;
        Token TOKEN540=null;

        Object string_literal539_tree=null;
        Object TOKEN540_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "od");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:3: ( 'OD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(414,4);
            string_literal539=(Token)match(input,153,FOLLOW_153_in_od2652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal539_tree = (Object)adaptor.create(string_literal539);
            adaptor.addChild(root_0, string_literal539_tree);
            }
            dbg.location(414,9);
            TOKEN540=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od2654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN540_tree = (Object)adaptor.create(TOKEN540);
            adaptor.addChild(root_0, TOKEN540_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(414, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "od");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal541=null;
        Token TOKEN542=null;

        Object string_literal541_tree=null;
        Object TOKEN542_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(417, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:3: ( 'PN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(417,4);
            string_literal541=(Token)match(input,154,FOLLOW_154_in_pn2661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal541_tree = (Object)adaptor.create(string_literal541);
            adaptor.addChild(root_0, string_literal541_tree);
            }
            dbg.location(417,9);
            TOKEN542=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn2663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN542_tree = (Object)adaptor.create(TOKEN542);
            adaptor.addChild(root_0, TOKEN542_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(417, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal543=null;
        Token TOKEN544=null;

        Object string_literal543_tree=null;
        Object TOKEN544_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pn_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(420, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:8: ( 'PN$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(420,9);
            string_literal543=(Token)match(input,155,FOLLOW_155_in_pn_poss2670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = (Object)adaptor.create(string_literal543);
            adaptor.addChild(root_0, string_literal543_tree);
            }
            dbg.location(420,15);
            TOKEN544=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss2672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN544_tree = (Object)adaptor.create(TOKEN544);
            adaptor.addChild(root_0, TOKEN544_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(420, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pn_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal545=null;
        Token TOKEN546=null;

        Object string_literal545_tree=null;
        Object TOKEN546_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(423, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:8: ( 'PP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(423,9);
            string_literal545=(Token)match(input,156,FOLLOW_156_in_pp_poss2679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal545_tree = (Object)adaptor.create(string_literal545);
            adaptor.addChild(root_0, string_literal545_tree);
            }
            dbg.location(423,15);
            TOKEN546=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss2681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN546_tree = (Object)adaptor.create(TOKEN546);
            adaptor.addChild(root_0, TOKEN546_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(423, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal547=null;
        Token TOKEN548=null;

        Object string_literal547_tree=null;
        Object TOKEN548_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pp_poss_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(426, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:13: ( 'PP$$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(426,14);
            string_literal547=(Token)match(input,157,FOLLOW_157_in_pp_poss_poss2688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal547_tree = (Object)adaptor.create(string_literal547);
            adaptor.addChild(root_0, string_literal547_tree);
            }
            dbg.location(426,21);
            TOKEN548=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss2690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN548_tree = (Object)adaptor.create(TOKEN548);
            adaptor.addChild(root_0, TOKEN548_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(426, 26);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pp_poss_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal549=null;
        Token TOKEN550=null;

        Object string_literal549_tree=null;
        Object TOKEN550_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(429, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:4: ( 'PPL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(429,5);
            string_literal549=(Token)match(input,158,FOLLOW_158_in_ppl2697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal549_tree = (Object)adaptor.create(string_literal549);
            adaptor.addChild(root_0, string_literal549_tree);
            }
            dbg.location(429,11);
            TOKEN550=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl2699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN550_tree = (Object)adaptor.create(TOKEN550);
            adaptor.addChild(root_0, TOKEN550_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(429, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal551=null;
        Token TOKEN552=null;

        Object string_literal551_tree=null;
        Object TOKEN552_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppls");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(432, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:5: ( 'PPLS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(432,6);
            string_literal551=(Token)match(input,159,FOLLOW_159_in_ppls2706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal551_tree = (Object)adaptor.create(string_literal551);
            adaptor.addChild(root_0, string_literal551_tree);
            }
            dbg.location(432,13);
            TOKEN552=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls2708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN552_tree = (Object)adaptor.create(TOKEN552);
            adaptor.addChild(root_0, TOKEN552_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(432, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppls");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppls"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal553=null;
        Token TOKEN554=null;

        Object string_literal553_tree=null;
        Object TOKEN554_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(435, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:4: ( 'PPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(435,5);
            string_literal553=(Token)match(input,160,FOLLOW_160_in_ppo2715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal553_tree = (Object)adaptor.create(string_literal553);
            adaptor.addChild(root_0, string_literal553_tree);
            }
            dbg.location(435,11);
            TOKEN554=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo2717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN554_tree = (Object)adaptor.create(TOKEN554);
            adaptor.addChild(root_0, TOKEN554_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(435, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal555=null;
        Token TOKEN556=null;

        Object string_literal555_tree=null;
        Object TOKEN556_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(438, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:4: ( 'PPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(438,5);
            string_literal555=(Token)match(input,161,FOLLOW_161_in_pps2724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal555_tree = (Object)adaptor.create(string_literal555);
            adaptor.addChild(root_0, string_literal555_tree);
            }
            dbg.location(438,11);
            TOKEN556=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps2726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN556_tree = (Object)adaptor.create(TOKEN556);
            adaptor.addChild(root_0, TOKEN556_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(438, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal557=null;
        Token TOKEN558=null;

        Object string_literal557_tree=null;
        Object TOKEN558_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ppss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(441, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:5: ( 'PPSS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(441,6);
            string_literal557=(Token)match(input,162,FOLLOW_162_in_ppss2733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal557_tree = (Object)adaptor.create(string_literal557);
            adaptor.addChild(root_0, string_literal557_tree);
            }
            dbg.location(441,13);
            TOKEN558=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss2735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN558_tree = (Object)adaptor.create(TOKEN558);
            adaptor.addChild(root_0, TOKEN558_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(441, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ppss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal559=null;
        Token TOKEN560=null;

        Object string_literal559_tree=null;
        Object TOKEN560_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ql");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(444, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:3: ( 'QL' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(444,4);
            string_literal559=(Token)match(input,163,FOLLOW_163_in_ql2742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal559_tree = (Object)adaptor.create(string_literal559);
            adaptor.addChild(root_0, string_literal559_tree);
            }
            dbg.location(444,9);
            TOKEN560=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql2744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN560_tree = (Object)adaptor.create(TOKEN560);
            adaptor.addChild(root_0, TOKEN560_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(444, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ql");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal561=null;
        Token TOKEN562=null;

        Object string_literal561_tree=null;
        Object TOKEN562_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "qlp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(447, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:4: ( 'QLP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(447,5);
            string_literal561=(Token)match(input,164,FOLLOW_164_in_qlp2751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal561_tree = (Object)adaptor.create(string_literal561);
            adaptor.addChild(root_0, string_literal561_tree);
            }
            dbg.location(447,11);
            TOKEN562=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp2753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN562_tree = (Object)adaptor.create(TOKEN562);
            adaptor.addChild(root_0, TOKEN562_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(447, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qlp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal563=null;
        Token TOKEN564=null;

        Object string_literal563_tree=null;
        Object TOKEN564_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(450, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:3: ( 'RB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(450,4);
            string_literal563=(Token)match(input,165,FOLLOW_165_in_rb2760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal563_tree = (Object)adaptor.create(string_literal563);
            adaptor.addChild(root_0, string_literal563_tree);
            }
            dbg.location(450,9);
            TOKEN564=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb2762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN564_tree = (Object)adaptor.create(TOKEN564);
            adaptor.addChild(root_0, TOKEN564_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(450, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal565=null;
        Token TOKEN566=null;

        Object string_literal565_tree=null;
        Object TOKEN566_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbr");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(453, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:4: ( 'RBR' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(453,5);
            string_literal565=(Token)match(input,166,FOLLOW_166_in_rbr2769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal565_tree = (Object)adaptor.create(string_literal565);
            adaptor.addChild(root_0, string_literal565_tree);
            }
            dbg.location(453,11);
            TOKEN566=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr2771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN566_tree = (Object)adaptor.create(TOKEN566);
            adaptor.addChild(root_0, TOKEN566_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(453, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbr");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal567=null;
        Token TOKEN568=null;

        Object string_literal567_tree=null;
        Object TOKEN568_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rbt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(456, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:4: ( 'RBT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(456,5);
            string_literal567=(Token)match(input,167,FOLLOW_167_in_rbt2778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal567_tree = (Object)adaptor.create(string_literal567);
            adaptor.addChild(root_0, string_literal567_tree);
            }
            dbg.location(456,11);
            TOKEN568=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt2780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN568_tree = (Object)adaptor.create(TOKEN568);
            adaptor.addChild(root_0, TOKEN568_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(456, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rbt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rbt"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal569=null;
        Token TOKEN570=null;

        Object string_literal569_tree=null;
        Object TOKEN570_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(459, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:3: ( 'RN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(459,4);
            string_literal569=(Token)match(input,168,FOLLOW_168_in_rn2787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal569_tree = (Object)adaptor.create(string_literal569);
            adaptor.addChild(root_0, string_literal569_tree);
            }
            dbg.location(459,9);
            TOKEN570=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn2789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN570_tree = (Object)adaptor.create(TOKEN570);
            adaptor.addChild(root_0, TOKEN570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(459, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal571=null;
        Token TOKEN572=null;

        Object string_literal571_tree=null;
        Object TOKEN572_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "rp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(462, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:3: ( 'RP' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(462,4);
            string_literal571=(Token)match(input,169,FOLLOW_169_in_rp2796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal571_tree = (Object)adaptor.create(string_literal571);
            adaptor.addChild(root_0, string_literal571_tree);
            }
            dbg.location(462,9);
            TOKEN572=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp2798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN572_tree = (Object)adaptor.create(TOKEN572);
            adaptor.addChild(root_0, TOKEN572_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(462, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal573=null;
        Token TOKEN574=null;

        Object string_literal573_tree=null;
        Object TOKEN574_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(465, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:5: ( 'SYM' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(465,7);
            string_literal573=(Token)match(input,170,FOLLOW_170_in_sym2807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal573_tree = (Object)adaptor.create(string_literal573);
            adaptor.addChild(root_0, string_literal573_tree);
            }
            dbg.location(465,13);
            TOKEN574=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym2809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN574_tree = (Object)adaptor.create(TOKEN574);
            adaptor.addChild(root_0, TOKEN574_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(465, 18);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal575=null;
        Token TOKEN576=null;

        Object string_literal575_tree=null;
        Object TOKEN576_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "to");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(468, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:3: ( 'TO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(468,4);
            string_literal575=(Token)match(input,171,FOLLOW_171_in_to2816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal575_tree = (Object)adaptor.create(string_literal575);
            adaptor.addChild(root_0, string_literal575_tree);
            }
            dbg.location(468,9);
            TOKEN576=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN576_tree = (Object)adaptor.create(TOKEN576);
            adaptor.addChild(root_0, TOKEN576_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(468, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "to");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal577=null;
        Token TOKEN578=null;

        Object string_literal577_tree=null;
        Object TOKEN578_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "uh");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(471, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:3: ( 'UH' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(471,4);
            string_literal577=(Token)match(input,172,FOLLOW_172_in_uh2825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal577_tree = (Object)adaptor.create(string_literal577);
            adaptor.addChild(root_0, string_literal577_tree);
            }
            dbg.location(471,9);
            TOKEN578=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh2827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN578_tree = (Object)adaptor.create(TOKEN578);
            adaptor.addChild(root_0, TOKEN578_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(471, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "uh");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal579=null;
        Token TOKEN580=null;

        Object string_literal579_tree=null;
        Object TOKEN580_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(474, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:3: ( 'VB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(474,4);
            string_literal579=(Token)match(input,173,FOLLOW_173_in_vb2834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal579_tree = (Object)adaptor.create(string_literal579);
            adaptor.addChild(root_0, string_literal579_tree);
            }
            dbg.location(474,9);
            TOKEN580=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb2836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN580_tree = (Object)adaptor.create(TOKEN580);
            adaptor.addChild(root_0, TOKEN580_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(474, 14);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal581=null;
        Token TOKEN582=null;

        Object string_literal581_tree=null;
        Object TOKEN582_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbd");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:4: ( 'VBD' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(477,5);
            string_literal581=(Token)match(input,174,FOLLOW_174_in_vbd2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal581_tree = (Object)adaptor.create(string_literal581);
            adaptor.addChild(root_0, string_literal581_tree);
            }
            dbg.location(477,11);
            TOKEN582=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd2845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN582_tree = (Object)adaptor.create(TOKEN582);
            adaptor.addChild(root_0, TOKEN582_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(477, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbd");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal583=null;
        Token TOKEN584=null;

        Object string_literal583_tree=null;
        Object TOKEN584_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(480, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:4: ( 'VBG' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(480,5);
            string_literal583=(Token)match(input,175,FOLLOW_175_in_vbg2852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal583_tree = (Object)adaptor.create(string_literal583);
            adaptor.addChild(root_0, string_literal583_tree);
            }
            dbg.location(480,11);
            TOKEN584=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg2854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN584_tree = (Object)adaptor.create(TOKEN584);
            adaptor.addChild(root_0, TOKEN584_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(480, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal585=null;
        Token TOKEN586=null;

        Object string_literal585_tree=null;
        Object TOKEN586_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbn");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(483, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:4: ( 'VBN' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(483,5);
            string_literal585=(Token)match(input,176,FOLLOW_176_in_vbn2861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal585_tree = (Object)adaptor.create(string_literal585);
            adaptor.addChild(root_0, string_literal585_tree);
            }
            dbg.location(483,11);
            TOKEN586=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn2863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN586_tree = (Object)adaptor.create(TOKEN586);
            adaptor.addChild(root_0, TOKEN586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(483, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbn");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal587=null;
        Token TOKEN588=null;

        Object string_literal587_tree=null;
        Object TOKEN588_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "vbz");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:4: ( 'VBZ' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(486,5);
            string_literal587=(Token)match(input,177,FOLLOW_177_in_vbz2870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal587_tree = (Object)adaptor.create(string_literal587);
            adaptor.addChild(root_0, string_literal587_tree);
            }
            dbg.location(486,11);
            TOKEN588=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz2872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN588_tree = (Object)adaptor.create(TOKEN588);
            adaptor.addChild(root_0, TOKEN588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(486, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vbz");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal589=null;
        Token TOKEN590=null;

        Object string_literal589_tree=null;
        Object TOKEN590_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wdt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(489, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:4: ( 'WDT' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(489,5);
            string_literal589=(Token)match(input,178,FOLLOW_178_in_wdt2879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal589_tree = (Object)adaptor.create(string_literal589);
            adaptor.addChild(root_0, string_literal589_tree);
            }
            dbg.location(489,11);
            TOKEN590=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt2881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN590_tree = (Object)adaptor.create(TOKEN590);
            adaptor.addChild(root_0, TOKEN590_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(489, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wdt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal591=null;
        Token TOKEN592=null;

        Object string_literal591_tree=null;
        Object TOKEN592_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wp_poss");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(492, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:8: ( 'WP$' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(492,9);
            string_literal591=(Token)match(input,179,FOLLOW_179_in_wp_poss2888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal591_tree = (Object)adaptor.create(string_literal591);
            adaptor.addChild(root_0, string_literal591_tree);
            }
            dbg.location(492,15);
            TOKEN592=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss2890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN592_tree = (Object)adaptor.create(TOKEN592);
            adaptor.addChild(root_0, TOKEN592_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(492, 20);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wp_poss");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal593=null;
        Token TOKEN594=null;

        Object string_literal593_tree=null;
        Object TOKEN594_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wpo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:4: ( 'WPO' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(496,5);
            string_literal593=(Token)match(input,180,FOLLOW_180_in_wpo2898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal593_tree = (Object)adaptor.create(string_literal593);
            adaptor.addChild(root_0, string_literal593_tree);
            }
            dbg.location(496,11);
            TOKEN594=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo2900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN594_tree = (Object)adaptor.create(TOKEN594);
            adaptor.addChild(root_0, TOKEN594_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(496, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wpo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal595=null;
        Token TOKEN596=null;

        Object string_literal595_tree=null;
        Object TOKEN596_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wps");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(499, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:4: ( 'WPS' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(499,5);
            string_literal595=(Token)match(input,181,FOLLOW_181_in_wps2907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal595_tree = (Object)adaptor.create(string_literal595);
            adaptor.addChild(root_0, string_literal595_tree);
            }
            dbg.location(499,11);
            TOKEN596=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps2909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN596_tree = (Object)adaptor.create(TOKEN596);
            adaptor.addChild(root_0, TOKEN596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(499, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wps");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wps"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal597=null;
        Token TOKEN598=null;

        Object string_literal597_tree=null;
        Object TOKEN598_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "wrb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(506, 1);

        try {
            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:4: ( 'WRB' TOKEN )
            dbg.enterAlt(1);

            // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(506,5);
            string_literal597=(Token)match(input,182,FOLLOW_182_in_wrb2927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal597_tree = (Object)adaptor.create(string_literal597);
            adaptor.addChild(root_0, string_literal597_tree);
            }
            dbg.location(506,11);
            TOKEN598=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb2929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN598_tree = (Object)adaptor.create(TOKEN598);
            adaptor.addChild(root_0, TOKEN598_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(506, 16);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "wrb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: ( sentence1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:13: sentence1
        {
        dbg.location(32,13);
        pushFollow(FOLLOW_sentence1_in_synpred3_ChemicalChunker206);
        sentence1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: ( sentence2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:23: sentence2
        {
        dbg.location(32,23);
        pushFollow(FOLLOW_sentence2_in_synpred4_ChemicalChunker208);
        sentence2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: ( sentence3 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:33: sentence3
        {
        dbg.location(32,33);
        pushFollow(FOLLOW_sentence3_in_synpred5_ChemicalChunker210);
        sentence3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:43: ( sentence4 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:43: sentence4
        {
        dbg.location(32,43);
        pushFollow(FOLLOW_sentence4_in_synpred6_ChemicalChunker212);
        sentence4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:72: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:32:72: adv
        {
        dbg.location(32,72);
        pushFollow(FOLLOW_adv_in_synpred10_ChemicalChunker225);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:4: nounphrase
        {
        dbg.location(34,4);
        pushFollow(FOLLOW_nounphrase_in_synpred11_ChemicalChunker236);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:16: verbphrase
        {
        dbg.location(34,16);
        pushFollow(FOLLOW_verbphrase_in_synpred12_ChemicalChunker239);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:28: prepphrase
        {
        dbg.location(34,28);
        pushFollow(FOLLOW_prepphrase_in_synpred13_ChemicalChunker242);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:4: verbphrase
        {
        dbg.location(36,4);
        pushFollow(FOLLOW_verbphrase_in_synpred14_ChemicalChunker276);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:16: nounphrase
        {
        dbg.location(36,16);
        pushFollow(FOLLOW_nounphrase_in_synpred15_ChemicalChunker279);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:28: prepphrase
        {
        dbg.location(36,28);
        pushFollow(FOLLOW_prepphrase_in_synpred16_ChemicalChunker282);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: ( prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:4: prepphrase
        {
        dbg.location(38,4);
        pushFollow(FOLLOW_prepphrase_in_synpred17_ChemicalChunker316);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:16: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:16: nounphrase
        {
        dbg.location(38,16);
        pushFollow(FOLLOW_nounphrase_in_synpred18_ChemicalChunker319);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:28: verbphrase
        {
        dbg.location(38,28);
        pushFollow(FOLLOW_verbphrase_in_synpred19_ChemicalChunker322);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:16: ( verbphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:16: verbphrase
        {
        dbg.location(41,16);
        pushFollow(FOLLOW_verbphrase_in_synpred21_ChemicalChunker361);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:28: ( nounphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:28: nounphrase
        {
        dbg.location(41,28);
        pushFollow(FOLLOW_nounphrase_in_synpred22_ChemicalChunker364);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:19: adj
        {
        dbg.location(43,19);
        pushFollow(FOLLOW_adj_in_synpred24_ChemicalChunker401);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:30: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:30: noun
        {
        dbg.location(43,30);
        pushFollow(FOLLOW_noun_in_synpred26_ChemicalChunker408);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( cc )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: cc
        {
        dbg.location(43,37);
        pushFollow(FOLLOW_cc_in_synpred27_ChemicalChunker412);
        cc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:53: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:53: adj
        {
        dbg.location(43,53);
        pushFollow(FOLLOW_adj_in_synpred30_ChemicalChunker422);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( cc )? ( comma )? ( cc )? ( adj )+ noun
        {
        dbg.location(43,37);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:37: ( cc )?
        int alt74=2;
        try { dbg.enterSubRule(74);
        try { dbg.enterDecision(74);

        int LA74_0 = input.LA(1);

        if ( (LA74_0==120) ) {
            int LA74_1 = input.LA(2);

            if ( (LA74_1==TOKEN) ) {
                int LA74_3 = input.LA(3);

                if ( (synpred27_ChemicalChunker()) ) {
                    alt74=1;
                }
            }
        }
        } finally {dbg.exitDecision(74);}

        switch (alt74) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(43,37);
                pushFollow(FOLLOW_cc_in_synpred31_ChemicalChunker412);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(74);}

        dbg.location(43,41);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:41: ( comma )?
        int alt75=2;
        try { dbg.enterSubRule(75);
        try { dbg.enterDecision(75);

        int LA75_0 = input.LA(1);

        if ( (LA75_0==97) ) {
            alt75=1;
        }
        } finally {dbg.exitDecision(75);}

        switch (alt75) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(43,41);
                pushFollow(FOLLOW_comma_in_synpred31_ChemicalChunker415);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(75);}

        dbg.location(43,48);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:48: ( cc )?
        int alt76=2;
        try { dbg.enterSubRule(76);
        try { dbg.enterDecision(76);

        int LA76_0 = input.LA(1);

        if ( (LA76_0==120) ) {
            alt76=1;
        }
        } finally {dbg.exitDecision(76);}

        switch (alt76) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(43,48);
                pushFollow(FOLLOW_cc_in_synpred31_ChemicalChunker418);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(76);}

        dbg.location(43,53);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:53: ( adj )+
        int cnt77=0;
        try { dbg.enterSubRule(77);

        loop77:
        do {
            int alt77=2;
            try { dbg.enterDecision(77);

            try {
                isCyclicDecision = true;
                alt77 = dfa77.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    dbg.location(43,53);
        	    pushFollow(FOLLOW_adj_in_synpred31_ChemicalChunker422);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt77 >= 1 ) break loop77;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(77, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt77++;
        } while (true);
        } finally {dbg.exitSubRule(77);}

        dbg.location(43,58);
        pushFollow(FOLLOW_noun_in_synpred31_ChemicalChunker425);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:69: ( prepphraseOf )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:69: prepphraseOf
        {
        dbg.location(43,69);
        pushFollow(FOLLOW_prepphraseOf_in_synpred32_ChemicalChunker433);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:83: ( prepphraseIN )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:43:83: prepphraseIN
        {
        dbg.location(43,83);
        pushFollow(FOLLOW_prepphraseIN_in_synpred33_ChemicalChunker436);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:15: ( to )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:15: to
        {
        dbg.location(46,15);
        pushFollow(FOLLOW_to_in_synpred34_ChemicalChunker450);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:19: ( inAll )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:19: inAll
        {
        dbg.location(46,19);
        pushFollow(FOLLOW_inAll_in_synpred35_ChemicalChunker453);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:46: ( verb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:46: verb
        {
        dbg.location(46,46);
        pushFollow(FOLLOW_verb_in_synpred39_ChemicalChunker466);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:52: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:52: adv
        {
        dbg.location(46,52);
        pushFollow(FOLLOW_adv_in_synpred40_ChemicalChunker469);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:57: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:57: adj
        {
        dbg.location(46,57);
        pushFollow(FOLLOW_adj_in_synpred41_ChemicalChunker472);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:36: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:36: ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )?
        {
        dbg.location(46,36);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:36: ( adv )*
        try { dbg.enterSubRule(78);

        loop78:
        do {
            int alt78=2;
            try { dbg.enterDecision(78);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=165 && LA78_0<=167)) ) {
                alt78=1;
            }


            } finally {dbg.exitDecision(78);}

            switch (alt78) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(46,36);
        	    pushFollow(FOLLOW_adv_in_synpred42_ChemicalChunker460);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop78;
            }
        } while (true);
        } finally {dbg.exitSubRule(78);}

        dbg.location(46,41);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:41: ( adj )?
        int alt79=2;
        try { dbg.enterSubRule(79);
        try { dbg.enterDecision(79);

        int LA79_0 = input.LA(1);

        if ( ((LA79_0>=12 && LA79_0<=13)||(LA79_0>=137 && LA79_0<=140)) ) {
            alt79=1;
        }
        } finally {dbg.exitDecision(79);}

        switch (alt79) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(46,41);
                pushFollow(FOLLOW_adj_in_synpred42_ChemicalChunker463);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(79);}

        dbg.location(46,46);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:46: ( verb )+
        int cnt80=0;
        try { dbg.enterSubRule(80);

        loop80:
        do {
            int alt80=2;
            try { dbg.enterDecision(80);

            int LA80_0 = input.LA(1);

            if ( (LA80_0==53||(LA80_0>=55 && LA80_0<=56)||(LA80_0>=59 && LA80_0<=66)||LA80_0==68||(LA80_0>=70 && LA80_0<=73)||LA80_0==75||LA80_0==77||(LA80_0>=79 && LA80_0<=82)||LA80_0==84||(LA80_0>=86 && LA80_0<=88)||(LA80_0>=90 && LA80_0<=91)||(LA80_0>=93 && LA80_0<=95)||(LA80_0>=174 && LA80_0<=177)) ) {
                alt80=1;
            }


            } finally {dbg.exitDecision(80);}

            switch (alt80) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    dbg.location(46,46);
        	    pushFollow(FOLLOW_verb_in_synpred42_ChemicalChunker466);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt80 >= 1 ) break loop80;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(80, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt80++;
        } while (true);
        } finally {dbg.exitSubRule(80);}

        dbg.location(46,52);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:52: ( adv )*
        try { dbg.enterSubRule(81);

        loop81:
        do {
            int alt81=2;
            try { dbg.enterDecision(81);

            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=165 && LA81_0<=167)) ) {
                alt81=1;
            }


            } finally {dbg.exitDecision(81);}

            switch (alt81) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    dbg.location(46,52);
        	    pushFollow(FOLLOW_adv_in_synpred42_ChemicalChunker469);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop81;
            }
        } while (true);
        } finally {dbg.exitSubRule(81);}

        dbg.location(46,57);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:57: ( adj )?
        int alt82=2;
        try { dbg.enterSubRule(82);
        try { dbg.enterDecision(82);

        int LA82_0 = input.LA(1);

        if ( ((LA82_0>=12 && LA82_0<=13)||(LA82_0>=137 && LA82_0<=140)) ) {
            alt82=1;
        }
        } finally {dbg.exitDecision(82);}

        switch (alt82) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                dbg.location(46,57);
                pushFollow(FOLLOW_adj_in_synpred42_ChemicalChunker472);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(82);}


        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:65: ( ( cc )? ( comma )? prepphrase )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:65: ( cc )? ( comma )? prepphrase
        {
        dbg.location(46,65);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:65: ( cc )?
        int alt83=2;
        try { dbg.enterSubRule(83);
        try { dbg.enterDecision(83);

        int LA83_0 = input.LA(1);

        if ( (LA83_0==120) ) {
            alt83=1;
        }
        } finally {dbg.exitDecision(83);}

        switch (alt83) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                dbg.location(46,65);
                pushFollow(FOLLOW_cc_in_synpred45_ChemicalChunker478);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(83);}

        dbg.location(46,69);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:46:69: ( comma )?
        int alt84=2;
        try { dbg.enterSubRule(84);
        try { dbg.enterDecision(84);

        int LA84_0 = input.LA(1);

        if ( (LA84_0==97) ) {
            alt84=1;
        }
        } finally {dbg.exitDecision(84);}

        switch (alt84) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                dbg.location(46,69);
                pushFollow(FOLLOW_comma_in_synpred45_ChemicalChunker481);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(84);}

        dbg.location(46,76);
        pushFollow(FOLLOW_prepphrase_in_synpred45_ChemicalChunker484);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred82_ChemicalChunker
    public final void synpred82_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:12: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:12: unnamedmolecule
        {
        dbg.location(49,12);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred82_ChemicalChunker583);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_ChemicalChunker

    // $ANTLR start synpred83_ChemicalChunker
    public final void synpred83_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: molecule
        {
        dbg.location(49,28);
        pushFollow(FOLLOW_molecule_in_synpred83_ChemicalChunker585);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: ( nn )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:45: nn
        {
        dbg.location(49,45);
        pushFollow(FOLLOW_nn_in_synpred85_ChemicalChunker589);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:59: ( apparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:59: apparatus
        {
        dbg.location(49,59);
        pushFollow(FOLLOW_apparatus_in_synpred88_ChemicalChunker595);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:100: measurements
        {
        dbg.location(49,100);
        pushFollow(FOLLOW_measurements_in_synpred92_ChemicalChunker603);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: amount
        {
        dbg.location(50,67);
        pushFollow(FOLLOW_amount_in_synpred113_ChemicalChunker646);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:74: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:74: cd
        {
        dbg.location(50,74);
        pushFollow(FOLLOW_cd_in_synpred114_ChemicalChunker648);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:87: ( mixture )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:87: mixture
        {
        dbg.location(50,87);
        pushFollow(FOLLOW_mixture_in_synpred117_ChemicalChunker654);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:16: ( measurements )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:16: measurements
        {
        dbg.location(52,16);
        pushFollow(FOLLOW_measurements_in_synpred118_ChemicalChunker667);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:29: ( md )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:29: md
        {
        dbg.location(52,29);
        pushFollow(FOLLOW_md_in_synpred119_ChemicalChunker669);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:37: ( oscarCompound )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:37: oscarCompound
        {
        dbg.location(52,37);
        pushFollow(FOLLOW_oscarCompound_in_synpred121_ChemicalChunker673);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:51: ( molecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:51: molecule
        {
        dbg.location(52,51);
        pushFollow(FOLLOW_molecule_in_synpred122_ChemicalChunker675);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:60: ( unnamedmolecule )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:60: unnamedmolecule
        {
        dbg.location(52,60);
        pushFollow(FOLLOW_unnamedmolecule_in_synpred123_ChemicalChunker677);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:85: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:85: cd
        {
        dbg.location(52,85);
        pushFollow(FOLLOW_cd_in_synpred126_ChemicalChunker683);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:88: ( noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:88: noun
        {
        dbg.location(52,88);
        pushFollow(FOLLOW_noun_in_synpred127_ChemicalChunker685);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:98: ( cd )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:98: cd
        {
        dbg.location(52,98);
        pushFollow(FOLLOW_cd_in_synpred129_ChemicalChunker689);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:107: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:107: adj
        {
        dbg.location(52,107);
        pushFollow(FOLLOW_adj_in_synpred131_ChemicalChunker693);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:5: ( prepphraseOther )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:5: prepphraseOther
        {
        dbg.location(59,5);
        pushFollow(FOLLOW_prepphraseOther_in_synpred139_ChemicalChunker738);
        prepphraseOther();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred140_ChemicalChunker
    public final void synpred140_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:21: ( prepphraseTemp )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:21: prepphraseTemp
        {
        dbg.location(59,21);
        pushFollow(FOLLOW_prepphraseTemp_in_synpred140_ChemicalChunker740);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:4: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:4: adv
        {
        dbg.location(67,4);
        pushFollow(FOLLOW_adv_in_synpred144_ChemicalChunker820);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: adj
        {
        dbg.location(67,8);
        pushFollow(FOLLOW_adj_in_synpred145_ChemicalChunker822);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:19: ( adv )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:19: adv
        {
        dbg.location(73,19);
        pushFollow(FOLLOW_adv_in_synpred167_ChemicalChunker948);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:23: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:23: adj
        {
        dbg.location(73,23);
        pushFollow(FOLLOW_adj_in_synpred168_ChemicalChunker950);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:18: ( adj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:18: adj
        {
        dbg.location(82,18);
        pushFollow(FOLLOW_adj_in_synpred174_ChemicalChunker1111);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:22: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:22: jj
        {
        dbg.location(82,22);
        pushFollow(FOLLOW_jj_in_synpred175_ChemicalChunker1113);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:30: ( nnapparatus )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:30: nnapparatus
        {
        dbg.location(82,30);
        pushFollow(FOLLOW_nnapparatus_in_synpred177_ChemicalChunker1119);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:19: ( oscarCompound1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:19: oscarCompound1
        {
        dbg.location(87,19);
        pushFollow(FOLLOW_oscarCompound1_in_synpred181_ChemicalChunker1166);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:34: ( oscarCompound2 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:34: oscarCompound2
        {
        dbg.location(87,34);
        pushFollow(FOLLOW_oscarCompound2_in_synpred182_ChemicalChunker1168);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:49: ( oscarCompound3 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:49: oscarCompound3
        {
        dbg.location(87,49);
        pushFollow(FOLLOW_oscarCompound3_in_synpred183_ChemicalChunker1170);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:73: ( rrb )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:73: rrb
        {
        dbg.location(87,73);
        pushFollow(FOLLOW_rrb_in_synpred184_ChemicalChunker1175);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:26: ( oscarcm )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:26: oscarcm
        {
        dbg.location(90,26);
        pushFollow(FOLLOW_oscarcm_in_synpred185_ChemicalChunker1211);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:18: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:18: amount
        {
        dbg.location(95,18);
        pushFollow(FOLLOW_amount_in_synpred187_ChemicalChunker1275);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:11: ( amount )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:11: amount
        {
        dbg.location(103,11);
        pushFollow(FOLLOW_amount_in_synpred191_ChemicalChunker1350);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( jj )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: jj
        {
        dbg.location(105,30);
        pushFollow(FOLLOW_jj_in_synpred193_ChemicalChunker1368);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( ( jj )? noun )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( jj )? noun
        {
        dbg.location(105,30);
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:30: ( jj )?
        int alt85=2;
        try { dbg.enterSubRule(85);
        try { dbg.enterDecision(85);

        int LA85_0 = input.LA(1);

        if ( (LA85_0==137) ) {
            int LA85_1 = input.LA(2);

            if ( (LA85_1==TOKEN) ) {
                int LA85_3 = input.LA(3);

                if ( (synpred193_ChemicalChunker()) ) {
                    alt85=1;
                }
            }
        }
        } finally {dbg.exitDecision(85);}

        switch (alt85) {
            case 1 :
                dbg.enterAlt(1);

                // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                dbg.location(105,30);
                pushFollow(FOLLOW_jj_in_synpred194_ChemicalChunker1368);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(85);}

        dbg.location(105,34);
        pushFollow(FOLLOW_noun_in_synpred194_ChemicalChunker1371);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:3: ( unnamedmoleculeamount1 )
        dbg.enterAlt(1);

        // /home/lezan/galWorkspace/chemicaltagger/src/main/antlr3/uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:3: unnamedmoleculeamount1
        {
        dbg.location(108,3);
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred195_ChemicalChunker1382);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred140_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred82_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred83_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA77 dfa77 = new DFA77(this);
    static final String DFA2_eotS =
        "\147\uffff";
    static final String DFA2_eofS =
        "\1\1\146\uffff";
    static final String DFA2_minS =
        "\1\12\1\uffff\141\0\4\uffff";
    static final String DFA2_maxS =
        "\1\u00b5\1\uffff\141\0\4\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\5\141\uffff\1\1\1\2\1\3\1\4";
    static final String DFA2_specialS =
        "\2\uffff\1\22\1\111\1\63\1\105\1\30\1\47\1\21\1\103\1\10\1\67\1"+
        "\134\1\126\1\66\1\6\1\43\1\0\1\57\1\52\1\72\1\64\1\73\1\106\1\117"+
        "\1\114\1\124\1\136\1\127\1\7\1\11\1\4\1\17\1\20\1\115\1\135\1\56"+
        "\1\61\1\46\1\132\1\62\1\45\1\34\1\40\1\77\1\42\1\36\1\35\1\55\1"+
        "\107\1\5\1\133\1\137\1\25\1\122\1\2\1\33\1\1\1\100\1\110\1\51\1"+
        "\14\1\24\1\54\1\75\1\71\1\70\1\104\1\27\1\23\1\26\1\37\1\60\1\53"+
        "\1\50\1\101\1\74\1\65\1\116\1\112\1\130\1\125\1\121\1\32\1\41\1"+
        "\31\1\15\1\13\1\16\1\3\1\12\1\123\1\131\1\140\1\113\1\120\1\76\1"+
        "\102\1\44\4\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\1\1\16\1\12\1\13\1\51\2\uffff\1\61\1\62\1\60\1\66\1\67\1"+
            "\76\1\77\1\63\1\75\1\70\1\72\1\64\1\65\1\74\1\73\1\71\1\20\1"+
            "\23\2\uffff\1\24\1\25\1\uffff\1\26\1\27\1\30\1\31\1\32\1\33"+
            "\1\34\1\35\1\36\1\37\1\40\1\41\1\17\1\104\1\uffff\1\105\1\106"+
            "\1\55\1\52\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1"+
            "\42\1\117\1\43\1\120\1\121\1\122\1\123\1\uffff\1\124\1\uffff"+
            "\1\125\1\uffff\1\126\1\127\1\130\1\131\1\uffff\1\132\1\uffff"+
            "\1\133\1\134\1\135\1\uffff\1\136\1\137\1\50\1\140\1\141\1\142"+
            "\1\uffff\1\1\3\uffff\1\1\3\uffff\1\53\16\uffff\1\1\1\15\4\uffff"+
            "\1\5\11\uffff\1\57\1\6\1\7\1\10\1\11\1\14\1\uffff\1\21\1\uffff"+
            "\1\22\2\uffff\1\54\20\uffff\1\2\1\3\1\4\3\uffff\1\56\2\uffff"+
            "\1\101\1\100\1\103\1\102\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 32:12: ( sentence1 | sentence2 | sentence3 | sentence4 )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 99;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 101;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 102;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 100;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\14\uffff";
    static final String DFA3_eofS =
        "\1\1\13\uffff";
    static final String DFA3_minS =
        "\1\12\1\uffff\3\11\3\uffff\3\0\1\uffff";
    static final String DFA3_maxS =
        "\1\u00b5\1\uffff\3\11\3\uffff\3\0\1\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\5\3\uffff\1\1\1\2\1\3\3\uffff\1\4";
    static final String DFA3_specialS =
        "\10\uffff\1\0\1\1\1\2\1\uffff}>";
    static final String[] DFA3_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\5\3\uffff\1\7\3\uffff\1\1\16\uffff\1\6\1\1\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\20\uffff\1\2\1\3\1\4\3\uffff\1\1\2\uffff\10\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 32:57: ( comma | cc | stop | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\57\uffff";
    static final String DFA4_eofS =
        "\1\1\56\uffff";
    static final String DFA4_minS =
        "\1\12\1\uffff\54\0\1\uffff";
    static final String DFA4_maxS =
        "\1\u00b5\1\uffff\54\0\1\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA4_specialS =
        "\2\uffff\1\34\1\50\1\14\1\52\1\24\1\27\1\44\1\21\1\13\1\45\1\1\1"+
        "\30\1\46\1\2\1\53\1\3\1\31\1\42\1\32\1\43\1\26\1\20\1\7\1\51\1\36"+
        "\1\22\1\6\1\41\1\25\1\16\1\23\1\5\1\12\1\37\1\33\1\47\1\0\1\17\1"+
        "\35\1\11\1\10\1\15\1\4\1\40\1\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1\1\16\1\11\1\12\1\51\2\uffff\20\1\1\20\1\23\2\uffff\1\24"+
            "\1\25\1\uffff\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1"+
            "\37\1\40\1\41\1\17\1\1\1\uffff\2\1\1\55\1\52\10\1\1\42\1\1\1"+
            "\43\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\50\3\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1"+
            "\53\16\uffff\1\1\1\14\4\uffff\1\13\11\uffff\1\1\1\5\1\6\1\7"+
            "\1\10\1\15\1\uffff\1\21\1\uffff\1\22\2\uffff\1\54\20\uffff\1"+
            "\2\1\3\1\4\3\uffff\1\1\2\uffff\4\1\1\44\1\45\1\46\1\47",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 34:4: ( nounphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\150\uffff";
    static final String DFA5_eofS =
        "\1\34\147\uffff";
    static final String DFA5_minS =
        "\1\12\33\0\47\uffff\43\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00b5\33\0\47\uffff\43\0\2\uffff";
    static final String DFA5_acceptS =
        "\34\uffff\1\2\112\uffff\1\1";
    static final String DFA5_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\47\uffff\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\2\34\1\10\1\11\1\34\2\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1"+
            "\32\1\16\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\2\34\2\uffff"+
            "\2\34\1\uffff\15\34\1\107\1\uffff\1\110\1\111\2\34\1\112\1\113"+
            "\1\114\1\115\1\116\1\117\1\120\1\121\1\34\1\122\1\34\1\123\1"+
            "\124\1\125\1\126\1\uffff\1\127\1\uffff\1\130\1\uffff\1\131\1"+
            "\132\1\133\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff"+
            "\1\141\1\142\1\34\1\143\1\144\1\145\1\uffff\1\34\3\uffff\1\34"+
            "\3\uffff\1\34\16\uffff\2\34\4\uffff\1\34\11\uffff\1\12\1\4\1"+
            "\5\1\6\1\7\1\34\1\uffff\1\34\1\uffff\1\34\2\uffff\1\34\20\uffff"+
            "\1\1\1\2\1\3\3\uffff\1\33\2\uffff\1\104\1\103\1\106\1\105\4"+
            "\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 34:16: ( verbphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_11 = input.LA(1);

                         
                        int index5_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA6_eotS =
        "\150\uffff";
    static final String DFA6_eofS =
        "\1\1\147\uffff";
    static final String DFA6_minS =
        "\1\12\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\45\uffff";
    static final String DFA6_maxS =
        "\1\u00b5\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\45\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA6_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\40\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\45\uffff}>";
    static final String[] DFA6_transitionS = {
            "\2\1\1\15\1\16\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1"+
            "\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff"+
            "\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\16\uffff\1\1\1\20\4\uffff\1\10\11\uffff\1\62"+
            "\1\11\1\12\1\13\1\14\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\20\uffff\1\4\1\5\1\6\3\uffff\1\61\2\uffff\10\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 34:28: ( prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_4 = input.LA(1);

                         
                        int index6_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA6_8 = input.LA(1);

                         
                        int index6_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA6_9 = input.LA(1);

                         
                        int index6_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA6_10 = input.LA(1);

                         
                        int index6_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA6_11 = input.LA(1);

                         
                        int index6_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA6_12 = input.LA(1);

                         
                        int index6_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA6_49 = input.LA(1);

                         
                        int index6_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA6_50 = input.LA(1);

                         
                        int index6_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA6_51 = input.LA(1);

                         
                        int index6_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA6_52 = input.LA(1);

                         
                        int index6_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA6_53 = input.LA(1);

                         
                        int index6_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA6_54 = input.LA(1);

                         
                        int index6_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA6_55 = input.LA(1);

                         
                        int index6_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA6_56 = input.LA(1);

                         
                        int index6_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA6_57 = input.LA(1);

                         
                        int index6_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA6_58 = input.LA(1);

                         
                        int index6_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA6_59 = input.LA(1);

                         
                        int index6_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA6_60 = input.LA(1);

                         
                        int index6_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA6_61 = input.LA(1);

                         
                        int index6_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA6_62 = input.LA(1);

                         
                        int index6_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA6_63 = input.LA(1);

                         
                        int index6_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA6_64 = input.LA(1);

                         
                        int index6_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA6_65 = input.LA(1);

                         
                        int index6_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA6_66 = input.LA(1);

                         
                        int index6_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\101\uffff";
    static final String DFA7_eofS =
        "\1\1\100\uffff";
    static final String DFA7_minS =
        "\1\12\1\uffff\76\0\1\uffff";
    static final String DFA7_maxS =
        "\1\u00b5\1\uffff\76\0\1\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA7_specialS =
        "\2\uffff\1\75\1\22\1\24\1\70\1\14\1\11\1\26\1\41\1\51\1\65\1\25"+
        "\1\47\1\13\1\17\1\66\1\36\1\45\1\40\1\56\1\54\1\5\1\64\1\0\1\33"+
        "\1\34\1\46\1\35\1\2\1\3\1\27\1\15\1\30\1\6\1\62\1\61\1\31\1\42\1"+
        "\7\1\23\1\63\1\67\1\74\1\60\1\44\1\10\1\20\1\53\1\72\1\21\1\37\1"+
        "\32\1\52\1\57\1\73\1\16\1\4\1\43\1\50\1\55\1\71\1\1\1\12\1\uffff}>";
    static final String[] DFA7_transitionS = {
            "\2\1\1\6\1\7\1\1\2\uffff\1\15\1\16\1\14\1\22\1\23\1\32\1\33"+
            "\1\17\1\31\1\24\1\26\1\20\1\21\1\30\1\27\1\25\2\1\2\uffff\2"+
            "\1\1\uffff\15\1\1\41\1\uffff\1\42\1\43\2\1\1\44\1\45\1\46\1"+
            "\47\1\50\1\51\1\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\60\1\uffff"+
            "\1\61\1\uffff\1\62\1\uffff\1\63\1\64\1\65\1\66\1\uffff\1\67"+
            "\1\uffff\1\70\1\71\1\72\1\uffff\1\73\1\74\1\1\1\75\1\76\1\77"+
            "\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1\16\uffff\2\1\4\uffff\1"+
            "\1\11\uffff\1\13\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\20\uffff\1\10\1\11\1\12\3\uffff\1\34\2\uffff\1"+
            "\36\1\35\1\40\1\37\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:4: ( verbphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_24 = input.LA(1);

                         
                        int index7_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_24);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_62 = input.LA(1);

                         
                        int index7_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_62);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_29 = input.LA(1);

                         
                        int index7_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_29);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_30 = input.LA(1);

                         
                        int index7_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_57 = input.LA(1);

                         
                        int index7_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_57);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_22 = input.LA(1);

                         
                        int index7_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_34 = input.LA(1);

                         
                        int index7_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_34);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_39 = input.LA(1);

                         
                        int index7_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_46 = input.LA(1);

                         
                        int index7_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_63 = input.LA(1);

                         
                        int index7_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_63);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_32 = input.LA(1);

                         
                        int index7_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_32);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_56 = input.LA(1);

                         
                        int index7_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA7_47 = input.LA(1);

                         
                        int index7_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_47);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA7_50 = input.LA(1);

                         
                        int index7_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA7_40 = input.LA(1);

                         
                        int index7_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_40);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA7_31 = input.LA(1);

                         
                        int index7_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_31);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA7_33 = input.LA(1);

                         
                        int index7_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_33);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA7_37 = input.LA(1);

                         
                        int index7_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_37);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA7_52 = input.LA(1);

                         
                        int index7_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA7_25 = input.LA(1);

                         
                        int index7_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_25);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA7_26 = input.LA(1);

                         
                        int index7_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_26);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA7_28 = input.LA(1);

                         
                        int index7_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_28);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA7_17 = input.LA(1);

                         
                        int index7_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA7_51 = input.LA(1);

                         
                        int index7_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_51);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA7_19 = input.LA(1);

                         
                        int index7_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_19);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA7_38 = input.LA(1);

                         
                        int index7_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_38);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA7_58 = input.LA(1);

                         
                        int index7_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_58);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA7_45 = input.LA(1);

                         
                        int index7_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_45);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA7_18 = input.LA(1);

                         
                        int index7_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_18);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA7_27 = input.LA(1);

                         
                        int index7_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_27);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA7_59 = input.LA(1);

                         
                        int index7_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_59);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA7_53 = input.LA(1);

                         
                        int index7_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_53);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA7_48 = input.LA(1);

                         
                        int index7_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_48);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA7_60 = input.LA(1);

                         
                        int index7_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_60);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA7_20 = input.LA(1);

                         
                        int index7_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_20);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA7_54 = input.LA(1);

                         
                        int index7_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_54);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA7_44 = input.LA(1);

                         
                        int index7_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_44);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA7_36 = input.LA(1);

                         
                        int index7_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_36);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA7_35 = input.LA(1);

                         
                        int index7_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_35);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA7_41 = input.LA(1);

                         
                        int index7_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_41);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA7_23 = input.LA(1);

                         
                        int index7_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_23);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA7_42 = input.LA(1);

                         
                        int index7_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_42);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA7_61 = input.LA(1);

                         
                        int index7_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_61);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA7_49 = input.LA(1);

                         
                        int index7_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_49);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA7_55 = input.LA(1);

                         
                        int index7_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_55);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA7_43 = input.LA(1);

                         
                        int index7_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_43);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA7_2 = input.LA(1);

                         
                        int index7_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\150\uffff";
    static final String DFA8_eofS =
        "\1\12\147\uffff";
    static final String DFA8_minS =
        "\1\12\11\0\22\uffff\2\0\4\uffff\41\0\45\uffff";
    static final String DFA8_maxS =
        "\1\u00b5\11\0\22\uffff\2\0\4\uffff\41\0\45\uffff";
    static final String DFA8_acceptS =
        "\12\uffff\1\2\134\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\22\uffff\1\11\1\12"+
        "\4\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\45\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\12\1\43\1\10\1\11\1\76\2\uffff\20\12\1\45\1\50\2\uffff\1"+
            "\51\1\52\1\uffff\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
            "\1\64\1\65\1\66\1\44\1\12\1\uffff\2\12\1\102\1\77\10\12\1\67"+
            "\1\12\1\70\4\12\1\uffff\1\12\1\uffff\1\12\1\uffff\4\12\1\uffff"+
            "\1\12\1\uffff\3\12\1\uffff\2\12\1\75\3\12\1\uffff\1\12\3\uffff"+
            "\1\12\3\uffff\1\100\16\uffff\1\12\1\35\4\uffff\1\34\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\1\42\1\uffff\1\46\1\uffff\1\47\2\uffff"+
            "\1\101\20\uffff\1\1\1\2\1\3\3\uffff\1\12\2\uffff\4\12\1\71\1"+
            "\72\1\73\1\74",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()* loopback of 36:16: ( nounphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_28 = input.LA(1);

                         
                        int index8_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_29 = input.LA(1);

                         
                        int index8_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_34 = input.LA(1);

                         
                        int index8_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_35 = input.LA(1);

                         
                        int index8_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_35);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_36 = input.LA(1);

                         
                        int index8_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_36);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_37 = input.LA(1);

                         
                        int index8_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_37);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_38 = input.LA(1);

                         
                        int index8_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_38);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_39 = input.LA(1);

                         
                        int index8_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_40 = input.LA(1);

                         
                        int index8_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_40);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_41 = input.LA(1);

                         
                        int index8_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_42 = input.LA(1);

                         
                        int index8_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_42);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_43 = input.LA(1);

                         
                        int index8_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_43);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA8_44 = input.LA(1);

                         
                        int index8_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_44);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA8_45 = input.LA(1);

                         
                        int index8_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_45);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA8_46 = input.LA(1);

                         
                        int index8_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_46);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA8_47 = input.LA(1);

                         
                        int index8_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA8_48 = input.LA(1);

                         
                        int index8_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA8_49 = input.LA(1);

                         
                        int index8_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_49);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA8_50 = input.LA(1);

                         
                        int index8_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_50);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA8_51 = input.LA(1);

                         
                        int index8_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_51);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA8_52 = input.LA(1);

                         
                        int index8_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA8_53 = input.LA(1);

                         
                        int index8_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_53);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA8_54 = input.LA(1);

                         
                        int index8_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_54);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA8_55 = input.LA(1);

                         
                        int index8_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_55);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA8_56 = input.LA(1);

                         
                        int index8_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_56);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA8_57 = input.LA(1);

                         
                        int index8_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_57);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA8_58 = input.LA(1);

                         
                        int index8_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_58);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA8_59 = input.LA(1);

                         
                        int index8_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_59);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA8_60 = input.LA(1);

                         
                        int index8_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_60);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA8_61 = input.LA(1);

                         
                        int index8_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_61);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA8_62 = input.LA(1);

                         
                        int index8_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_62);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA8_63 = input.LA(1);

                         
                        int index8_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_63);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA8_64 = input.LA(1);

                         
                        int index8_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_64);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA8_65 = input.LA(1);

                         
                        int index8_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_65);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA8_66 = input.LA(1);

                         
                        int index8_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index8_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\150\uffff";
    static final String DFA9_eofS =
        "\1\1\147\uffff";
    static final String DFA9_minS =
        "\1\12\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\45\uffff";
    static final String DFA9_maxS =
        "\1\u00b5\3\uffff\3\0\1\uffff\7\0\1\uffff\1\0\40\uffff\22\0\45\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA9_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\40\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\45\uffff}>";
    static final String[] DFA9_transitionS = {
            "\2\1\1\15\1\16\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1"+
            "\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff"+
            "\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\16\uffff\1\1\1\20\4\uffff\1\10\11\uffff\1\62"+
            "\1\11\1\12\1\13\1\14\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\20\uffff\1\4\1\5\1\6\3\uffff\1\61\2\uffff\10\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 36:28: ( prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_4 = input.LA(1);

                         
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_5 = input.LA(1);

                         
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_49 = input.LA(1);

                         
                        int index9_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_50 = input.LA(1);

                         
                        int index9_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_51 = input.LA(1);

                         
                        int index9_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_52 = input.LA(1);

                         
                        int index9_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_53 = input.LA(1);

                         
                        int index9_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA9_54 = input.LA(1);

                         
                        int index9_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA9_55 = input.LA(1);

                         
                        int index9_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA9_56 = input.LA(1);

                         
                        int index9_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA9_57 = input.LA(1);

                         
                        int index9_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA9_58 = input.LA(1);

                         
                        int index9_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA9_59 = input.LA(1);

                         
                        int index9_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA9_60 = input.LA(1);

                         
                        int index9_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA9_61 = input.LA(1);

                         
                        int index9_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA9_62 = input.LA(1);

                         
                        int index9_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA9_63 = input.LA(1);

                         
                        int index9_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA9_64 = input.LA(1);

                         
                        int index9_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA9_65 = input.LA(1);

                         
                        int index9_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA9_66 = input.LA(1);

                         
                        int index9_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\57\uffff";
    static final String DFA10_eofS =
        "\30\uffff\1\13\26\uffff";
    static final String DFA10_minS =
        "\1\13\12\11\1\uffff\1\11\1\uffff\12\13\1\12\13\11\11\13\2\0";
    static final String DFA10_maxS =
        "\1\u00b5\12\11\1\uffff\1\11\1\uffff\13\u00b5\13\11\11\u00b5\2\0";
    static final String DFA10_acceptS =
        "\13\uffff\1\2\1\uffff\1\1\41\uffff";
    static final String DFA10_specialS =
        "\55\uffff\1\1\1\0}>";
    static final String[] DFA10_transitionS = {
            "\1\13\1\6\1\7\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff\15"+
            "\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14"+
            "\uffff\1\13\17\uffff\1\14\4\uffff\1\1\11\uffff\1\15\1\2\1\3"+
            "\1\4\1\5\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20\uffff"+
            "\1\10\1\11\1\12\3\uffff\1\15\6\uffff\4\13",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "",
            "\1\30",
            "",
            "\1\13\1\40\1\41\1\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15"+
            "\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14"+
            "\uffff\1\13\17\uffff\1\14\17\uffff\1\34\1\35\1\36\1\37\1\13"+
            "\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20\uffff\1\31\1\32\1"+
            "\33\12\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\1\13\1\40\1\41\1\13\2\uffff\20\15\2\13\2\uffff\2\13\1\uffff"+
            "\15\13\4\uffff\2\13\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13"+
            "\14\uffff\1\13\17\uffff\1\14\4\uffff\1\15\11\uffff\1\15\1\34"+
            "\1\35\1\36\1\37\1\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13"+
            "\20\uffff\1\31\1\32\1\33\3\uffff\1\15\6\uffff\4\13",
            "\5\13\2\uffff\21\13\1\43\6\13\1\42\14\13\1\uffff\23\13\1\uffff"+
            "\1\13\1\uffff\1\13\1\uffff\4\13\1\uffff\1\13\1\uffff\3\13\1"+
            "\uffff\6\13\1\uffff\1\13\3\uffff\2\13\2\uffff\1\13\16\uffff"+
            "\2\13\4\uffff\1\13\11\uffff\6\13\1\uffff\1\13\1\uffff\1\13\2"+
            "\uffff\1\13\20\uffff\3\13\3\uffff\1\13\2\uffff\10\13",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\4\13\22\uffff\2\13\2\uffff\2\13\1\uffff\15\13\4\uffff\2\13"+
            "\10\uffff\1\13\1\uffff\1\13\26\uffff\1\13\14\uffff\1\13\17\uffff"+
            "\1\14\17\uffff\5\13\1\uffff\1\13\1\uffff\1\13\2\uffff\1\13\20"+
            "\uffff\3\13\12\uffff\4\13",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:4: ( prepphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_46 = input.LA(1);

                         
                        int index10_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index10_46);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_45 = input.LA(1);

                         
                        int index10_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index10_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\150\uffff";
    static final String DFA11_eofS =
        "\1\1\147\uffff";
    static final String DFA11_minS =
        "\1\12\22\uffff\11\0\47\uffff\43\0\2\uffff";
    static final String DFA11_maxS =
        "\1\u00b5\22\uffff\11\0\47\uffff\43\0\2\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA11_specialS =
        "\23\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\47\uffff\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\2\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\106\1\32\1\33\1\141\2\uffff\20\1\1\110\1\113\2\uffff"+
            "\1\114\1\115\1\uffff\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
            "\1\125\1\126\1\127\1\130\1\131\1\107\1\1\1\uffff\2\1\1\145\1"+
            "\142\10\1\1\132\1\1\1\133\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff\2\1\1\140\3\1\1\uffff\1"+
            "\1\3\uffff\1\1\3\uffff\1\143\16\uffff\1\1\1\105\4\uffff\1\103"+
            "\11\uffff\1\1\1\26\1\27\1\30\1\31\1\104\1\uffff\1\111\1\uffff"+
            "\1\112\2\uffff\1\144\20\uffff\1\23\1\24\1\25\3\uffff\1\1\2\uffff"+
            "\4\1\1\134\1\135\1\136\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:16: ( nounphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_19 = input.LA(1);

                         
                        int index11_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_20 = input.LA(1);

                         
                        int index11_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_21 = input.LA(1);

                         
                        int index11_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_22 = input.LA(1);

                         
                        int index11_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_23 = input.LA(1);

                         
                        int index11_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_24 = input.LA(1);

                         
                        int index11_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_24);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_25 = input.LA(1);

                         
                        int index11_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA11_26 = input.LA(1);

                         
                        int index11_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_26);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA11_27 = input.LA(1);

                         
                        int index11_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA11_67 = input.LA(1);

                         
                        int index11_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_67);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA11_68 = input.LA(1);

                         
                        int index11_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_68);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA11_69 = input.LA(1);

                         
                        int index11_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_69);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA11_70 = input.LA(1);

                         
                        int index11_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_70);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA11_71 = input.LA(1);

                         
                        int index11_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_71);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA11_72 = input.LA(1);

                         
                        int index11_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_72);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA11_73 = input.LA(1);

                         
                        int index11_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_73);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA11_74 = input.LA(1);

                         
                        int index11_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_74);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA11_75 = input.LA(1);

                         
                        int index11_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_75);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA11_76 = input.LA(1);

                         
                        int index11_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_76);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA11_77 = input.LA(1);

                         
                        int index11_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_77);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA11_78 = input.LA(1);

                         
                        int index11_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_78);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA11_79 = input.LA(1);

                         
                        int index11_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_79);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA11_80 = input.LA(1);

                         
                        int index11_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_80);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA11_81 = input.LA(1);

                         
                        int index11_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_81);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA11_82 = input.LA(1);

                         
                        int index11_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_82);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA11_83 = input.LA(1);

                         
                        int index11_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_83);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA11_84 = input.LA(1);

                         
                        int index11_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_84);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA11_85 = input.LA(1);

                         
                        int index11_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_85);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA11_86 = input.LA(1);

                         
                        int index11_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_86);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA11_87 = input.LA(1);

                         
                        int index11_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_87);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA11_88 = input.LA(1);

                         
                        int index11_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_88);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA11_89 = input.LA(1);

                         
                        int index11_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_89);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA11_90 = input.LA(1);

                         
                        int index11_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_90);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA11_91 = input.LA(1);

                         
                        int index11_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_91);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA11_92 = input.LA(1);

                         
                        int index11_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_92);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA11_93 = input.LA(1);

                         
                        int index11_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_93);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA11_94 = input.LA(1);

                         
                        int index11_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_94);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA11_95 = input.LA(1);

                         
                        int index11_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_95);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA11_96 = input.LA(1);

                         
                        int index11_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_96);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA11_97 = input.LA(1);

                         
                        int index11_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_97);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA11_98 = input.LA(1);

                         
                        int index11_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_98);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA11_99 = input.LA(1);

                         
                        int index11_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_99);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA11_100 = input.LA(1);

                         
                        int index11_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_100);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA11_101 = input.LA(1);

                         
                        int index11_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\150\uffff";
    static final String DFA12_eofS =
        "\1\1\147\uffff";
    static final String DFA12_minS =
        "\1\12\3\uffff\3\0\2\uffff\6\0\42\uffff\65\0\2\uffff";
    static final String DFA12_maxS =
        "\1\u00b5\3\uffff\3\0\2\uffff\6\0\42\uffff\65\0\2\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA12_specialS =
        "\4\uffff\1\0\1\1\1\2\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\42\uffff\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
        "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
        "\1\75\2\uffff}>";
    static final String[] DFA12_transitionS = {
            "\2\1\1\15\1\16\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1"+
            "\102\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff"+
            "\2\1\1\uffff\15\1\1\107\1\uffff\1\110\1\111\2\1\1\112\1\113"+
            "\1\114\1\115\1\116\1\117\1\120\1\121\1\1\1\122\1\1\1\123\1\124"+
            "\1\125\1\126\1\uffff\1\127\1\uffff\1\130\1\uffff\1\131\1\132"+
            "\1\133\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff"+
            "\1\141\1\142\1\1\1\143\1\144\1\145\1\uffff\1\1\3\uffff\1\1\3"+
            "\uffff\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\1\62\1\11\1\12"+
            "\1\13\1\14\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff"+
            "\1\4\1\5\1\6\3\uffff\1\61\2\uffff\1\104\1\103\1\106\1\105\4"+
            "\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:28: ( verbphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_69 = input.LA(1);

                         
                        int index12_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_70 = input.LA(1);

                         
                        int index12_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_71 = input.LA(1);

                         
                        int index12_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_72 = input.LA(1);

                         
                        int index12_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_72);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_73 = input.LA(1);

                         
                        int index12_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_73);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_74 = input.LA(1);

                         
                        int index12_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_74);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_75 = input.LA(1);

                         
                        int index12_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_75);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_76 = input.LA(1);

                         
                        int index12_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_76);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_77 = input.LA(1);

                         
                        int index12_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_77);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_78 = input.LA(1);

                         
                        int index12_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_78);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_79 = input.LA(1);

                         
                        int index12_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_79);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_80 = input.LA(1);

                         
                        int index12_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_80);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_81 = input.LA(1);

                         
                        int index12_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_81);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_82 = input.LA(1);

                         
                        int index12_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_82);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_83 = input.LA(1);

                         
                        int index12_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_83);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_84 = input.LA(1);

                         
                        int index12_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_84);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_85 = input.LA(1);

                         
                        int index12_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_85);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_86 = input.LA(1);

                         
                        int index12_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_86);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_87 = input.LA(1);

                         
                        int index12_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_87);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_88 = input.LA(1);

                         
                        int index12_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_88);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_89 = input.LA(1);

                         
                        int index12_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_89);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_90 = input.LA(1);

                         
                        int index12_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_90);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_91 = input.LA(1);

                         
                        int index12_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_91);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_92 = input.LA(1);

                         
                        int index12_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_92);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_93 = input.LA(1);

                         
                        int index12_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_93);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_94 = input.LA(1);

                         
                        int index12_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_94);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_95 = input.LA(1);

                         
                        int index12_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_95);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_96 = input.LA(1);

                         
                        int index12_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_96);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_97 = input.LA(1);

                         
                        int index12_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_97);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_98 = input.LA(1);

                         
                        int index12_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_98);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_99 = input.LA(1);

                         
                        int index12_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_99);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_100 = input.LA(1);

                         
                        int index12_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_100);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_101 = input.LA(1);

                         
                        int index12_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\u0095\uffff";
    static final String DFA13_eofS =
        "\u0095\uffff";
    static final String DFA13_minS =
        "\1\14\33\11\2\uffff\22\13\11\14\45\11\34\13\3\14\6\65\11\11\11\13";
    static final String DFA13_maxS =
        "\1\u00b1\33\11\2\uffff\22\u00b5\11\u00b1\45\11\34\u00b5\11\u00b1"+
        "\11\11\11\u00b5";
    static final String DFA13_acceptS =
        "\34\uffff\1\2\1\1\167\uffff";
    static final String DFA13_specialS =
        "\u0095\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\32\1\33\3\uffff\1\4\1\5\1\3\1\11\1\12\1\21\1\22\1\6\1\20"+
            "\1\13\1\15\1\7\1\10\1\17\1\16\1\14\24\uffff\1\34\1\uffff\2\34"+
            "\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1"+
            "\uffff\3\34\31\uffff\1\35\4\uffff\1\35\11\uffff\1\2\1\26\1\27"+
            "\1\30\1\31\30\uffff\1\23\1\24\1\25\3\uffff\1\1\2\uffff\4\34",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "",
            "",
            "\1\35\1\122\1\123\1\35\2\uffff\1\73\1\74\1\72\1\100\1\101\1"+
            "\110\1\111\1\75\1\107\1\102\1\104\1\76\1\77\1\106\1\105\1\103"+
            "\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34"+
            "\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1"+
            "\35\17\uffff\1\35\4\uffff\1\35\11\uffff\1\71\1\116\1\117\1\120"+
            "\1\121\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff"+
            "\1\113\1\114\1\115\3\uffff\1\112\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\35\1\122\1\123\1\35\2\uffff\2\35\1\124\17\35\2\uffff\2\35"+
            "\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4"+
            "\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff"+
            "\1\35\11\uffff\1\35\1\116\1\117\1\120\1\121\1\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\1\113\1\114\1\115\3\uffff"+
            "\1\35\2\uffff\4\34\4\35",
            "\1\134\1\135\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff"+
            "\10\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1"+
            "\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3"+
            "\34\31\uffff\1\35\4\uffff\1\35\11\uffff\1\35\1\130\1\131\1\132"+
            "\1\133\30\uffff\1\125\1\126\1\127\3\uffff\1\35\2\uffff\4\34",
            "\1\134\1\135\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff"+
            "\10\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1"+
            "\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3"+
            "\34\31\uffff\1\35\4\uffff\1\35\11\uffff\1\35\1\130\1\131\1\132"+
            "\1\133\30\uffff\1\125\1\126\1\127\3\uffff\1\35\2\uffff\4\34",
            "\1\134\1\135\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff"+
            "\10\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1"+
            "\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3"+
            "\34\31\uffff\1\35\4\uffff\1\35\11\uffff\1\35\1\130\1\131\1\132"+
            "\1\133\30\uffff\1\125\1\126\1\127\3\uffff\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\2\35\3\uffff\20\35\24\uffff\1\34\1\uffff\2\34\2\uffff\10\34"+
            "\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
            "\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31"+
            "\uffff\1\35\4\uffff\1\35\11\uffff\5\35\30\uffff\3\35\3\uffff"+
            "\1\35\2\uffff\4\34",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145",
            "\1\146",
            "\1\147",
            "\1\150",
            "\1\151",
            "\1\152",
            "\1\153",
            "\1\154",
            "\1\155",
            "\1\156",
            "\1\157",
            "\1\160",
            "\1\161",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\2\35\1\124\17\35\2\uffff"+
            "\2\35\1\uffff\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1"+
            "\35\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34"+
            "\1\uffff\3\34\1\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff"+
            "\1\35\4\uffff\1\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089"+
            "\1\u008a\1\u008b\3\uffff\1\35\2\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\2\uffff\22\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\4\uffff\1"+
            "\35\11\uffff\1\35\1\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff"+
            "\1\35\1\uffff\1\35\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b"+
            "\3\uffff\1\35\2\uffff\4\34\4\35",
            "\2\34\47\uffff\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34"+
            "\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff"+
            "\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\17"+
            "\uffff\4\34\30\uffff\3\34\6\uffff\4\34",
            "\2\34\47\uffff\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34"+
            "\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff"+
            "\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\17"+
            "\uffff\4\34\30\uffff\3\34\6\uffff\4\34",
            "\2\34\47\uffff\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34"+
            "\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff"+
            "\1\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\17"+
            "\uffff\4\34\30\uffff\3\34\6\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\34\1\uffff\2\34\2\uffff\10\34\1\uffff\1\34\1\uffff\4\34"+
            "\1\uffff\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff"+
            "\3\34\1\uffff\2\34\1\uffff\3\34\31\uffff\1\35\64\uffff\4\34",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\4\35\22\uffff\2\35\2\uffff\2\35\1\uffff\15\35\1\34\1\uffff"+
            "\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff\1\34\1\uffff\1"+
            "\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1\uffff\2\34\1\35"+
            "\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\5\35\1\uffff\1\35"+
            "\1\uffff\1\35\2\uffff\1\35\20\uffff\3\35\6\uffff\4\34\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35",
            "\1\35\1\u0087\1\u0088\1\35\22\uffff\2\35\2\uffff\2\35\1\uffff"+
            "\15\35\1\34\1\uffff\2\34\2\35\10\34\1\35\1\34\1\35\4\34\1\uffff"+
            "\1\34\1\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\3\34\1"+
            "\uffff\2\34\1\35\3\34\11\uffff\1\35\17\uffff\1\35\17\uffff\1"+
            "\u0083\1\u0084\1\u0085\1\u0086\1\35\1\uffff\1\35\1\uffff\1\35"+
            "\2\uffff\1\35\20\uffff\1\u0089\1\u008a\1\u008b\6\uffff\4\34"+
            "\4\35"
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()+ loopback of 41:4: ( prepphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA14_eotS =
        "\150\uffff";
    static final String DFA14_eofS =
        "\1\1\147\uffff";
    static final String DFA14_minS =
        "\1\12\1\uffff\11\0\46\uffff\65\0\2\uffff";
    static final String DFA14_maxS =
        "\1\u00b5\1\uffff\11\0\46\uffff\65\0\2\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA14_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\46\uffff\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\2\uffff}>";
    static final String[] DFA14_transitionS = {
            "\2\1\1\6\1\7\1\1\2\uffff\1\64\1\65\1\63\1\71\1\72\1\101\1\102"+
            "\1\66\1\100\1\73\1\75\1\67\1\70\1\77\1\76\1\74\2\1\2\uffff\2"+
            "\1\1\uffff\15\1\1\107\1\uffff\1\110\1\111\2\1\1\112\1\113\1"+
            "\114\1\115\1\116\1\117\1\120\1\121\1\1\1\122\1\1\1\123\1\124"+
            "\1\125\1\126\1\uffff\1\127\1\uffff\1\130\1\uffff\1\131\1\132"+
            "\1\133\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff"+
            "\1\141\1\142\1\1\1\143\1\144\1\145\1\uffff\1\1\3\uffff\1\1\3"+
            "\uffff\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\1\62\1\2\1\3\1"+
            "\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\1\10"+
            "\1\11\1\12\3\uffff\1\61\2\uffff\1\104\1\103\1\106\1\105\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()+ loopback of 41:16: ( verbphrase )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA14_49 = input.LA(1);

                         
                        int index14_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA14_50 = input.LA(1);

                         
                        int index14_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA14_51 = input.LA(1);

                         
                        int index14_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA14_52 = input.LA(1);

                         
                        int index14_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA14_53 = input.LA(1);

                         
                        int index14_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA14_54 = input.LA(1);

                         
                        int index14_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA14_55 = input.LA(1);

                         
                        int index14_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_55);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA14_56 = input.LA(1);

                         
                        int index14_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA14_57 = input.LA(1);

                         
                        int index14_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA14_58 = input.LA(1);

                         
                        int index14_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_58);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA14_59 = input.LA(1);

                         
                        int index14_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_59);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA14_60 = input.LA(1);

                         
                        int index14_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_60);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA14_61 = input.LA(1);

                         
                        int index14_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_61);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA14_62 = input.LA(1);

                         
                        int index14_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_62);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA14_63 = input.LA(1);

                         
                        int index14_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_63);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA14_64 = input.LA(1);

                         
                        int index14_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_64);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA14_65 = input.LA(1);

                         
                        int index14_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_65);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA14_66 = input.LA(1);

                         
                        int index14_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_66);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA14_67 = input.LA(1);

                         
                        int index14_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_67);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA14_68 = input.LA(1);

                         
                        int index14_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA14_69 = input.LA(1);

                         
                        int index14_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA14_70 = input.LA(1);

                         
                        int index14_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA14_71 = input.LA(1);

                         
                        int index14_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA14_72 = input.LA(1);

                         
                        int index14_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_72);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA14_73 = input.LA(1);

                         
                        int index14_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_73);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA14_74 = input.LA(1);

                         
                        int index14_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_74);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA14_75 = input.LA(1);

                         
                        int index14_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_75);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA14_76 = input.LA(1);

                         
                        int index14_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_76);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA14_77 = input.LA(1);

                         
                        int index14_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_77);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA14_78 = input.LA(1);

                         
                        int index14_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_78);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA14_79 = input.LA(1);

                         
                        int index14_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_79);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA14_80 = input.LA(1);

                         
                        int index14_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_80);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA14_81 = input.LA(1);

                         
                        int index14_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_81);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA14_82 = input.LA(1);

                         
                        int index14_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_82);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA14_83 = input.LA(1);

                         
                        int index14_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_83);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA14_84 = input.LA(1);

                         
                        int index14_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_84);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA14_85 = input.LA(1);

                         
                        int index14_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_85);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA14_86 = input.LA(1);

                         
                        int index14_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_86);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA14_87 = input.LA(1);

                         
                        int index14_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_87);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA14_88 = input.LA(1);

                         
                        int index14_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_88);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA14_89 = input.LA(1);

                         
                        int index14_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_89);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA14_90 = input.LA(1);

                         
                        int index14_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_90);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA14_91 = input.LA(1);

                         
                        int index14_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_91);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA14_92 = input.LA(1);

                         
                        int index14_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_92);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA14_93 = input.LA(1);

                         
                        int index14_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_93);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA14_94 = input.LA(1);

                         
                        int index14_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_94);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA14_95 = input.LA(1);

                         
                        int index14_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_95);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA14_96 = input.LA(1);

                         
                        int index14_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_96);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA14_97 = input.LA(1);

                         
                        int index14_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_97);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA14_98 = input.LA(1);

                         
                        int index14_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_98);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA14_99 = input.LA(1);

                         
                        int index14_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_99);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA14_100 = input.LA(1);

                         
                        int index14_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_100);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA14_101 = input.LA(1);

                         
                        int index14_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\150\uffff";
    static final String DFA15_eofS =
        "\1\1\147\uffff";
    static final String DFA15_minS =
        "\1\12\3\uffff\3\0\1\uffff\51\0\67\uffff";
    static final String DFA15_maxS =
        "\1\u00b5\3\uffff\3\0\1\uffff\51\0\67\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA15_specialS =
        "\4\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\67\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\1\1\21\1\15\1\16\1\54\2\uffff\20\1\1\23\1\26\2\uffff\1\27"+
            "\1\30\1\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1"+
            "\42\1\43\1\44\1\22\1\1\1\uffff\2\1\1\60\1\55\10\1\1\45\1\1\1"+
            "\46\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\53\3\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1"+
            "\56\16\uffff\1\1\1\20\4\uffff\1\10\11\uffff\1\1\1\11\1\12\1"+
            "\13\1\14\1\17\1\uffff\1\24\1\uffff\1\25\2\uffff\1\57\20\uffff"+
            "\1\4\1\5\1\6\3\uffff\1\1\2\uffff\4\1\1\47\1\50\1\51\1\52",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()* loopback of 41:28: ( nounphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA17_eotS =
        "\20\uffff";
    static final String DFA17_eofS =
        "\20\uffff";
    static final String DFA17_minS =
        "\1\13\1\uffff\6\11\1\uffff\6\0\1\uffff";
    static final String DFA17_maxS =
        "\1\u00b5\1\uffff\6\11\1\uffff\6\0\1\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA17_specialS =
        "\11\uffff\1\0\1\3\1\4\1\1\1\5\1\2\1\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\20\uffff\3\10\12\uffff\4\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 43:18: ( adj | adv )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_9 = input.LA(1);

                         
                        int index17_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA17_12 = input.LA(1);

                         
                        int index17_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA17_14 = input.LA(1);

                         
                        int index17_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA17_10 = input.LA(1);

                         
                        int index17_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA17_11 = input.LA(1);

                         
                        int index17_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA17_13 = input.LA(1);

                         
                        int index17_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\53\uffff";
    static final String DFA18_eofS =
        "\1\1\52\uffff";
    static final String DFA18_minS =
        "\1\12\1\uffff\50\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b5\1\uffff\50\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\25\1\5\1\41\1\45\1\24\1\32\1\6\1\11\1\44\1\30\1\15\1"+
        "\13\1\7\1\36\1\46\1\21\1\14\1\34\1\12\1\31\1\47\1\33\1\3\1\35\1"+
        "\1\1\27\1\0\1\26\1\17\1\23\1\2\1\42\1\16\1\43\1\37\1\22\1\10\1\4"+
        "\1\40\1\20\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\1\1\12\1\6\1\7\1\45\2\uffff\20\1\1\14\1\17\2\uffff\1\20\1"+
            "\21\1\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
            "\1\34\1\35\1\13\1\1\1\uffff\2\1\1\51\1\46\10\1\1\36\1\1\1\37"+
            "\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\44\3\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1"+
            "\47\16\uffff\1\1\1\10\4\uffff\1\1\11\uffff\1\1\1\2\1\3\1\4\1"+
            "\5\1\11\1\uffff\1\15\1\uffff\1\16\2\uffff\1\50\20\uffff\3\1"+
            "\3\uffff\1\1\2\uffff\4\1\1\40\1\41\1\42\1\43",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()+ loopback of 43:30: ( noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\150\uffff";
    static final String DFA23_eofS =
        "\1\1\147\uffff";
    static final String DFA23_minS =
        "\1\12\25\uffff\6\0\45\uffff\2\0\45\uffff";
    static final String DFA23_maxS =
        "\1\u00b5\25\uffff\6\0\45\uffff\2\0\45\uffff";
    static final String DFA23_acceptS =
        "\1\uffff\1\2\145\uffff\1\1";
    static final String DFA23_specialS =
        "\26\uffff\1\0\1\1\1\2\1\3\1\4\1\5\45\uffff\1\6\1\7\45\uffff}>";
    static final String[] DFA23_transitionS = {
            "\2\1\1\32\1\33\1\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff"+
            "\23\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\6\1\1\uffff\1\101\3\uffff\1\1\3\uffff\1\1\16\uffff"+
            "\1\102\1\1\4\uffff\1\1\11\uffff\1\1\1\26\1\27\1\30\1\31\1\1"+
            "\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20\uffff\3\1\3\uffff\1"+
            "\1\2\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "()* loopback of 43:36: ( ( cc )? ( comma )? ( cc )? ( adj )+ noun )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_22 = input.LA(1);

                         
                        int index23_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_23 = input.LA(1);

                         
                        int index23_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_24 = input.LA(1);

                         
                        int index23_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_25 = input.LA(1);

                         
                        int index23_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_26 = input.LA(1);

                         
                        int index23_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_26);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_27 = input.LA(1);

                         
                        int index23_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA23_65 = input.LA(1);

                         
                        int index23_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA23_66 = input.LA(1);

                         
                        int index23_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index23_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\17\uffff";
    static final String DFA22_eofS =
        "\17\uffff";
    static final String DFA22_minS =
        "\1\13\1\uffff\6\11\6\0\1\uffff";
    static final String DFA22_maxS =
        "\1\u00b5\1\uffff\6\11\6\0\1\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA22_specialS =
        "\10\uffff\1\3\1\1\1\4\1\2\1\5\1\0\1\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\35\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "()+ loopback of 43:53: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_13 = input.LA(1);

                         
                        int index22_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_9 = input.LA(1);

                         
                        int index22_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_11 = input.LA(1);

                         
                        int index22_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_10 = input.LA(1);

                         
                        int index22_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_12 = input.LA(1);

                         
                        int index22_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index22_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\57\uffff";
    static final String DFA33_eofS =
        "\1\1\56\uffff";
    static final String DFA33_minS =
        "\1\12\1\uffff\54\0\1\uffff";
    static final String DFA33_maxS =
        "\1\u00b5\1\uffff\54\0\1\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA33_specialS =
        "\2\uffff\1\5\1\24\1\23\1\7\1\4\1\14\1\34\1\44\1\12\1\32\1\53\1\27"+
        "\1\6\1\35\1\25\1\51\1\26\1\3\1\45\1\17\1\36\1\20\1\52\1\0\1\47\1"+
        "\50\1\21\1\22\1\46\1\43\1\2\1\1\1\40\1\15\1\37\1\30\1\33\1\11\1"+
        "\42\1\41\1\16\1\10\1\31\1\13\1\uffff}>";
    static final String[] DFA33_transitionS = {
            "\2\1\1\11\1\12\1\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\17"+
            "\1\uffff\1\20\1\21\2\1\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1"+
            "\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\uffff\1\37\1\uffff\1"+
            "\40\1\uffff\1\41\1\42\1\43\1\44\1\uffff\1\45\1\uffff\1\46\1"+
            "\47\1\50\1\uffff\1\51\1\52\1\1\1\53\1\54\1\55\1\uffff\1\1\3"+
            "\uffff\1\1\3\uffff\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\1\1"+
            "\1\5\1\6\1\7\1\10\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\20"+
            "\uffff\1\2\1\3\1\4\3\uffff\1\1\2\uffff\1\14\1\13\1\16\1\15\4"+
            "\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "()+ loopback of 46:35: ( ( adv )* ( adj )? ( verb )+ ( adv )* ( adj )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_25 = input.LA(1);

                         
                        int index33_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_33 = input.LA(1);

                         
                        int index33_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_33);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_32 = input.LA(1);

                         
                        int index33_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_32);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_19 = input.LA(1);

                         
                        int index33_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_6 = input.LA(1);

                         
                        int index33_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_14 = input.LA(1);

                         
                        int index33_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_5 = input.LA(1);

                         
                        int index33_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_43 = input.LA(1);

                         
                        int index33_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_43);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_39 = input.LA(1);

                         
                        int index33_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_39);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA33_45 = input.LA(1);

                         
                        int index33_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_45);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA33_7 = input.LA(1);

                         
                        int index33_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_7);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA33_35 = input.LA(1);

                         
                        int index33_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_35);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA33_42 = input.LA(1);

                         
                        int index33_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_42);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA33_21 = input.LA(1);

                         
                        int index33_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA33_23 = input.LA(1);

                         
                        int index33_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA33_28 = input.LA(1);

                         
                        int index33_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_28);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA33_29 = input.LA(1);

                         
                        int index33_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA33_4 = input.LA(1);

                         
                        int index33_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_4);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA33_16 = input.LA(1);

                         
                        int index33_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_16);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA33_18 = input.LA(1);

                         
                        int index33_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_18);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA33_13 = input.LA(1);

                         
                        int index33_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_13);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA33_37 = input.LA(1);

                         
                        int index33_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_37);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA33_44 = input.LA(1);

                         
                        int index33_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA33_38 = input.LA(1);

                         
                        int index33_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_38);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA33_22 = input.LA(1);

                         
                        int index33_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_22);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA33_36 = input.LA(1);

                         
                        int index33_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_36);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA33_34 = input.LA(1);

                         
                        int index33_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA33_41 = input.LA(1);

                         
                        int index33_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_41);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA33_40 = input.LA(1);

                         
                        int index33_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA33_31 = input.LA(1);

                         
                        int index33_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_31);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA33_30 = input.LA(1);

                         
                        int index33_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_30);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA33_26 = input.LA(1);

                         
                        int index33_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_26);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA33_27 = input.LA(1);

                         
                        int index33_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_27);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA33_17 = input.LA(1);

                         
                        int index33_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_17);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA33_24 = input.LA(1);

                         
                        int index33_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_24);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\46\uffff";
    static final String DFA30_eofS =
        "\1\1\45\uffff";
    static final String DFA30_minS =
        "\1\12\1\uffff\43\0\1\uffff";
    static final String DFA30_maxS =
        "\1\u00b5\1\uffff\43\0\1\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA30_specialS =
        "\2\uffff\1\0\1\12\1\11\1\33\1\25\1\7\1\30\1\26\1\41\1\6\1\22\1\40"+
        "\1\15\1\23\1\4\1\21\1\42\1\20\1\5\1\35\1\2\1\13\1\34\1\14\1\24\1"+
        "\10\1\37\1\17\1\1\1\31\1\36\1\32\1\27\1\3\1\16\1\uffff}>";
    static final String[] DFA30_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\15\1\1\6\1\uffff\1\7\1"+
            "\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\1"+
            "\1\22\1\23\1\24\1\25\1\uffff\1\26\1\uffff\1\27\1\uffff\1\30"+
            "\1\31\1\32\1\33\1\uffff\1\34\1\uffff\1\35\1\36\1\37\1\uffff"+
            "\1\40\1\41\1\1\1\42\1\43\1\44\1\uffff\1\1\3\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\2\1\4\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\20\uffff\3\1\3\uffff\1\1\2\uffff\1\3\1\2\1"+
            "\5\1\4\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()+ loopback of 46:46: ( verb )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_2 = input.LA(1);

                         
                        int index30_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_30 = input.LA(1);

                         
                        int index30_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_30);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_22 = input.LA(1);

                         
                        int index30_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_35 = input.LA(1);

                         
                        int index30_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_35);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_16 = input.LA(1);

                         
                        int index30_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_20 = input.LA(1);

                         
                        int index30_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_11 = input.LA(1);

                         
                        int index30_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA30_7 = input.LA(1);

                         
                        int index30_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA30_27 = input.LA(1);

                         
                        int index30_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA30_4 = input.LA(1);

                         
                        int index30_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA30_3 = input.LA(1);

                         
                        int index30_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_3);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA30_23 = input.LA(1);

                         
                        int index30_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA30_25 = input.LA(1);

                         
                        int index30_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_25);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA30_14 = input.LA(1);

                         
                        int index30_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA30_36 = input.LA(1);

                         
                        int index30_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_36);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA30_29 = input.LA(1);

                         
                        int index30_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_29);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA30_19 = input.LA(1);

                         
                        int index30_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA30_17 = input.LA(1);

                         
                        int index30_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA30_12 = input.LA(1);

                         
                        int index30_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_12);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA30_15 = input.LA(1);

                         
                        int index30_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_15);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA30_26 = input.LA(1);

                         
                        int index30_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA30_6 = input.LA(1);

                         
                        int index30_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_6);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA30_9 = input.LA(1);

                         
                        int index30_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_9);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA30_34 = input.LA(1);

                         
                        int index30_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA30_8 = input.LA(1);

                         
                        int index30_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_8);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA30_31 = input.LA(1);

                         
                        int index30_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA30_33 = input.LA(1);

                         
                        int index30_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_33);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA30_5 = input.LA(1);

                         
                        int index30_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_5);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA30_24 = input.LA(1);

                         
                        int index30_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_24);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA30_21 = input.LA(1);

                         
                        int index30_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA30_32 = input.LA(1);

                         
                        int index30_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA30_28 = input.LA(1);

                         
                        int index30_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_28);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA30_13 = input.LA(1);

                         
                        int index30_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_13);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA30_10 = input.LA(1);

                         
                        int index30_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_10);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA30_18 = input.LA(1);

                         
                        int index30_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\17\uffff";
    static final String DFA32_eofS =
        "\1\7\16\uffff";
    static final String DFA32_minS =
        "\1\12\6\11\1\uffff\6\0\1\uffff";
    static final String DFA32_maxS =
        "\1\u00b5\6\11\1\uffff\6\0\1\uffff";
    static final String DFA32_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA32_specialS =
        "\10\uffff\1\4\1\3\1\1\1\5\1\2\1\0\1\uffff}>";
    static final String[] DFA32_transitionS = {
            "\2\7\1\5\1\6\1\7\2\uffff\22\7\2\uffff\2\7\1\uffff\16\7\1\uffff"+
            "\23\7\1\uffff\1\7\1\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff"+
            "\3\7\1\uffff\6\7\1\uffff\1\7\3\uffff\1\7\3\uffff\1\7\16\uffff"+
            "\2\7\4\uffff\1\7\11\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\2\uffff\1\7\20\uffff\3\7\3\uffff\1\7\2\uffff"+
            "\10\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "46:57: ( adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_13 = input.LA(1);

                         
                        int index32_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_10 = input.LA(1);

                         
                        int index32_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_12 = input.LA(1);

                         
                        int index32_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_9 = input.LA(1);

                         
                        int index32_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_8 = input.LA(1);

                         
                        int index32_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_11 = input.LA(1);

                         
                        int index32_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index32_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\150\uffff";
    static final String DFA36_eofS =
        "\1\40\147\uffff";
    static final String DFA36_minS =
        "\1\12\37\0\110\uffff";
    static final String DFA36_maxS =
        "\1\u00b5\37\0\110\uffff";
    static final String DFA36_acceptS =
        "\40\uffff\1\2\106\uffff\1\1";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\110\uffff}>";
    static final String[] DFA36_transitionS = {
            "\2\40\1\10\1\11\1\40\2\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1"+
            "\32\1\16\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\2\40\2\uffff"+
            "\2\40\1\uffff\16\40\1\uffff\23\40\1\uffff\1\40\1\uffff\1\40"+
            "\1\uffff\4\40\1\uffff\1\40\1\uffff\3\40\1\uffff\6\40\1\uffff"+
            "\1\36\3\uffff\1\40\3\uffff\1\40\16\uffff\1\37\1\35\4\uffff\1"+
            "\34\11\uffff\1\12\1\4\1\5\1\6\1\7\1\40\1\uffff\1\40\1\uffff"+
            "\1\40\2\uffff\1\40\20\uffff\1\1\1\2\1\3\3\uffff\1\33\2\uffff"+
            "\10\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()* loopback of 46:64: ( ( cc )? ( comma )? prepphrase )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA36_20 = input.LA(1);

                         
                        int index36_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA36_23 = input.LA(1);

                         
                        int index36_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA36_24 = input.LA(1);

                         
                        int index36_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA36_25 = input.LA(1);

                         
                        int index36_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA36_26 = input.LA(1);

                         
                        int index36_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA36_27 = input.LA(1);

                         
                        int index36_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA36_28 = input.LA(1);

                         
                        int index36_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA36_29 = input.LA(1);

                         
                        int index36_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA36_30 = input.LA(1);

                         
                        int index36_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA36_31 = input.LA(1);

                         
                        int index36_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 103;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index36_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\60\uffff";
    static final String DFA39_eofS =
        "\60\uffff";
    static final String DFA39_minS =
        "\1\13\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\37\uffff\1\0\11\uffff";
    static final String DFA39_maxS =
        "\1\u00b5\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\37\uffff\1\0\11\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\4\1\uffff\1\6\1\7\1\10\5\uffff"+
        "\1\11\1\12\1\13\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
        "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\uffff\1\43"+
        "\1\44\1\3\1\14\1\42\1\46\1\5\1\41\1\45";
    static final String DFA39_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\uffff\1\2\37\uffff\1\3\11\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\3\2\11\1\44\22\uffff\1\5\1\10\2\uffff\1\17\1\20\1\uffff\1"+
            "\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1"+
            "\4\4\uffff\1\50\1\45\10\uffff\1\35\1\uffff\1\36\26\uffff\1\43"+
            "\14\uffff\1\46\17\uffff\1\2\17\uffff\4\11\1\1\1\uffff\1\6\1"+
            "\uffff\1\7\2\uffff\1\47\35\uffff\1\37\1\40\1\41\1\42",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "49:1: noun : ( md | unnamedmolecule | molecule | nnstate | nn | nns | nntime | apparatus | nnatmosphere | nneq | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnapparatus | nnconcentrate | wdt | wp_poss | wpo | wps | nnsynthesize | oscaront | nnmixture | amount | cd | nnp | nnadd | mixture | oscarCompound );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred83_ChemicalChunker()) ) {s = 41;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred92_ChemicalChunker()) ) {s = 42;}

                        else if ( (synpred114_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 45;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 46;}

                        else if ( (synpred117_ChemicalChunker()) ) {s = 47;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\67\uffff";
    static final String DFA40_eofS =
        "\67\uffff";
    static final String DFA40_minS =
        "\1\13\1\uffff\2\0\1\uffff\2\0\6\uffff\6\0\44\uffff";
    static final String DFA40_maxS =
        "\1\u00b5\1\uffff\2\0\1\uffff\2\0\6\uffff\6\0\44\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\17\2\uffff\1\3\2\uffff\1\7\1\10\1\12\43\uffff\1\13\1"+
        "\15\1\1\1\5\1\6\1\11\1\14\1\2\1\4\1\16";
    static final String DFA40_specialS =
        "\2\uffff\1\0\1\1\1\uffff\1\2\1\3\6\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\44\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\6\1\21\1\22\1\11\13\uffff\1\55\6\uffff\2\11\2\uffff\2\11"+
            "\1\uffff\14\11\1\5\4\uffff\2\11\10\uffff\1\11\1\uffff\1\11\26"+
            "\uffff\1\11\4\uffff\1\56\2\uffff\1\7\1\4\3\uffff\1\11\1\1\16"+
            "\uffff\1\2\17\uffff\1\15\1\16\1\17\1\20\1\3\1\uffff\1\11\1\uffff"+
            "\1\11\2\uffff\1\11\25\uffff\1\10\7\uffff\4\11",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 52:15: ( measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | cd | comma | adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 48;}

                        else if ( (synpred123_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 52;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 53;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 48;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 49;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred131_ChemicalChunker()) ) {s = 54;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\152\uffff";
    static final String DFA43_eofS =
        "\145\uffff\1\117\4\uffff";
    static final String DFA43_minS =
        "\1\14\35\11\11\14\22\13\1\14\1\42\24\11\3\uffff\11\171\12\13\1\12"+
        "\2\11\2\0";
    static final String DFA43_maxS =
        "\1\u00ab\35\11\11\u00ab\22\u00b5\1\u00a7\1\51\24\11\3\uffff\11\171"+
        "\13\u00b5\2\11\2\0";
    static final String DFA43_acceptS =
        "\117\uffff\1\1\1\3\1\2\30\uffff";
    static final String DFA43_specialS =
        "\150\uffff\1\0\1\1}>";
    static final String[] DFA43_transitionS = {
            "\1\10\1\11\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16\1"+
            "\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff"+
            "\1\33",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\102\1\103\3\uffff\1\14\1\15\1\13\1\21\1\22\1\31\1\32\1\16"+
            "\1\30\1\23\1\25\1\17\1\20\1\27\1\26\1\24\130\uffff\1\35\4\uffff"+
            "\1\34\11\uffff\1\12\1\76\1\77\1\100\1\101\30\uffff\1\73\1\74"+
            "\1\75\3\uffff\1\33",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\117\1\114\1\115\1\117\2\uffff\22\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\4\uffff\1\104\11\uffff"+
            "\1\117\1\110\1\111\1\112\1\113\1\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\1\105\1\106\1\107\3\uffff\1\117"+
            "\6\uffff\4\117",
            "\1\102\1\103\153\uffff\1\35\17\uffff\1\76\1\77\1\100\1\101"+
            "\30\uffff\1\73\1\74\1\75",
            "\1\120\6\uffff\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\131",
            "\1\132",
            "\1\133",
            "\1\134",
            "\1\135",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145",
            "",
            "",
            "",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\35",
            "\1\117\1\114\1\115\1\117\22\uffff\2\117\2\uffff\2\117\1\uffff"+
            "\15\117\4\uffff\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff"+
            "\1\117\14\uffff\1\117\17\uffff\1\116\17\uffff\1\110\1\111\1"+
            "\112\1\113\1\117\1\uffff\1\117\1\uffff\1\117\2\uffff\1\117\20"+
            "\uffff\1\105\1\106\1\107\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\4\117\22\uffff\2\117\2\uffff\2\117\1\uffff\15\117\4\uffff"+
            "\2\117\10\uffff\1\117\1\uffff\1\117\26\uffff\1\117\14\uffff"+
            "\1\117\17\uffff\1\116\17\uffff\5\117\1\uffff\1\117\1\uffff\1"+
            "\117\2\uffff\1\117\20\uffff\3\117\12\uffff\4\117",
            "\5\117\2\uffff\21\117\1\146\6\117\1\147\14\117\1\uffff\23\117"+
            "\1\uffff\1\117\1\uffff\1\117\1\uffff\4\117\1\uffff\1\117\1\uffff"+
            "\3\117\1\uffff\6\117\1\uffff\1\117\3\uffff\2\117\2\uffff\1\117"+
            "\16\uffff\2\117\4\uffff\1\117\11\uffff\6\117\1\uffff\1\117\1"+
            "\uffff\1\117\2\uffff\1\117\20\uffff\3\117\3\uffff\1\117\2\uffff"+
            "\10\117",
            "\1\150",
            "\1\151",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "58:1: prepphrase : ( prepphraseOther | prepphraseTemp | prepphraseTime );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_104 = input.LA(1);

                         
                        int index43_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index43_104);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_105 = input.LA(1);

                         
                        int index43_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred140_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index43_105);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\26\uffff";
    static final String DFA46_eofS =
        "\26\uffff";
    static final String DFA46_minS =
        "\1\14\11\11\1\uffff\11\0\2\uffff";
    static final String DFA46_maxS =
        "\1\u00ab\11\11\1\uffff\11\0\2\uffff";
    static final String DFA46_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA46_specialS =
        "\13\uffff\1\1\1\10\1\2\1\5\1\4\1\0\1\6\1\3\1\7\2\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\10\1\11\3\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "67:3: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_16 = input.LA(1);

                         
                        int index46_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_18 = input.LA(1);

                         
                        int index46_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_15 = input.LA(1);

                         
                        int index46_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_14 = input.LA(1);

                         
                        int index46_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_17 = input.LA(1);

                         
                        int index46_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_19 = input.LA(1);

                         
                        int index46_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA51_eotS =
        "\26\uffff";
    static final String DFA51_eofS =
        "\26\uffff";
    static final String DFA51_minS =
        "\1\14\11\11\1\uffff\11\0\2\uffff";
    static final String DFA51_maxS =
        "\1\u00ab\11\11\1\uffff\11\0\2\uffff";
    static final String DFA51_acceptS =
        "\12\uffff\1\3\11\uffff\1\1\1\2";
    static final String DFA51_specialS =
        "\13\uffff\1\1\1\6\1\10\1\5\1\7\1\0\1\3\1\2\1\4\2\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\10\1\11\3\uffff\20\12\130\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\12\1\4\1\5\1\6\1\7\30\uffff\1\1\1\2\1\3\3\uffff\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "73:18: ( adv | adj )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA51_15 = input.LA(1);

                         
                        int index51_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\21\uffff";
    static final String DFA58_eofS =
        "\2\uffff\1\4\16\uffff";
    static final String DFA58_minS =
        "\1\64\1\11\1\12\1\11\1\uffff\2\11\1\0\2\13\1\uffff\2\11\2\0\2\uffff";
    static final String DFA58_maxS =
        "\1\64\1\11\1\u00b5\1\11\1\uffff\2\11\1\0\2\u00b5\1\uffff\2\11\2"+
        "\0\2\uffff";
    static final String DFA58_acceptS =
        "\4\uffff\1\4\5\uffff\1\2\4\uffff\1\1\1\3";
    static final String DFA58_specialS =
        "\7\uffff\1\2\5\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1",
            "\1\2",
            "\5\4\2\uffff\22\4\2\uffff\2\4\1\uffff\14\4\1\3\1\4\1\uffff"+
            "\23\4\1\uffff\1\4\1\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff"+
            "\3\4\1\uffff\6\4\1\uffff\1\4\2\uffff\1\6\1\4\3\uffff\2\4\15"+
            "\uffff\2\4\4\uffff\1\4\11\uffff\1\4\1\5\4\4\1\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\20\uffff\3\4\2\uffff\2\4\2\uffff\10\4",
            "\1\7",
            "",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\4\4\2\uffff\22\4\2\uffff\2\4\1\uffff\14\4\1\13\1\4\1\uffff"+
            "\23\4\1\uffff\1\4\1\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff"+
            "\3\4\1\uffff\6\4\1\uffff\1\4\2\uffff\2\4\3\uffff\2\4\16\uffff"+
            "\1\4\4\uffff\1\4\11\uffff\6\4\1\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\20\uffff\3\4\2\uffff\2\4\2\uffff\10\4",
            "\4\4\13\uffff\1\4\6\uffff\2\4\2\uffff\2\4\1\uffff\14\4\1\14"+
            "\4\uffff\2\4\10\uffff\1\4\1\uffff\1\4\26\uffff\1\4\4\uffff\1"+
            "\4\2\uffff\2\4\3\uffff\2\4\16\uffff\1\4\17\uffff\5\4\1\uffff"+
            "\1\4\1\uffff\1\4\2\uffff\1\4\25\uffff\1\4\7\uffff\4\4",
            "",
            "\1\15",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "87:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarcm )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA62_eotS =
        "\35\uffff";
    static final String DFA62_eofS =
        "\1\1\34\uffff";
    static final String DFA62_minS =
        "\1\12\1\uffff\1\11\1\13\1\11\1\13\4\11\4\13\2\11\1\13\1\0\1\11\1"+
        "\uffff\1\13\4\11\4\13";
    static final String DFA62_maxS =
        "\1\u00b5\1\uffff\1\11\1\u00b5\1\11\1\u00b5\4\11\4\u00b5\2\11\1\u00b5"+
        "\1\0\1\11\1\uffff\1\u00b5\4\11\4\u00b5";
    static final String DFA62_acceptS =
        "\1\uffff\1\2\21\uffff\1\1\11\uffff";
    static final String DFA62_specialS =
        "\21\uffff\1\0\13\uffff}>";
    static final String[] DFA62_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1\2\1\1\15\uffff\2\1\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\20\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "",
            "\1\3",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\3\uffff\1\1\17\uffff\1\4\17\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\5",
            "\4\1\13\uffff\1\1\6\uffff\2\1\1\6\1\7\2\1\1\11\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\1\10\2\uffff\2\1\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\20",
            "\1\21",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\3\uffff\2\1\16\uffff\1\22\17\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\uffff",
            "\1\24",
            "",
            "\4\1\13\uffff\1\1\6\uffff\2\1\1\25\1\26\2\1\1\30\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\1\27\2\uffff\2\1\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1"
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 95:18: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_17 = input.LA(1);

                         
                        int index62_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\35\uffff";
    static final String DFA66_eofS =
        "\1\1\34\uffff";
    static final String DFA66_minS =
        "\1\12\1\uffff\1\11\1\13\1\11\1\13\4\11\4\13\2\11\1\13\1\0\1\11\1"+
        "\uffff\1\13\4\11\4\13";
    static final String DFA66_maxS =
        "\1\u00b5\1\uffff\1\11\1\u00b5\1\11\1\u00b5\4\11\4\u00b5\2\11\1\u00b5"+
        "\1\0\1\11\1\uffff\1\u00b5\4\11\4\u00b5";
    static final String DFA66_acceptS =
        "\1\uffff\1\2\21\uffff\1\1\11\uffff";
    static final String DFA66_specialS =
        "\21\uffff\1\0\13\uffff}>";
    static final String[] DFA66_transitionS = {
            "\5\1\2\uffff\22\1\2\uffff\2\1\1\uffff\16\1\1\uffff\23\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\6\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1\2\1\1\15\uffff\2\1\4"+
            "\uffff\1\1\11\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\20\uffff\3\1\2\uffff\2\1\2\uffff\10\1",
            "",
            "\1\3",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\3\uffff\1\1\17\uffff\1\4\17\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\5",
            "\4\1\13\uffff\1\1\6\uffff\2\1\1\6\1\7\2\1\1\11\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\1\10\2\uffff\2\1\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\20",
            "\1\21",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\3\uffff\2\1\16\uffff\1\22\17\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\uffff",
            "\1\24",
            "",
            "\4\1\13\uffff\1\1\6\uffff\2\1\1\25\1\26\2\1\1\30\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\2\1\1\27\2\uffff\2\1\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1",
            "\4\1\13\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\4\uffff\1\16\2\uffff"+
            "\2\1\3\uffff\1\1\1\17\16\uffff\1\1\17\uffff\5\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\25\uffff\1\1\7\uffff\4\1"
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()* loopback of 103:11: ( amount )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_17 = input.LA(1);

                         
                        int index66_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index66_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\53\uffff";
    static final String DFA69_eofS =
        "\1\1\52\uffff";
    static final String DFA69_minS =
        "\1\12\1\uffff\50\0\1\uffff";
    static final String DFA69_maxS =
        "\1\u00b5\1\uffff\50\0\1\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA69_specialS =
        "\2\uffff\1\32\1\30\1\16\1\25\1\43\1\6\1\11\1\5\1\2\1\4\1\41\1\26"+
        "\1\35\1\3\1\46\1\36\1\10\1\47\1\15\1\20\1\37\1\44\1\1\1\0\1\40\1"+
        "\24\1\17\1\14\1\21\1\23\1\22\1\34\1\27\1\12\1\31\1\33\1\45\1\13"+
        "\1\7\1\42\1\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\1\12\1\6\1\7\1\45\2\uffff\20\1\1\14\1\17\2\uffff\1\20\1"+
            "\21\1\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
            "\1\34\1\35\1\13\1\1\1\uffff\2\1\1\51\1\46\10\1\1\36\1\1\1\37"+
            "\4\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\2\1\1\44\3\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1"+
            "\47\1\1\15\uffff\1\1\1\10\4\uffff\1\1\11\uffff\1\1\1\2\1\3\1"+
            "\4\1\5\1\11\1\uffff\1\15\1\uffff\1\16\2\uffff\1\50\20\uffff"+
            "\3\1\2\uffff\2\1\2\uffff\4\1\1\40\1\41\1\42\1\43",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()+ loopback of 105:29: ( ( jj )? noun )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_25 = input.LA(1);

                         
                        int index69_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_24 = input.LA(1);

                         
                        int index69_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA69_10 = input.LA(1);

                         
                        int index69_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA69_15 = input.LA(1);

                         
                        int index69_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA69_11 = input.LA(1);

                         
                        int index69_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA69_9 = input.LA(1);

                         
                        int index69_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA69_7 = input.LA(1);

                         
                        int index69_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA69_40 = input.LA(1);

                         
                        int index69_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA69_18 = input.LA(1);

                         
                        int index69_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA69_8 = input.LA(1);

                         
                        int index69_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_8);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA69_35 = input.LA(1);

                         
                        int index69_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_35);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA69_39 = input.LA(1);

                         
                        int index69_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_39);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA69_29 = input.LA(1);

                         
                        int index69_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_29);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA69_20 = input.LA(1);

                         
                        int index69_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA69_4 = input.LA(1);

                         
                        int index69_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA69_28 = input.LA(1);

                         
                        int index69_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_28);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA69_21 = input.LA(1);

                         
                        int index69_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_21);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA69_30 = input.LA(1);

                         
                        int index69_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_30);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA69_32 = input.LA(1);

                         
                        int index69_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_32);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA69_31 = input.LA(1);

                         
                        int index69_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA69_27 = input.LA(1);

                         
                        int index69_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA69_5 = input.LA(1);

                         
                        int index69_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_5);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA69_13 = input.LA(1);

                         
                        int index69_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_13);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA69_34 = input.LA(1);

                         
                        int index69_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA69_3 = input.LA(1);

                         
                        int index69_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_3);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA69_36 = input.LA(1);

                         
                        int index69_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_36);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_2);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA69_37 = input.LA(1);

                         
                        int index69_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_37);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA69_33 = input.LA(1);

                         
                        int index69_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_33);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA69_14 = input.LA(1);

                         
                        int index69_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_14);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA69_17 = input.LA(1);

                         
                        int index69_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA69_22 = input.LA(1);

                         
                        int index69_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_22);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA69_26 = input.LA(1);

                         
                        int index69_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_26);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA69_12 = input.LA(1);

                         
                        int index69_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_12);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA69_41 = input.LA(1);

                         
                        int index69_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA69_6 = input.LA(1);

                         
                        int index69_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_6);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA69_23 = input.LA(1);

                         
                        int index69_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_23);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA69_38 = input.LA(1);

                         
                        int index69_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA69_16 = input.LA(1);

                         
                        int index69_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_16);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA69_19 = input.LA(1);

                         
                        int index69_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\56\uffff";
    static final String DFA70_eofS =
        "\56\uffff";
    static final String DFA70_minS =
        "\1\13\1\11\1\uffff\1\43\4\11\4\32\2\11\1\171\1\13\1\11\1\uffff\2"+
        "\11\1\43\2\0\4\11\1\uffff\4\141\2\11\1\171\1\32\1\11\1\43\4\11\4"+
        "\141";
    static final String DFA70_maxS =
        "\1\171\1\11\1\uffff\1\146\4\11\4\151\2\11\1\171\1\u00b5\1\11\1\uffff"+
        "\2\11\1\146\2\0\4\11\1\uffff\4\152\2\11\1\171\1\32\1\11\1\146\4"+
        "\11\4\152";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\16\uffff\1\3\11\uffff\1\1\22\uffff";
    static final String DFA70_specialS =
        "\25\uffff\1\1\1\0\27\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\155\uffff\1\1",
            "\1\3",
            "",
            "\1\7\1\5\2\uffff\1\6\76\uffff\1\4",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\15\116\uffff\1\14",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\23\3\21\22\uffff\2\21\2\uffff\2\21\1\uffff\15\21\4\uffff"+
            "\2\21\10\uffff\1\21\1\uffff\1\21\26\uffff\1\21\14\uffff\1\21"+
            "\17\uffff\1\22\17\uffff\5\21\1\uffff\1\21\1\uffff\1\21\2\uffff"+
            "\1\21\35\uffff\4\21",
            "\1\24",
            "",
            "\1\25",
            "\1\26",
            "\1\32\1\27\2\uffff\1\31\76\uffff\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\15",
            "\1\45",
            "\1\47\1\50\2\uffff\1\46\76\uffff\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41",
            "\1\40\10\uffff\1\41"
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "107:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_22 = input.LA(1);

                         
                        int index70_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index70_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_21 = input.LA(1);

                         
                        int index70_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index70_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\17\uffff";
    static final String DFA77_eofS =
        "\17\uffff";
    static final String DFA77_minS =
        "\1\13\1\uffff\6\11\6\0\1\uffff";
    static final String DFA77_maxS =
        "\1\u00b5\1\uffff\6\11\6\0\1\uffff";
    static final String DFA77_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA77_specialS =
        "\10\uffff\1\2\1\1\1\3\1\4\1\0\1\5\1\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\1\1\6\1\7\1\1\22\uffff\2\1\2\uffff\2\1\1\uffff\15\1\4\uffff"+
            "\2\1\10\uffff\1\1\1\uffff\1\1\26\uffff\1\1\14\uffff\1\1\17\uffff"+
            "\1\1\17\uffff\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1\2"+
            "\uffff\1\1\35\uffff\4\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "()+ loopback of 43:53: ( adj )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_12 = input.LA(1);

                         
                        int index77_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_8 = input.LA(1);

                         
                        int index77_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA77_11 = input.LA(1);

                         
                        int index77_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA77_13 = input.LA(1);

                         
                        int index77_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentence_in_document170 = new BitSet(new long[]{0xFFBFFF67FFFE7C02L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_UNMATCHED_in_document172 = new BitSet(new long[]{0xFFBFFF67FFFE7C02L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_sentence1_in_sentence206 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x43000222FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_sentence2_in_sentence208 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x43000222FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_sentence3_in_sentence210 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x43000222FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_sentence4_in_sentence212 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x43000222FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_comma_in_sentence219 = new BitSet(new long[]{0x0000000000003002L,0x0100002200000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_cc_in_sentence221 = new BitSet(new long[]{0x0000000000003002L,0x0100002200000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_stop_in_sentence223 = new BitSet(new long[]{0x0000000000003002L,0x0100002200000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_adv_in_sentence225 = new BitSet(new long[]{0x0000000000003002L,0x0100002200000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence1236 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_verbphrase_in_sentence1239 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x42000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_prepphrase_in_sentence1242 = new BitSet(new long[]{0x00000001FFFE3002L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_verbphrase_in_sentence2276 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence2279 = new BitSet(new long[]{0x061FFF67FFFE7802L,0x4200020010000028L,0x003C08E00012BF00L});
    public static final BitSet FOLLOW_prepphrase_in_sentence2282 = new BitSet(new long[]{0x00000001FFFE3002L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_prepphrase_in_sentence3316 = new BitSet(new long[]{0x061FFF67FFFE7800L,0x4200020010000028L,0x003C08E00012BF00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence3319 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_verbphrase_in_sentence3322 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_prepphrase_in_sentence4358 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x42000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_verbphrase_in_sentence4361 = new BitSet(new long[]{0xFFBFFF67FFFE7802L,0x42000200FDD7ABFFL,0x003FC8E00012BF00L});
    public static final BitSet FOLLOW_nounphrase_in_sentence4364 = new BitSet(new long[]{0x061FFF6600007802L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_dt_in_nounphrase397 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_adj_in_nounphrase401 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_adv_in_nounphrase403 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_noun_in_nounphrase408 = new BitSet(new long[]{0x061FFF6604107802L,0x4300020210000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_cc_in_nounphrase412 = new BitSet(new long[]{0x0000000000003000L,0x0100000200000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_comma_in_nounphrase415 = new BitSet(new long[]{0x0000000000003000L,0x0100000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_cc_in_nounphrase418 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_adj_in_nounphrase422 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_noun_in_nounphrase425 = new BitSet(new long[]{0x0000000004103002L,0x0100000200000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphrase433 = new BitSet(new long[]{0x0000000004100002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphrase436 = new BitSet(new long[]{0x0000000004100002L});
    public static final BitSet FOLLOW_to_in_verbphrase450 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_inAll_in_verbphrase453 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_inafter_in_verbphrase456 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adv_in_verbphrase460 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adj_in_verbphrase463 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_verb_in_verbphrase466 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x43000002EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adv_in_verbphrase469 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x43000002EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adj_in_verbphrase472 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x43000002EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_cc_in_verbphrase478 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000200000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_comma_in_verbphrase481 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_prepphrase_in_verbphrase484 = new BitSet(new long[]{0x00000001FFFE3002L,0x4300000200000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_vbg_in_verb494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_noun581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_noun627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_noun648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixture664 = new BitSet(new long[]{0x061FFF6604007800L,0x4200023210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_measurements_in_mixture667 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_md_in_mixture669 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_stop_in_mixture671 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_oscarCompound_in_mixture673 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_molecule_in_mixture675 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixture677 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_dash_in_mixture679 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_sym_in_mixture681 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_cd_in_mixture683 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_noun_in_mixture685 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_inof_in_mixture687 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_cd_in_mixture689 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_comma_in_mixture691 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_adj_in_mixture693 = new BitSet(new long[]{0x061FFF6604007800L,0x4200063210000028L,0x003C04E00012BE00L});
    public static final BitSet FOLLOW_rrb_in_mixture697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_adj705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseOther754 = new BitSet(new long[]{0x00000001FFFE0000L,0x0000000000000000L,0x0000080000000100L});
    public static final BitSet FOLLOW_adj_in_prepphraseOther756 = new BitSet(new long[]{0x00000001FFFE0000L,0x0000000000000000L,0x0000080000000100L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther760 = new BitSet(new long[]{0x061FFF67FFFE7800L,0x4200020010000028L,0x003C08E00012BF00L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf794 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime820 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime822 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime826 = new BitSet(new long[]{0x0000000000003000L,0x4200000000000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime830 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTime834 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTime836 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime840 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN881 = new BitSet(new long[]{0x0010000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp948 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp950 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp954 = new BitSet(new long[]{0x0000000000003000L,0x4200000000000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp957 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp961 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp963 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp967 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mmol1014 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nnmol_in_mmol1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_gram1037 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_nngram_in_gram1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1060 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1083 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_apparatus1109 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000008L,0x0000000000009E00L});
    public static final BitSet FOLLOW_adj_in_apparatus1111 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000008L,0x0000000000009E00L});
    public static final BitSet FOLLOW_jj_in_apparatus1113 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000008L,0x0000000000009E00L});
    public static final BitSet FOLLOW_nn_in_apparatus1115 = new BitSet(new long[]{0x0000000000003000L,0x0200000000000008L,0x0000000000009E00L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_mmol_in_measurements1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gram_in_measurements1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurements1152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurements1154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1166 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1168 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1170 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1172 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31184 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31186 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21209 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21211 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11234 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_moleculeamount11257 = new BitSet(new long[]{0x0000000004000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount11259 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11262 = new BitSet(new long[]{0x0010000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21272 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_amount_in_moleculeamount21275 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount11329 = new BitSet(new long[]{0x0000000004000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount11331 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11334 = new BitSet(new long[]{0x0000000000000800L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21348 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount21350 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_measurements_in_unnamedmoleculeamount31360 = new BitSet(new long[]{0x0000000004000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_amount_in_unnamedmoleculeamount31362 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31365 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31368 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31371 = new BitSet(new long[]{0x061FFF6600007802L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_amount1424 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1426 = new BitSet(new long[]{0x0000000000000000L,0x0000040200000000L});
    public static final BitSet FOLLOW_comma_in_amount1429 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_measurements_in_amount1432 = new BitSet(new long[]{0x0000000000000000L,0x0000040200000000L});
    public static final BitSet FOLLOW_rrb_in_amount1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_method1474 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nn_in_method1476 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method1480 = new BitSet(new long[]{0x0000000000000802L,0x0200000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_11_in_oscarcd1506 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj1513 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj1515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn1520 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscaront1528 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_tmunicode1535 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_cdunicode1542 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode1544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_inas1551 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inas1553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inbefore1558 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inafter1565 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inafter1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inin1572 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inin1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_ininto1579 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ininto1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_inwith1586 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inwith1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwithout1593 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inby1600 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inby1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_invia1607 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_invia1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_inof1614 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inof1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inon1621 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inon1623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_infor1628 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_infor1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infrom1635 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_infrom1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_inunder1642 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inunder1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inover1649 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inover1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inoff1656 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_inoff1658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_nnstate1665 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate1667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nntime1672 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntime1674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nngram1679 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nngram1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nnmol1686 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmol1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnatmosphere1693 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nneq1700 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nneq1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnvol1707 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnchementity1714 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nntemp1721 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp1723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnflash1728 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash1730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nngeneral1735 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nnmethod1742 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnamount1749 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nnpressure1756 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nncolumn1763 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnchromatography1770 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nnvacuum1777 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nncycle1784 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nntimes1791 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_oscarcm1800 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_vbuse1809 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_vbchange1816 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbsubmerge1823 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbsubject1830 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject1832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_nnadd1839 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_nnmixture1846 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_vbadd1853 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_vbcharge1860 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbcontain1867 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbdrop1874 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbfill1881 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbsuspend1888 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbtreat1895 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbapparatus1904 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus1906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_nnapparatus1911 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbconcentrate1920 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnconcentrate1927 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate1929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbcool1936 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_vbdegass1945 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbdissolve1954 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdry1963 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_nndry1970 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nndry1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbextract1979 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nnextract1986 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbfilter1995 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnfilter2002 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbheat2011 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_vbincrease2018 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbpartition2027 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbprecipitate2036 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_nnprecipitate2043 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbpurify2052 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnpurify2059 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbquench2068 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbrecover2077 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbremove2086 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_nnremove2093 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbstir2102 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbsynthesize2111 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_nnsynthesize2118 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbwait2127 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbwash2136 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbyield2145 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_colon2154 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_colon2156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_comma2161 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_comma2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_apost2168 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_apost2170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_neg2175 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_neg2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_dash2182 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dash2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_stop2189 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_stop2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_nnpercent2196 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_lsqb2203 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_rsqb2210 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lrb2217 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rrb2224 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_abl2235 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abl2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_abn2244 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abn2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abx2253 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_abx2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_ap2262 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ap2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_at2271 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_at2273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_be2280 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_be2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_bed2289 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bed2291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_bedz2298 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_beg2307 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_beg2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bem2316 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bem2318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_ben2325 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ben2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_ber2334 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ber2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_bez2343 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_bez2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_cc2352 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cc2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_cd2361 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cd2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cs2370 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_cs2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_dotok2380 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_dod2389 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dod2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_doz2398 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_doz2400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dt2407 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dt2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dti2416 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dti2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dts2425 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dts2427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dtx2434 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_dtx2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_ex2443 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ex2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_fw2452 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_fw2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_hv2461 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hv2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_hvd2470 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvd2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_hvg2479 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvg2481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hvn2488 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_hvn2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_in2497 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_in2499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_jj2506 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jj2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_jjr2515 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjr2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_jjs2524 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjs2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jjt2533 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_jjt2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_md2542 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_md2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_nc2551 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nc2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_nn2560 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nn2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_nn_poss2569 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nns2578 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nns2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nns_poss2587 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss2589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_np2596 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_np2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nnp2606 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nnp2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_np_poss2616 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss2618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_nps2625 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nps2627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nps_poss2634 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss2636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nr2643 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_nr2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_od2652 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_od2654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_pn2661 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pn2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_pn_poss2670 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_pp_poss2679 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pp_poss_poss2688 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_ppl2697 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppl2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ppls2706 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppls2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ppo2715 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppo2717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_pps2724 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_pps2726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppss2733 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ppss2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_ql2742 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_ql2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_qlp2751 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_qlp2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_rb2760 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rb2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_rbr2769 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rbr2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_rbt2778 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rbt2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_rn2787 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rn2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rp2796 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_rp2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_sym2807 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_sym2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_to2816 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_to2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_uh2825 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_uh2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_vb2834 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vb2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_vbd2843 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbd2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_vbg2852 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbg2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_vbn2861 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbn2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_vbz2870 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_vbz2872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_wdt2879 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wdt2881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_wp_poss2888 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_wpo2898 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wpo2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_wps2907 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wps2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_wrb2927 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_TOKEN_in_wrb2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence1_in_synpred3_ChemicalChunker206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence2_in_synpred4_ChemicalChunker208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence3_in_synpred5_ChemicalChunker210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence4_in_synpred6_ChemicalChunker212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred10_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred11_ChemicalChunker236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred12_ChemicalChunker239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred13_ChemicalChunker242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred14_ChemicalChunker276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred15_ChemicalChunker279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred16_ChemicalChunker282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred17_ChemicalChunker316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred18_ChemicalChunker319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred19_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred21_ChemicalChunker361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred22_ChemicalChunker364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred24_ChemicalChunker401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred26_ChemicalChunker408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred27_ChemicalChunker412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred30_ChemicalChunker422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred31_ChemicalChunker412 = new BitSet(new long[]{0x0000000000003000L,0x0100000200000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_comma_in_synpred31_ChemicalChunker415 = new BitSet(new long[]{0x0000000000003000L,0x0100000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_cc_in_synpred31_ChemicalChunker418 = new BitSet(new long[]{0x0000000000003000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_adj_in_synpred31_ChemicalChunker422 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_noun_in_synpred31_ChemicalChunker425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred32_ChemicalChunker433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred33_ChemicalChunker436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred34_ChemicalChunker450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred35_ChemicalChunker453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred39_ChemicalChunker466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred40_ChemicalChunker469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred41_ChemicalChunker472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred42_ChemicalChunker460 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adj_in_synpred42_ChemicalChunker463 = new BitSet(new long[]{0xF9A00001FFFE3000L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_verb_in_synpred42_ChemicalChunker466 = new BitSet(new long[]{0xF9A00001FFFE3002L,0x00000000EDD7ABD7L,0x0003C8E000001F00L});
    public static final BitSet FOLLOW_adv_in_synpred42_ChemicalChunker469 = new BitSet(new long[]{0x0000000000003002L,0x0000000000000000L,0x000000E000001E00L});
    public static final BitSet FOLLOW_adj_in_synpred42_ChemicalChunker472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred45_ChemicalChunker478 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000200000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_comma_in_synpred45_ChemicalChunker481 = new BitSet(new long[]{0x00000001FFFE3000L,0x4200000000000000L,0x000008E000001F00L});
    public static final BitSet FOLLOW_prepphrase_in_synpred45_ChemicalChunker484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred82_ChemicalChunker583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred83_ChemicalChunker585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred85_ChemicalChunker589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred88_ChemicalChunker595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred92_ChemicalChunker603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred113_ChemicalChunker646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred114_ChemicalChunker648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred117_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred118_ChemicalChunker667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred119_ChemicalChunker669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred121_ChemicalChunker673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred122_ChemicalChunker675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred123_ChemicalChunker677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred126_ChemicalChunker683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred127_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred129_ChemicalChunker689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred131_ChemicalChunker693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_synpred139_ChemicalChunker738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred140_ChemicalChunker740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred144_ChemicalChunker820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred145_ChemicalChunker822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred167_ChemicalChunker948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred168_ChemicalChunker950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred174_ChemicalChunker1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred175_ChemicalChunker1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred177_ChemicalChunker1119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred181_ChemicalChunker1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred182_ChemicalChunker1168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred183_ChemicalChunker1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred184_ChemicalChunker1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred185_ChemicalChunker1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred187_ChemicalChunker1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred191_ChemicalChunker1350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred193_ChemicalChunker1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred194_ChemicalChunker1368 = new BitSet(new long[]{0x061FFF6600007800L,0x4200020010000028L,0x003C00E00012BE00L});
    public static final BitSet FOLLOW_noun_in_synpred194_ChemicalChunker1371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred195_ChemicalChunker1382 = new BitSet(new long[]{0x0000000000000002L});

}